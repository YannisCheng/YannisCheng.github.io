<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Android-IPC]]></title>
      <url>/Android-IPC/</url>
      <content type="html"><![CDATA[<p>Android-IPC 总结</p>
<a id="more"></a>
<p>[TOC]</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式 - 迭代模式Iterator]]></title>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E6%A8%A1%E5%BC%8FIterator/</url>
      <content type="html"><![CDATA[<hr>
<p>《head First 设计模式》</p>
<a id="more"></a>
<p>[TOC]</p>
<hr>
<p><strong>封装变化</strong></p>
<h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><p><strong>迭代器模式提供一种方法：顺序访问一个聚合对象中的各个元素，而又不暴露其内部表示。</strong></p>
<h2 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h2><ul>
<li>访问一个聚合中的对象，而不需要暴露其内部的具体表示</li>
<li>对不同类型聚合中对象的进行遍历，提供统一的接口。</li>
</ul>
<!-- more -->
<p><strong>示例代码结构</strong></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-07%2015.53.12.png" alt=""></p>
<p><strong>示例</strong></p>
<p>有两份“菜单”，其中一份是“List”结构，另一份的是“Array”结构，要在一个类中定义一个方法，在这个方法中：将两种不同结构的数据进行遍历输出。</p>
<p>测试结果见最下方。</p>
<h2 id="对象类"><a href="#对象类" class="headerlink" title="对象类"></a>对象类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">public class MenuItem &#123;</div><div class="line">    String name;</div><div class="line">    String description;</div><div class="line">    boolean vegerarian;</div><div class="line">    double price;</div><div class="line"></div><div class="line">    public MenuItem(String name, String description, boolean vegerarian, double price) &#123;</div><div class="line">        this.name = name;</div><div class="line">        this.description = description;</div><div class="line">        this.vegerarian = vegerarian;</div><div class="line">        this.price = price;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setName(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getDescription() &#123;</div><div class="line">        return description;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setDescription(String description) &#123;</div><div class="line">        this.description = description;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public boolean isVegerarian() &#123;</div><div class="line">        return vegerarian;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setVegerarian(boolean vegerarian) &#123;</div><div class="line">        this.vegerarian = vegerarian;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public double getPrice() &#123;</div><div class="line">        return price;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setPrice(double price) &#123;</div><div class="line">        this.price = price;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1-1-原始实现"><a href="#1-1-原始实现" class="headerlink" title="1.1 原始实现"></a>1.1 原始实现</h2><h3 id="数组菜单"><a href="#数组菜单" class="headerlink" title="数组菜单"></a>数组菜单</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public class DinerMenu &#123;</div><div class="line">    private static final int MAX_ITEMS = 4;</div><div class="line">    private int numberOfItems = 0;</div><div class="line">    private MenuItem[] menuItems;</div><div class="line"></div><div class="line">    public DinerMenu() &#123;</div><div class="line">        menuItems = new MenuItem[MAX_ITEMS];</div><div class="line"></div><div class="line">        addItem(&quot;Frank&apos;s Pancake Diner&quot;, &quot;Fruits with scrambled juice - 1&quot;, true, 2.99);</div><div class="line">        addItem(&quot;Frank&apos;s Pancake Diner&quot;, &quot;Fruits with scrambled juice - 2&quot;, true, 1.97);</div><div class="line">        addItem(&quot;Frank&apos;s Pancake Diner&quot;, &quot;Fruits with scrambled juice - 3&quot;, true, 7.23);</div><div class="line">        addItem(&quot;Frank&apos;s Pancake Diner&quot;, &quot;Fruits with scrambled juice - 4&quot;, true, 5.56);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void addItem(String name, String description, boolean vegerarian, double price) &#123;</div><div class="line">        MenuItem menuItem = new MenuItem(name, description, vegerarian, price);</div><div class="line"></div><div class="line">        if (numberOfItems &gt;= MAX_ITEMS) &#123;</div><div class="line">            System.out.println(&quot;has over!&quot;);</div><div class="line">        &#125; else &#123;</div><div class="line">            menuItems[numberOfItems] = menuItem;</div><div class="line">            numberOfItems++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public MenuItem[] getMenuItems() &#123;</div><div class="line">        return menuItems;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="List菜单"><a href="#List菜单" class="headerlink" title="List菜单"></a>List菜单</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class PancakeHouseMenu &#123;</div><div class="line"></div><div class="line">    private ArrayList&lt;MenuItem&gt; menuItems;</div><div class="line"></div><div class="line">    public PancakeHouseMenu() &#123;</div><div class="line">        menuItems = new ArrayList&lt;&gt;();</div><div class="line">        addItem(&quot;K&amp;B&apos;s Pancake Breakfast&quot;, &quot;Panackes with scrambled eggs,  tost - 1&quot;, true, 2.99);</div><div class="line">        addItem(&quot;K&amp;B&apos;s Pancake Breakfast&quot;, &quot;Panackes with scrambled fresh,  tost - 2&quot;, true, 9.91);</div><div class="line">        addItem(&quot;K&amp;B&apos;s Pancake Breakfast&quot;, &quot;Panackes with scrambled eggs,  tost - 3&quot;, false, 4.29);</div><div class="line">        addItem(&quot;K&amp;B&apos;s Pancake Breakfast&quot;, &quot;Panackes with scrambled eggs,  tost - 4&quot;, true, 3.19);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void addItem(String name, String description, boolean vegerarian, double price) &#123;</div><div class="line"></div><div class="line">        MenuItem menuItem = new MenuItem(name, description, vegerarian, price);</div><div class="line">        menuItems.add(menuItem);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ArrayList&lt;MenuItem&gt; getMenuItems() &#123;</div><div class="line">        return menuItems;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="遍历菜单的-Waitress-类"><a href="#遍历菜单的-Waitress-类" class="headerlink" title="遍历菜单的 Waitress 类"></a>遍历菜单的 Waitress 类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public class Waitress &#123;</div><div class="line">    private PancakeHouseMenu pancakeHouseMenu;</div><div class="line">    private DinerMenu dinerMenu;</div><div class="line"></div><div class="line">    public Waitress(PancakeHouseMenu pancakeHouseMenu, DinerMenu dinerMenu) &#123;</div><div class="line">        this.pancakeHouseMenu = pancakeHouseMenu;</div><div class="line">        this.dinerMenu = dinerMenu;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void printMenu() &#123;</div><div class="line"></div><div class="line">        ArrayList&lt;MenuItem&gt; arrayList = pancakeHouseMenu.getMenuItems();</div><div class="line">        MenuItem[] menuItems = dinerMenu.getMenuItems();</div><div class="line"></div><div class="line"></div><div class="line">        for (int i = 0; i &lt; arrayList.size(); i++) &#123;</div><div class="line">            MenuItem menuItem = arrayList.get(i);</div><div class="line">            System.out.print(menuItem.getName() + &quot; &quot;);</div><div class="line">            System.out.print(menuItem.getPrice() + &quot; &quot;);</div><div class="line">            System.out.println(menuItem.getDescription());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        for (int i = 0; i &lt; menuItems.length; i++) &#123;</div><div class="line">            MenuItem menuItem = menuItems[i];</div><div class="line">            System.out.print(menuItem.getName() + &quot; &quot;);</div><div class="line">            System.out.print(menuItem.getPrice() + &quot; &quot;);</div><div class="line">            System.out.println(menuItem.getDescription());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class TestMain &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        </div><div class="line">        PancakeHouseMenu pancakeHouseMenu = new PancakeHouseMenu();</div><div class="line">        DinerMenu dinerMenu = new DinerMenu();</div><div class="line"></div><div class="line">        Waitress waitress = new Waitress(pancakeHouseMenu, dinerMenu);</div><div class="line">        waitress.printMenu();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h3><p><img src="http://oy991qm3u.bkt.clouddn.com/iterator-method-uml3.png" alt=""></p>
<h3 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h3><p>需要优化、修改就是 <strong><code>printMenu()</code></strong>  方法，2个方面。</p>
<ul>
<li>暴露了具体的遍历过程</li>
<li>有相似、重复的代码</li>
</ul>
<h2 id="1-2-对-printMenu-方法进行优化、去重"><a href="#1-2-对-printMenu-方法进行优化、去重" class="headerlink" title="1.2 对 printMenu()  方法进行优化、去重"></a>1.2 对 printMenu()  方法进行优化、去重</h2><h3 id="自定义一个接口，封装-printMenu-中的遍历操作"><a href="#自定义一个接口，封装-printMenu-中的遍历操作" class="headerlink" title="自定义一个接口，封装 printMenu() 中的遍历操作"></a>自定义一个接口，封装 <code>printMenu()</code> 中的遍历操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public interface Iterator &#123;</div><div class="line"></div><div class="line">    boolean hasNext();</div><div class="line"></div><div class="line">    Object next();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2个菜单分别实现-遍历接口"><a href="#2个菜单分别实现-遍历接口" class="headerlink" title="2个菜单分别实现 遍历接口"></a>2个菜单分别实现 遍历接口</h3><h4 id="数组菜单-1"><a href="#数组菜单-1" class="headerlink" title="数组菜单"></a>数组菜单</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class DinerMenuIterator implements Iterator &#123;</div><div class="line"></div><div class="line">    MenuItem[] items;</div><div class="line">    int position = 0;</div><div class="line"></div><div class="line">    public DinerMenuIterator(MenuItem[] items) &#123;</div><div class="line">        this.items = items;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean hasNext() &#123;</div><div class="line">        if (position &gt;= items.length || items[position] == null) &#123;</div><div class="line">            return false;</div><div class="line">        &#125; else &#123;</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object next() &#123;</div><div class="line">        MenuItem menuItem = items[position];</div><div class="line">        position++;</div><div class="line">        return menuItem;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="List菜单-1"><a href="#List菜单-1" class="headerlink" title="List菜单"></a>List菜单</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class PancakeHouseMenuIterator implements Iterator &#123;</div><div class="line"></div><div class="line">    private int position = 0;</div><div class="line">    private ArrayList&lt;MenuItem&gt; arrayList;</div><div class="line"></div><div class="line">    public PancakeHouseMenuIterator(ArrayList&lt;MenuItem&gt; arrayList) &#123;</div><div class="line">        this.arrayList = arrayList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean hasNext() &#123;</div><div class="line">        if (position &gt;= arrayList.size() || arrayList.get(position) == null) &#123;</div><div class="line">            return false;</div><div class="line">        &#125; else &#123;</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object next() &#123;</div><div class="line">        MenuItem menuItem = arrayList.get(position);</div><div class="line">        position++;</div><div class="line">        return menuItem;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在-Waitress类-中调用-遍历接口"><a href="#在-Waitress类-中调用-遍历接口" class="headerlink" title="在 Waitress类 中调用 遍历接口"></a>在 Waitress类 中调用 遍历接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public class Waitress &#123;</div><div class="line"></div><div class="line">    private PancakeHouseMenu pancakeHouseMenu;</div><div class="line">    private DinerMenu dinerMenu;</div><div class="line"></div><div class="line">    public Waitress(PancakeHouseMenu pancakeHouseMenu, DinerMenu dinerMenu) &#123;</div><div class="line">        this.pancakeHouseMenu = pancakeHouseMenu;</div><div class="line">        this.dinerMenu = dinerMenu;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void printMenu() &#123;</div><div class="line">        Iterator panckIterator = pancakeHouseMenu.createIterator();</div><div class="line">        Iterator dinerIterator = dinerMenu.createIterator();</div><div class="line"></div><div class="line">        System.out.println(&quot;panck menu is :&quot;);</div><div class="line">        doIterator(panckIterator);</div><div class="line">        System.out.println(&quot;diner menu is :&quot;);</div><div class="line">        doIterator(dinerIterator);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void doIterator(Iterator iterator) &#123;</div><div class="line">        while (iterator.hasNext()) &#123;</div><div class="line">            MenuItem menuItem = (MenuItem) iterator.next();</div><div class="line">            System.out.print(menuItem.getName() + &quot; &quot;);</div><div class="line">            System.out.print(menuItem.getPrice() + &quot; &quot;);</div><div class="line">            System.out.println(menuItem.getDescription());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class IteratorMain &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        DinerMenu dinerMenu = new DinerMenu();</div><div class="line">        PancakeHouseMenu pancakeHouseMenu = new PancakeHouseMenu();</div><div class="line"></div><div class="line">        Waitress waitress = new Waitress(pancakeHouseMenu, dinerMenu);</div><div class="line">        waitress.printMenu();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="UML类图-1"><a href="#UML类图-1" class="headerlink" title="UML类图"></a>UML类图</h3><p><img src="http://oy991qm3u.bkt.clouddn.com/iterator-method-uml.png" alt=""></p>
<h3 id="存在问题-1"><a href="#存在问题-1" class="headerlink" title="存在问题"></a>存在问题</h3><p>在 <strong><code>Waitress</code></strong> 中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private PancakeHouseMenu pancakeHouseMenu;</div><div class="line">private DinerMenu dinerMenu;</div><div class="line"></div><div class="line">public Waitress(PancakeHouseMenu pancakeHouseMenu, DinerMenu dinerMenu) &#123;</div><div class="line">	this.pancakeHouseMenu = pancakeHouseMenu;</div><div class="line">	this.dinerMenu = dinerMenu;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以发现，2个菜单的 <strong>遍历实现接口</strong> 完全一样， 但是没有为2个菜单设计一个共同的接口，目前2个菜单的还是独立的：<code>PancakeHouseMenu</code>、<code>DinerMenu</code>。</p>
<p>若2个菜单拥有<strong>共同的接口</strong>，在 <strong><code>Waitress</code></strong> 类中的代码更为简洁，面向对象中 <strong>多态</strong> 的 特性也得到体现。</p>
<h2 id="1-3-使用-java-util-Iterator-作为共同接口"><a href="#1-3-使用-java-util-Iterator-作为共同接口" class="headerlink" title="1.3 使用 java.util.Iterator  作为共同接口"></a>1.3 使用 java.util.Iterator  作为共同接口</h2><h3 id="定义一个共同的接口"><a href="#定义一个共同的接口" class="headerlink" title="定义一个共同的接口"></a>定义一个共同的接口</h3><p>在 <strong>共同接口 Menu</strong> 中，定义一个方法使用 <code>java.util.Iterator</code>，实现 <code>Iterator</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Menu &#123;</div><div class="line">    public Iterator createIterator();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="两个菜单分别实现-Menu-接口。"><a href="#两个菜单分别实现-Menu-接口。" class="headerlink" title="两个菜单分别实现 Menu 接口。"></a>两个菜单分别实现 Menu 接口。</h3><h4 id="PancakeHouseMenu"><a href="#PancakeHouseMenu" class="headerlink" title="PancakeHouseMenu"></a>PancakeHouseMenu</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class PancakeHouseMenu implements Menu &#123;</div><div class="line"></div><div class="line">    private ArrayList&lt;MenuItem&gt; menuItems;</div><div class="line"></div><div class="line">    public PancakeHouseMenu() &#123;</div><div class="line">        menuItems = new ArrayList&lt;&gt;();</div><div class="line">        addItem(&quot;K&amp;B&apos;s Pancake Breakfast&quot;, &quot;Panackes with scrambled eggs,  tost - 1&quot;, true, 2.99);</div><div class="line">        addItem(&quot;K&amp;B&apos;s Pancake Breakfast&quot;, &quot;Panackes with scrambled fresh,  tost - 2&quot;, true, 9.91);</div><div class="line">        addItem(&quot;K&amp;B&apos;s Pancake Breakfast&quot;, &quot;Panackes with scrambled eggs,  tost - 3&quot;, false, 4.29);</div><div class="line">        addItem(&quot;K&amp;B&apos;s Pancake Breakfast&quot;, &quot;Panackes with scrambled eggs,  tost - 4&quot;, true, 3.19);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void addItem(String name, String description, boolean vegerarian, double price) &#123;</div><div class="line"></div><div class="line">        MenuItem menuItem = new MenuItem(name, description, vegerarian, price);</div><div class="line">        menuItems.add(menuItem);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ArrayList&lt;MenuItem&gt; getMenuItems() &#123;</div><div class="line">        return menuItems;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 调用 java.util.Iterator 接口</div><div class="line">    @Override</div><div class="line">    public Iterator createIterator() &#123;</div><div class="line">        return menuItems.iterator();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中，在 <code>PancakeHouseMenu</code> 类中通过使用<code>ArrayList</code>已经实现的<code>Iterator</code>来实现 <code>createIterator()</code>。 </p>
<h4 id="DinerMenu"><a href="#DinerMenu" class="headerlink" title="DinerMenu"></a>DinerMenu</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class DinerMenu implements Menu &#123;</div><div class="line">    private static final int MAX_ITEMS = 4;</div><div class="line">    private int numberOfItems = 0;</div><div class="line">    private MenuItem[] menuItems;</div><div class="line"></div><div class="line">    public DinerMenu() &#123;</div><div class="line">        menuItems = new MenuItem[MAX_ITEMS];</div><div class="line"></div><div class="line">        addItem(&quot;Frank&apos;s Pancake Diner&quot;, &quot;Fruits with scrambled juice - 1&quot;, true, 2.99);</div><div class="line">        addItem(&quot;Frank&apos;s Pancake Diner&quot;, &quot;Fruits with scrambled juice - 2&quot;, true, 1.97);</div><div class="line">        addItem(&quot;Frank&apos;s Pancake Diner&quot;, &quot;Fruits with scrambled juice - 3&quot;, true, 7.23);</div><div class="line">        addItem(&quot;Frank&apos;s Pancake Diner&quot;, &quot;Fruits with scrambled juice - 4&quot;, true, 5.56);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void addItem(String name, String description, boolean vegerarian, double price) &#123;</div><div class="line">        MenuItem menuItem = new MenuItem(name, description, vegerarian, price);</div><div class="line"></div><div class="line">        if (numberOfItems &gt;= MAX_ITEMS) &#123;</div><div class="line">            System.out.println(&quot;has over!&quot;);</div><div class="line">        &#125; else &#123;</div><div class="line">            menuItems[numberOfItems] = menuItem;</div><div class="line">            numberOfItems++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public MenuItem[] getMenuItems() &#123;</div><div class="line">        return menuItems;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 将 getMenuItems 修改为此方法。</div><div class="line">    @Override</div><div class="line">    public Iterator createIterator() &#123;</div><div class="line">        return new DinerMenuIterator(menuItems);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中，此处的 <code>createIterator()</code> 方法 类 <code>DinerMenuIterator()</code> 是继承 <code>Iterator</code> 后，自定义实现的内部细节。</p>
<h4 id="DinerMenuIterator-类的实现"><a href="#DinerMenuIterator-类的实现" class="headerlink" title="DinerMenuIterator 类的实现"></a>DinerMenuIterator 类的实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class DinerMenuIterator implements Iterator &#123;</div><div class="line"></div><div class="line">    MenuItem[] items;</div><div class="line">    int position = 0;</div><div class="line"></div><div class="line">    public DinerMenuIterator(MenuItem[] items) &#123;</div><div class="line">        this.items = items;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean hasNext() &#123;</div><div class="line">        if (position &gt;= items.length || items[position] == null) &#123;</div><div class="line">            return false;</div><div class="line">        &#125; else &#123;</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object next() &#123;</div><div class="line">        MenuItem menuItem = items[position];</div><div class="line">        position++;</div><div class="line">        return menuItem;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="执行具体遍历的类：Waitress"><a href="#执行具体遍历的类：Waitress" class="headerlink" title="执行具体遍历的类：Waitress"></a>执行具体遍历的类：Waitress</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public class Waitress &#123;</div><div class="line"></div><div class="line">    private Menu pancakeHouseMenu;</div><div class="line">    private Menu dinerMenu;</div><div class="line"></div><div class="line">    public Waitress(Menu pancakeHouseMenu, Menu dinerMenu) &#123;</div><div class="line">        this.pancakeHouseMenu = pancakeHouseMenu;</div><div class="line">        this.dinerMenu = dinerMenu;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void printMenu() &#123;</div><div class="line">        Iterator panckIterator = pancakeHouseMenu.createIterator();</div><div class="line">        Iterator dinerIterator = dinerMenu.createIterator();</div><div class="line"></div><div class="line">        System.out.println(&quot;panck menu is :&quot;);</div><div class="line">        doIterator(panckIterator);</div><div class="line">        System.out.println(&quot;diner menu is :&quot;);</div><div class="line">        doIterator(dinerIterator);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void doIterator(Iterator iterator) &#123;</div><div class="line">        while (iterator.hasNext()) &#123;</div><div class="line">            MenuItem menuItem = (MenuItem) iterator.next();</div><div class="line">            System.out.print(menuItem.getName() + &quot; &quot;);</div><div class="line">            System.out.print(menuItem.getPrice() + &quot; &quot;);</div><div class="line">            System.out.println(menuItem.getDescription());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-07%2016.59.54.png" alt=""></p>
<h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class ClassMain &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        Menu dinerMenu = new DinerMenu();</div><div class="line">        Menu pancakeHouseMenu = new PancakeHouseMenu();</div><div class="line"></div><div class="line">        Waitress waitress = new Waitress(pancakeHouseMenu, dinerMenu);</div><div class="line">        waitress.printMenu();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对比</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-07%2017.01.57.png" alt=""></p>
<h3 id="UML类图-2"><a href="#UML类图-2" class="headerlink" title="UML类图"></a>UML类图</h3><p><img src="http://oy991qm3u.bkt.clouddn.com/iterator-method-uml2.png" alt=""></p>
<h2 id="1-4-3个版本的测试结果"><a href="#1-4-3个版本的测试结果" class="headerlink" title="1.4 3个版本的测试结果"></a>1.4 3个版本的测试结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">panck menu is :</div><div class="line">K&amp;B&apos;s Pancake Breakfast 2.99 Panackes with scrambled eggs,  tost - 1</div><div class="line">K&amp;B&apos;s Pancake Breakfast 9.91 Panackes with scrambled fresh,  tost - 2</div><div class="line">K&amp;B&apos;s Pancake Breakfast 4.29 Panackes with scrambled eggs,  tost - 3</div><div class="line">K&amp;B&apos;s Pancake Breakfast 3.19 Panackes with scrambled eggs,  tost - 4</div><div class="line">diner menu is :</div><div class="line">Frank&apos;s Pancake Diner 2.99 Fruits with scrambled juice - 1</div><div class="line">Frank&apos;s Pancake Diner 1.97 Fruits with scrambled juice - 2</div><div class="line">Frank&apos;s Pancake Diner 7.23 Fruits with scrambled juice - 3</div><div class="line">Frank&apos;s Pancake Diner 5.56 Fruits with scrambled juice - 4</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[温故知新-数据结构-4]]></title>
      <url>/%E6%B8%A9%E6%95%85%E7%9F%A5%E6%96%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-4/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考：<a href="https://blog.csdn.net/u010297957/article/details/51974340" target="_blank" rel="external">https://blog.csdn.net/u010297957/article/details/51974340</a></p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<h2 id="寄语"><a href="#寄语" class="headerlink" title="寄语"></a>寄语</h2><hr>
<p><strong>郝斌：<br>    　　想要学软件，靠软件吃饭，就要一直学，天天学，几年以后就是高手了，不要想着转行。<br>    　　想要当高手必须要学数据结构，不学数据结构，怎么当高手。<br>    　　看懂答案。</strong></p>
<hr>
<p>根本：</p>
<ul>
<li><strong>一般：存储不一样，操作不一样；</strong></li>
<li><strong>泛型：存储不一样，操作也一样。</strong></li>
</ul>
<hr>
<p><strong>流程 –&gt; 功能 –&gt; 试数</strong></p>
<hr>
<h1 id="哈希-Hash"><a href="#哈希-Hash" class="headerlink" title="哈希(Hash)"></a>哈希(Hash)</h1><h2 id="1-1-名词释义"><a href="#1-1-名词释义" class="headerlink" title="1.1 名词释义"></a>1.1 名词释义</h2><ul>
<li><p><strong>哈希算法</strong>：是<code>一类算法</code>；</p>
</li>
<li><p><strong>哈希表（Hash Table）</strong>：是一种数据结构；</p>
</li>
<li><p><strong>哈希函数</strong>：是支撑哈希表的一类函数；</p>
</li>
<li><p><strong>Map</strong>：是映射、地图的意思，在Java中Map表示一种把K映射到V的数据类型；</p>
</li>
<li><p><strong>HashMap</strong>：是Java中用哈希数据结构实现的Map；</p>
</li>
</ul>
<h2 id="1-2-Hash算法"><a href="#1-2-Hash算法" class="headerlink" title="1.2 Hash算法"></a>1.2 Hash算法</h2><p>Hash算法 是这样一类算法,这类算法接受「任意长度的二进制输入值」，对输入值做换算（切碎），最终给出「固定长度的二进制输出值」。</p>
<p>以更好理解的方式来说，Hash算法 是摘要算法 ：它从不同的输入中，通过一些计算 摘取 出来一段输出数据，且这个值可以用以区分输入数据。 -  MD5</p>
<h2 id="1-3-作用"><a href="#1-3-作用" class="headerlink" title="1.3 作用"></a>1.3 作用</h2><ul>
<li><p>「信息安全」领域：Hash算法 可用作加密算法。</p>
<p>  如文件校验：通过对文件摘要，可以得到文件的「数字指纹」。你从网络上下载的任何副本的「数字指纹」只要和官方给出的「数字指纹」一致，那么就可以知道这是未经篡改的文件。例如著名的MD5 。</p>
</li>
<li><p>「数据结构」领域：Hash算法 通常还可用作快速查找。</p>
<p>根据Hash函数 我们可以实现一种叫做哈希表(Hash Table) 的数据结构。这种结构可以使得我们可以实现对数据进行快速的「存」和「取」。</p>
</li>
</ul>
<h1 id="2-哈希表-Hash-Table"><a href="#2-哈希表-Hash-Table" class="headerlink" title="2. 哈希表(Hash Table)"></a>2. 哈希表(Hash Table)</h1><h2 id="2-1-查找问题："><a href="#2-1-查找问题：" class="headerlink" title="2.1 查找问题："></a>2.1 查找问题：</h2><p><code>线性表、树</code>这些结构中，<code>记录</code> 在 <code>结构</code> 中的相对位置是<code>随机的</code>，<strong>位置和记录的关键字之间不存在确定关系</strong>。因此，在结构中查找时需要进行一系列和<strong>关键字</strong>的<strong>比较</strong>，即：这一类查找方法建立在<strong>比较的基础</strong>上。</p>
<p>理想的情况是希望不经过任何比较，<strong>一次存取</strong>便能得到所查记录，那就必须在记录的<strong>存储位置</strong>和它的<strong>关键字</strong>之间建立一个<strong>确定的关系f</strong>，使每个关键字和结构中一个唯一的存储位置相对应。在查找时，只要根据这个对应关系f找到给定值K的像f(K)。若结构中存在关键字和K相等的记录，则必定在f(K)的存储位置上，反之在这个位置上没有记录。</p>
<p>称这个<strong>确定的关系f</strong>为：哈希(Hash)函数，按这个思想建立的映射关系表为：哈希表。</p>
<h2 id="2-2-哈希表的正式定义："><a href="#2-2-哈希表的正式定义：" class="headerlink" title="2.2 哈希表的正式定义："></a>2.2 哈希表的正式定义：</h2><p>根据设定的Hash函数 - H(key) 和处理冲突的方法，将一组关键字映象 到一个有限的连续的地址集（区间）上，并以关键字在地址集中的象 作为记录在表中的存储位置，这样的映射表便称为Hash表。</p>
<h2 id="2-3-常用的Hash函数-构造方法："><a href="#2-3-常用的Hash函数-构造方法：" class="headerlink" title="2.3 常用的Hash函数 构造方法："></a>2.3 常用的Hash函数 构造方法：</h2><ul>
<li>平方取中法：</li>
</ul>
<p><strong>先求出关键字的平方值，然后按需要取平方值的中间几位作为哈希地址。</strong>这是因为：平方后中间几位和关键字中每一位都相关，故不同关键字会以较高的概率产生不同的哈希地址。</p>
<ul>
<li>折叠法：</li>
</ul>
<p>将关键字分割成位数相同的几部分（最后一部分位数可以不同），然后取这几部分的叠加和（去除进位）作为散列地址。数位叠加可以有移位叠加和间界叠加两种方法。移位叠加是将分割后的每一部分的最低位对齐，然后相加；间界叠加是从一端向另一端沿分割界来回折叠，然后对齐相加。</p>
<ul>
<li>随机数法：</li>
</ul>
<p>选择一个随机函数，取关键字的随机函数值作为Hash地址，通常用于关键字长度不同的场合。即<br>f(key)=random(key)<br>特点：通常，关键字长度不相等时，采用此法构建Hash函数 较为合适。</p>
<ul>
<li>除留取余法：</li>
</ul>
<p>f(k)=k mod p ， p&lt;=m<br>取关键字被某个不大于Hash表 长m 的数p 除后所得的余数为Hash地址 。</p>
<p>特点：这是最简单也是最常用的Hash函数构造方法。可以直接取模，也可以在平法法、折叠法之后再取模。</p>
<p>值得注意的是，在使用除留取余法 时，对p 的选择很重要，如果p 选的不好会容易产生同义词。由经验得知：p 最好选择不大于表长m 的一个质数、或者不包含小于20的质因数的合数。</p>
<h2 id="2-4-处理冲突"><a href="#2-4-处理冲突" class="headerlink" title="2.4 处理冲突"></a>2.4 处理冲突</h2><p><strong>处理冲突：</strong>假设哈希表的地址集为 :  0−(n−1) ，那么 <code>冲突</code> 是指 : 由关键字得到的哈希地址为 j(0≤j≤n−1) 的位置上已存有记录，而 <code>处理冲突</code> : 就是为该关键字的记录找到另一个 <code>空的哈希地址</code> 。</p>
]]></content>
      
        <categories>
            
            <category> 温故知新 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 温故知新 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java注解、反射]]></title>
      <url>/Java%E6%B3%A8%E8%A7%A3%E3%80%81%E5%8F%8D%E5%B0%84/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考：<a href="https://blog.csdn.net/wzgiceman/article/details/53406248" target="_blank" rel="external">https://blog.csdn.net/wzgiceman/article/details/53406248</a><br>参考：<a href="https://blog.csdn.net/wzgiceman/article/details/53483665" target="_blank" rel="external">https://blog.csdn.net/wzgiceman/article/details/53483665</a><br>参考：<a href="https://www.cnblogs.com/be-forward-to-help-others/p/6846821.html" target="_blank" rel="external">https://www.cnblogs.com/be-forward-to-help-others/p/6846821.html</a><br>参考：<a href="https://blog.csdn.net/BabyGoodMorning/article/details/76349855" target="_blank" rel="external">https://blog.csdn.net/BabyGoodMorning/article/details/76349855</a></p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<p><strong>使用注解的作用</strong></p>
<ul>
<li><p>更早的发现程序的问题或者错误</p>
</li>
<li><p>更好的增加代码的描述能力</p>
</li>
<li><p>更加利于我们的一些规范约束</p>
</li>
</ul>
<h1 id="0-注解：Annotation"><a href="#0-注解：Annotation" class="headerlink" title="0. 注解：Annotation"></a>0. 注解：Annotation</h1><p>在Java中，注解(Annotation)引入始于Java5，用来描述Java代码的元数据，通常情况下注解不会直接影响代码的执行，尽管有些注解可以用来做到影响代码执行。</p>
<ul>
<li><strong>Annotation</strong> 是代码里的特殊标记，这些标记可以在<strong>编译、类加载、运行</strong>时被读取，并执行相应的处理。通过使用Annotation，程序开发人员可以在不改变原有逻辑的情况下，在源文件嵌入一些补充信息。代码分析工具、开发工具和部署工具可以通过这些补充信息进行验证或者进行部署。</li>
<li><strong>Annotation</strong> 提供了一条为程序元素设置元数据的方法，从某些方面来看，Annotation就像修饰符一样被使用，可用于修饰包、类、构造器、方法、成员变量、参数、局部变量的声明，这些信息被存储在Annotation的“name=value”对中。</li>
<li>需要指出的是：Annotation不能影响程序代码的执行，无论增加、删除Annotation，代码都始终如一地执行。如果希望让程序中的Annotation能在运行时起一定的作用，只有通过某种配套的工具对Annotation中的信息进行访问的处理，访问和处理Annotation的工具统称APT（Annotation Processing Tool）。</li>
</ul>
<h2 id="0-1-元数据（MetaData）"><a href="#0-1-元数据（MetaData）" class="headerlink" title="0.1 元数据（MetaData）"></a>0.1 元数据（MetaData）</h2><blockquote>
<p>参考：<a href="http://www.ruanyifeng.com/blog/2007/03/metadata.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2007/03/metadata.html</a></p>
</blockquote>
<p><strong>元数据</strong>是用来<strong>描述数据的数据</strong>（Data that describes other data）。</p>
<p><strong>一个列子：</strong><br> 一张RAW格式的数码照片，我们直接看到的照片是数据，而看不到的附加<code>EXIF信息</code>则是对于照片的额外描述。此时<code>EXIF信息</code>就是照片的<strong>元数据</strong>。级：<code>EXIF信息</code>是描述<code>照片本身</code>之外的数据。</p>
<h2 id="0-2-java从源码到运行有3个阶段："><a href="#0-2-java从源码到运行有3个阶段：" class="headerlink" title="0.2 java从源码到运行有3个阶段："></a>0.2 java从源码到运行有3个阶段：</h2><ul>
<li>source </li>
<li>class </li>
<li>runtime</li>
</ul>
<h2 id="0-3-功能"><a href="#0-3-功能" class="headerlink" title="0.3 功能"></a>0.3 功能</h2><ul>
<li>生成文档。这是最常见的，也是 java 最早提供的注解。常用的有 @param @return 等。</li>
<li>跟踪代码依赖性，实现替代配置文件功能。比较常见的是spring 2.5 开始的基于注解配置。作用就是减少配置。现在的框架基本都 使用了这种配置来减少配置文件的数量</li>
<li>在编译时进行格式检查。如 @override</li>
</ul>
<h2 id="0-4-Java内置注解"><a href="#0-4-Java内置注解" class="headerlink" title="0.4 Java内置注解"></a>0.4 Java内置注解</h2><ul>
<li>@Deprecated</li>
<li>@Override</li>
<li>@SuppressWarnings</li>
</ul>
<h3 id="Deprecated：已过时"><a href="#Deprecated：已过时" class="headerlink" title="@Deprecated：已过时"></a>@Deprecated：已过时</h3><p>这个注释是一个<strong>标记注释</strong>。<br>所谓标记注释，就是在源程序中加入这个标记后，并不影响程序的编译，但有时编译器会显示一些警告信息。</p>
<h3 id="Override：限定重写父类的方法"><a href="#Override：限定重写父类的方法" class="headerlink" title="@Override：限定重写父类的方法"></a>@Override：限定重写父类的方法</h3><h3 id="SuppressWarnings：抑制编译器警告"><a href="#SuppressWarnings：抑制编译器警告" class="headerlink" title="@SuppressWarnings：抑制编译器警告"></a>@SuppressWarnings：抑制编译器警告</h3><p>当我们的一个方法调用了弃用的方法或者进行不安全的类型转换，编译器会生成警告。我们可以为这个方法增加@SuppressWarnings注解，来抑制编译器生成警告<br>可以修饰的元素为类，方法，方法参数，属性，局部变量</p>
<h2 id="0-5-注解类型（元Annotation）"><a href="#0-5-注解类型（元Annotation）" class="headerlink" title="0.5 注解类型（元Annotation）"></a>0.5 注解类型（元Annotation）</h2><ul>
<li>@Documented</li>
<li>@Inherited</li>
<li>@Retention</li>
<li>@Target</li>
</ul>
<h3 id="Documented：表示含有该注解类型的元素-带有注释的-会通过javadoc或类似工具进行文档化"><a href="#Documented：表示含有该注解类型的元素-带有注释的-会通过javadoc或类似工具进行文档化" class="headerlink" title="@Documented：表示含有该注解类型的元素(带有注释的)会通过javadoc或类似工具进行文档化"></a>@Documented：表示含有该注解类型的元素(带有注释的)会通过javadoc或类似工具进行文档化</h3><p>该类型应用于注解那些影响客户使用带注释(comment)的元素声明的类型。如果类型声明是用Documented来注解的，这种类型的注解被作为被标注的程序成员的公共API</p>
<h3 id="Inherited：表示注解类型能被自动继承"><a href="#Inherited：表示注解类型能被自动继承" class="headerlink" title="@Inherited：表示注解类型能被自动继承"></a>@Inherited：表示注解类型能被自动继承</h3><p>如果用户在当前类中查询这个元注解类型并且当前类的声明中不包含这个元注解类型，那么也将自动查询当前类的父类是否存在Inherited元注解，这个动作将被重复执行知道这个标注类型被找到，或者是查询到顶层的父类。</p>
<p>即：如果某个类使用了A Annotation（定义该Annotation时使用了@Inherited修饰）修饰，则其子类将自动具有A注释。</p>
<p>eg:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Documented</div><div class="line">@Inherited</div><div class="line">public @interface Ety &#123;</div><div class="line">    @Deprecated</div><div class="line">    String value();</div><div class="line">    @Deprecated</div><div class="line">    String name();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Retention：表示该注解类型的注解保留的时长"><a href="#Retention：表示该注解类型的注解保留的时长" class="headerlink" title="@Retention：表示该注解类型的注解保留的时长"></a>@Retention：表示该注解类型的注解保留的时长</h3><p>当注解类型声明中没有@Retention元注解，则默认保留策略为RetentionPolicy.CLASS。关于保留策略(RetentionPolicy)是<strong>枚举类</strong>型，共定义3种保留方式</p>
<table>
<thead>
<tr>
<th>name</th>
<th>explain</th>
</tr>
</thead>
<tbody>
<tr>
<td>SOURCE</td>
<td>注解仅存在于源码中，在class字节码文件中不包含</td>
</tr>
<tr>
<td>CLASS</td>
<td>存在Java源文件，以及经编译器后生成的Class字节码文件，但在运行时VM不再保留注释</td>
</tr>
<tr>
<td>RUNTIME</td>
<td>存在源文件、编译生成的Class字节码文件，以及保留在运行时VM中，可通过反射性地读取注解</td>
</tr>
</tbody>
</table>
<p>eg:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Documented</div><div class="line">@Inherited</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">public @interface Ety &#123;</div><div class="line">    @Deprecated</div><div class="line">    String value();</div><div class="line">    @Deprecated</div><div class="line">    String name();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Target：表示注解类型所适用的程序元素的种类"><a href="#Target：表示注解类型所适用的程序元素的种类" class="headerlink" title="@Target：表示注解类型所适用的程序元素的种类"></a>@Target：表示注解类型所适用的程序元素的种类</h3><p>当注解类型声明中没有@Target元注解，则默认为可适用所有的程序元素。如果存在指定的@Target元注解，则编译器强制实施相应的使用限制。关于程序元素(ElementType)是枚举类型，共定义8种程序元素</p>
<table>
<thead>
<tr>
<th>ElementType</th>
<th>explain</th>
</tr>
</thead>
<tbody>
<tr>
<td>TYPE</td>
<td>类、接口（包括注解类型）或枚举声明</td>
</tr>
<tr>
<td>CONSTRUCTOR</td>
<td>构造方法声明</td>
</tr>
<tr>
<td>PACKAGE</td>
<td>包声明</td>
</tr>
<tr>
<td>LOCAL_VARIABLE</td>
<td>局部变量声明</td>
</tr>
<tr>
<td>METHOD</td>
<td>方法声明</td>
</tr>
<tr>
<td>ANNOTATION_TYPE</td>
<td>注解类型声明</td>
</tr>
<tr>
<td>PARAMETER</td>
<td>参数声明</td>
</tr>
<tr>
<td>FIELD</td>
<td>字段声明（包括枚举常量）</td>
</tr>
</tbody>
</table>
<h2 id="0-6-自定义Annotation"><a href="#0-6-自定义Annotation" class="headerlink" title="0.6 自定义Annotation"></a>0.6 自定义Annotation</h2><h3 id="0-6-1-自定义"><a href="#0-6-1-自定义" class="headerlink" title="0.6.1 自定义"></a>0.6.1 自定义</h3><p><strong>自定义方式 1 ：无成员变量</strong></p>
<p>定义新的Annotation类型使用<code>@interface</code>关键字，它用于定义新的Annotation类型。定义一个新的Annotation类型与定义一个<code>接口</code>非常像，如下代码可定义一个简单的Annotation：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Documented</div><div class="line">@Target(ElementType.FIELD)</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">public @interface AValue &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>自定义方式 2 ：有成员变量</strong></p>
<p>Annotation还可以<strong>带成员变量</strong>，Annotation的成员变量在Annotation定义中以<strong>无参数方法</strong>的形式声明。其<strong>方法名</strong>和<strong>返回值</strong>定义了该成员的<strong>名字</strong>和<strong>类型</strong>。如下代码可以定义一个有成员变量的Annotation：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Documented</div><div class="line">@Target(ElementType.FIELD)</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">public @interface AValue &#123;</div><div class="line">    int value();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>自定义方式 3 ：有成员变量</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Documented</div><div class="line">@Target(ElementType.FIELD)</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">public @interface AValue &#123;</div><div class="line">    int value() default 90;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="0-6-2-使用"><a href="#0-6-2-使用" class="headerlink" title="0.6.2  使用"></a>0.6.2  使用</h3><p>定义了该Annotation之后，就可以在程序任何地方来使用该Annotation，使用Annotation时的语法非常类似于public、final这样的修饰符。<br>通常可用于修饰程序中的类、方法、变量、接口等定义，通常我们会把Annotation放在所有修饰符之前，而且由于使用Annotation时可能还需要为其成员变量指定值，因而Annotation长度可能比较长，所以通常把Annotation另放一行，如下程序所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class MyBean &#123;</div><div class="line"></div><div class="line">    @AValue(value = 48)</div><div class="line">    private int valueDeal;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;MyBean&#123;&quot; +</div><div class="line">                &quot;valueDeal=&quot; + valueDeal +</div><div class="line">                &apos;&#125;&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="1-反射：提取-Annotation-的信息"><a href="#1-反射：提取-Annotation-的信息" class="headerlink" title="1. 反射：提取 Annotation 的信息"></a>1. 反射：提取 Annotation 的信息</h1><p><strong>Annotation接口</strong>是所有<code>Annotation类型</code>的父接口。</p>
<p>Java在<code>java.lang.reflect包</code>下有<code>AnnotateElement接口</code>，该接口代表程序中可以接受注释的<strong>程序元素</strong>，该接口主要有如下几个<strong>实现类</strong>（注意以下是类）：</p>
<ul>
<li>Package：类的包定义。</li>
<li>Class：类定义。</li>
<li>Constructor：构造器定义。</li>
<li>Field：类的成员变量定义。</li>
<li>Method：类的方法定义。</li>
</ul>
<p>java.lang.reflect包下主要包含一些实现反射功能工具类，实际上，java.lang.reflect包提供的反射API扩充了读取运行时Annotation的能力。当一个Annotation类型被定义为运行时Annotation后，该注解才是运行时可见，当class文件被装载时被保存在class文件中的Annotation才会被虚拟机读取。</p>
<p>AnnotatedElement接口是所有程序元素（如Class、Method、Constructor）的父接口，所以程序通过反射获取了某个类的AnnotatedElement对象（如Class、Method、Constructor）之后，程序就可以调用该对象的如下三个方法来访问Annotation信息：</p>
<ul>
<li><strong>getAnnotation(Class<t> annotationClass);</t></strong>  //返回该程序元素上存在的、指定类型的注释，如果该类型的注释不存在，则返回null。</li>
<li><strong>Annotation[] getAnnotations();</strong>      //返回该程序元素上存在的所有注释。</li>
<li><strong>boolean isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass);</strong>     //判断该程序元素上是否包含指定类型的注解，存在则返回true，否则返回false。</li>
</ul>
<h2 id="1-1-Field-注解、反射"><a href="#1-1-Field-注解、反射" class="headerlink" title="1.1 Field 注解、反射"></a>1.1 Field 注解、反射</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @author wenjia.Cheng  cwj1714@163.com</div><div class="line"> * @date 2018/5/31</div><div class="line"> * 生成一个 自定义注解</div><div class="line"> */</div><div class="line">@Documented</div><div class="line">@Target(ElementType.FIELD)</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">public @interface AValue &#123;</div><div class="line">    int value();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @author wenjia.Cheng  cwj1714@163.com</div><div class="line"> * @date 2018/5/31</div><div class="line"> * 使用注解的类</div><div class="line"> */</div><div class="line">public class MyBean &#123;</div><div class="line"></div><div class="line">    @AValue(value = 48)</div><div class="line">    private int valueDeal;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;MyBean&#123;&quot; +</div><div class="line">                &quot;valueDeal=&quot; + valueDeal +</div><div class="line">                &apos;&#125;&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @author wenjia.Cheng  cwj1714@163.com</div><div class="line"> * @date 2018/5/31</div><div class="line"> * 反射、注解的使用</div><div class="line"> */</div><div class="line">public class MainTest &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * bingo ： 反射 reflect</div><div class="line">     * 首先反射注解，那么保留策略必须是Runtime，也就是@Retention(RetentionPolicy.RUNTIME)</div><div class="line">     * @param args .</div><div class="line">     */</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            // 获取成员变量</div><div class="line">            Field field = MyBean.class.getDeclaredField(&quot;valueDeal&quot;);</div><div class="line">            System.out.println(&quot;field is : &quot; + field.toString());</div><div class="line"></div><div class="line">            // 设置此元素可访问</div><div class="line">            field.setAccessible(true);</div><div class="line"></div><div class="line">            // 判断此元素是否是AValue中的注解</div><div class="line">            if (field.isAnnotationPresent(AValue.class)) &#123;</div><div class="line">                // 获取定义在 MyBean类 中的 成员变量 所属的注解 AValue</div><div class="line">                AValue aValue = field.getAnnotation(AValue.class);</div><div class="line">                // 从 AValue 中获取 value 属性的值</div><div class="line">                int valueRel = aValue.value();</div><div class="line"></div><div class="line">                // 将获取到的 数值 赋值到 具体使用注解的类中</div><div class="line">                MyBean myBean = new MyBean();</div><div class="line">                field.setInt(myBean, valueRel);</div><div class="line">                //验证结果</div><div class="line">                System.out.println(myBean);</div><div class="line">            &#125; else &#123;</div><div class="line">                System.out.println(&quot;不是&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125; catch (NoSuchFieldException | IllegalAccessException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * 当 定义为：int value() default 100; 调用为：@AValue()/@AValue时 ：MyBean&#123;valueDeal=100&#125;</div><div class="line">     * 当 定义为：int value() default 100;或者 int value(); 调用为：@AValue(48)/@AValue(value = 48)时 ：MyBean&#123;valueDeal=48&#125;</div><div class="line">     */</div></pre></td></tr></table></figure>
<h2 id="1-2-Method-注解、反射"><a href="#1-2-Method-注解、反射" class="headerlink" title="1.2 Method 注解、反射"></a>1.2 Method 注解、反射</h2><p>自定义注解</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Documented</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">@Target(ElementType.METHOD)</div><div class="line">public @interface Login &#123;</div><div class="line"></div><div class="line">    String username() default &quot;zhangsan&quot;;</div><div class="line"></div><div class="line">    String password() default &quot;123456&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>反射</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class MethoidMainTest &#123;</div><div class="line"></div><div class="line">    @Login</div><div class="line">    public void info()&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws NoSuchMethodException &#123;</div><div class="line"></div><div class="line">        // 通过反射获取info方法</div><div class="line">        Method method = MethoidMainTest.class.getMethod(&quot;info&quot;);</div><div class="line"></div><div class="line">        // 判断此方法是否存在 @Login 注解</div><div class="line">        if (method.isAnnotationPresent(Login.class)) &#123;</div><div class="line">            System.out.println(&quot;info方法上存在@Login注释&quot;);</div><div class="line">            // 获取此方法上的所有注释</div><div class="line">            Annotation[] annotations = method.getAnnotations();</div><div class="line"></div><div class="line">            for (Annotation annotation : annotations) &#123;</div><div class="line">                if (annotation != null &amp;&amp; annotation instanceof Login) &#123;</div><div class="line">                    String name = ((Login) annotation).username();</div><div class="line">                    String pwd = ((Login) annotation).password();</div><div class="line">                    System.out.println(&quot;name: &quot; + name + &quot;, pwd :&quot; + pwd);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            System.out.println(annotations);</div><div class="line"></div><div class="line">        &#125; else &#123;</div><div class="line">            System.out.println(&quot;info方法上 不 存在@Login注释&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1-3-Method-注解、反射"><a href="#1-3-Method-注解、反射" class="headerlink" title="1.3 Method 注解、反射"></a>1.3 Method 注解、反射</h2><p>自定义注解</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Documented</div><div class="line">@Target(ElementType.METHOD)</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">public @interface Test &#123;</div><div class="line"></div><div class="line">    String testName() default &quot;hahaha&quot;;</div><div class="line">    String testPwd() default &quot;00000&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用注解</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Junit &#123;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void test1() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void test2() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void test3() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void test4() &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>反射</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">public class ClassMainTest &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        try &#123;</div><div class="line">            Class classes = Class.forName(&quot;com.example.shortcutsmy.reflect_class.Junit&quot;);</div><div class="line"></div><div class="line">            System.out.println(&quot;classes name is : &quot; + classes.getName());</div><div class="line"></div><div class="line">           //Method[] methods = Junit.class.getDeclaredMethods();</div><div class="line">            Method[] methods = classes.getDeclaredMethods();</div><div class="line"></div><div class="line">            for (Method m : methods) &#123;</div><div class="line">                System.out.println(&quot;method name is : &quot; + m.getName());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            //测试的数量</div><div class="line">            int checkCount = 0;</div><div class="line">            //未测试的数量</div><div class="line">            int uncheckCount = 0;</div><div class="line"></div><div class="line">            for (Method m : methods) &#123;</div><div class="line">                if (m.isAnnotationPresent(Test.class)) &#123;</div><div class="line">                    Annotation[] annotations = m.getAnnotations();</div><div class="line"></div><div class="line">                    for (Annotation a : annotations) &#123;</div><div class="line">                        String name = ((Test)a).testName();</div><div class="line">                        String pwd = ((Test)a).testPwd();</div><div class="line"></div><div class="line">                        System.out.println(&quot;name is : &quot; + name + &quot;, pwd is : &quot; + pwd);</div><div class="line">                    &#125;</div><div class="line">                    checkCount++;</div><div class="line">                &#125; else &#123;</div><div class="line">                    uncheckCount++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            System.out.println(&quot;测试的方法有&quot; + checkCount);</div><div class="line">            System.out.println(&quot;未测试的方法有&quot; + uncheckCount);</div><div class="line"></div><div class="line">        &#125; catch (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="2-Android-注解"><a href="#2-Android-注解" class="headerlink" title="2. Android-注解"></a>2. Android-注解</h1><blockquote>
<p>参考：<a href="https://blog.csdn.net/wzgiceman/article/details/53483665" target="_blank" rel="external">https://blog.csdn.net/wzgiceman/article/details/53483665</a></p>
</blockquote>
<p>##2.1 Android注解给我们提供了三种主要和其他注释供我们使用：</p>
<ul>
<li><p>IntDef和StringDef注解；</p>
</li>
<li><p>资源类型注解；</p>
</li>
<li><p>Null注解；</p>
</li>
<li><p>其他实用注解</p>
</li>
</ul>
<p>###2.1.1 一个使用 <code>IntDef注解</code> 替代枚举</p>
<p><strong>使用注解修饰参数</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class UserInter &#123;</div><div class="line">    public static final int CHILDE = 0x1;</div><div class="line">    public static final int MAN = 0x2;</div><div class="line">    public static final int GIRL = 0x3;</div><div class="line">    public static final int OTHER = 0x4;</div><div class="line"></div><div class="line">    @Documented</div><div class="line">    @Retention(RetentionPolicy.RUNTIME)</div><div class="line">    @IntDef(&#123;CHILDE, MAN, GIRL&#125;)</div><div class="line">    public @interface UInter&#123;&#125;</div><div class="line"></div><div class="line"></div><div class="line">    private int mUType;</div><div class="line"></div><div class="line">    public int getUserType()&#123;</div><div class="line">        return mUType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setUertType(@UInter int type)&#123;</div><div class="line">        this.mUType = type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setUertType2(@IdRes int type)&#123;</div><div class="line">        this.mUType = type;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>调用</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">UserInter userInter = new UserInter();</div><div class="line">userInter.setUertType(UserInter.CHILDE);</div><div class="line">// userInter.setUertType(UserInter.OTHER);</div></pre></td></tr></table></figure>
<h3 id="2-1-2-资源类型注解"><a href="#2-1-2-资源类型注解" class="headerlink" title="2.1.2 资源类型注解"></a>2.1.2 资源类型注解</h3><p>资源注解是为了防止我们在使用程序资源的时候，错误传递资源类型给函数，导致程序错误。</p>
<table>
<thead>
<tr>
<th>name</th>
<th>explain</th>
</tr>
</thead>
<tbody>
<tr>
<td>AnimRes</td>
<td>动画</td>
</tr>
<tr>
<td>AnimatorRes</td>
<td>animator资源类型</td>
</tr>
<tr>
<td>AnyRes</td>
<td>任何资源类型</td>
</tr>
<tr>
<td>ArrayRes</td>
<td>数组资源类型</td>
</tr>
<tr>
<td>AttrRes</td>
<td>属性资源类型</td>
</tr>
<tr>
<td>BoolRes</td>
<td>bool类型资源类型</td>
</tr>
<tr>
<td>ColorRes</td>
<td>颜色资源类型</td>
</tr>
<tr>
<td>DimenRes</td>
<td>长度资源类型</td>
</tr>
<tr>
<td>DrawableRes</td>
<td>图片资源类型</td>
</tr>
<tr>
<td>IdRes</td>
<td>资源id</td>
</tr>
<tr>
<td>InterpolatorRes</td>
<td>动画插值器</td>
</tr>
<tr>
<td>LayoutRes</td>
<td>layout资源</td>
</tr>
<tr>
<td>MenuRes</td>
<td>me</td>
<td>nu资源</td>
</tr>
<tr>
<td>RawRes</td>
<td>raw资源</td>
</tr>
<tr>
<td>StringRes</td>
<td>字符串资源</td>
</tr>
<tr>
<td>StyleRes</td>
<td>style资源</td>
</tr>
<tr>
<td>StyleableRes</td>
<td>Styleable资源类型</td>
</tr>
<tr>
<td>TransitionRes</td>
<td>transition资源类型</td>
</tr>
<tr>
<td>XmlRes    xml</td>
<td>资源</td>
</tr>
</tbody>
</table>
<h3 id="2-1-3-Null注解"><a href="#2-1-3-Null注解" class="headerlink" title="2.1.3 Null注解"></a>2.1.3 Null注解</h3><p>null注解对应的有两个详细的注解：</p>
<ul>
<li><p>@NonNull：不能为空</p>
</li>
<li><p>@Nullable：可以为空</p>
</li>
</ul>
<h3 id="2-1-4-其他注解"><a href="#2-1-4-其他注解" class="headerlink" title="2.1.4 其他注解"></a>2.1.4 其他注解</h3><h4 id="2-1-4-1-Threading-注解"><a href="#2-1-4-1-Threading-注解" class="headerlink" title="2.1.4.1 Threading 注解"></a>2.1.4.1 Threading 注解</h4><p>thread注解是帮助我们指定方法在特定线程中执行处理，如果和指定的线程不一致，抛出异常；Threading 注解类型：</p>
<ul>
<li><p>@UiThread： UI线程</p>
</li>
<li><p>@MainThread ：主线程</p>
</li>
<li><p>@WorkerThread： 子线程</p>
</li>
<li><p>@BinderThread ： 绑定线程</p>
</li>
</ul>
<h4 id="2-1-4-2-Value-Constraints注解"><a href="#2-1-4-2-Value-Constraints注解" class="headerlink" title="2.1.4.2 Value Constraints注解"></a>2.1.4.2 Value Constraints注解</h4><ul>
<li><p><strong>@Size</strong>    </p>
<p>这里size定了一个参数<code>length</code>的最小和最大长度</p>
<p><strong>当搭配 <code>String</code> 使用时</strong></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">private void testDo(@Size(min = 1,max = 2)String s)&#123;</div><div class="line">    Log.e(&quot;tag&quot;,&quot;--------&gt;&quot;+s);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 使用效果为</p>
<p> <img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-01%2011.24.21.png" alt=""></p>
<p> 此时，<code>max = 2</code> 表示的是 String 类型的参数的 <code>长度</code><br>即：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&quot;22&quot; length = 2, 2 &lt;= max;</div><div class="line">&quot;223&quot; length = 3, 3 &gt;= max;</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>@IntRange</strong></p>
<p>IntRange是用来指定<code>int类型范围</code>的注解</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">private void setSizet(@IntRange(from = 1, to = 20) int s)&#123;</div><div class="line">    Log.e(TAG, &quot;ヽ(｀Д´)ﾉ -&gt; setStrTest : &quot; + s);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 运行结果</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-01%2011.30.01.png" alt=""></p>
<ul>
<li><p><strong>@FloatRange</strong></p>
<p>同 @IntRange  使用。</p>
</li>
<li><p><strong>@CallSuper</strong></p>
<p>@CallSuper注解主要是用来强调在覆盖父类方法时，需要实现父类的方法，及时调用对应的super.<em>*</em>方法,当用@CallSuper修饰了该方法，如果子类覆盖的后没有实现对呀的super方法会抛出异常。</p>
</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-01%2011.40.22.png" alt=""></p>
<ul>
<li><p><strong>@CheckResult</strong></p>
<p>假设你定义了一个方法返回一个值，你期望调用者用这个值做些事情，那么你可以使用@CheckResult注解标注这个方法，强制用户定义一个相应的返回值，使用它。</p>
</li>
</ul>
<pre><code>public class ResultClass {

    @CheckResult
    public int getParam(){
        return 11;
    }
}
</code></pre><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-01%2011.44.55.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 注解 </tag>
            
            <tag> 反射 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android库-aar]]></title>
      <url>/Android%E5%BA%93-aar/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考：<a href="https://developer.android.com/studio/projects/android-library" target="_blank" rel="external">https://developer.android.com/studio/projects/android-library</a></p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<h2 id="1-比较"><a href="#1-比较" class="headerlink" title="1. 比较"></a>1. 比较</h2><ul>
<li><strong>结构上：</strong>Android <code>库</code> 与 <code>app</code> 相同.可以提供构建应用所需的一切内容，包括源代码、资源文件和 Android 清单。</li>
<li><strong>产生的文件：</strong>Android 库将编译到您可以用作 Android 应用模块依赖项的 Android 归档 (<strong>AAR</strong>) 文件，而不是在设备上运行的 APK。</li>
<li><strong>AAR与JAR：</strong>AAR 文件可以包含 <strong>Android 资源</strong>和一个<strong>清单文件</strong>，这样，除了 Java 类与方法外，您还可以捆绑布局和可绘制对象等共享资源。</li>
</ul>
<h2 id="2-作用"><a href="#2-作用" class="headerlink" title="2. 作用"></a>2. 作用</h2><ul>
<li>构建使用 <strong>某些相同组件</strong>（例如 Activity、服务或 UI 布局）的多个应用。</li>
<li>构建存在 <strong>多个 APK 变体</strong>（例如免费版本和付费版本）的应用并且需要在两种版本中 <strong>使用相同的核心组件</strong>。</li>
</ul>
<h2 id="3-创建"><a href="#3-创建" class="headerlink" title="3. 创建"></a>3. 创建</h2><ul>
<li>将希望重用的文件移动到库模块中</li>
<li>然后以依赖的形式为每个应用模块添加库</li>
</ul>
<h3 id="3-1-直接创建-Android库"><a href="#3-1-直接创建-Android库" class="headerlink" title="3.1 直接创建 Android库"></a>3.1 直接创建 Android库</h3><h3 id="3-2-将应用模块转换为库模块"><a href="#3-2-将应用模块转换为库模块" class="headerlink" title="3.2 将应用模块转换为库模块"></a>3.2 将应用模块转换为库模块</h3><p>如果现有的应用模块包含有希望重用的所有代码，则可以按照以下步骤将其转换为库模块：</p>
<ul>
<li>打开现有应用模块的 build.gradle 文件。您应在顶部看到以下内容：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;com.android.application&apos;</div></pre></td></tr></table></figure>
<p>按照下面所示更改插件分配：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;com.android.library&apos;</div></pre></td></tr></table></figure>
<ul>
<li>点击 Sync Project with Gradle Files。</li>
</ul>
<p>就这么简单。模块的<strong>整个结构仍然相同</strong>，但是现在它将作为 Android 库运行，<strong>构建也将创建一个 AAR 文件</strong>。</p>
<h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h2><ul>
<li>库模块<strong>不得包含原始资源</strong></li>
</ul>
<p>工具不支持在库模块中使用原始资源文件（保存在 assets/ 目录中）。应用使用的任何原始资源都必须存储在应用模块自身的 assets/ 目录中。</p>
<ul>
<li><strong>资源合并冲突</strong></li>
</ul>
<p>构建工具会将库模块中的资源与相关应用模块的资源合并。如果在两个模块中均定义了给定资源 ID，将使用应用中的资源。</p>
<p>如果多个 AAR 库之间发生冲突，将使用依赖项列表首先列出（位于 dependencies 块顶部）的库中的资源。</p>
<ul>
<li>库模块<strong>可以包含 JAR 库</strong></li>
</ul>
<p>可以开发一个自身包含 JAR 库的库模块；不过需要<strong>手动编辑相关应用模块的构建路径，并添加 JAR 文件的路径</strong>。</p>
<ul>
<li>库模块<strong>可以依赖外部 JAR 库</strong></li>
</ul>
<p>您可以开发一个依赖于外部库（例如 Maps 外部库）的库模块。在这种情况下，相关应用必须针对包含外部库（例如 Google API 插件）的目标构建。另外也要注意，库模块和相关应用都必须在其清单文件的 <uses- library=""> 元素中声明外部库。</uses-></p>
<ul>
<li>应用模块的 minSdkVersion <strong>必须大于或等于</strong>库定义的版本</li>
</ul>
<p>库作为相关应用模块的一部分编译，因此，库模块中使用的 API 必须与应用模块支持的平台版本兼容。</p>
<ul>
<li>每个库模块都会创建自己的 <strong>R 类</strong></li>
</ul>
<p>在您构建相关应用模块时，库模块将先编译到 AAR 文件中，然后再添加到应用模块中。因此，每个库都有其自己的 R 类，并根据库的软件包名称命名。从主模块和库模块生成的 R 类会在所需的所有软件包（包括主模块的软件包和库的软件包）中创建。</p>
<h2 id="5-AAR-文件详解"><a href="#5-AAR-文件详解" class="headerlink" title="5. AAR 文件详解"></a>5. AAR 文件详解</h2><p>AAR 文件的文件扩展名为 .aar，Maven 工件类型也应当是 aar。文件本身是一个包含以下强制性条目的 zip 文件：</p>
<ul>
<li>/AndroidManifest.xml</li>
<li>/classes.jar</li>
<li>/res/</li>
<li>/R.txt</li>
</ul>
<p>此外，AAR 文件可能包含以下可选条目中的一个或多个：</p>
<ul>
<li>/assets/</li>
<li>/libs/名称.jar</li>
<li>/jni/abi 名称/名称.so（其中 abi 名称 是 Android 支持的 ABI 之一）</li>
<li>/proguard.txt</li>
<li>/lint.jar</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gradle与Android]]></title>
      <url>/Gradle%E4%B8%8EAndroid/</url>
      <content type="html"><![CDATA[<p>文章参考：<a href="https://www.jianshu.com/p/7b31cc80421d" target="_blank" rel="external">https://www.jianshu.com/p/7b31cc80421d</a><br>Gradle Docs：<a href="https://docs.gradle.org/current/userguide/userguide.html" target="_blank" rel="external">https://docs.gradle.org/current/userguide/userguide.html</a><br>Build Scans 功能：<a href="http://www.infoq.com/cn/news/2017/01/gradle-build-scans" target="_blank" rel="external">http://www.infoq.com/cn/news/2017/01/gradle-build-scans</a></p>
<a id="more"></a>
<p>[TOC]</p>
<ul>
<li><strong>关键词：</strong> <strong>Android、Groovy、DSL语言、Gradle</strong></li>
<li><p><strong>关系：</strong></p>
<p><strong>–&gt;</strong> Android采用Gradle作为首选的构建自动化系统，使用Gradle强大的依赖关系管理功能<br><strong>–&gt;</strong> Gradle基于Groovy（一种用于编写Gradle的脚本语言），是一个<strong>开源构建自动化系统</strong>，它引入了基于Groovy的领域特定语言（DSL）来配置项目<br><strong>–&gt;</strong> Groovy是一种运行在JVM虚拟机上的脚本语言，能够与Java语言无缝结合。</p>
</li>
<li><p><strong>区分：<code>Android Plugin 版本</code> 和 <code>Gradle版本</code></strong></p>
</li>
</ul>
<h1 id="0-构建"><a href="#0-构建" class="headerlink" title="0. 构建"></a>0. 构建</h1><h2 id="0-1-典型-Android-应用模块的构建流程。"><a href="#0-1-典型-Android-应用模块的构建流程。" class="headerlink" title="0.1 典型 Android 应用模块的构建流程。"></a>0.1 典型 Android 应用模块的构建流程。</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/build-process_2x.png" alt=""></p>
<p><strong>注意图中的Gradle和Android Plugin</strong></p>
<ul>
<li>编译器将您的<strong>源代码</strong>转换成 <strong>DEX（Dalvik Executable) 文件</strong>（其中包括运行在 Android 设备上的字节码），将所有<strong>其他内容</strong>转换成<strong>已编译资源</strong>。</li>
<li>APK 打包器将 DEX 文件和已编译资源<strong>合并</strong>成单个 <strong>APK</strong>。不过，<strong>必须先签署 APK</strong>，才能将应用<strong>安装并部署</strong>到 Android 设备上。</li>
<li>APK 打包器使用<strong>调试或发布密钥库签署</strong> APK：<ul>
<li>如果您构建的是<strong>调试版本的应用</strong>（即专用于测试和分析的应用），打包器会<strong>使用调试密钥库</strong>签署您的应用。Android Studio 自动使用调试密钥库配置新项目。</li>
<li>如果您构建的是打算向外<strong>发布的发布版本应用</strong>，打包器会使用<strong>发布密钥库签署</strong>应用。要创建发布密钥库。</li>
</ul>
</li>
<li>在生成最终 APK 之前，打包器会<strong>使用 zipalign 工具对应用进行优化，减少其在设备上运行时的内存占用</strong>。</li>
</ul>
<h2 id="0-2-自定义生成配置"><a href="#0-2-自定义生成配置" class="headerlink" title="0.2 自定义生成配置"></a>0.2 自定义生成配置</h2><p>通过Gradle和Android Plugin 可帮助配置构建的以下方面：</p>
<h3 id="Build-Types"><a href="#Build-Types" class="headerlink" title="Build Types"></a>Build Types</h3><p>构建类型定义了Gradle在<strong>构建</strong>和<strong>打包应用程</strong>序时使用的<strong>特定属性</strong>，并且通常针对开发生命周期的<strong>不同阶段</strong>进行配置。例如，</p>
<ul>
<li>调试构建类型启用调试选项并使用调试密钥对APK进行签名，</li>
<li>发布构建类型可能会缩小、混淆并用发布密钥对APK进行签名进行分发。</li>
</ul>
<p>您必须至少定义一种构建类型才能构建应用程序Android Studio默认创建调试和发布构建类型。</p>
<h3 id="Product-Flavors"><a href="#Product-Flavors" class="headerlink" title="Product Flavors"></a>Product Flavors</h3><p>产品风格代表您可能发布给用户的不同版本的应用，例如免费和付费版本的应用。您可以自定义产品风格以使用不同的代码和资源，同时共享和重复使用适用于所有版本应用程序的通用部件。产品风格是可选的，您必须手动创建它们</p>
<h3 id="Build-Variants"><a href="#Build-Variants" class="headerlink" title="Build Variants"></a>Build Variants</h3><p>构建变体是<strong>构建类型</strong>和<strong>产品风格</strong>的<strong>交叉产品</strong>，也是Gradle用来构建应用程序的配置。使用构建变体，您可以在开发期间构建产品风格的调试版本，或者为产品风格签署发布版本以供分发。虽然您不直接配置构建变体，但您可以配置构建它们的构建类型和产品风格。创建其他构建类型或产品风格也会创建其他构建变体</p>
<h3 id="Manifest-Entries"><a href="#Manifest-Entries" class="headerlink" title="Manifest Entries"></a>Manifest Entries</h3><p>您可以在构建变体配置中为清单文件的某些属性指定值。这些构建值会覆盖清单文件中的现有值。如果您希望为您的模块生成多个APK，其中每个apk文件都具有不同的应用程序名称，最低SDK版本或目标SDK版本</p>
<h3 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h3><p>构建系统从<strong>本地文件系统</strong>和<strong>远程存储库管理项目</strong>依赖关系。这样可以防止您必须手动搜索，下载和复制依赖关系的二进制包到项目目录中</p>
<h3 id="Signing"><a href="#Signing" class="headerlink" title="Signing"></a>Signing</h3><p>构建系统使您能够在构建配置中指定签名设置，并且可以在构建过程中自动签署APK。</p>
<h3 id="ProGuard"><a href="#ProGuard" class="headerlink" title="ProGuard"></a>ProGuard</h3><p>构建系统使您能够为每个构建变体指定不同的ProGuard规则文件。构建系统可以在构建过程中运行ProGuard来混淆你的类。</p>
<h3 id="Multiple-APK-Support"><a href="#Multiple-APK-Support" class="headerlink" title="Multiple APK Support"></a>Multiple APK Support</h3><p>构建系统使您能够自动构建不同的APK，每个APK仅包含特定屏幕密度或应用程序二进制接口（ABI）所需的代码和资源。</p>
<h2 id="0-3-构建配置文件，参考-模块3"><a href="#0-3-构建配置文件，参考-模块3" class="headerlink" title="0.3 构建配置文件，参考 模块3"></a>0.3 构建配置文件，参考 模块3</h2><p>创建<strong>自定义构建配置</strong>需要您更改一个或多个构建配置文件或build.gradle文件。这些纯文本文件使用<strong>域特定语言（DSL）</strong>来使用Groovy来描述和操作构建逻辑，Groovy是Java虚拟机（JVM）的动态语言。你不需要知道Groovy开始配置你的构建，因为Gradle的Android插件引入了你需要的大部分<strong>DSL元素</strong>。要详细了解Android插件DSL</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/project-structure_2x.png" alt=""></p>
<p>Android应用程序模块的默认项目结构</p>
<h2 id="0-4-Source-Sets"><a href="#0-4-Source-Sets" class="headerlink" title="0.4 Source Sets"></a>0.4 Source Sets</h2><p>Android Studio将每个模块的<strong>源代码</strong>和<strong>资源逻辑</strong>分组到源集中。模块的<code>main/</code>源代码集包含所有构建变体使用的代码和资源。其他源集目录是可选的，当配置新的构建变体时，Android Studio<strong>不会自动创建它们</strong>。但是，创建源代码集类似于main/帮助组织文件和资源，Gradle应仅在构建特定版本的应用程序时使用它们：</p>
<ul>
<li><code>src/main/</code></li>
</ul>
<p>该源代码集包括所有构建变体的通用代码和资源。</p>
<ul>
<li><code>src/buildType/</code></li>
</ul>
<p>创建此源集只包含特定生成类型的代码和资源。</p>
<ul>
<li><code>src/productFlavor/</code></li>
</ul>
<p>创建此源代码集以仅包含特定产品风格的代码和资源。</p>
<ul>
<li><code>src/productFlavorBuildType/</code></li>
</ul>
<p>创建此源集只包含特定构建变体的代码和资源</p>
<h1 id="1-Gradle"><a href="#1-Gradle" class="headerlink" title="1. Gradle"></a>1. Gradle</h1><blockquote>
<p>参考：<a href="https://docs.gradle.org/current/userguide/installation.html" target="_blank" rel="external">https://docs.gradle.org/current/userguide/installation.html</a></p>
</blockquote>
<ul>
<li><strong>更新Gradle版本:</strong></li>
</ul>
<p>如果您使用Android Studio 3.0或更高版本打开现有项目，请按照提示自动将现有项目更新为兼容版本的Gradle。</p>
<p>要手动更新Gradle，请将URL编辑gradle-wrapper.properties为以下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">distributionUrl=\https\://services.gradle.org/distributions/gradle-4.4-all.zip</div></pre></td></tr></table></figure>
<ul>
<li><strong>应用插件：</strong></li>
</ul>
<p>使用Android Studio 3.0或更高版本打开现有项目，请按照提示自动将您的项目更新为最新版本的Android插件。要手动更新项目，请包含maven repo，并在您的项目级build.gradle 文件中更改插件版本，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        ...</div><div class="line">        // You need to add the following repository to download the</div><div class="line">        // new plugin.</div><div class="line">        google()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;com.android.tools.build:gradle:3.1.0&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h2><h3 id="1-1-1-先决条件"><a href="#1-1-1-先决条件" class="headerlink" title="1.1.1 先决条件"></a>1.1.1 先决条件</h3><p>Gradle可在所有主要操作系统上运行，并且只需要Java JDK 7或更高版本即可运行。检查，运行<code>java -version</code>。你应该看到这样的东西：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">❯java -version java version“1.8.0_151” </div><div class="line">Java™SE运行时环境（build 1.8.0_151-b12）</div><div class="line">Java HotSpot™64位服务器虚拟机（内置版本25.151-b12，混合模式）</div></pre></td></tr></table></figure>
<p>Gradle自带Groovy库，因此Groovy不需要安装。Gradle将忽略任何现有的Groovy安装。<br>Gradle使用它在您的路径中找到的任何JDK。或者，您可以将JAVA_HOME环境变量设置为指向所需JDK的安装目录。</p>
<h3 id="1-1-2-安装"><a href="#1-1-2-安装" class="headerlink" title="1.1.2 安装"></a>1.1.2 安装</h3><p>通过 <code>homebrew</code> 安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install gradle</div></pre></td></tr></table></figure>
<h3 id="1-1-3-验证安装"><a href="#1-1-3-验证安装" class="headerlink" title="1.1.3 验证安装"></a>1.1.3 验证安装</h3><p>输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle -v</div></pre></td></tr></table></figure>
<p>得到的结果，如果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Welcome to Gradle 4.7!</div><div class="line"></div><div class="line">Here are the highlights of this release:</div><div class="line"> - Incremental annotation processing</div><div class="line"> - JDK 10 support</div><div class="line"> - Grouped non-interactive console logs</div><div class="line"> - Failed tests are re-run first for quicker feedback</div><div class="line"></div><div class="line">For more details see https://docs.gradle.org/4.7/release-notes.html</div><div class="line"></div><div class="line"></div><div class="line">------------------------------------------------------------</div><div class="line">Gradle 4.7</div><div class="line">------------------------------------------------------------</div><div class="line"></div><div class="line">Build time:   2018-04-18 09:09:12 UTC</div><div class="line">Revision:     b9a962bf70638332300e7f810689cb2febbd4a6c</div><div class="line"></div><div class="line">Groovy:       2.4.12</div><div class="line">Ant:          Apache Ant(TM) version 1.9.9 compiled on February 2 2017</div><div class="line">JVM:          1.8.0_131 (Oracle Corporation 25.131-b11)</div><div class="line">OS:           Mac OS X 10.13.4 x86_64</div></pre></td></tr></table></figure>
<p>则表示安装成功。</p>
<h2 id="1-2-创建新的Gradle构建"><a href="#1-2-创建新的Gradle构建" class="headerlink" title="1.2 创建新的Gradle构建"></a>1.2 创建新的Gradle构建</h2><h3 id="1-2-1-创建一个新的目录"><a href="#1-2-1-创建一个新的目录" class="headerlink" title="1.2.1 创建一个新的目录"></a>1.2.1 创建一个新的目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir Gradle_Projects</div></pre></td></tr></table></figure>
<p>进入新创建的目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd Gradle_Projects/</div></pre></td></tr></table></figure>
<h3 id="1-2-2-初始化项目"><a href="#1-2-2-初始化项目" class="headerlink" title="1.2.2 初始化项目"></a>1.2.2 初始化项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle init</div></pre></td></tr></table></figure>
<p>结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Starting a Gradle Daemon (subsequent builds will be faster)</div><div class="line"></div><div class="line">BUILD SUCCESSFUL in 3s</div><div class="line">2 actionable tasks: 2 executed</div></pre></td></tr></table></figure>
<p>表示初始化成功。</p>
<p>初始化成功后，项目的目录及文件功能说明：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-22%2021.03.22.png" alt=""></p>
<h3 id="1-2-3-创建一个新任务"><a href="#1-2-3-创建一个新任务" class="headerlink" title="1.2.3 创建一个新任务"></a>1.2.3 创建一个新任务</h3><p>Gradle提供了用于通过基于Groovy或Kotlin的DSL创建和配置任务的API。</p>
<ul>
<li>在项目的“根目录”下创建一个文件夹“src”</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir src</div></pre></td></tr></table></figure>
<p>并进入此文件夹</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd src/</div></pre></td></tr></table></figure>
<ul>
<li><p>在新创建的“src”目录下创建一个新文件“myfile.txt”，并写入“Hello,Word !”：</p>
</li>
<li><p>在项目配置脚本文件<code>build.gradle</code>中，定义一个<code>copy</code>方法，具体为：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">task copy(type: Copy, group: &quot;Custom&quot;, description: &quot;Copies sources to the dest directory&quot;) &#123;</div><div class="line">    from &quot;src&quot;</div><div class="line">    into &quot;dest&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在项目的“根目录”下执行 <code>copy</code> 方法的命令：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew copy</div></pre></td></tr></table></figure>
<p>若显示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">BUILD SUCCESSFUL in 10m 11s</div><div class="line">1 actionable task: 1 executed</div></pre></td></tr></table></figure>
<p>则表示任务添加成功。成功之后的项目树结构为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Gradle_Projects</div><div class="line">├── Gradle_Projects</div><div class="line">├── build.gradle</div><div class="line">├── dest</div><div class="line">│   └── myfile.txt</div><div class="line">├── gradle</div><div class="line">│   └── wrapper</div><div class="line">│       ├── gradle-wrapper.jar</div><div class="line">│       └── gradle-wrapper.properties</div><div class="line">├── gradlew</div><div class="line">├── gradlew.bat</div><div class="line">├── settings.gradle</div><div class="line">└── src</div><div class="line">    └── myfile.txt</div></pre></td></tr></table></figure>
<p><strong>注意：本人在执行 <code>copy</code> 方法命令时，并没有直接显示结果，而是先下载了一个gradle-4.7-bin.zip文件</strong></p>
<h3 id="1-2-4-应用一个插件"><a href="#1-2-4-应用一个插件" class="headerlink" title="1.2.4 应用一个插件"></a>1.2.4 应用一个插件</h3><p>Gradle包含一系列插件，Gradle插件门户中提供了许多更多的插件。插件中包含的其中一个插件就是base插件。结合调用的核心类型Zip，可以使用配置的名称和位置创建项目的zip存档。</p>
<p>使用语法将base插件添加到build.gradle文件中plugins。<strong>确保plugins {}在文件顶部添加该块（否则失败）</strong>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">plugins &#123;</div><div class="line">    id &quot;base&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在添加一个从该src目录创建一个zip存档的任务。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">task zip(type: Zip, group: &quot;Archive&quot;, description: &quot;Archives sources in a zip file&quot;) &#123;</div><div class="line">    from &quot;src&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>若显示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">BUILD SUCCESSFUL in 0s</div><div class="line">1 actionable task: 1 executed</div></pre></td></tr></table></figure>
<p>则表示任务执行成功，文件树为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Gradle_Projects</div><div class="line">├── Gradle_Projects</div><div class="line">├── build</div><div class="line">│   └── distributions</div><div class="line">│       └── Gradle_Projects.zip</div><div class="line">├── build.gradle</div><div class="line">├── dest</div><div class="line">│   └── myfile.txt</div><div class="line">├── gradle</div><div class="line">│   └── wrapper</div><div class="line">│       ├── gradle-wrapper.jar</div><div class="line">│       └── gradle-wrapper.properties</div><div class="line">├── gradlew</div><div class="line">├── gradlew.bat</div><div class="line">├── settings.gradle</div><div class="line">└── src</div><div class="line">    └── myfile.txt</div></pre></td></tr></table></figure>
<p>此任务是将 <code>src</code> 文件夹中的 <code>所有文件</code> 打包。zip包中的内容为：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-22%2021.50.12.png" alt=""></p>
<h3 id="1-2-5-发现更多的可用-task"><a href="#1-2-5-发现更多的可用-task" class="headerlink" title="1.2.5 发现更多的可用 task"></a>1.2.5 发现更多的可用 <code>task</code></h3><p>执行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew tasks</div></pre></td></tr></table></figure>
<p>结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">&gt; Task :tasks</div><div class="line"></div><div class="line">------------------------------------------------------------</div><div class="line">All tasks runnable from root project</div><div class="line">------------------------------------------------------------</div><div class="line"></div><div class="line">Archive tasks</div><div class="line">-------------</div><div class="line">zip - Archives sources in a zip file</div><div class="line"></div><div class="line">Build tasks</div><div class="line">-----------</div><div class="line">assemble - Assembles the outputs of this project.  * 汇编 - 汇编此项目的输出。</div><div class="line">build - Assembles and tests this project. * 构建 - 组装并测试此项目。</div><div class="line">clean - Deletes the build directory. * 清除 - 删除构建目录。</div><div class="line"></div><div class="line">Build Setup tasks</div><div class="line">-----------------</div><div class="line">init - Initializes a new Gradle build. * init  - 初始化一个新的Gradle构建。</div><div class="line">wrapper - Generates Gradle wrapper files. * 包装器 - 生成Gradle包装器文件。</div><div class="line"></div><div class="line">Custom tasks</div><div class="line">------------</div><div class="line">copy - Copies sources to the dest directory</div><div class="line"></div><div class="line">Help tasks</div><div class="line">----------</div><div class="line">buildEnvironment - Displays all buildscript dependencies declared in root project &apos;Gradle_Projects&apos;.</div><div class="line">components - Displays the components produced by root project &apos;Gradle_Projects&apos;. [incubating]</div><div class="line">dependencies - Displays all dependencies declared in root project &apos;Gradle_Projects&apos;.</div><div class="line">dependencyInsight - Displays the insight into a specific dependency in root project &apos;Gradle_Projects&apos;.</div><div class="line">dependentComponents - Displays the dependent components of components in root project &apos;Gradle_Projects&apos;. [incubating]</div><div class="line">help - Displays a help message.</div><div class="line">model - Displays the configuration model of root project &apos;Gradle_Projects&apos;. [incubating]</div><div class="line">projects - Displays the sub-projects of root project &apos;Gradle_Projects&apos;.</div><div class="line">properties - Displays the properties of root project &apos;Gradle_Projects&apos;.</div><div class="line">tasks - Displays the tasks runnable from root project &apos;Gradle_Projects&apos;.</div><div class="line"></div><div class="line">Verification tasks</div><div class="line">------------------</div><div class="line">check - Runs all checks.</div><div class="line"></div><div class="line">Rules</div><div class="line">-----</div><div class="line">Pattern: clean&lt;TaskName&gt;: Cleans the output files of a task.</div><div class="line">Pattern: build&lt;ConfigurationName&gt;: Assembles the artifacts of a configuration.</div><div class="line">Pattern: upload&lt;ConfigurationName&gt;: Assembles and uploads the artifacts belonging to a configuration.</div><div class="line"></div><div class="line">To see all tasks and more detail, run gradlew tasks --all</div><div class="line">* 要查看所有任务和更多详细信息，请运行gradlew tasks --all</div><div class="line"></div><div class="line">To see more detail about a task, run gradlew help --task &lt;task&gt;</div><div class="line">* 要查看有关任务的更多详细信息，请运行gradlew help --task &lt;task&gt;</div><div class="line"></div><div class="line">BUILD SUCCESSFUL in 0s</div><div class="line">1 actionable task: 1 executed</div></pre></td></tr></table></figure>
<p><strong>说明：</strong></p>
<p><code>task任务参数</code> 与 <code>build.gradle</code> 文件中的代码对比：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/gradle-%E4%BB%BB%E5%8A%A1%E5%88%9B%E5%BB%BA%E8%AF%B4%E6%98%8E.png" alt=""></p>
<h2 id="1-3-命令行界面"><a href="#1-3-命令行界面" class="headerlink" title="1.3 命令行界面"></a>1.3 命令行界面</h2><h3 id="1-3-1-一般命令："><a href="#1-3-1-一般命令：" class="headerlink" title="1.3.1 一般命令："></a>1.3.1 一般命令：</h3><ul>
<li>Gradle命令符合以下结构，在任务名称之前和之后允许选项：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle [taskName ...] [--option-name ...]</div></pre></td></tr></table></figure>
<p>如果指定了<strong>多个任务</strong>，则应该用<strong>空格分隔</strong>。</p>
<ul>
<li>接受值的选项可以在选项和参数之间使用或不使用<code>=</code>指定; 然而，推荐使用<code>=</code>。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--console=plain</div></pre></td></tr></table></figure>
<ul>
<li>启用行为的选项具有长形式的选项，而用<code>--no-</code>指定的反向选项。 以下是相对的命令。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">--build-cache</div><div class="line">--no-build-cache</div></pre></td></tr></table></figure>
<p>许多长期形式的期权都有相当于短期期权的选择。 以下是等同的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">--help</div><div class="line">-h</div></pre></td></tr></table></figure>
<h3 id="1-3-2-执行任务"><a href="#1-3-2-执行任务" class="headerlink" title="1.3.2 执行任务"></a>1.3.2 执行任务</h3><ul>
<li>运行任务及。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle myTask</div></pre></td></tr></table></figure>
<ul>
<li>在<strong>多项目构建</strong>中执行任务</li>
</ul>
<p>在多项目构建中，可以使用 <code>:</code> 分隔 <strong>子项目名称</strong> 和 <strong>任务名称</strong> 来执行子项目任务。 从根项目运行时，以下内容得到的结果是等价的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gradle :mySubproject:taskName</div><div class="line">gradle mySubproject:taskName</div></pre></td></tr></table></figure>
<ul>
<li>也可以<strong>仅使用任务名称</strong>为所有子项目运行任务。 例如，这将从根项目目录中调用时为所有子项目运行“测试”任务。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle test</div></pre></td></tr></table></figure>
<ul>
<li>从子项目中调用Gradle时，应该省略项目名称：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd mySubproject</div><div class="line">gradle taskName</div></pre></td></tr></table></figure>
<ul>
<li>执行多任务</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle test deploy</div></pre></td></tr></table></figure>
<ul>
<li><strong>排除</strong>执行任务中的引用任务</li>
</ul>
<p>您可以使用<code>-x</code>或<code>--exclude-task</code>命令行选项排除正在执行的任务，并提供要排除的任务的名称。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/commandLineTutorialTasks.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">gradle dist --exclude-task test</div><div class="line"></div><div class="line">&gt; Task :compile</div><div class="line">compiling source</div><div class="line"></div><div class="line">&gt; Task :dist</div><div class="line">building the distribution</div><div class="line"></div><div class="line">BUILD SUCCESSFUL in 0s</div><div class="line">2 actionable tasks: 2 executed</div></pre></td></tr></table></figure>
<p>您可以看到 <code>test</code> 任务未执行，即使它是 <code>dist</code> 任务的依赖项。 测试任务的依赖项（如compileTest）也不会执行。 另一个任务所需的测试依赖关系，如编译，仍然执行。</p>
<ul>
<li><strong>强制</strong>任务执行</li>
</ul>
<p>您可以使用 <code>--rerun-tasks</code> 选项强制Gradle执行所有忽略最新检查的任务：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle test --rerun-tasks</div></pre></td></tr></table></figure>
<ul>
<li><strong>发生故障</strong>时继续构建</li>
</ul>
<p>默认情况下，一旦任何任务失败，Gradle将中止执行并使构建失败。 这样可以尽快完成构建，但隐藏了可能发生的其他故障。 为了在单个构建执行中发现尽可能多的失败，可以使用 <code>--continue</code> 选项。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle test --continue</div></pre></td></tr></table></figure>
<p>当使用<code>--continue</code>执行时，Gradle将执行每个要执行的任务，而该任务的所有依赖关系完成时不会失败，而不会在遇到第一个失败时立即停止。 每次遇到的故障将在构建结束时报告。</p>
<p>如果任务失败，则任何依赖它的后续任务将不会执行。 例如，如果测试中的代码出现编译失败，测试将不会运行; 因为测试任务将取决于编译任务（直接或间接）。</p>
<ul>
<li>任务名称缩写</li>
</ul>
<p>在命令行中指定任务时，不必提供任务的全名。 您只需提供足够的任务名称即可唯一标识任务。 举例来说，Gradle可能足以让Gradle识别检查任务。</p>
<p>您还可以缩写骆驼案件任务名称中的每个单词。 例如，您可以通过运行gradle compTest或gradle cT来执行任务compileTest。</p>
<p>示例：缩写骆驼案例任务名称</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle cT</div></pre></td></tr></table></figure>
<p>您还可以将这些缩写与-x命令行选项一起使用。</p>
<h3 id="1-3-3-常见任务"><a href="#1-3-3-常见任务" class="headerlink" title="1.3.3 常见任务"></a>1.3.3 常见任务</h3><p>以下是由<strong>内置</strong>和<strong>最主要的Gradle插件</strong>应用的任务约定。</p>
<ul>
<li>计算所有输出</li>
</ul>
<p>在Gradle构建中，通常build指定汇编所有输出并运行所有检查。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle build</div></pre></td></tr></table></figure>
<ul>
<li><strong>运行</strong>应用程序</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle run</div></pre></td></tr></table></figure>
<ul>
<li>运行所有<strong>检查</strong></li>
</ul>
<p>所有验证任务都是常见的，包括测试和测试，都是使用check任务执行的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle check</div></pre></td></tr></table></figure>
<ul>
<li>清洁输出</li>
</ul>
<p>您可以使用clean任务删除构建目录的内容，但这样做会导致预先计算的输出丢失，从而导致后续任务执行的额外构建时间大大增加。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle clean</div></pre></td></tr></table></figure>
<h2 id="1-3-4-项目报告"><a href="#1-3-4-项目报告" class="headerlink" title="1.3.4 项目报告"></a>1.3.4 项目报告</h2><p>Gradle提供了几个内置任务，这些任务显示了构建的特定细节。这对理解构建的结构和依赖关系以及调试问题很有用。</p>
<ul>
<li><strong>列出项目</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle projects</div></pre></td></tr></table></figure>
<p>结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; Task :projects</div><div class="line"></div><div class="line">------------------------------------------------------------</div><div class="line">Root project</div><div class="line">------------------------------------------------------------</div><div class="line"></div><div class="line">Root project &apos;HelloGradle&apos;</div><div class="line">\--- Project &apos;:app&apos;</div></pre></td></tr></table></figure>
<ul>
<li>列出任务-1：  <strong>:app:tasks</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle :app:tasks</div></pre></td></tr></table></figure>
<p>结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">&gt; Task :app:tasks</div><div class="line"></div><div class="line">------------------------------------------------------------</div><div class="line">All tasks runnable from project :app</div><div class="line">------------------------------------------------------------</div><div class="line"></div><div class="line">Android tasks</div><div class="line">-------------</div><div class="line">androidDependencies - Displays the Android dependencies of the project.</div><div class="line">signingReport - Displays the signing info for each variant.</div><div class="line">sourceSets - Prints out all the source sets defined in this project.</div><div class="line"></div><div class="line">Build tasks</div><div class="line">-----------</div><div class="line">assemble - Assembles all variants of all applications and secondary packages.</div><div class="line">assembleAndroidTest - Assembles all the Test applications.</div><div class="line">assembleDebug - Assembles all Debug builds.</div><div class="line">assembleRelease - Assembles all Release builds.</div><div class="line">build - Assembles and tests this project.</div><div class="line">buildDependents - Assembles and tests this project and all projects that depend on it.</div><div class="line">buildNeeded - Assembles and tests this project and all projects it depends on.</div><div class="line">clean - Deletes the build directory.</div><div class="line">cleanBuildCache - Deletes the build cache directory.</div><div class="line">compileDebugAndroidTestSources</div><div class="line">compileDebugSources</div><div class="line">compileDebugUnitTestSources</div><div class="line">compileReleaseSources</div><div class="line">compileReleaseUnitTestSources</div><div class="line">mockableAndroidJar - Creates a version of android.jar that&apos;s suitable for unit tests.</div><div class="line"></div><div class="line">Help tasks</div><div class="line">----------</div><div class="line">buildEnvironment - Displays all buildscript dependencies declared in project &apos;:app&apos;.</div><div class="line">components - Displays the components produced by project &apos;:app&apos;. [incubating]</div><div class="line">dependencies - Displays all dependencies declared in project &apos;:app&apos;.</div><div class="line">dependencyInsight - Displays the insight into a specific dependency in project &apos;:app&apos;.</div><div class="line">dependentComponents - Displays the dependent components of components in project &apos;:app&apos;. [incubating]</div><div class="line">help - Displays a help message.</div><div class="line">model - Displays the configuration model of project &apos;:app&apos;. [incubating]</div><div class="line">projects - Displays the sub-projects of project &apos;:app&apos;.</div><div class="line">properties - Displays the properties of project &apos;:app&apos;.</div><div class="line">tasks - Displays the tasks runnable from project &apos;:app&apos;.</div><div class="line"></div><div class="line">Install tasks</div><div class="line">-------------</div><div class="line">installDebug - Installs the Debug build.</div><div class="line">installDebugAndroidTest - Installs the android (on device) tests for the Debug build.</div><div class="line">uninstallAll - Uninstall all applications.</div><div class="line">uninstallDebug - Uninstalls the Debug build.</div><div class="line">uninstallDebugAndroidTest - Uninstalls the android (on device) tests for the Debug build.</div><div class="line">uninstallRelease - Uninstalls the Release build.</div><div class="line"></div><div class="line">Verification tasks</div><div class="line">------------------</div><div class="line">check - Runs all checks.</div><div class="line">connectedAndroidTest - Installs and runs instrumentation tests for all flavors on connected devices.</div><div class="line">connectedCheck - Runs all device checks on currently connected devices.</div><div class="line">connectedDebugAndroidTest - Installs and runs the tests for debug on connected devices.</div><div class="line">deviceAndroidTest - Installs and runs instrumentation tests using all Device Providers.</div><div class="line">deviceCheck - Runs all device checks using Device Providers and Test Servers.</div><div class="line">lint - Runs lint on all variants.</div><div class="line">lintDebug - Runs lint on the Debug build.</div><div class="line">lintRelease - Runs lint on the Release build.</div><div class="line">lintVitalRelease - Runs lint on just the fatal issues in the release build.</div><div class="line">test - Run unit tests for all variants.</div><div class="line">testDebugUnitTest - Run unit tests for the debug build.</div><div class="line">testReleaseUnitTest - Run unit tests for the release build.</div></pre></td></tr></table></figure>
<ul>
<li>列出任务-2： <strong>gradle tasks</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle tasks</div></pre></td></tr></table></figure>
<p>结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">&gt; Task :tasks</div><div class="line"></div><div class="line">------------------------------------------------------------</div><div class="line">All tasks runnable from root project</div><div class="line">------------------------------------------------------------</div><div class="line"></div><div class="line">Android tasks</div><div class="line">-------------</div><div class="line">androidDependencies - Displays the Android dependencies of the project.</div><div class="line">signingReport - Displays the signing info for each variant.</div><div class="line">sourceSets - Prints out all the source sets defined in this project.</div><div class="line"></div><div class="line">Build tasks</div><div class="line">-----------</div><div class="line">assemble - Assembles all variants of all applications and secondary packages.</div><div class="line">assembleAndroidTest - Assembles all the Test applications.</div><div class="line">assembleDebug - Assembles all Debug builds.</div><div class="line">assembleRelease - Assembles all Release builds.</div><div class="line">build - Assembles and tests this project.</div><div class="line">buildDependents - Assembles and tests this project and all projects that depend on it.</div><div class="line">buildNeeded - Assembles and tests this project and all projects it depends on.</div><div class="line">clean - Deletes the build directory.</div><div class="line">cleanBuildCache - Deletes the build cache directory.</div><div class="line">compileDebugAndroidTestSources</div><div class="line">compileDebugSources</div><div class="line">compileDebugUnitTestSources</div><div class="line">compileReleaseSources</div><div class="line">compileReleaseUnitTestSources</div><div class="line">mockableAndroidJar - Creates a version of android.jar that&apos;s suitable for unit tests.</div><div class="line"></div><div class="line">Build Setup tasks</div><div class="line">-----------------</div><div class="line">init - Initializes a new Gradle build.</div><div class="line">wrapper - Generates Gradle wrapper files.</div><div class="line"></div><div class="line">Help tasks</div><div class="line">----------</div><div class="line">buildEnvironment - Displays all buildscript dependencies declared in root project &apos;HelloGradle&apos;.</div><div class="line">components - Displays the components produced by root project &apos;HelloGradle&apos;. [incubating]</div><div class="line">dependencies - Displays all dependencies declared in root project &apos;HelloGradle&apos;.</div><div class="line">dependencyInsight - Displays the insight into a specific dependency in root project &apos;HelloGradle&apos;.</div><div class="line">dependentComponents - Displays the dependent components of components in root project &apos;HelloGradle&apos;. [incubating]</div><div class="line">help - Displays a help message.</div><div class="line">model - Displays the configuration model of root project &apos;HelloGradle&apos;. [incubating]</div><div class="line">projects - Displays the sub-projects of root project &apos;HelloGradle&apos;.</div><div class="line">properties - Displays the properties of root project &apos;HelloGradle&apos;.</div><div class="line">tasks - Displays the tasks runnable from root project &apos;HelloGradle&apos; (some of the displayed tasks may belong to subprojects).</div><div class="line"></div><div class="line">Install tasks</div><div class="line">-------------</div><div class="line">installDebug - Installs the Debug build.</div><div class="line">installDebugAndroidTest - Installs the android (on device) tests for the Debug build.</div><div class="line">uninstallAll - Uninstall all applications.</div><div class="line">uninstallDebug - Uninstalls the Debug build.</div><div class="line">uninstallDebugAndroidTest - Uninstalls the android (on device) tests for the Debug build.</div><div class="line">uninstallRelease - Uninstalls the Release build.</div><div class="line"></div><div class="line">Verification tasks</div><div class="line">------------------</div><div class="line">check - Runs all checks.</div><div class="line">connectedAndroidTest - Installs and runs instrumentation tests for all flavors on connected devices.</div><div class="line">connectedCheck - Runs all device checks on currently connected devices.</div><div class="line">connectedDebugAndroidTest - Installs and runs the tests for debug on connected devices.</div><div class="line">deviceAndroidTest - Installs and runs instrumentation tests using all Device Providers.</div><div class="line">deviceCheck - Runs all device checks using Device Providers and Test Servers.</div><div class="line">lint - Runs lint on all variants.</div><div class="line">lintDebug - Runs lint on the Debug build.</div><div class="line">lintRelease - Runs lint on the Release build.</div><div class="line">lintVitalRelease - Runs lint on just the fatal issues in the release build.</div><div class="line">test - Run unit tests for all variants.</div><div class="line">testDebugUnitTest - Run unit tests for the debug build.</div><div class="line">testReleaseUnitTest - Run unit tests for the release build.</div></pre></td></tr></table></figure>
<ul>
<li>列出任务-3：<strong>gradle tasks –all</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle tasks --all</div></pre></td></tr></table></figure>
<p>结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div></pre></td><td class="code"><pre><div class="line">&gt; Task :tasks</div><div class="line"></div><div class="line">------------------------------------------------------------</div><div class="line">All tasks runnable from root project</div><div class="line">------------------------------------------------------------</div><div class="line"></div><div class="line">Android tasks</div><div class="line">-------------</div><div class="line">app:androidDependencies - Displays the Android dependencies of the project.</div><div class="line">app:signingReport - Displays the signing info for each variant.</div><div class="line">app:sourceSets - Prints out all the source sets defined in this project.</div><div class="line"></div><div class="line">Build tasks</div><div class="line">-----------</div><div class="line">app:assemble - Assembles all variants of all applications and secondary packages.</div><div class="line">app:assembleAndroidTest - Assembles all the Test applications.</div><div class="line">app:assembleDebug - Assembles all Debug builds.</div><div class="line">app:assembleRelease - Assembles all Release builds.</div><div class="line">app:build - Assembles and tests this project.</div><div class="line">app:buildDependents - Assembles and tests this project and all projects that depend on it.</div><div class="line">app:buildNeeded - Assembles and tests this project and all projects it depends on.</div><div class="line">app:clean - Deletes the build directory.</div><div class="line">app:cleanBuildCache - Deletes the build cache directory.</div><div class="line">app:compileDebugAndroidTestSources</div><div class="line">app:compileDebugSources</div><div class="line">app:compileDebugUnitTestSources</div><div class="line">app:compileReleaseSources</div><div class="line">app:compileReleaseUnitTestSources</div><div class="line">app:mockableAndroidJar - Creates a version of android.jar that&apos;s suitable for unit tests.</div><div class="line"></div><div class="line">Build Setup tasks</div><div class="line">-----------------</div><div class="line">init - Initializes a new Gradle build.</div><div class="line">wrapper - Generates Gradle wrapper files.</div><div class="line"></div><div class="line">Help tasks</div><div class="line">----------</div><div class="line">buildEnvironment - Displays all buildscript dependencies declared in root project &apos;HelloGradle&apos;.</div><div class="line">app:buildEnvironment - Displays all buildscript dependencies declared in project &apos;:app&apos;.</div><div class="line">components - Displays the components produced by root project &apos;HelloGradle&apos;. [incubating]</div><div class="line">app:components - Displays the components produced by project &apos;:app&apos;. [incubating]</div><div class="line">dependencies - Displays all dependencies declared in root project &apos;HelloGradle&apos;.</div><div class="line">app:dependencies - Displays all dependencies declared in project &apos;:app&apos;.</div><div class="line">dependencyInsight - Displays the insight into a specific dependency in root project &apos;HelloGradle&apos;.</div><div class="line">app:dependencyInsight - Displays the insight into a specific dependency in project &apos;:app&apos;.</div><div class="line">dependentComponents - Displays the dependent components of components in root project &apos;HelloGradle&apos;. [incubating]</div><div class="line">app:dependentComponents - Displays the dependent components of components in project &apos;:app&apos;. [incubating]</div><div class="line">help - Displays a help message.</div><div class="line">app:help - Displays a help message.</div><div class="line">model - Displays the configuration model of root project &apos;HelloGradle&apos;. [incubating]</div><div class="line">app:model - Displays the configuration model of project &apos;:app&apos;. [incubating]</div><div class="line">projects - Displays the sub-projects of root project &apos;HelloGradle&apos;.</div><div class="line">app:projects - Displays the sub-projects of project &apos;:app&apos;.</div><div class="line">properties - Displays the properties of root project &apos;HelloGradle&apos;.</div><div class="line">app:properties - Displays the properties of project &apos;:app&apos;.</div><div class="line">tasks - Displays the tasks runnable from root project &apos;HelloGradle&apos; (some of the displayed tasks may belong to subprojects).</div><div class="line">app:tasks - Displays the tasks runnable from project &apos;:app&apos;.</div><div class="line"></div><div class="line">Install tasks</div><div class="line">-------------</div><div class="line">app:installDebug - Installs the Debug build.</div><div class="line">app:installDebugAndroidTest - Installs the android (on device) tests for the Debug build.</div><div class="line">app:uninstallAll - Uninstall all applications.</div><div class="line">app:uninstallDebug - Uninstalls the Debug build.</div><div class="line">app:uninstallDebugAndroidTest - Uninstalls the android (on device) tests for the Debug build.</div><div class="line">app:uninstallRelease - Uninstalls the Release build.</div><div class="line"></div><div class="line">Verification tasks</div><div class="line">------------------</div><div class="line">app:check - Runs all checks.</div><div class="line">app:connectedAndroidTest - Installs and runs instrumentation tests for all flavors on connected devices.</div><div class="line">app:connectedCheck - Runs all device checks on currently connected devices.</div><div class="line">app:connectedDebugAndroidTest - Installs and runs the tests for debug on connected devices.</div><div class="line">app:deviceAndroidTest - Installs and runs instrumentation tests using all Device Providers.</div><div class="line">app:deviceCheck - Runs all device checks using Device Providers and Test Servers.</div><div class="line">app:lint - Runs lint on all variants.</div><div class="line">app:lintDebug - Runs lint on the Debug build.</div><div class="line">app:lintRelease - Runs lint on the Release build.</div><div class="line">app:lintVitalRelease - Runs lint on just the fatal issues in the release build.</div><div class="line">app:test - Run unit tests for all variants.</div><div class="line">app:testDebugUnitTest - Run unit tests for the debug build.</div><div class="line">app:testReleaseUnitTest - Run unit tests for the release build.</div><div class="line"></div><div class="line">Other tasks</div><div class="line">-----------</div><div class="line">app:assembleDebugAndroidTest</div><div class="line">app:assembleDebugUnitTest</div><div class="line">app:assembleReleaseUnitTest</div><div class="line">app:bundleAppClassesDebug</div><div class="line">app:bundleAppClassesDebugAndroidTest</div><div class="line">app:bundleAppClassesDebugUnitTest</div><div class="line">app:bundleAppClassesRelease</div><div class="line">app:bundleAppClassesReleaseUnitTest</div><div class="line">app:bundleDebugAndroidTestResources</div><div class="line">app:bundleDebugResources</div><div class="line">app:bundleReleaseResources</div><div class="line">app:checkDebugManifest</div><div class="line">app:checkReleaseManifest</div><div class="line">clean</div><div class="line">app:compileDebugAidl</div><div class="line">app:compileDebugAndroidTestAidl</div><div class="line">app:compileDebugAndroidTestJavaWithJavac</div><div class="line">app:compileDebugAndroidTestNdk</div><div class="line">app:compileDebugAndroidTestRenderscript</div><div class="line">app:compileDebugAndroidTestShaders</div><div class="line">app:compileDebugJavaWithJavac</div><div class="line">app:compileDebugNdk</div><div class="line">app:compileDebugRenderscript</div><div class="line">app:compileDebugShaders</div><div class="line">app:compileDebugUnitTestJavaWithJavac</div><div class="line">app:compileLint</div><div class="line">app:compileReleaseAidl</div><div class="line">app:compileReleaseJavaWithJavac</div><div class="line">app:compileReleaseNdk</div><div class="line">app:compileReleaseRenderscript</div><div class="line">app:compileReleaseShaders</div><div class="line">app:compileReleaseUnitTestJavaWithJavac</div><div class="line">app:consumeConfigAttr</div><div class="line">app:createDebugCompatibleScreenManifests</div><div class="line">app:createReleaseCompatibleScreenManifests</div><div class="line">app:extractProguardFiles</div><div class="line">app:generateDebugAndroidTestAssets</div><div class="line">app:generateDebugAndroidTestBuildConfig</div><div class="line">app:generateDebugAndroidTestResources</div><div class="line">app:generateDebugAndroidTestResValues</div><div class="line">app:generateDebugAndroidTestSources</div><div class="line">app:generateDebugAssets</div><div class="line">app:generateDebugBuildConfig</div><div class="line">app:generateDebugResources</div><div class="line">app:generateDebugResValues</div><div class="line">app:generateDebugSources</div><div class="line">app:generateReleaseAssets</div><div class="line">app:generateReleaseBuildConfig</div><div class="line">app:generateReleaseResources</div><div class="line">app:generateReleaseResValues</div><div class="line">app:generateReleaseSources</div><div class="line">app:javaPreCompileDebug</div><div class="line">app:javaPreCompileDebugAndroidTest</div><div class="line">app:javaPreCompileDebugUnitTest</div><div class="line">app:javaPreCompileRelease</div><div class="line">app:javaPreCompileReleaseUnitTest</div><div class="line">app:mainApkListPersistenceDebug</div><div class="line">app:mainApkListPersistenceDebugAndroidTest</div><div class="line">app:mainApkListPersistenceRelease</div><div class="line">app:mergeDebugAndroidTestAssets</div><div class="line">app:mergeDebugAndroidTestJniLibFolders</div><div class="line">app:mergeDebugAndroidTestResources</div><div class="line">app:mergeDebugAndroidTestShaders</div><div class="line">app:mergeDebugAssets</div><div class="line">app:mergeDebugJniLibFolders</div><div class="line">app:mergeDebugResources</div><div class="line">app:mergeDebugShaders</div><div class="line">app:mergeReleaseAssets</div><div class="line">app:mergeReleaseJniLibFolders</div><div class="line">app:mergeReleaseResources</div><div class="line">app:mergeReleaseShaders</div><div class="line">app:packageDebug</div><div class="line">app:packageDebugAndroidTest</div><div class="line">app:packageRelease</div><div class="line">app:platformAttrExtractor</div><div class="line">app:preBuild</div><div class="line">app:preDebugAndroidTestBuild</div><div class="line">app:preDebugBuild</div><div class="line">app:preDebugUnitTestBuild</div><div class="line">app:prepareLintJar</div><div class="line">app:preparePUBLISHED_DEXDebugAndroidTestForPublishing</div><div class="line">app:preparePUBLISHED_DEXDebugForPublishing</div><div class="line">app:preparePUBLISHED_DEXReleaseForPublishing</div><div class="line">app:preparePUBLISHED_JAVA_RESDebugAndroidTestForPublishing</div><div class="line">app:preparePUBLISHED_JAVA_RESDebugForPublishing</div><div class="line">app:preparePUBLISHED_JAVA_RESReleaseForPublishing</div><div class="line">app:preparePUBLISHED_NATIVE_LIBSDebugAndroidTestForPublishing</div><div class="line">app:preparePUBLISHED_NATIVE_LIBSDebugForPublishing</div><div class="line">app:preparePUBLISHED_NATIVE_LIBSReleaseForPublishing</div><div class="line">app:preReleaseBuild</div><div class="line">app:preReleaseUnitTestBuild</div><div class="line">app:processDebugAndroidTestJavaRes</div><div class="line">app:processDebugAndroidTestManifest</div><div class="line">app:processDebugAndroidTestResources</div><div class="line">app:processDebugJavaRes</div><div class="line">app:processDebugManifest</div><div class="line">app:processDebugResources</div><div class="line">app:processDebugUnitTestJavaRes</div><div class="line">app:processReleaseJavaRes</div><div class="line">app:processReleaseManifest</div><div class="line">app:processReleaseResources</div><div class="line">app:processReleaseUnitTestJavaRes</div><div class="line">app:reportBuildArtifactsDebug</div><div class="line">app:reportBuildArtifactsRelease</div><div class="line">app:resolveConfigAttr</div><div class="line">app:splitsDiscoveryTaskDebug</div><div class="line">app:splitsDiscoveryTaskRelease</div><div class="line">app:transformClassesWithDexBuilderForDebug</div><div class="line">app:transformClassesWithDexBuilderForDebugAndroidTest</div><div class="line">app:transformClassesWithDexBuilderForRelease</div><div class="line">app:transformDexArchiveWithDexMergerForDebug</div><div class="line">app:transformDexArchiveWithDexMergerForDebugAndroidTest</div><div class="line">app:transformDexArchiveWithDexMergerForRelease</div><div class="line">app:transformDexArchiveWithExternalLibsDexMergerForDebug</div><div class="line">app:transformDexArchiveWithExternalLibsDexMergerForDebugAndroidTest</div><div class="line">app:transformDexArchiveWithExternalLibsDexMergerForRelease</div><div class="line">app:transformNativeLibsWithMergeJniLibsForDebug</div><div class="line">app:transformNativeLibsWithMergeJniLibsForDebugAndroidTest</div><div class="line">app:transformNativeLibsWithMergeJniLibsForRelease</div><div class="line">app:transformResourcesWithMergeJavaResForDebug</div><div class="line">app:transformResourcesWithMergeJavaResForDebugAndroidTest</div><div class="line">app:transformResourcesWithMergeJavaResForDebugUnitTest</div><div class="line">app:transformResourcesWithMergeJavaResForRelease</div><div class="line">app:transformResourcesWithMergeJavaResForReleaseUnitTest</div><div class="line">app:validateSigningDebug</div><div class="line">app:validateSigningDebugAndroidTest</div><div class="line">app:writeDebugApplicationId</div><div class="line">app:writeReleaseApplicationId</div></pre></td></tr></table></figure>
<ul>
<li>显示任务使用详情</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle help --task check</div></pre></td></tr></table></figure>
<p>结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt; Task :help</div><div class="line">Detailed task information for check // 详细任务信息</div><div class="line"></div><div class="line">Path // 路径</div><div class="line">     :app:check</div><div class="line"></div><div class="line">Type // 类型</div><div class="line">     Task (org.gradle.api.Task)</div><div class="line"></div><div class="line">Description // 描述</div><div class="line">     Runs all checks.</div><div class="line"></div><div class="line">Group // 组</div><div class="line">     verification</div></pre></td></tr></table></figure>
<ul>
<li><p>报告依赖关系</p>
</li>
<li><p>列出项目依赖关系</p>
</li>
</ul>
<blockquote>
<p>参考：<a href="https://docs.gradle.org/current/userguide/inspecting_dependencies.html" target="_blank" rel="external">https://docs.gradle.org/current/userguide/inspecting_dependencies.html</a></p>
</blockquote>
<p>运行gradle dependencies将为您提供所选项目的依赖关系列表，按配置细分。对于每个配置，该配置的直接和传递依赖关系都显示在树中。以下是此报告的一个示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle dependencies</div></pre></td></tr></table></figure>
<p>运行 <code>gradle buildEnvironment</code> 可视化所选项目的构建脚本依赖关系，类似于 <code>gradle dependencies</code> 可视化正在构建的软件的依赖关系。</p>
<ul>
<li>列出项目属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle properties</div></pre></td></tr></table></figure>
<ul>
<li>软件模型报告</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle model</div></pre></td></tr></table></figure>
<p>结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line">&gt; Task :model</div><div class="line"></div><div class="line">------------------------------------------------------------</div><div class="line">Root project</div><div class="line">------------------------------------------------------------</div><div class="line"></div><div class="line">+ tasks</div><div class="line">      | Type:           org.gradle.model.ModelMap&lt;org.gradle.api.Task&gt;</div><div class="line">      | Creator:        Project.&lt;init&gt;.tasks()</div><div class="line">    + buildEnvironment</div><div class="line">          | Type:       org.gradle.api.tasks.diagnostics.BuildEnvironmentReportTask</div><div class="line">          | Value:      task &apos;:buildEnvironment&apos;</div><div class="line">          | Creator:    tasks.addPlaceholderAction(buildEnvironment)</div><div class="line">          | Rules:</div><div class="line">             ⤷ copyToTaskContainer</div><div class="line">    + clean</div><div class="line">          | Type:       org.gradle.api.tasks.Delete</div><div class="line">          | Value:      task &apos;:clean&apos;</div><div class="line">          | Creator:    Project.&lt;init&gt;.tasks.clean()</div><div class="line">          | Rules:</div><div class="line">             ⤷ copyToTaskContainer</div><div class="line">    + components</div><div class="line">          | Type:       org.gradle.api.reporting.components.ComponentReport</div><div class="line">          | Value:      task &apos;:components&apos;</div><div class="line">          | Creator:    tasks.addPlaceholderAction(components)</div><div class="line">          | Rules:</div><div class="line">             ⤷ copyToTaskContainer</div><div class="line">    + dependencies</div><div class="line">          | Type:       org.gradle.api.tasks.diagnostics.DependencyReportTask</div><div class="line">          | Value:      task &apos;:dependencies&apos;</div><div class="line">          | Creator:    tasks.addPlaceholderAction(dependencies)</div><div class="line">          | Rules:</div><div class="line">             ⤷ copyToTaskContainer</div><div class="line">    + dependencyInsight</div><div class="line">          | Type:       org.gradle.api.tasks.diagnostics.DependencyInsightReportTask</div><div class="line">          | Value:      task &apos;:dependencyInsight&apos;</div><div class="line">          | Creator:    tasks.addPlaceholderAction(dependencyInsight)</div><div class="line">          | Rules:</div><div class="line">             ⤷ HelpTasksPlugin.Rules#addDefaultDependenciesReportConfiguration(DependencyInsightReportTask, ServiceRegistry)</div><div class="line">             ⤷ copyToTaskContainer</div><div class="line">    + dependentComponents</div><div class="line">          | Type:       org.gradle.api.reporting.dependents.DependentComponentsReport</div><div class="line">          | Value:      task &apos;:dependentComponents&apos;</div><div class="line">          | Creator:    tasks.addPlaceholderAction(dependentComponents)</div><div class="line">          | Rules:</div><div class="line">             ⤷ copyToTaskContainer</div><div class="line">    + help</div><div class="line">          | Type:       org.gradle.configuration.Help</div><div class="line">          | Value:      task &apos;:help&apos;</div><div class="line">          | Creator:    tasks.addPlaceholderAction(help)</div><div class="line">          | Rules:</div><div class="line">             ⤷ copyToTaskContainer</div><div class="line">    + init</div><div class="line">          | Type:       org.gradle.buildinit.tasks.InitBuild</div><div class="line">          | Value:      task &apos;:init&apos;</div><div class="line">          | Creator:    tasks.addPlaceholderAction(init)</div><div class="line">          | Rules:</div><div class="line">             ⤷ copyToTaskContainer</div><div class="line">    + model</div><div class="line">          | Type:       org.gradle.api.reporting.model.ModelReport</div><div class="line">          | Value:      task &apos;:model&apos;</div><div class="line">          | Creator:    tasks.addPlaceholderAction(model)</div><div class="line">          | Rules:</div><div class="line">             ⤷ copyToTaskContainer</div><div class="line">    + projects</div><div class="line">          | Type:       org.gradle.api.tasks.diagnostics.ProjectReportTask</div><div class="line">          | Value:      task &apos;:projects&apos;</div><div class="line">          | Creator:    tasks.addPlaceholderAction(projects)</div><div class="line">          | Rules:</div><div class="line">             ⤷ copyToTaskContainer</div><div class="line">    + properties</div><div class="line">          | Type:       org.gradle.api.tasks.diagnostics.PropertyReportTask</div><div class="line">          | Value:      task &apos;:properties&apos;</div><div class="line">          | Creator:    tasks.addPlaceholderAction(properties)</div><div class="line">          | Rules:</div><div class="line">             ⤷ copyToTaskContainer</div><div class="line">    + tasks</div><div class="line">          | Type:       org.gradle.api.tasks.diagnostics.TaskReportTask</div><div class="line">          | Value:      task &apos;:tasks&apos;</div><div class="line">          | Creator:    tasks.addPlaceholderAction(tasks)</div><div class="line">          | Rules:</div><div class="line">             ⤷ copyToTaskContainer</div><div class="line">    + wrapper</div><div class="line">          | Type:       org.gradle.api.tasks.wrapper.Wrapper</div><div class="line">          | Value:      task &apos;:wrapper&apos;</div><div class="line">          | Creator:    tasks.addPlaceholderAction(wrapper)</div><div class="line">          | Rules:</div><div class="line">             ⤷ copyToTaskContainer</div></pre></td></tr></table></figure>
<p>模型报告 - 模型元素的细节</p>
<table>
<thead>
<tr>
<th>详情</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>类型-Type</td>
<td>这是模型元素的基础类型，通常是完全限定的类名。</td>
</tr>
<tr>
<td>值-Value</td>
<td>当模型元素可以表示为字符串时，在报告中有条件地显示。</td>
</tr>
<tr>
<td>创造者-Creator</td>
<td>每个模型元素都有一个创建者。创建者表示模型元素的起源（即创建模型元素的原因）</td>
</tr>
<tr>
<td>规则-Rules</td>
<td>是规则的列表，不包括为给定模型元素执行的创建者规则。规则的显示顺序反映了它们的执行顺序</td>
</tr>
</tbody>
</table>
<h1 id="2-配置构建"><a href="#2-配置构建" class="headerlink" title="2. 配置构建"></a>2. 配置构建</h1><h2 id="2-1-applicationId（包名称）"><a href="#2-1-applicationId（包名称）" class="headerlink" title="2.1 applicationId（包名称）"></a>2.1 applicationId（包名称）</h2><p> 每个Android应用程序都有一个唯一的应用程序ID，看起来像一个Java包名称，比如com.example.myapp。<strong>此ID在设备和Google Play商店中唯一标识您的应用</strong>。如果想上传应用程序的<strong>新版本</strong>，则应用程序ID（以及您对其签名的证书）<strong>必须</strong>与<strong>原始APK相同</strong>，如果更改应用程序ID，则Google Play Store会将APK视为完全不同的应用程序应用程序。所以一旦你发布你的应用程序，你永远不应该改变应用程序ID。</p>
<p> 当在Android Studio中<strong>创建新项目时</strong>，<strong>applicationId与在安装过程中选择的Java风格包名称完全匹配</strong>。但是，除此之外，<strong>应用程序ID和软件包名称彼此独立</strong>。您可以更改代码的包名称（代码名称空间），它不会影响应用程序ID，反之亦然（但是，一旦发布应用程序，不应再更改您的应用程序ID）。</p>
<p> <strong>命名规则：</strong></p>
<ul>
<li>它必须至少有两个部分（一个或多个点）。</li>
<li>每个部分必须以字母开头。</li>
<li>所有字符必须是字母数字或下划线[a-zA-Z0-9_]。</li>
</ul>
<p><strong>注意：</strong>applicationId用于<strong>直接绑定到代码的包名称</strong>; 所以一些Android API在其方法名称和参数名称中使用术语“<strong>包名称</strong>”，但这实际上<strong>是applicationId</strong>。<br>例如，该Context.getPackageName()方法返回您的应用程序ID。没有必要在您的应用程序代码之外共享代码的真实包名。</p>
<h3 id="2-1-1-更改applicationId-“免费”和“专业版”"><a href="#2-1-1-更改applicationId-“免费”和“专业版”" class="headerlink" title="2.1.1 更改applicationId - “免费”和“专业版”"></a>2.1.1 更改applicationId - “免费”和“专业版”</h3><p>如果想创建不同版本的应用在Google Play商店中显示为<strong>单独列表</strong>，例如“<strong>免费</strong>”和“<strong>专业版</strong>”，则需要创建单独的构建变体，每个变体都具有不同的应用程序标识。</p>
<p>在这种情况下，应该将<strong>每个构建变体</strong>定义为<strong>独立的产品风格</strong>。对于productFlavors块内的每种风格，您可以<strong>重新定义该applicationId 属性</strong>，或者可以使用以下代码段将缺省应用程序ID附加到一个段中applicationIdSuffix，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId &quot;com.example.myapp&quot;</div><div class="line">    &#125;</div><div class="line">    productFlavors &#123;</div><div class="line">        free &#123;</div><div class="line">            applicationIdSuffix &quot;.free&quot;</div><div class="line">        &#125;</div><div class="line">        pro &#123;</div><div class="line">            applicationIdSuffix &quot;.pro&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，“免费”产品风格的应用程序ID是<code>com.example.myapp.free</code>。</p>
<p>您也可以使用<code>applicationIdSuffix</code>基于您的<strong>构建类型</strong>添加细分，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">    buildTypes &#123;</div><div class="line">        debug &#123;</div><div class="line">            applicationIdSuffix &quot;.debug&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为Gradle在<strong>产品风格</strong>之后<strong>应用</strong>了<strong>构建类型配置</strong>，所以“<strong>免费调试</strong>”构建变体的<code>applicationId</code>现在是“<strong>com.example.myapp.free.debug</strong>”。当希望将<strong>调试</strong>和<strong>发布版本</strong>构建在<strong>同一设备上时</strong>，这非常有用，因为没有两个APK可以具有相同的应用程序ID。</p>
<h3 id="2-1-2-更改软件包名称"><a href="#2-1-2-更改软件包名称" class="headerlink" title="2.1.2 更改软件包名称"></a>2.1.2 更改软件包名称</h3><p>尽管默认情况下<strong>项目的包名</strong>称与<strong>应用程序ID</strong>相匹配，但可以更改它。如果要更改软件包名称，请注意<strong>软件包名称（由项目目录结构定义）应始终与AndroidManifest.xml文件中的package属性匹配</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    package=&quot;com.example.myapp&quot;</div><div class="line">    android:versionCode=&quot;1&quot;</div><div class="line">    android:versionName=&quot;1.0&quot; &gt;</div></pre></td></tr></table></figure>
<p><strong>Android构建</strong>工具使用这个<strong>package属性</strong>来做两件事情：</p>
<ul>
<li><p>它将此名称<strong>用作</strong>应用程序生成的<strong>R.java类的名称空间</strong> 。<br>例子：通过上面的清单，R该类将会是<code>com.example.myapp.R</code>。</p>
</li>
<li><p>它使<strong>用它</strong>来解析清单文件中声明的<strong>任何相关类名称</strong>。<br>示例：通过上面的清单，声明为<code>&lt;activity android:name=&quot;.MainActivity&quot;&gt;</code>已解析为 的活动为<code>com.example.myapp.MainActivity</code>。</p>
</li>
</ul>
<h2 id="2-2-添加构建依赖项"><a href="#2-2-添加构建依赖项" class="headerlink" title="2.2 添加构建依赖项"></a>2.2 添加构建依赖项</h2><blockquote>
<p><a href="https://developer.android.com/studio/build/dependencies" target="_blank" rel="external">https://developer.android.com/studio/build/dependencies</a><br>DSL参考：<a href="http://google.github.io/android-gradle-dsl/current/" target="_blank" rel="external">http://google.github.io/android-gradle-dsl/current/</a></p>
</blockquote>
<h3 id="2-2-1-依赖类型"><a href="#2-2-1-依赖类型" class="headerlink" title="2.2.1 依赖类型"></a>2.2.1 依赖类型</h3><ul>
<li><strong>本地库模块依赖关系</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile project(&quot;:mylibrary&quot;)</div></pre></td></tr></table></figure>
<ul>
<li><strong>本地二进制依赖</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</div></pre></td></tr></table></figure>
<ul>
<li><strong>远程二进制依赖</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.example.android:app-magic:12.3&apos;</div></pre></td></tr></table></figure>
<h3 id="2-2-2-库依赖配置"><a href="#2-2-2-库依赖配置" class="headerlink" title="2.2.2 库依赖配置"></a>2.2.2 库依赖配置</h3><p>在dependencies块内部，可以使用几种不同的依赖配置之一来声明库依赖关系（如上compile所示）。每个依赖配置都提供了有关<strong>如何使用该库的Gradle不同指导</strong>。</p>
<ul>
<li><strong>compile</strong></li>
</ul>
<p>Gradle将该依赖项<strong>添加</strong>到<strong>编译类路径</strong>和<strong>APK中</strong>。</p>
<ul>
<li><strong>apk</strong></li>
</ul>
<p>Gradle只将相关性添加到APK（它不会被添加到编译类路径中）。</p>
<ul>
<li><strong>provided</strong></li>
</ul>
<p>Gradle<strong>仅将编译类路径</strong>添加到编译类路径中（<strong>它不会添加到APK中</strong>）。这在创建Android库模块时非常有用， 并且在编译期间需要依赖关系，但在运行时存在此选项是可选的。也就是说，如果你使用这个配置，那么你的库模块必须包含一个运行时条件来检查依赖关系是否可用，然后适当地改变它的行为，以便它在没有提供时仍然可以运行。这有助于减少最终APK的大小，因为不会添加不重要的临时依赖项。</p>
<p><strong>注意：</strong><br>以上配置适用于项目的<strong>主源集</strong>，该集<strong>适用于所有构建变体</strong>。如果您不想为特定的构建变体源集或 测试源集声明一个依赖项 ，则必须<strong>大写配置名称</strong>，并在其前面加上构建变体或测试源集的名称。</p>
<p>1)  要<strong>将compile依赖项仅添加到“免费”产品特征</strong>（使用远程二进制依赖项），它看起来像这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    freeCompile &apos;com.google.firebase:firebase-ads:9.8.0&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2) 如果要<strong>为组合产品风格</strong>和<strong>构建类型的变体</strong>添加依赖项，则必须在<strong>configurations块</strong>中初始化配置名称。以下示例将apk依赖项添加到“freeDebug”构建变体（使用本地二进制依赖项）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">configurations &#123;</div><div class="line">    // Initializes a placeholder for the freeDebugApk dependency configuration.</div><div class="line">    freeDebugApk &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    freeDebugApk fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3) 要compile为您的<strong>本地测试</strong>和<strong>仪器测试</strong>添加依赖项，它看起来像这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    // Adds a remote binary dependency only for local tests.</div><div class="line">    testCompile &apos;junit:junit:4.12&apos;</div><div class="line"></div><div class="line">    // Adds a remote binary dependency only for the instrumented test APK.</div><div class="line">    androidTestCompile &apos;com.android.support.test.espresso:espresso-core:3.0.2&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4) 如果你的<strong>lib模块</strong>提供了多种变体，你可以为不同的应用变体添加不同的lib变体，如下所示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">  // Adds the &apos;debug&apos; variant of the library to the debug variant of the app</div><div class="line">  debugCompile project(path: &apos;:my-library-module&apos;, configuration: &apos;debug&apos;)</div><div class="line"></div><div class="line">  // Adds the &apos;release&apos; variant of the library to the release variant of the app</div><div class="line">  releaseCompile project(path: &apos;:my-library-module&apos;, configuration: &apos;release&apos;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-2-3-远程存储库"><a href="#2-2-3-远程存储库" class="headerlink" title="2.2.3 远程存储库"></a>2.2.3 远程存储库</h3><p>当依赖项<strong>不是本地库</strong>或<strong>文件树</strong>时，Gradle会在文件<code>repositories块</code>中指定的任何联机存储库中查找这些 build.gradle文件。</p>
<p>默认情况下，新的<code>Android Studio</code>项目将<code>JCenter</code>声明为项目顶层build.gradle文件中的存储库位置，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果想从Maven中央存储库中获取某些内容，请添加 mavenCentral()或为本地存储库使用mavenLocal()：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">        mavenCentral()</div><div class="line">        mavenLocal()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者，可以按如下方式声明特定的Maven或Ivy存储库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        maven &#123;</div><div class="line">            url &quot;https://repo.example.com/maven2&quot;</div><div class="line">        &#125;</div><div class="line">        maven &#123;</div><div class="line">            url &quot;file://local/repo/&quot;</div><div class="line">        &#125;</div><div class="line">        ivy &#123;</div><div class="line">            url &quot;https://repo.example.com/ivy&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-2-4-Google的Maven存储库"><a href="#2-2-4-Google的Maven存储库" class="headerlink" title="2.2.4 Google的Maven存储库"></a>2.2.4 Google的Maven存储库</h3><p>Google的Maven存储库提供了以下Android库的最新版本</p>
<ul>
<li>Android Support Library</li>
<li>Architecture Components Library</li>
<li>Constraint Layout Library</li>
<li>Android Test</li>
<li>Databinding Library</li>
<li>Android Instant App Library</li>
<li>Wear OS</li>
<li>Google Play services</li>
<li>Firebase</li>
</ul>
<p>要将这些库中的一个添加到您的版本中，请在您的顶级build.gradle文件中包含Google的Maven存储库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        google()</div><div class="line"></div><div class="line">        // If you&apos;re using a version of Gradle lower than 4.1, you must instead use:</div><div class="line">        // maven &#123;</div><div class="line">        //     url &apos;https://maven.google.com&apos;</div><div class="line">        // &#125;</div><div class="line">        // An alternative URL is &apos;https://dl.google.com/dl/android/maven2/&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后将所需的库添加到您的模块的<code>dependencies块</code>。例如， <code>appcompat库</code> 看起来像这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile &apos;com.android.support:appcompat-v7:27.1.1&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-2-5-依赖顺序"><a href="#2-2-5-依赖顺序" class="headerlink" title="2.2.5 依赖顺序"></a>2.2.5 依赖顺序</h3><p>第一个库的优先级高于第二个，第二个的优先级高于第三个，依此类推。在<code>资源合并</code>或 <code>清单元素</code>从库中合并到您的应用中时，此顺序非常重要 。</p>
<p>例如，如果您的项目声明以下内容:</p>
<pre><code>Dependency on LIB_A and LIB_B (依次)
And LIB_A depends on LIB_C and LIB_D (依次)
And LIB_B also depends on LIB_C
</code></pre><p>然后，平面相关性顺序如下：</p>
<pre><code>LIB_A
LIB_D
LIB_B
LIB_C
</code></pre><h3 id="2-2-6-查看依赖关系树"><a href="#2-2-6-查看依赖关系树" class="headerlink" title="2.2.6 查看依赖关系树"></a>2.2.6 查看依赖关系树</h3><p>要运行该任务，请按以下步骤进行操作：</p>
<ul>
<li>选择视图&gt;工具窗口&gt; Gradle（或在工具窗口栏中单击 Gradle ）。</li>
<li>展开AppName &gt; Tasks&gt; android并双击androidDependencies。Gradle执行任务后，应打开“ 运行”窗口以显示输出。</li>
</ul>
<h3 id="2-3-加快构建速度"><a href="#2-3-加快构建速度" class="headerlink" title="2.3 加快构建速度"></a>2.3 加快构建速度</h3><ul>
<li><strong>为开发创建一个构建变体</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">  ...</div><div class="line">  defaultConfig &#123;...&#125;</div><div class="line">  buildTypes &#123;...&#125;</div><div class="line">  productFlavors &#123;</div><div class="line">    // 当构建使用此风格的变体时，以下配置将覆盖defaultConfig块中的配置。</div><div class="line">    dev &#123;</div><div class="line">      //为了避免在从命令行构建时使用传统的multidex</div><div class="line">      //将minSdkVersion设置为21或更高。当使用Android Studio 2.3或更高版本时，</div><div class="line">      //构建部署到运行API级别21或更高级别的设备时，会自动避免使用旧的multidex。</div><div class="line">      minSdkVersion 21</div><div class="line">      versionNameSuffix &quot;-dev&quot;</div><div class="line">      applicationIdSuffix &apos;.dev&apos;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    prod &#123;</div><div class="line">      //如果你已经为你的应用的发布版本配置了defaultConfig块，你可以将这个块留空，并且Gradle使用defaultConfig块中的配置。你仍然需要创造这种风格。否则，所有变体都使用“dev”风格配置。</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-4-收缩代码"><a href="#2-4-收缩代码" class="headerlink" title="2.4 收缩代码"></a>2.4 收缩代码</h3><p>要使用<code>ProGuard</code>缩小代码，<code>minifyEnabled true</code></p>
<p>请注意缩短代码会减慢构建时间，所以如果可能的话，应该避免在调试版本上使用它。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled true</div><div class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：</strong>使用<code>Instant Run</code>时，Android Studio会禁用<code>ProGuard</code>。</p>
<h3 id="2-5-APK分析器"><a href="#2-5-APK分析器" class="headerlink" title="2.5 APK分析器"></a>2.5 APK分析器</h3><h4 id="2-5-1-使用APK分析器，您可以完成以下任务："><a href="#2-5-1-使用APK分析器，您可以完成以下任务：" class="headerlink" title="2.5.1 使用APK分析器，您可以完成以下任务："></a>2.5.1 使用APK分析器，您可以完成以下任务：</h4><ul>
<li>查看APK中文件的绝对大小和相对大小，例如DEX和Android资源文件。</li>
<li>了解DEX文件的<strong>组成</strong>。</li>
<li>快速查看APK中文件的最终版本，例如 AndroidManifest.xml文件。</li>
<li>对两个APK进行并排比较。</li>
</ul>
<h4 id="2-5-2-打开项目时有三种方式可以访问APK分析器："><a href="#2-5-2-打开项目时有三种方式可以访问APK分析器：" class="headerlink" title="2.5.2 打开项目时有三种方式可以访问APK分析器："></a>2.5.2 打开项目时有三种方式可以访问APK分析器：</h4><ul>
<li>将APK拖到Android Studio 的编辑器窗口中。</li>
<li>切换到Project窗口中的Project透视图，然后双击默认目录中的APK 。build/output/apks/</li>
<li>在菜单栏中选择Build&gt; Analyze APK，然后选择您的APK。</li>
</ul>
<h3 id="2-3-Gradle-使用"><a href="#2-3-Gradle-使用" class="headerlink" title="2.3 Gradle 使用"></a>2.3 Gradle 使用</h3><p>参考：<a href="https://developer.android.com/studio/build/gradle-tips" target="_blank" rel="external">https://developer.android.com/studio/build/gradle-tips</a></p>
<h3 id="2-3-1-管理项目和来源"><a href="#2-3-1-管理项目和来源" class="headerlink" title="2.3.1 管理项目和来源"></a>2.3.1 管理项目和来源</h3><ul>
<li><strong>更改默认源集配置</strong></li>
</ul>
<p>可以使用<code>build.gradle</code> 文件中的<code>sourceSets块</code>来更改Gradle的每个组件收集文件的位置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">  ...</div><div class="line">  sourceSets &#123;</div><div class="line">    //封装主源集的配置。</div><div class="line">    main &#123;</div><div class="line">      //更改Java源代码的目录。默认目录是</div><div class="line">      // &apos;src/main/java&apos;.</div><div class="line">      java.srcDirs = [&apos;other/java&apos;]</div><div class="line"></div><div class="line">      //当你列出多个目录时，Gradle使用它们来收集。你应该避免指定一个目录，它是你指定的一个或多个其他目录的父目录。 </div><div class="line">      res.srcDirs = [&apos;other/res1&apos;, &apos;other/res2&apos;]</div><div class="line"></div><div class="line">      //对于每个源集，您只能指定一个Android清单。</div><div class="line">      //以下几点指出Gradle到这个源集的不同清单。</div><div class="line">      manifest.srcFile &apos;other/AndroidManifest.xml&apos;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //创建其他块来配置other源集。</div><div class="line">    androidTest &#123;</div><div class="line"></div><div class="line">      //如果源集的所有文件都位于单个根目录下，则可以使用setRoot属性指定该目录。</div><div class="line">      //为源集合收集源时，Gradle只会查找相对于您指定的根目录的位置。例如，在应用</div><div class="line">      //下面的androidTest源集合配置之后，Gradle会寻找</div><div class="line">      // Java sources only in the src/tests/java/ directory.</div><div class="line">      setRoot &apos;src/tests&apos;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-4-UI布局检测器"><a href="#2-4-UI布局检测器" class="headerlink" title="2.4 UI布局检测器"></a>2.4 UI布局检测器</h2><p>参考:<a href="https://developer.android.com/studio/debug/layout-inspector" target="_blank" rel="external">https://developer.android.com/studio/debug/layout-inspector</a></p>
<h2 id="2-5-闭包"><a href="#2-5-闭包" class="headerlink" title="2.5 闭包"></a>2.5 闭包</h2><h3 id="2-5-1-释义"><a href="#2-5-1-释义" class="headerlink" title="2.5.1 释义"></a>2.5.1 释义</h3><p><strong>闭包：</strong> 闭包就是能够读取其他函数<strong>内部变量</strong>的函数。例如在javascript中，只有函数内部的子函数才能读取局部变量，所以闭包可以理解成“<strong>定义在一个函数内部的函数</strong>“。</p>
<p>在本质上，闭包是将函数<strong>内部</strong>和函数<strong>外部</strong>连接起来的<strong>桥梁</strong>。</p>
<h3 id="2-5-2-Groovy使用"><a href="#2-5-2-Groovy使用" class="headerlink" title="2.5.2 Groovy使用"></a>2.5.2 Groovy使用</h3><p>闭包就是一个代码块。此时，代码块也就成了数据，可以被一个变量引用。Groovy使用闭包，以实现对外开放。</p>
<h1 id="3-构建Android应用程序"><a href="#3-构建Android应用程序" class="headerlink" title="3. 构建Android应用程序"></a>3. 构建Android应用程序</h1><p>书籍参考：<a href="https://gradle.org/books/?_ga=2.253182857.1868959174.1526976435-1140053192.1526976435" target="_blank" rel="external">https://gradle.org/books/?_ga=2.253182857.1868959174.1526976435-1140053192.1526976435</a></p>
<p>Android应用程序（俗称为 apps）使用Gradle作为构建工具，通常通过唯一受支持的IDE，Android Studio。许多资源可用于学习如何构建Android应用程序。然而，本指南着重于创建新的Android应用程序时生成的<strong>Gradle构建文件的细节</strong>，以及<strong>如何使用Gradle为其调用相关的构建任务</strong>。 </p>
<h2 id="3-1-生成文件列表"><a href="#3-1-生成文件列表" class="headerlink" title="3.1 生成文件列表"></a>3.1 生成文件列表</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/Project-View-Android.png" alt=""></p>
<ul>
<li><p>Android项目是Gradle多项目构建，包含一个<strong>顶层build.gradle文件</strong>和一个名为<strong>子目录app的build.gradle文件</strong>。</p>
<ul>
<li>顶层构建文件(Project: HelloWorldGradle)</li>
<li>app构建文件已(Module: app)附加（include ‘:app’）到 顶层构建文件。</li>
</ul>
</li>
<li><p>可能有两个文件被调用<strong>gradle.properties</strong>。</p>
<ul>
<li>一个是本地项目。</li>
<li>一个只有gradle.properties在.gradle主目录的子目录中有全局文件的同名文件才存在。</li>
</ul>
</li>
<li><p><strong>settings.gradle</strong>由Gradle用于配置多项目构建，应该由一行代码组成：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include &apos;:app&apos;</div></pre></td></tr></table></figure>
<p>这告诉Gradle该app子目录也是一个Gradle项目。</p>
<ul>
<li>最后一个文件被调用<strong>gradle-wrapper.properties</strong>，它配置了所谓的Gradle Wrapper。这使您可以构建Android项目，而无需首先安装Gradle。该文件的内容应该类似于：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">distributionBase=GRADLE_USER_HOME</div><div class="line">distributionPath=wrapper/dists</div><div class="line">zipStoreBase=GRADLE_USER_HOME</div><div class="line">zipStorePath=wrapper/dists</div><div class="line">distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip</div></pre></td></tr></table></figure>
<p>前四行表示当包装首次运行时，它将下载Gradle发行版并将其存储在主目录<code>.gradle/wrapper/dists</code>中的目录中。</p>
<p>最后一行显示了<code>distributionUrl</code> Gradle将下载指定分布的位置的值。</p>
<ul>
<li><strong>local.properties</strong></li>
</ul>
<p>配置构建系统的本地环境属性，例如SDK安装路径。由于此文件的内容是由Android Studio自动生成的，并且特定于本地开发人员环境，因此您不应该手动修改此文件或将其检入您的版本控制系统。</p>
<h2 id="3-2-查看-Project-中的-build-gradle文件"><a href="#3-2-查看-Project-中的-build-gradle文件" class="headerlink" title="3.2 查看 Project 中的 build.gradle文件"></a>3.2 查看 Project 中的 build.gradle文件</h2><p><strong>关键字：DSL元素</strong> <a href="http://google.github.io/android-gradle-dsl/current/" target="_blank" rel="external">http://google.github.io/android-gradle-dsl/current/</a><br>该项目build.gradle文件应该具有类似于以下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">// Top-level build file where you can add configuration options common to all sub-projects/modules.</div><div class="line"></div><div class="line">/ ** </div><div class="line"> * buildscript块是为Gradle本身配置存储库和依赖项的地方，也就是说，不应该在这里为模块包含依赖项。</div><div class="line"> * 例如，此块包含用于</div><div class="line"> * Gradle 的Android插件作为依赖项，因为它提供了Gradle 生成Android应用程序模块所需的附加指令。</div><div class="line"> * / </div><div class="line">buildscript &#123;  </div><div class="line">	/ **      </div><div class="line">	* repositories块配置Gradle用来 搜索或下载依赖项的存储库。</div><div class="line">	* Gradle预先配置对远程存储库的支持，如JCenter，Maven Central和Ivy。你也可以使用本地存储库或定义您自己的远程存储库。</div><div class="line">	* 下面的代码将JCenter 、google定义为Gradle应该用来查找其依赖项的存储库。</div><div class="line">    *使用Android Studio 3.0及更高版本</div><div class="line">创建的新项目还包括 Google的Maven存储库。</div><div class="line">    * /                </div><div class="line">    repositories &#123;</div><div class="line">        google()</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	/ **      </div><div class="line">	*依赖关系块配置Gradle需要使用来构建项目的依赖项。以下行将Gradle 版本3.0.1的Android插件添加为类路径依赖项。    </div><div class="line">	 * /</div><div class="line">    dependencies &#123;    </div><div class="line">        // 标识Android插件        </div><div class="line">        classpath &apos;com.android.tools.build:gradle:3.0.1&apos;</div><div class="line"></div><div class="line">        // NOTE: Do not place your application dependencies here; they belong</div><div class="line">        // in the individual module build.gradle files</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/ ** </div><div class="line">* allprojects块是您配置 项目中所有模块使用的存储库和依赖项的位置，例如第三方插件或lib。</div><div class="line">* 但是，您应该在 每个模块级别的build.gradle文件中配置模块特定的依赖项。</div><div class="line">* 对于新项目， 默认情况下，Android Studio 包含JCenter和Google的Maven存储库，但不会 配置任何依赖关系。</div><div class="line"></div><div class="line">* 对于包含多个模块的Android项目，在项目级别定义某些属性并在所有模块间共享它们可能会很有用。您可以通过向顶层文件中的块添加额外的属性来完成此操作。</div><div class="line">* 额外属性：https://docs.gradle.org/current/userguide/writing_build_scripts.html#sec:extra_properties</div><div class="line">* /</div><div class="line">allprojects &#123;                 </div><div class="line">    repositories &#123;</div><div class="line">        google()</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 特设任务</div><div class="line">task clean(type: Delete) &#123;    </div><div class="line">    delete rootProject.buildDir</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line">* 自定义任务</div><div class="line">* 注意：虽然Gradle允许您在模块级别定义项目范围的属性，但应该避免这样做，因为它会导致共享这些属性的模块被耦合。模块耦合使以后将模块作为独立项目导出变得更加困难</div><div class="line">*/</div><div class="line"></div><div class="line">ext &#123;</div><div class="line">    compileSdkVersion = 26</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在build.gradle(app)文件中使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">  // Use the following syntax to access properties you defined at the project level:</div><div class="line">  // rootProject.ext.property_name</div><div class="line">  compileSdkVersion rootProject.ext.compileSdkVersion</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-2-1-buildscript"><a href="#3-2-1-buildscript" class="headerlink" title="3.2.1 buildscript"></a>3.2.1 buildscript</h3><p>Gradle为构建文件定义了用于构建的特定于域的语言（DSL）。该buildscript标签是该DSL的一部分。它告诉Gradle，构建需要一个插件，它可能不是基线Gradle发行版的一部分，并告诉Gradle在哪里找到它。</p>
<p>在这种情况下，使用<strong>坐标语法</strong><code>group：name：version</code>指定所需的插件，其中<strong>组</strong>是<code>com.android.tools.build</code>，<strong>名称</strong>是<code>gradle</code>，<strong>版本</strong>是<code>3.0.1</code>。</p>
<p>当Gradle<strong>第一次</strong>构建这个项目时，插件将被下载并缓存，所以这个任务<strong>只执行一次</strong>。</p>
<h3 id="3-2-2-allprojects"><a href="#3-2-2-allprojects" class="headerlink" title="3.2.2 allprojects"></a>3.2.2 allprojects</h3><p>该<code>allprojects</code>标签保存适用于<strong>顶级项目</strong>及其<strong>包含的任何子项目</strong>的配置细节。<br>在这种情况下，该块指定任何所需的相关性都应当从google网站下载，或jcenter在公共<code>Bintray Artifactory</code>的仓库 <a href="https://jcenter.bintray.com。" target="_blank" rel="external">https://jcenter.bintray.com。</a></p>
<h3 id="3-2-3-task"><a href="#3-2-3-task" class="headerlink" title="3.2.3 task"></a>3.2.3 task</h3><p>最后，构建文件包含一个称为的<code>自定义</code>（或<code>临时</code>）任务clean。它使用内置的任务类型Delete，并对其进行配置，该clean任务将删除buildDir的rootProject。两者都是项目属性，其值默认build为此应用程序所在项目中的目录。</p>
<h2 id="3-3-查看-Module-中的-build-gradle-文件"><a href="#3-3-查看-Module-中的-build-gradle-文件" class="headerlink" title="3.3 查看 Module 中的 build.gradle 文件"></a>3.3 查看 Module 中的 build.gradle 文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">/ ** </div><div class="line"> * 构建配置中的第一行将Gradle 的Android插件应用于此构建，并使android块可用于指定Android特定的构建选项。</div><div class="line"> * /</div><div class="line">apply plugin: &apos;com.android.application&apos;</div><div class="line"></div><div class="line">/ **  </div><div class="line">* android块是您配置所有Android特定构建选项的地方。 </div><div class="line">* /</div><div class="line">android &#123;</div><div class="line">    compileSdkVersion 27</div><div class="line">    / **    </div><div class="line">    * defaultConfig块封装所有构建变体的默认设置和条目</div><div class="line">    * 并且可以从构建系统动态地覆盖main/AndroidManifest.xml 中的一些属性</div><div class="line">    * / </div><div class="line">    defaultConfig &#123;</div><div class="line">    	/ **      </div><div class="line">    	* 每个Android应用程序都有一个唯一的应用程序ID，applicationId </div><div class="line">    	* 此ID在设备和Google Play商店中唯一标识您的应用，你永远不应该改变应用程序ID。  </div><div class="line">    	* 应用程序ID 和 软件包名 彼此独立  </div><div class="line">    	* 但是，您的源代码仍应引用 main/ AndroidManifest.xml文件中的包属性定义的包名。</div><div class="line">	    */</div><div class="line">        applicationId &quot;com.esint.hellogradle&quot;</div><div class="line">        //定义运行应用程序所需的最低API级别。</div><div class="line">        minSdkVersion 19</div><div class="line">        //指定用于测试应用程序的API级别。</div><div class="line">        targetSdkVersion 27</div><div class="line">        //定义您的应用程序的版本号。</div><div class="line">        versionCode 1</div><div class="line">        //为应用定义一个用户友好的版本名称。</div><div class="line">        versionName &quot;1.0&quot;</div><div class="line">        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    / **    </div><div class="line">    * buildTypes块是您可以配置多个构建类型的位置。</div><div class="line">    * 默认情况下，构建系统定义两种构建类型：调试和发布。</div><div class="line">    * 调试版本类型没有在默认已经明确显示，但它包含调试工具，并用调试密钥签名。</div><div class="line">    * 构建类型应用Proguard设置，并且默认情况下未进行签名。   </div><div class="line">    */</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            //为发布构建类型启用代码缩小。</div><div class="line">            minifyEnabled false</div><div class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        / **    </div><div class="line">        * productFlavors块是您可以配置多个产品风格的地方。这允许您创建不同版本的应用程序，可以用自己的设置覆盖defaultConfig块。</div><div class="line">        * 产品风格是可选的，构建系统默认不会创建它们。这个例子：</div><div class="line">        * 创建一个免费和付费的产品风格。然后指定每种产品风格自己的应用程序ID，以便它们可以同时存在于Google Play商店或Android设备上。</div><div class="line">        * 如果您使用Android插件3.0.0或更高版本，则还需要声明并将每种风味分配到风味维度。</div><div class="line">        */</div><div class="line">        productFlavors &#123;</div><div class="line">		    free &#123;</div><div class="line">		      applicationId &apos;com.example.myapp.free&apos;</div><div class="line">		    &#125;</div><div class="line">		</div><div class="line">		    paid &#123;</div><div class="line">		      applicationId &apos;com.example.myapp.paid&apos;</div><div class="line">		    &#125;</div><div class="line">	     &#125;</div><div class="line">      / **    </div><div class="line">      * 分割块是您可以配置不同的APK构建的地方</div><div class="line">      * 每个仅包含支持屏幕密度或ABI的代码和资源。您还需要配置您的版本，以便每个APK具有不同的版本代码。</div><div class="line">      */ </div><div class="line">		splits &#123;</div><div class="line">		    //设置根据屏幕密度构建多个APK。</div><div class="line">		    density &#123;</div><div class="line">		</div><div class="line">		      //启用或禁用构建多个APK。</div><div class="line">		      enable false</div><div class="line">		</div><div class="line">		      //构建多个APK时排除这些密度。</div><div class="line">		      exclude &quot;ldpi&quot;, &quot;tvdpi&quot;, &quot;xxxhdpi&quot;, &quot;400dpi&quot;, &quot;560dpi&quot;</div><div class="line">		    &#125;</div><div class="line">		  &#125;</div><div class="line">   </div><div class="line">       </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    implementation fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</div><div class="line">    implementation &apos;com.android.support:appcompat-v7:27.1.1&apos;</div><div class="line">    implementation &apos;com.android.support.constraint:constraint-layout:1.1.0&apos;</div><div class="line">    testImplementation &apos;junit:junit:4.12&apos;</div><div class="line">    androidTestImplementation &apos;com.android.support.test:runner:1.0.2&apos;</div><div class="line">    androidTestImplementation &apos;com.android.support.test.espresso:espresso-core:3.0.2&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-3-1-plugin："><a href="#3-3-1-plugin：" class="headerlink" title="3.3.1 plugin："></a>3.3.1 plugin：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;com.android.application&apos;</div></pre></td></tr></table></figure>
<p>这个“applies”<strong>Android插件</strong>(plugin)（在顶层构建文件的buildscript部分中提到）到当前项目。<br>Gradle中的插件可以将自定义任务，新配置，依赖关系和其他功能添加到Gradle项目中。 在这种情况下，apply Android 插件会<strong>添加各种各样的任务</strong>，这些任务由接下来显示的android块配置。</p>
<h3 id="3-3-2-android配置块"><a href="#3-3-2-android配置块" class="headerlink" title="3.3.2 android配置块:"></a>3.3.2 android配置块:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion 27</div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId &quot;com.esint.hellogradle&quot;</div><div class="line">        minSdkVersion 19</div><div class="line">        targetSdkVersion 27</div><div class="line">        versionCode 1</div><div class="line">        versionName &quot;1.0&quot;</div><div class="line">        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled false</div><div class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这些属性与Gradle构建系统相比，与<strong>Android更为相关</strong>，因为它们只会在这里轻松审查。简而言之：</p>
<ul>
<li><p>它<code>compileSdkVersion</code>与<code>Android SDK</code>相关联，并应始终是最新的可用版本。</p>
</li>
<li><p>该<code>defaultConfig</code>部分<strong>包含</strong>应用程序的所有<strong>变体</strong>（构建类型和产品风格的组合）<strong>共享的属性</strong>。</p>
</li>
<li><p>这<code>applicationId</code>是基于创建应用时指定的<strong>域名</strong>和<strong>项目名称</strong>，并且<strong>在Google Play商店中必须是唯一的</strong>。</p>
</li>
<li><p>其<code>minSdkVersion值</code>是您愿意使用此应用支持的<strong>最低Android API</strong>，并且<code>targetSdkVersion</code>应该是<strong>最新的Android版本</strong>。</p>
</li>
<li><p><code>versionCode</code>在将新版本的应用上传到Google Play商店之前，其值应为<strong>递增的整数</strong>。这个值与<strong><code>applicationId</code></strong>一起告诉Google Play商店，这是一个现有应用程序的<strong>新版本</strong>，而<strong>不是一个新的应用程序</strong>。</p>
</li>
<li><p>该<code>versionName值</code>用于您自己的<strong>内部版本跟踪</strong>。</p>
</li>
<li><p>该<code>testInstrumentationRunner属性</code>被配置为使用为Android应用程序配置的<code>JUnit 4测试运行器</code>。</p>
</li>
<li><p>在这部分下面是一个叫做的块<strong><code>buildTypes</code></strong>。默认情况下，Android应用程序支持两种构建类型，<strong><code>debug</code></strong> 和 <strong><code>release</code></strong>。本部分允许您配置每个你喜欢的地方。该debug部分在此处未显示，意味着debug正在使用所有默认设置。</p>
</li>
</ul>
<h3 id="3-3-3-此应用的库的块"><a href="#3-3-3-此应用的库的块" class="headerlink" title="3.3.3 此应用的库的块"></a>3.3.3 此应用的库的块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    implementation fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</div><div class="line">    implementation &apos;com.android.support:appcompat-v7:27.1.1&apos;</div><div class="line">    implementation &apos;com.android.support.constraint:constraint-layout:1.1.0&apos;</div><div class="line">    testImplementation &apos;junit:junit:4.12&apos;</div><div class="line">    androidTestImplementation &apos;com.android.support.test:runner:1.0.2&apos;</div><div class="line">    androidTestImplementation &apos;com.android.support.test.espresso:espresso-core:3.0.2&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>配置</strong> <code>依赖关系</code>是构建Gradle应用程序的基础部分。在这种情况下，<code>dependencies</code>部分显示的值<code>implementation</code>，<code>testImplementation</code>和<code>androidTestImplementation</code>配置。</p>
<ul>
<li>最简单的一个，<strong><code>testImplementation</code></strong>依赖关系只包含最新的稳定JUnit 4发行版。JUnit类和测试注释将在编译时在<code>src/test/java</code>层次结构中可用。</li>
<li><p>有三条线添加了对<strong><code>implementation</code></strong> 配置的依赖关系：</p>
<ul>
<li><p>第一，<code>fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])</code>是一个 <strong>fileTree依赖项</strong>，它将文件libs夹中的所有jar文件添加到编译类路径中</p>
</li>
<li><p>第二，<code>com.android.support:appcompat-v7:26.1.0</code>将 <strong>Android兼容性库</strong> 添加到项目中。这使您可以在SDK版本7以前的任何Android应用程序中使用Material设计主题和其他功能。</p>
</li>
<li><p>第三，<code>com.android.support.constraint:constraint-layout:1.0.2</code>将Android约束布局添加到项目中。这使您可以在SDK版本9以前的任何Android应用程序中使用ConstraintLayout布局类。</p>
</li>
</ul>
</li>
<li><p><code>androidTestImplementation</code>依赖关系是指Espresso测试库，用于Android应用程序的集成测试。</p>
</li>
</ul>
<h2 id="3-4-运行标准的Gradle任务"><a href="#3-4-运行标准的Gradle任务" class="headerlink" title="3.4 运行标准的Gradle任务"></a>3.4 运行标准的Gradle任务</h2><p>Android Studio可以通过IDE轻松构建和部署应用程序的调试版本，但最终Gradle仍然参与其中。要查看此信息，请在Android Studio中打开终端窗口（或打开外部命令提示符并导航至您的应用的根目录）。从那里你可以运行build任务。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew build</div></pre></td></tr></table></figure>
<p>这将运行许多任务，并最终返回“构建成功”。要查看生成的APK（Android包，Android应用的可部署版本），请查看目录<code>app/build/outputs/apk</code>。在那里你会找到一个debug和一个release目录。该debug目录包含app-debug.apk将被部署到模拟器或连接设备的APK版本。如果您想部署发行版APK，则需要首先创建签名配置.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./gradlew：app：dependencies --configuration releaseCompileClasspath </div><div class="line"></div><div class="line">./gradlew：app：dependencyInsight --dependency support-annotations --configuration releaseCompileClasspath</div></pre></td></tr></table></figure>
<p><strong>注意：任何Gradle项目中都有 dependency 和 dependencyInsight 任务可用。它们可以帮助 追踪并解决与库版本冲突有关 的任何问题。</strong></p>
<h2 id="3-5-使用Gradle窗口"><a href="#3-5-使用Gradle窗口" class="headerlink" title="3.5 使用Gradle窗口"></a>3.5 使用Gradle窗口</h2><p>Android Studio包含一个执行Gradle任务的特殊窗口。Android项目提供超过80种不同的任务，并且此窗口尝试将它们组织到不同的类别中。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/Gradle-window-signingReport.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Gradle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[温故知新-数据结构-3]]></title>
      <url>/%E6%B8%A9%E6%95%85%E7%9F%A5%E6%96%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考：<a href="https://blog.csdn.net/zolalad/article/details/11848739" target="_blank" rel="external">https://blog.csdn.net/zolalad/article/details/11848739</a></p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<p>2018-05-16 09:10:48</p>
<p> 对于给定的算法，通常做2项分析：</p>
<ul>
<li>数学证明正确性</li>
<li><p>分析算法复杂度</p>
<p>度量一个程序的执行时间通常有2种方法：</p>
</li>
<li><p>事后统计分析：不建议。一是必须要先运行；二是计算机本身硬件环境易掩盖算法本身缺陷。</p>
</li>
<li><p>事前估算分析：建议。依据统计方法对算法进行估算。</p>
<p>一个用高级语言编写的程序在计算机上运行的时间取决于：<br>（1）算法采用的策略、方法<br>（2）编译产生的代码质量<br>（3）问题的输入规模<br>（4）机器执行指令的速度</p>
<p>一个算法是由<strong>控制结构（顺序、分支、循环3种）</strong>和<strong>原操作（固有数据类型的操作）</strong>构成的，算法的时间取决于两者的综合效果。<br>为了便于比较同一个问题的不同算法，通常的做法是：从算法中选取一种对于所研究的问题（活算法类型）来说是基本操作的原操作，以该基本操作的重复执行的次数作为算法的时间度量。</p>
</li>
</ul>
<h1 id="1-时间复杂度"><a href="#1-时间复杂度" class="headerlink" title="1.时间复杂度"></a>1.时间复杂度</h1><h2 id="（1）时间频度"><a href="#（1）时间频度" class="headerlink" title="（1）时间频度"></a>（1）时间频度</h2><p> 一个算法执行所耗费的时间。从理论上是不能算出来的，必须上机运行测试才能知道。但我们不可能也没有必要对每个算法都上机测试，只需知道哪个算法花费的时间多，哪个算法花费的时间少就可以了。并且一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间就多。<strong>一个算法中的语句执行次数称为语句频度或时间频度。记为T(n)。</strong></p>
<h2 id="（2）时间复杂度"><a href="#（2）时间复杂度" class="headerlink" title="（2）时间复杂度"></a>（2）时间复杂度</h2><p> 在时间频度中，<strong>n为问题的规模</strong>，<strong>当n不断变化时，时间频度T(n)也会不断变化</strong>。但有时我们想知道<strong>它变化时呈现什么规律</strong>。为此，我们引入时间复杂度概念。</p>
<p> 一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n)，使得当n趋近于无穷大时，<strong>T(n)/f(n)</strong>的极限值为不等于零的<strong>常数</strong>，则称f(n)是T(n)的同数量级函数。<strong>记作T(n)=Ｏ(f(n))</strong>,<strong>称Ｏ(f(n))</strong>为算法的<strong>渐进时间复杂度</strong>，简称时间复杂度。</p>
<p> 另外，上面公式中用到的 Landau符号其实是由德国数论学家保罗·巴赫曼（Paul Bachmann）在其1892年的著作《解析数论》首先引入，由另一位德国数论学家艾德蒙·朗道（Edmund Landau）推广。Landau符号的作用在于用简单的函数来描述复杂函数行为，给出一个上或下（确）界。在计算算法复杂度时一般只用到大O符号，<strong>Landau符号</strong>体系中的小o符号、Θ符号等等比较不常用。这里的O，最初是用大写希腊字母，但<strong>现在都用大写英语字母O</strong>；小o符号也是用小写英语字母o，Θ符号则维持大写希腊字母Θ。</p>
<p> <strong>T (n) = Ο(f (n))</strong> 表示存在一个<strong>常数C</strong>，使得在当n趋于正无穷时总有 <strong> $ T (n) ≤ C*f(n) $ </strong>。简单来说，就是T(n)在n趋于正无穷时最大也就跟f(n)差不多大。也就是说当n趋于正无穷时T (n)的上界是C <em> f(n)。其<strong>虽然对 $f(n)$没有规定，但是一般都是取尽可能简单的函数</strong>。例如，$ O(2n^2+n +1) = O (3n^2+n+3) = O (7n^2 + n) = O ( n2 ) $，一般都只用 $O(n^2) $表示就可以了。注意到*</em>大O符号里隐藏着一个常数C，所以 $ f(n)$ 里一般不加系数。如果把 $T(n)$当做一棵树，那么 $ O(f(n)) $ 所表达的就是树干，只关心其中的主干，其他的细枝末节全都抛弃不管。</p>
<p> 在各种不同算法中，若算法中语句执行<strong>次数为一个常数</strong>，则时间复杂度为<strong>O(1)</strong>,另外，在<strong>时间频度不相同时，时间复杂度有可能相同</strong>，如 $ T(n)=n^2+3n+4 $ 与 $ T(n)=4n^2+2n+1 $ 它们的频度不同，但时间复杂度相同，都为 $ O(n^2) $。 </p>
<h2 id="（3）按数量级递增排列，常见的时间复杂度有："><a href="#（3）按数量级递增排列，常见的时间复杂度有：" class="headerlink" title="（3）按数量级递增排列，常见的时间复杂度有："></a>（3）按数量级递增排列，常见的时间复杂度有：</h2><ul>
<li>常数阶：$O(1)$ 。表示基本语句的执行次数是一个常数，一般来说，只要算法中<strong>不存在循环语句</strong>，其时间复杂度就是Ο(1)。</li>
<li>对数阶：$O(log_2 n)$。 多项式时间</li>
<li>线性阶：$O(n)$。 多项式时间</li>
<li>线性对数阶：$O(nlog_2 n)$。 多项式时间</li>
<li>平方阶：$O(n^2)$。 多项式时间</li>
<li>立方阶：$O(n^3)$。 多项式时间</li>
<li>… </li>
<li>k次方阶：$O(n^k)$。 多项式时间</li>
<li>指数阶：$O(2^n)$。指数时间</li>
<li>$ Ο(n!) $。 指数时间</li>
</ul>
<p>随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低。</p>
<p> <strong>注意：</strong></p>
<ul>
<li><strong>多项式时间复杂度</strong>的算法<strong>是有效算法</strong>，把这类问题称为P（Polynomial,多项式）类问题；</li>
<li><strong>指数时间复杂度</strong>的算法称为NP（Non-Deterministic Polynomial, 非确定多项式）问题。</li>
</ul>
<p> <img src="http://oy991qm3u.bkt.clouddn.com/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.png" alt=""></p>
<p> 从图中可见，我们应该<strong>尽可能选用多项式阶O(nk)的算法，而不希望用指数阶的算法</strong>。</p>
<p>常见的算法时间复杂度由小到大依次为：</p>
<p>$$ Ο(1)＜Ο(log_2 n)＜Ο(n)＜Ο(nlog_2 n)＜Ο(n^2)＜Ο(n^3)＜…＜Ο(2^n)＜Ο(n!)$$</p>
<h2 id="（4）求解算法的时间复杂度的具体步骤是："><a href="#（4）求解算法的时间复杂度的具体步骤是：" class="headerlink" title="（4）求解算法的时间复杂度的具体步骤是："></a>（4）求解算法的时间复杂度的具体步骤是：</h2><ul>
<li><strong>找出</strong>算法中的<strong>基本语句</strong>：</li>
</ul>
<p>算法中<strong>执行次数最多</strong>的那条语句就是基本语句，通常是最内层循环的<strong>循环体</strong>。</p>
<ul>
<li><strong>计算</strong>基本语句的<strong>执行次数的数量级</strong>：</li>
</ul>
<p><strong>只需</strong>计算基本语句执行次数的数量级，这就意味着<strong>只要保证</strong>基本语句执行次数的函数中的<strong>最高次幂正确</strong>即可，可以<strong>忽略</strong>所有低次幂和最高次幂的系数。这样能够<strong>简化算法分析</strong>，并且使<strong>注意力集中在最重要的一点上：增长率</strong>。</p>
<ul>
<li>用大 $Ο$ 记号<strong>表示算法的时间性能</strong>：</li>
</ul>
<p>将基本语句执行次数的<strong>数量级放入大 $Ο$ 记号中</strong>。如果算法中包含<strong>嵌套的循环</strong>，则基本语句通常是<strong>最内层的循环体</strong>，如果算法中<strong>包含并列的循环</strong>，则将并列循环的时间<strong>复杂度相加</strong></p>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 第1个</div><div class="line">for (i = 1; i &lt;= n; i++)</div><div class="line">	x++;</div><div class="line">	</div><div class="line">// 第2个</div><div class="line">for ( i=1 ; i &lt;= n; i++)</div><div class="line">	for (j = 1; j &lt;= n; j++)</div><div class="line">		x++;</div></pre></td></tr></table></figure>
<p>时间复杂度解：</p>
<ul>
<li>第1个：$ O(n) $</li>
<li>第2个：$ O(n^2) $</li>
</ul>
<h2 id="（5）计算算法时间复杂度的几个简单的分析法则"><a href="#（5）计算算法时间复杂度的几个简单的分析法则" class="headerlink" title="（5）计算算法时间复杂度的几个简单的分析法则:"></a>（5）计算算法时间复杂度的几个简单的分析法则:</h2><ul>
<li><1> 对于一些<strong>简单的输入输出</strong>语句或赋值语句,近似认为需要<strong>$O(1)$</strong>时间</1></li>
<li><p><2> 对于<strong>顺序结构</strong>，需要<strong>依次执行</strong>一系列语句所用的时间可采用 $大O$ 下”<strong>求和法则</strong>“</2></p>
<p><strong>求和法则：</strong></p>
<ul>
<li>同<strong>n</strong>时，是指若算法的2个部分时间复杂度分别为 $T1(n)=O(f(n))$ 和 $T2(n)=O(g(n))$ ,则 $T1(n)+T2(n)=O(max(f(n), g(n)))$。</li>
<li>不同<strong>n</strong>时，特别地，若 $T1(m)=O(f(m)), T2(n)=O(g(n))$，则 $T1(m)+T2(n)=O(f(m) + g(n))$</li>
</ul>
</li>
<li><p><3> 对于<strong>选择结构</strong>，如if语句,它的主要时间耗费是在执行then字句或else字句所用的时间,需注意的是<strong>检验条件也需要 $O(1)$ 时间</strong>。</3></p>
</li>
<li><p><4> 对于<strong>循环结构</strong>，循环语句的运行时间主要体现在<strong>多次迭代</strong>中执行循环体以及<strong>检验循环条件</strong>的时间耗费,一般可用 <strong>$大O$</strong> 下”<strong>乘法法则</strong>“</4></p>
<p> <strong>乘法法则</strong>: 是指若算法的2个部分时间复杂度分别为 $T1(n)=O(f(n))$ 和 $T2(n)=O(g(n))$，则 $ T1<em>T2=O(f(n)</em>g(n)) $</p>
</li>
<li><p><5> 对于复杂的算法,可以将它<strong>拆分</strong>成几个容易估算的部分,然后利用<strong>求和法则</strong>和<strong>乘法法则</strong>技术整个算法的时间复杂度</5></p>
<p>另外还有以下2个运算法则:(1) 若 $g(n)=O(f(n))$ ，则 $O(f(n))+ O(g(n))= O(f(n))$；(2) $O(Cf(n)) = O(f(n))$，其中C是一个正常数</p>
</li>
</ul>
<h1 id="2-空间复杂度"><a href="#2-空间复杂度" class="headerlink" title="2.空间复杂度"></a>2.空间复杂度</h1>]]></content>
      
        <categories>
            
            <category> 温故知新 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 温故知新 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于Octave工具]]></title>
      <url>/%E5%85%B3%E4%BA%8EOctave%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<p>科学计算工具</p>
<a id="more"></a>
<p>官网：<a href="https://www.gnu.org/software/octave/" target="_blank" rel="external">https://www.gnu.org/software/octave/</a></p>
<p>[TOC]</p>
<h2 id="释义"><a href="#释义" class="headerlink" title="释义"></a>释义</h2><p>Octave是一种解释类的编程语言，并且是GNU项目下的开源软件，与之相对是大家都非常熟悉的matlab。</p>
<p>Octave和matlab语法基本上一致，都是用来快速做一些强大的矩阵运算来使用的，最大的不同是Octave是完全免费的，并且是开源的，但是matlab是商业软件，并且价格非常昂贵。</p>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>Octave正是因为矩阵运算的优势，可以把很多复杂的需要迭代的计算转化为矩阵或者向量来计算，这种转化往往可以将几十行代码精简为几行代码就能完成，并且内置的数值分析库的性能也比一般自己写要高。</p>
<p>一般在数据分析，机器学习中可以先使用Octave快速做好模型，然后投入生产可以使用Python，Java或者C/C++来实现，并且各种语言都有对应的矩阵运算库，这个也不用自己去编写代码，所以使用Octave可以专注与模型与数据分析本身，而不用考虑过多关于计算的东西，所以这样效率才非常高</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install Octave</div></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>参考：<a href="https://www.cnblogs.com/leezx/p/5635056.html" target="_blank" rel="external">https://www.cnblogs.com/leezx/p/5635056.html</a></p>
]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于TensorFlow]]></title>
      <url>/%E5%85%B3%E4%BA%8ETensorFlow/</url>
      <content type="html"><![CDATA[<p>TensorFlow入门，2018年五一节。</p>
<a id="more"></a>
<p>[TOC]</p>
<ul>
<li><p><strong>时代发展的综合产物：大数据 + 云计算 = 人工智能</strong></p>
</li>
<li><p><strong>Android ？ TensorFlow ？ Google？</strong></p>
</li>
<li><p><strong>TensorFlow 是一个用于人工智能的开源神器</strong></p>
</li>
</ul>
<p>作为一个Android开发者，其实在人工智能火爆的开始也想着自己怎么能加入到开发的大军中。可是自己却迟迟没有下手，这其中是有很多原因的：如何入手？从哪个方面？哪个领域？哪个方向？以及入手后如何开始，如何使这项学习长期继续下去？有哪些已有成果能作为参考？</p>
<p>当然最重要的一点：如何与自己目前所做的Android开发联系起来，因为一旦建立联系后，在自己熟悉的领域作为起步，可能得到的成就感和实际效果会好的多。</p>
<p>在去年就看到了关于<strong>TensorFlow</strong>的消息，当时就对其有了印象。以至于每每想到“人工智能”、“深度学习”这个词汇总是想到他。</p>
<p>更重要的一点：<strong>Android</strong>与<strong>TensorFlow</strong>都是<strong>Google</strong>的产品，同出一门。</p>
<h1 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h1><h2 id="1-深度学习"><a href="#1-深度学习" class="headerlink" title="1. 深度学习"></a>1. 深度学习</h2><p>深度学习是什么？它能够为我们做什么？如何把这个技术应用到实际场景当中去？</p>
<p>深度学习并不是一个突然出现的技术领域，它的核心算法就是<strong>神经网络</strong>。神经网络是<strong>一种机器学习的模型</strong>，这个模型主要特点就是，它可以拟合任何数学上的函数，特别是利用大数据反复迭代的一种类似方法来训练好这个模型。</p>
<p>这个以神经网络模型为核心的深度学习技术，在很多应用领域都可以大大提高过去软件系统需要完成的任务。最经典的应用领域大家肯定很熟悉，就是图像识别。自2012年以来，在这个领域，自动图像识别的错误率从20%一直持续下降到4%左右，已经超过了一个普通人分辨图像的能力。</p>
<h2 id="2-TensorFlow"><a href="#2-TensorFlow" class="headerlink" title="2. TensorFlow"></a>2. TensorFlow</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-29%2016.36.56.png" alt=""></p>
<p>Google在2015年10月开源了TensorFlow。</p>
<h3 id="2-1-关于TensorFlow"><a href="#2-1-关于TensorFlow" class="headerlink" title="2.1 关于TensorFlow"></a>2.1 关于TensorFlow</h3><p>TensorFlow™ 是一个采用<strong>数据流图</strong>（data flow graphs），<strong>用于数值计算的开源软件库</strong>。节点（Nodes）在图中表示数学操作，图中的线（edges）则表示在节点间相互联系的多维数据数组，即张量（tensor）。它灵活的架构让你可以在多种平台上展开计算，例如台式计算机中的一个或多个CPU（或GPU），服务器，移动设备等等。<br>TensorFlow 最初由Google大脑小组（隶属于Google机器智能研究机构）的研究员和工程师们开发出来，用于机器学习和深度神经网络方面的研究，但这个系统的通用性使其也可广泛用于其他计算领域。</p>
<h3 id="2-2-什么是数据流图（Data-Flow-Graph）"><a href="#2-2-什么是数据流图（Data-Flow-Graph）" class="headerlink" title="2.2 什么是数据流图（Data Flow Graph）?"></a>2.2 什么是数据流图（Data Flow Graph）?</h3><p><img src="http://oy991qm3u.bkt.clouddn.com/tensors_flowing.gif" alt=""></p>
<p>数据流图用“<strong>结点</strong>”（nodes）和“<strong>线</strong>”(edges)的<strong>有向图</strong>来<strong>描述数学计算</strong>。<br>“节点” 一般用来表示施加的<strong>数学操作</strong>，但也可以表示数据输入（feed in）的起点/输出（push out）的终点，或者是读取/写入持久变量（persistent variable）的终点。“线”表示“节点”之间的<strong>输入/输出关系</strong>。这些数据“线”可以<strong>输运</strong>“<strong>size可动态调整”的多维数据数组，即“张量”（tensor）</strong>。<br>张量从图中流过的直观图像是这个工具取名为“Tensorflow”的原因。<br>一旦输入端的所有张量准备好，节点将被分配到各种计算设备完成异步并行地执行运算。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(Tensor)张量：size可动态调整的多维数据数组</div></pre></td></tr></table></figure>
<p>TensorFlow可被用于语音识别或图像识别等多项机器学习和深度学习领域，对2011年开发的深度学习基础架构DistBelief进行了各方面的改进，它可在小到一部智能手机、大到数千台数据中心服务器的各种设备上运行。</p>
<h3 id="2-3-TensorFlow的特征"><a href="#2-3-TensorFlow的特征" class="headerlink" title="2.3 TensorFlow的特征"></a>2.3 TensorFlow的特征</h3><ul>
<li><strong>高度的灵活性</strong></li>
</ul>
<p>TensorFlow 不是一个严格的“神经网络”库。<strong>只要你可以将你的计算表示为一个数据流图，你就可以使用Tensorflow</strong>。<br>你来构建图，描写驱动计算的内部循环。我们提供了有用的工具来帮助你组装“子图”（常用于神经网络），当然用户也可以自己在Tensorflow基础上写自己的“上层库”。定义顺手好用的新复合操作和写一个python函数一样容易，而且也不用担心性能损耗。当然万一你发现找不到想要的底层数据操作，你也可以自己写一点c++代码来丰富底层的操作。</p>
<ul>
<li><strong>真正的可移植性（Portability）</strong></li>
</ul>
<p>Tensorflow 在CPU和GPU上运行，比如说可以运行在台式机、服务器、手机移动设备等等。<br>想要在没有特殊硬件的前提下，在你的笔记本上跑一下机器学习的新想法？Tensorflow可以办到这点。<br>准备将你的训练模型在多个CPU上规模化运算，又不想修改代码？Tensorflow可以办到这点。<br>想要将你的训练好的模型作为产品的一部分用到手机app里？Tensorflow可以办到这点。<br>你改变主意了，想要将你的模型作为云端服务运行在自己的服务器上，或者运行在Docker容器里？Tensorfow也能办到。</p>
<ul>
<li><strong>将科研和产品联系在一起</strong></li>
</ul>
<p>过去如果要将科研中的机器学习想法用到产品中，需要大量的代码重写工作。那样的日子一去不复返了！在Google，科学家用Tensorflow尝试新的算法，产品团队则用Tensorflow来训练和使用计算模型，并直接提供给在线用户。使用Tensorflow可以让应用型研究者将想法迅速运用到产品中，也可以让学术性研究者更直接地彼此分享代码，从而提高科研产出率。</p>
<ul>
<li><strong>自动求微分</strong></li>
</ul>
<p><strong>基于梯度的机器学习算法</strong>会受益于Tensorflow自动求微分的能力。<br>作为Tensorflow用户，你只需要定义预测模型的结构，将这个结构和目标函数（objective function）结合在一起，并添加数据，Tensorflow将自动为你计算相关的微分导数。计算某个变量相对于其他变量的导数仅仅是通过扩展你的图来完成的，所以你能一直清楚看到究竟在发生什么。</p>
<ul>
<li><strong>多语言支持</strong></li>
</ul>
<p>Tensorflow 有一个合理的c++使用界面，也有一个易用的python使用界面来构建和执行你的graphs。<br>你可以直接写python/c++程序，也可以用交互式的ipython界面来用Tensorflow尝试些想法，它可以帮你将笔记、代码、可视化等有条理地归置好。当然这仅仅是个起点——我们希望能鼓励你创造自己最喜欢的语言界面，比如Go，Java，Lua，Javascript，或者是R。</p>
<ul>
<li><strong>性能最优化</strong></li>
</ul>
<p>比如说你又一个32个CPU内核、4个GPU显卡的工作站，想要将你工作站的计算潜能全发挥出来？由于Tensorflow 给予了线程、队列、异步操作等以最佳的支持，Tensorflow 让你可以将你手边硬件的计算潜能全部发挥出来。你可以自由地将Tensorflow图中的计算元素分配到不同设备上，Tensorflow可以帮你管理好这些不同副本。</p>
<h3 id="2-4-持多种硬件的平台"><a href="#2-4-持多种硬件的平台" class="headerlink" title="2.4 持多种硬件的平台"></a>2.4 持多种硬件的平台</h3><p>TensorFlow现在已经演化成一个相当完整的深度学习软件开放平台。它支持CPU、GPU混合搭建的数据中心的训练平台，它也支持将数据中心训练好的模型，相对便捷地部署到不同的移动端应用上，可以支持类似Google自主研发的TPU处理器。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/48f6445af6a94bcc81ae0ef8283c44df.jpeg" alt=""></p>
<h3 id="2-5-支持多种开发环境"><a href="#2-5-支持多种开发环境" class="headerlink" title="2.5 支持多种开发环境"></a>2.5 支持多种开发环境</h3><p>支持多种硬件的平台是基础，TensorFlow一直以来的一个目标，就是能够帮助<strong>尽量多的开发者</strong>，能够把深度学习的技术利用起来，最终使得广大的用户从中能力得到益处，基于这个想法，TensorFlow一直很重视<strong>多种程序员开发环境的支持</strong>。比如说，开发者可以在<strong>主要的开发环境</strong>中使用TensorFlow。</p>
<p>TensorFlow在Google内部的应用推广是非常全面和彻底的，比如说TensorFlow很早就帮助Google的核心业务（搜索和广告），实施了深度学习的模型，并且在核心业务上体现了他们的性能。</p>
<p>在垃圾邮件过滤中，我们也使用了TensorFlow训练的模型，同时在安卓的应用程序推荐上，也上线了TensorFlow的模型等等。很多TensorFlow应用都是发生后台，大多数用户可能没有直接的体验。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/375be0a54ceb4eaca7a665fba1aa545c.jpeg" alt=""></p>
<h3 id="2-6-深入移动端"><a href="#2-6-深入移动端" class="headerlink" title="2.6 深入移动端"></a>2.6 深入移动端</h3><ul>
<li><strong>安卓手机自拍功能</strong></li>
</ul>
<p>安卓手机最近的版本当中增加了一个自拍功能，这个自拍功能就是通过应用深度学习训练出来的视觉模型，可以非常准确地分离前景像素和后景像素，对前景像素和后景像素分别处理，这样就可以实现背景虚化。<br>实现这种功能，传统上手机厂商需要增加第二个摄像头，这就会增加手机的成本，同时现有的手机就不太容易获得这样的效果，通过新的算法，我们可以实现一些过去可能非常昂贵才能实现的效果。</p>
<ul>
<li><strong>智能音箱</strong></li>
</ul>
<p>和图像处理一样，语音处理是另一个被深度学习深刻改变的领域，语音识别要比图像处理更早地采用神经网络。<br>产品方面，这些年智能音箱语音主力大行其道，其中一个很大的原因就是<strong>深度学习算法</strong>把语音识别和语音生成的技术门槛大大地降低了，<strong>过去可能需要20—50个博士的团队才能完成的任务，现在下载一个现有模型定制一下，就可以达到同样的效果。</strong>通用的机器学习框架，可以帮助到更多的开发人员，开发出适合特定应用场景的语音应用。</p>
<ul>
<li><strong>机器翻译</strong></li>
</ul>
<p>现在你可以用手机拍一张照片，手机软件可以自动的识别出图形中的文字，把文字翻译成另外一种语言，看似简单的应用，其实是图像技术和机器翻译技术很自然的结合。</p>
<ul>
<li><strong>邮件自动回复功能</strong></li>
</ul>
<p>比如说你今天早上收到一份你朋友发的邮件，“晚上是不是要到哪里吃饭”，大多数情况只有三种可能的回答：我会准时到；对不起我没有空不能来；我有空，但是我可能需要晚一点到。</p>
<p>我们现在邮箱会自动地给你提供三个选择，这样的话在路上看到邮箱，只要一键就可以完成邮件回复，极大方便了用户在手机上处理邮件的效率。</p>
<h3 id="2-7-其他领域"><a href="#2-7-其他领域" class="headerlink" title="2.7 其他领域"></a>2.7 其他领域</h3><ul>
<li><strong>AlphaGo</strong></li>
</ul>
<p>过去两年努力推进AlphaGo的工作，这就得益于TensorFlow框架本身的帮助，因为TensorFlow可以利用超大计算机集群，支持最新的加速器，AlphaGo团队可以更加专注于算法的研究。</p>
<ul>
<li><strong>智能医疗</strong></li>
</ul>
<p>由于TensorFlow是一个<strong>通用的框架</strong>，他们可以很方便地<strong>重用现在已有的</strong>图像识别模型或者是自然语言处理的<strong>模型</strong>，针对特定的应用领域和数据，重新训练微调一下模型，就可以在检测视网膜病变任务上面获得超过95%的准确率，这个准确率已经超过了普通眼科专家91%的水平。</p>
<ul>
<li><strong>自动驾驶</strong></li>
</ul>
<p>在自动驾驶方面，也在利用TensorFlow不断改进自动驾驶系统当中的深度模型，包括对路况场景的分割、雷达信号的处理等等。</p>
<ul>
<li><strong>婴儿食品制作</strong></li>
</ul>
<p>过去两年我们看到<strong>很多和互联网毫无相关的行业，也开始尝试利用深度学习的技术和方法</strong>，比如说这家公司是一个婴儿食品制作的公司，引进了TensorFlow训练好的智能系统，这个智能系统可以把婴儿食品的原料进行分类，把一些烂掉的苹果和香蕉更准确地排除出去，这样可以准确地控制婴儿食品的质量。</p>
<ul>
<li><strong>科学研究——太空</strong></li>
</ul>
<p>TensorFlow在计算机科学以外的科学研究上也得到了使用，比如说上个月美国航天总署宣布一项研究成果，美国航天总署有个开普勒计划，他们的科学家和我们的同事联合开发了一个TensorFlow的模型。</p>
<ul>
<li><strong>科学研究——海洋</strong></li>
</ul>
<p>人们不仅仰望星空，同时我们在回望我们的地球，在这个应用的例子里面，澳大利亚的科学家用TensorFlow开发的图像识别模型，在数万张海洋航拍图照片中，快速并且准确地找到需要保护的大型海洋哺乳类动物，比如说珍惜动物海牛。</p>
<h2 id="3-TensorFlow在中国"><a href="#3-TensorFlow在中国" class="headerlink" title="3. TensorFlow在中国"></a>3. TensorFlow在中国</h2><ul>
<li><strong>TensorFlow的中文网站</strong>：<a href="http://www.tensorfly.cn/" target="_blank" rel="external">http://www.tensorfly.cn/</a></li>
<li><p><strong>公司</strong>：</p>
<ul>
<li>京东内部搭建了TensorFlow训练平台，用于开发图像、自然语言相关的模型，并且把他们用到客服广告等领域。</li>
<li>小米也在尝试类似的技术路线，支持他们生态线上各种特殊的应用。</li>
<li>网易的有道笔记、网易翻译君也使用了TensorFlow视觉和语言的模型。</li>
</ul>
</li>
<li><p><strong>Eager模式</strong></p>
</li>
</ul>
<p>一个TensorFlow模式，这个模式能够更加有利于前端的开发，便于调试，支持更多动态的编程模式。</p>
<ul>
<li><strong>Lite模式</strong></li>
</ul>
<p><strong>TensorFlow Lite</strong>模式，这个模式是专门针对<strong>移动</strong>和<strong>嵌入式应用场景</strong>打造的机器学习平台，它的目标是希望<strong>把在云端训练的机器学习模型，更加简单、高效的迁移到移动端上进行部署</strong>。</p>
<ul>
<li><strong>第二代TPU</strong></li>
</ul>
<h1 id="二、-配置"><a href="#二、-配置" class="headerlink" title="二、 配置"></a>二、 配置</h1><h2 id="1-python版本"><a href="#1-python版本" class="headerlink" title="1. python版本"></a>1. python版本</h2><p>在 <code>终端</code> 环境中，直接输入 <code>python3</code> 即可将python的解释环境切换至python3。</p>
<h2 id="2-安装-TensorFlow-CPU版，环境-macOS、Python3"><a href="#2-安装-TensorFlow-CPU版，环境-macOS、Python3" class="headerlink" title="2. 安装 TensorFlow CPU版，环境 macOS、Python3"></a>2. 安装 TensorFlow CPU版，环境 macOS、Python3</h2><p>使用<strong>virtualenv</strong>安装</p>
<ul>
<li><strong>2.1  安装pip</strong>,若已经安装 <code>pip</code> ,忽略此步骤；</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo easy_install pip</div></pre></td></tr></table></figure>
<p>检查 <code>pip</code> 更新</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install --upgrade pip</div></pre></td></tr></table></figure>
<ul>
<li><strong>2.2 安装 virtualenv</strong>，</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install --upgrade virtualenv</div></pre></td></tr></table></figure>
<p>或者，指定python3编译环境。关于 <strong>Python 3 virtualenv问题</strong>可参考：<a href="https://stackoverflow.com/questions/28923926/python-3-virtualenv-problems" target="_blank" rel="external">https://stackoverflow.com/questions/28923926/python-3-virtualenv-problems</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip3 install virtualenv</div></pre></td></tr></table></figure>
<ul>
<li><strong>2.3 创建虚拟环境</strong>，此处为<code>python3</code>环境，<code>TensorFlowDir</code> 为 自己定义的目录文件名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">virtualenv --system-site-packages -p python3 TensorFlowDir # for Python 3.n</div></pre></td></tr></table></figure>
<ul>
<li><strong>2.4 激活虚拟环境</strong>，如果你的终端运行的是<code>bash, sh, ksh, or zsh</code>，注意，此处<code>TensorFlowDir</code>为上一条命令中的自定义目录文件名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/TensorFlowDir/bin/activate</div></pre></td></tr></table></figure>
<p>如果是：<code>csh or tcsh</code>，执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/TensorFlowDir/bin/activate.csh</div></pre></td></tr></table></figure>
<ul>
<li><strong>2.5 安装 TensorFlow 及其所有依赖</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip3 install --upgrade tensorflow</div></pre></td></tr></table></figure>
<ul>
<li><strong>2.6 激活虚拟环境</strong>，其中<code>TensorFlowDir</code> 表示创建环境时自定义的 目录文件名</li>
</ul>
<p><strong>注意：每打开一个新的 shell 使用 TensorFlow 都必须激活虚拟环境。如果当前虚拟环境没有被激活（也就是提示符不是 TensorFlowDir），执行以下任一命令</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ source ~/TensorFlowDir/bin/activate       # bash, sh, ksh, or zsh</div><div class="line">$ source ~/TensorFlowDir/bin/activate.csh  # csh or tcsh</div></pre></td></tr></table></figure>
<p>提示符变成下面这样说明 TensorFlow 环境已经激活：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(TensorFlowDirDir) YannisCheng:~ yannischeng$</div></pre></td></tr></table></figure>
<ul>
<li><strong>2.7 退出虚拟环境</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(TensorFlowDirDir) YannisCheng:~ yannischeng$ deactivate</div></pre></td></tr></table></figure>
<ul>
<li><strong>2.8 卸载TensorFlow 环境</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -r ~/tensorflow</div></pre></td></tr></table></figure>
<ul>
<li><strong>2.9 删除 virtualenv环境</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -r virtualenv venv</div></pre></td></tr></table></figure>
<h3 id="3-配置TensorFlow与PyCharm"><a href="#3-配置TensorFlow与PyCharm" class="headerlink" title="3. 配置TensorFlow与PyCharm"></a>3. 配置TensorFlow与PyCharm</h3><h4 id="3-1-选择路径"><a href="#3-1-选择路径" class="headerlink" title="3.1 选择路径"></a>3.1 选择路径</h4><p><strong>查看安装了tensorflow的python3.6在本地的位置，如果知道知道安装位置，可忽略</strong></p>
<p>进入 <code>python3</code> -&gt; <code>tensorflow</code> 环境后，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tf.__path__</div></pre></td></tr></table></figure>
<p>输出位置：[‘/Users/yannischeng/TensorFlowDir/lib/python3.6/site-packages/tensorflow’]</p>
<p><strong>直接通过 preference 进行选择：</strong></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-29%2023.44.04.png" alt=""></p>
<h4 id="3-2-在-pycharm-中创建新项目，选择刚刚配置的路径"><a href="#3-2-在-pycharm-中创建新项目，选择刚刚配置的路径" class="headerlink" title="3.2 在 pycharm 中创建新项目，选择刚刚配置的路径"></a>3.2 在 pycharm 中创建新项目，选择刚刚配置的路径</h4><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-29%2023.46.11.png" alt=""></p>
<h2 id="4-异常"><a href="#4-异常" class="headerlink" title="4. 异常"></a>4. 异常</h2><ul>
<li><strong>1.  tensorflow/core/platform/cpu_feature_guard.cc:140] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA</strong></li>
</ul>
<p>您的CPU支持未编译使用此TensorFlow二进制文件的说明：AVX2 FMA</p>
<p>参考：<a href="https://blog.csdn.net/PJ7410/article/details/78886048，" target="_blank" rel="external">https://blog.csdn.net/PJ7410/article/details/78886048，</a> <a href="https://github.com/lakshayg/tensorflow-build" target="_blank" rel="external">https://github.com/lakshayg/tensorflow-build</a><br><a href="https://stackoverflow.com/questions/47068709/your-cpu-supports-instructions-that-this-tensorflow-binary-was-not-compiled-to-u?answertab=votes#tab-top" target="_blank" rel="external">https://stackoverflow.com/questions/47068709/your-cpu-supports-instructions-that-this-tensorflow-binary-was-not-compiled-to-u?answertab=votes#tab-top</a></p>
<h1 id="三、-相关工具"><a href="#三、-相关工具" class="headerlink" title="三、 相关工具"></a>三、 相关工具</h1><h2 id="1-NumPy"><a href="#1-NumPy" class="headerlink" title="1. NumPy"></a>1. NumPy</h2><p>官网：<a href="http://www.numpy.org/#" target="_blank" rel="external">http://www.numpy.org/#</a></p>
<p>NumPy是用Python进行科学计算的基础软件包。它包含以下内容：</p>
<ul>
<li><strong>一个强大的N维数组对象</strong></li>
<li><strong>复杂的（广播）功能</strong></li>
<li><strong>用于集成C / C ++和Fortran代码的工具</strong></li>
<li>有用的<strong>线性代数，傅里叶变换</strong>和<strong>随机数</strong>能力</li>
<li>除了明显的科学用途外，NumPy还可以用作<strong>通用数据的高效多维容器</strong>。可以定义任意数据类型。这使得NumPy能够与<strong>各种数据库</strong>无缝并快速地整合。</li>
</ul>
<h1 id="四、-TensorFlow-的使用"><a href="#四、-TensorFlow-的使用" class="headerlink" title="四、 TensorFlow 的使用"></a>四、 TensorFlow 的使用</h1><h2 id="1-综述"><a href="#1-综述" class="headerlink" title="1. 综述"></a>1. 综述</h2><p>TensorFlow是一个编程系统，使用 <strong>图</strong>来表示<strong>计算任务</strong>。<br>图中的<strong>结点</strong>被称为<strong>op（操作的缩写）</strong>。<br>一个op获得0个或多个<strong>Tensor（张量）</strong>，执行计算，产生0个或多个Tensor。每个张量是一个<strong>类型化的多维数组</strong>。</p>
<p>一个<strong>TensorFlow图</strong>描述了<strong>计算的过程</strong>。<br>为了进行计算，<strong>图</strong>必须在<strong>会话（Session）</strong>里被启动。 会话将图的<strong>op</strong>分发到诸如CPU或GPU之类的设备上，同时提供执行op的方法。这些方法执行后，将产生的<strong>张量返回</strong>。在Python语言中，返回的张量是 <strong>numpy ndarray对象</strong>; 在C和C ++语言中，返回的张量是 tensorflow::Tensor实例。</p>
<h2 id="2-TensorFlow-名词"><a href="#2-TensorFlow-名词" class="headerlink" title="2. TensorFlow 名词"></a>2. TensorFlow 名词</h2><ul>
<li>使用<strong>图（graph）</strong>来表示计算任务。</li>
<li>在被称之为<strong>会话 (Session)</strong>的上下文（context）中执行图。</li>
<li>使用<strong>张量（Tensor）</strong>表示数据。</li>
<li>通过<strong>变量 (Variable)</strong>维护状态。</li>
<li>使用<strong>feed</strong>和<strong>fetch</strong>可以为任意的操作赋值或从其中获取数据。</li>
</ul>
<h2 id="3-计算图"><a href="#3-计算图" class="headerlink" title="3. 计算图"></a>3. 计算图</h2><p>TensorFlow程序通常有2个阶段：</p>
<ul>
<li><strong>构建阶段</strong>。在构建阶段，<strong>op的执行步骤</strong>被描述为一个图，通常在构建阶段<strong>创建一个图</strong>来表示和训练神经网络。</li>
<li><strong>执行阶段</strong>。在执行阶段，使用<strong>会话执行</strong>图中的操作，在执行阶段<strong>反复执行</strong>图中的训练op。</li>
</ul>
<p>TensorFlow支持C，C ++，Python编程语言。目前，TensorFlow的Python库更加易于使用，它提供了大量的辅助函数来简化构建图的工作，这些函数尚未被C和C ++库支持。</p>
<h2 id="4-构建图"><a href="#4-构建图" class="headerlink" title="4. 构建图"></a>4. 构建图</h2><p>图文档：<a href="http://www.tensorfly.cn/tfdoc/api_docs/python/framework.html#Graph" target="_blank" rel="external">http://www.tensorfly.cn/tfdoc/api_docs/python/framework.html#Graph</a></p>
<p>构建图的第一步，是创建源op（source op）。源op不需要任何输入，例如常量 (Constant)。源op的输出被传递给其它op做运算。</p>
<p>Python库中，op构造器的返回值代表被构造出的op的输出，这些返回值可以传递给其它op构造器作为输入。</p>
<p>TensorFlow Python库有一个<strong>默认图</strong>，op构造器可以为其增加节点。这个默认图对许多程序来说已经足够用了。阅读图类文档来了解如何管理多个图。</p>
<h2 id="5-在一个会话中启动图"><a href="#5-在一个会话中启动图" class="headerlink" title="5. 在一个会话中启动图"></a>5. 在一个会话中启动图</h2>]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 机器学习，TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于NFC（Near Field Communication）近场通讯]]></title>
      <url>/%E5%85%B3%E4%BA%8ENFC%EF%BC%88Near%20Field%20Communication%EF%BC%89%E8%BF%91%E5%9C%BA%E9%80%9A%E8%AE%AF/</url>
      <content type="html"><![CDATA[<p>目前NFC已经出现了一些应用，例如电子标签识别、刷手机、点对点付款、身份识别、信息记录等</p>
<a id="more"></a>
<p>[TOC]</p>
<p>NFC（Near Field Communication，近场通信）是一种数据传输技术。与<strong>Wi-Fi、蓝牙、红外线</strong>等数据传输技术的一个主要差异就是有效距离一般不能超过4厘米。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-20%2014.28.11.png" alt=""></p>
<h1 id="使用到的类"><a href="#使用到的类" class="headerlink" title="使用到的类"></a>使用到的类</h1><ul>
<li><strong>NfcManager</strong> : 用于获取此设备NfcAdapter。可以使用获取实例: getSystemService(Class)</li>
<li><strong>NfcAdapter</strong> : 代表本地NFC适配器。 它是您进行NFC操作的入口点。您可以通过getDefaultAdapter()或 获取实例getDefaultAdapter(android.content.Context)。</li>
<li><strong>NdefMessage</strong> :     代表不可变的NDEF消息。这是在设备和标签之间传输携带数据的“记录”的标准格式。您的应用程序可以从ACTION_TAG_DISCOVERED意图中接收这些消息。</li>
<li><strong>NdefRecord</strong> : 代表不可变的NDEF记录。 它在a中提供，NdefMessage并描述正在共享的数据类型并携带数据本身。</li>
<li><strong>NfcEvent</strong> : 包装与任何NFC事件相关的信息。</li>
<li><strong>Tag</strong> : 代表已发现的NFC标签。 </li>
</ul>
<h1 id="使用到的接口"><a href="#使用到的接口" class="headerlink" title="使用到的接口"></a>使用到的接口</h1><ul>
<li><strong>NfcAdapter.CreateBeamUrisCallback</strong> ：</li>
<li><strong>NfcAdapter.CreateNdefMessageCallback</strong> ：当另一个能够进行NDEF推送的NFC设备（Android Beam）处于范围内时，要调用的回调。 </li>
<li><strong>NfcAdapter.OnNdefPushCompleteCallback</strong> ： 系统成功将您的NdefMessage 设备交付给其他设备时要调用的回调。 </li>
<li><strong>NfcAdapter.OnTagRemovedListener</strong> ： 将标记从字段中删除时调用的回调。 </li>
<li><strong>NfcAdapter.ReaderCallback</strong> ：当前台活动在阅读器模式下运行时系统找到标签时要调用的回调。 </li>
</ul>
<h1 id="释义"><a href="#释义" class="headerlink" title="释义"></a>释义</h1><p><strong>NFC</strong>是一组短距离无线技术，通常需要4cm（近场）距离或更短距离才能启动连接。NFC可让您在NFC标签和Android设备之间或两台Android设备之间共享小型有效载荷数据。</p>
<p>标签的范围可能很复杂：</p>
<ul>
<li><strong>简单</strong>的标签：只提供读写语义，有时还有一次性可编程区域，使卡片成为只读。</li>
<li><strong>更复杂</strong>的标签：提供数学运算，并具有加密硬件来验证对扇区的访问。</li>
<li><strong>最复杂</strong>的标签：包含操作环境，允许与标签上执行的代码进行复杂的交互。</li>
</ul>
<p>存储在标签中的数据也可以用各种格式编写，但许多Android框架API基于称为<strong>NDEF（NFC数据交换格式）</strong>的NFC论坛标准。</p>
<p>采用NFC的Android设备同时支持三种主要的操作模式：</p>
<ul>
<li><strong>读写器模式</strong>：允许NFC设备读取和/或写入无源NFC标签和贴纸。</li>
<li><strong>P2P模式</strong>：允许NFC设备与其他NFC对等设备交换数据; 此操作模式由Android Beam使用。</li>
<li><strong>卡模拟模式</strong>：允许NFC设备本身充当NFC卡。然后可以通过外部NFC阅读器访问仿真的NFC卡，例如NFC销售点终端。</li>
</ul>
<h1 id="NFC-基础知识"><a href="#NFC-基础知识" class="headerlink" title="NFC 基础知识"></a>NFC 基础知识</h1><p>在使用NDEF数据和Android时有两种主要用例：</p>
<ul>
<li>从NFC标签读取NDEF数据</li>
</ul>
<p>从NFC标签读取NDEF数据由<strong>标签调度系统</strong>处理,此系统分析发现的NFC标签，对数据进行适当分类，并启动对分类数据感兴趣的应用程序。想要处理扫描的NFC标签的应用程序可以<strong>声明意图过滤器</strong>并<strong>请求处理数据</strong>。</p>
<ul>
<li>使用<strong>Android Beam</strong>将NDEF消息从一台设备传送到另一台设备</li>
</ul>
<p>Android Beam功能允许设备将NDEF消息推送到另一台设备上，方法是将这些设备一起物理地轻击。这种交互提供了一种比其他无线技术（如蓝牙）更容易发送数据的方式，因为使用NFC时，不需要手动设备发现或配对。当两个设备进入范围时，连接自动启动。Android Beam通过一组NFC API可用，因此任何应用程序都可以在设备之间传输信息。例如，联系人，浏览器和YouTube应用程序使用Android Beam与其他设备共享联系人，网页和视频。</p>
<h2 id="标签调度系统"><a href="#标签调度系统" class="headerlink" title="标签调度系统"></a>标签调度系统</h2><p>除非在设备的“设置”菜单中禁用NFC，否则Android设备通常会在<strong>屏幕解锁</strong>时查找NFC标签。当Android设备发现NFC标签时，理想的行为是<strong>让最合适的活动处理意图，而不要询问用户使用什么应用程序</strong>。由于设备在<strong>非常短的范围内扫描NFC标签，因此使用户手动选择活动可能会迫使他们将设备从标签移开并中断连接</strong>。所以应该开展活动以仅处理您的活动关心的NFC标签，以<strong>防止活动选择器</strong>出现。</p>
<p>为了帮助实现这一目标，Android提供了一个<strong>特殊的标签调度系统</strong>，用于<strong>分析扫描的NFC标签</strong>，对其进行<strong>分析</strong>并尝试<strong>定位</strong>对扫描数据感兴趣的<strong>应用程序</strong>。它是这样做的：</p>
<ul>
<li><strong>解析NFC标签</strong>并<strong>找出</strong>标识标签中数据有效载荷的<strong>MIME类型</strong>或<strong>URI</strong>。</li>
<li>将MIME类型或URI和有效负载<strong>封装到意图中</strong>。</li>
<li>根据意图启动一项活动。</li>
</ul>
<h2 id="NFC标签如何映射到MIME类型和URI"><a href="#NFC标签如何映射到MIME类型和URI" class="headerlink" title="NFC标签如何映射到MIME类型和URI"></a>NFC标签如何映射到MIME类型和URI</h2><p>在开始编写NFC应用程序之前，了解 <strong>NFC标签的不同类型</strong>、<strong>标签调度系统解析NFC标签的方式</strong>以及<strong>标签调度系统在检测到NDEF消息时执行的特殊工作</strong>非常重要。</p>
<p>NDEF数据封装在<strong>NdefMessage包含一个或多个记录（NdefRecord）的消息中</strong>。每个NDEF记录必须按照您要创建的记录类型的规范进行格式良好。</p>
<p><strong>NDEF数据的操作</strong></p>
<p>当Android设备驱动的设备<strong>扫描</strong>包含NDEF格式数据的NFC标签时，它会<strong>解析</strong>该消息并<strong>尝试</strong>找出数据的MIME类型或标识URI。</p>
<p>为此，系统读取<strong>第一个</strong>NdefRecord内容NdefMessage<strong>以确定如何解释整个NDEF消息</strong>（NDEF消息可以具有多个NDEF记录）。在格式良好的NDEF消息中，第一个NdefRecord 包含以下字段：</p>
<ul>
<li><strong>3位TNF（类型名称格式）</strong></li>
</ul>
<p>指示如何解释可变长度类型字段。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-19%2022.16.52.png" alt=""></p>
<ul>
<li><strong>可变长度类型</strong></li>
</ul>
<p>描述记录的类型。如果使用TNF_WELL_KNOWN，使用此字段指定记录类型定义（RTD）。</p>
<ul>
<li><strong>可变长度ID</strong></li>
</ul>
<p>记录的唯一标识符。此字段不常使用，但如果您需要唯一标识标签，则可以为其创建标识。</p>
<ul>
<li><strong>可变长度有效载荷</strong></li>
</ul>
<p>您想要读取或写入的实际数据有效载荷。NDEF消息可以包含多个NDEF记录，因此不要假定完整的有效负载位于NDEF消息的第一个NDEF记录中。</p>
<p><strong>标签调度系统</strong>使用<strong>TNF</strong>和<strong>类型字段</strong>尝试将MIME类型或URI映射到NDEF消息。如果成功，它会将该信息ACTION_NDEF_DISCOVERED与实际有效负载一起封装在意图中。但是，有些情况下，标签调度系统无法根据第一个NDEF记录确定数据的类型。当NDEF数据无法映射到MIME类型或URI，或者NFC标签不包含NDEF数据时，会发生这种情况。在这种情况下，Tag具有关于标签的技术和有效载荷的信息的对象被封装在ACTION_TECH_DISCOVERED意图的内部。</p>
<p>表1描述了标签调度系统如何将TNF和类型字段映射到MIME类型或URI。它还描述了哪些TNF不能映射到MIME类型或URI。在这些情况下，标签调度系统会回退到 ACTION_TECH_DISCOVERED。</p>
<p>例如，如果标签调度系统遇到类型记录TNF_ABSOLUTE_URI，它会将该记录的可变长度类型字段映射到URI中。标签调度系统将该URI ACTION_NDEF_DISCOVERED与其他关于标签的信息（例如有效载荷）一起封装在意图的数据字段中。另一方面，如果它遇到类型记录TNF_UNKNOWN，它会创建一个封装标签技术的意图。</p>
<h2 id="NFC标签如何分配给应用程序"><a href="#NFC标签如何分配给应用程序" class="headerlink" title="NFC标签如何分配给应用程序"></a>NFC标签如何分配给应用程序</h2><p>当标签调度系统<strong>完成创建封装NFC标签</strong>及其<strong>标识信息的意图</strong>时，它将意向发送给感兴趣的应用程序，以针对意图进行过滤。如果多个应用程序可以处理该意图，则显示活动选择器，以便用户可以选择该活动。标签调度系统定义了<strong>三个意图</strong>，按照<strong>从高到低</strong>的顺序列出：</p>
<ul>
<li><strong>ACTION_NDEF_DISCOVERED：</strong></li>
</ul>
<p>当包含NDEF有效载荷的标签被扫描并且是识别类型时，该意图用于启动Activity。这是最高优先级的意图，并且标签调度系统尽可能在任何其他意图之前尝试用此意图启动一个活动。</p>
<ul>
<li><strong>ACTION_TECH_DISCOVERED：</strong></li>
</ul>
<p>如果没有活动注册来处理ACTION_NDEF_DISCOVERED 意图，则标签调度系统会尝试以此意图启动应用程序。ACTION_NDEF_DISCOVERED如果扫描的标签包含无法映射到MIME类型或URI的NDEF数据，或者该标签不包含NDEF数据，但是具有已知的标记技术，则此直接启动（无需先启动）。</p>
<ul>
<li><strong>ACTION_TAG_DISCOVERED：</strong></li>
</ul>
<p>如果没有任何活动处理ACTION_NDEF_DISCOVERED或ACTION_TECH_DISCOVERED 意图，则此意图开始。</p>
<h2 id="标签调度系统的基本工作方式如下"><a href="#标签调度系统的基本工作方式如下" class="headerlink" title="标签调度系统的基本工作方式如下"></a>标签调度系统的基本工作方式如下</h2><ul>
<li>尝试使用解析NFC标签（ACTION_NDEF_DISCOVERED或者ACTION_TECH_DISCOVERED）时由标签调度系统创建的意图启动一个活动 。</li>
<li>如果没有任何活动过滤该意图，请尝试启动具有下一个最低优先级意图的活动（ACTION_TECH_DISCOVERED或者ACTION_TAG_DISCOVERED），直到应用程序过滤该意图或直到标签调度系统尝试所有可能的意图。</li>
<li>如果没有应用程序筛选任何意图，则不执行任何操作。</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/15241489414850.png" alt=""></p>
<p>只要有可能，就使用NDEF消息和ACTION_NDEF_DISCOVERED意图，因为它是三者中最具体的。这种意图使您能够在比其他两种意图更合适的时间启动您的应用程序，从而为用户提供更好的体验。</p>
<h2 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h2><h3 id="1-在Android清单中请求NFC访问"><a href="#1-在Android清单中请求NFC访问" class="headerlink" title="1. 在Android清单中请求NFC访问"></a>1. 在Android清单中请求NFC访问</h3><p>在访问设备的NFC硬件并正确处理NFC意图之前，请在AndroidManifest.xml文件中声明这些项目：</p>
<ul>
<li><uses-permission>用于访问NFC硬件的NFC 元件：</uses-permission></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.NFC&quot; /&gt;</div></pre></td></tr></table></figure>
<ul>
<li>您的应用程序可以支持的最低SDK版本。<strong>API级别9</strong>仅支持有限的标签分发ACTION_TAG_DISCOVERED，并且只能通过EXTRA_NDEF_MESSAGES额外的方式访问NDEF消息。没有其他标签属性或I / O操作可以访问。<strong>API级别10</strong>包括全面的读写器支持以及前台NDEF推送，而<strong>API level 14</strong>提供了一种使用Android Beam和其他便捷方法将NDEF消息推送到其他设备以创建NDEF记录的更简单的方法。    </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-sdk android:minSdkVersion=&quot;10&quot;/&gt;</div></pre></td></tr></table></figure>
<ul>
<li>该uses-feature元素使您的应用程序仅在具有NFC硬件的设备上显示在Google Play中：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-feature android:name=&quot;android.hardware.nfc&quot; android:required=&quot;true&quot; /&gt;</div></pre></td></tr></table></figure>
<p>如果应用程序使用NFC功能，但这些功能是不是你的应用是至关重要的，你可以省略uses-feature元素和检查，看看是否在运行时检查NFC avalailbility getDefaultAdapter() 是null。</p>
<h3 id="2-过滤NFC-intent"><a href="#2-过滤NFC-intent" class="headerlink" title="2. 过滤NFC intent"></a>2. 过滤NFC intent</h3><p>要扫描想要处理的NFC标签时启动应用程序，您的应用程序可以筛选Android清单中的<strong>一个、两个或全部三个NFC意图</strong></p>
<p>但是，通常需要筛选ACTION_NDEF_DISCOVERED意图，以便在您的应用程序启动时进行最大限度的控制。<br>ACTION_TECH_DISCOVERED目的是回退ACTION_NDEF_DISCOVERED时没有应用程序过滤器ACTION_NDEF_DISCOVERED或当负载不NDEF。<br>过滤ACTION_TAG_DISCOVERED通常过于笼统。</p>
<p>许多应用程序会为之前ACTION_NDEF_DISCOVERED或ACTION_TECH_DISCOVERED之前进行过滤ACTION_TAG_DISCOVERED，因此您的应用程序的启动概率较低。</p>
<p>ACTION_TAG_DISCOVERED仅适用于在没有安装其他应用程序来处理ACTION_NDEF_DISCOVERED或ACTION_TECH_DISCOVERED意图的情况下过滤应用程序的最后手段 。</p>
<p>由于NFC标签的部署有所不同并且多次不受控制，因此这并非总是可行，因此您可以在必要时回退到其他两个意图。当可以控制写入的标签和数据类型时，建议使用NDEF格式化标签。以下各节介绍如何针对每种意图类型进行过滤。</p>
<ul>
<li><strong>ACTION_NDEF_DISCOVERED</strong></li>
</ul>
<p>要过滤ACTION_NDEF_DISCOVERED意图，请声明意图过滤器以及要过滤的数据类型。以下示例筛选ACTION_NDEF_DISCOVERED MIME类型为以下内容的意图text/plain：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;intent-filter&gt;</div><div class="line">    &lt;action android:name=&quot;android.nfc.action.NDEF_DISCOVERED&quot;/&gt;</div><div class="line">    &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt;</div><div class="line">    &lt;data android:mimeType=&quot;text/plain&quot; /&gt;</div><div class="line">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure>
<p>以下示例以URI形式过滤 <a href="http://developer.android.com/index.html。" target="_blank" rel="external">http://developer.android.com/index.html。</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;intent-filter&gt;</div><div class="line">    &lt;action android:name=&quot;android.nfc.action.NDEF_DISCOVERED&quot;/&gt;</div><div class="line">    &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt;</div><div class="line">   &lt;data android:scheme=&quot;http&quot;</div><div class="line">              android:host=&quot;developer.android.com&quot;</div><div class="line">              android:pathPrefix=&quot;/index.html&quot; /&gt;</div><div class="line">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure>
<ul>
<li><strong>ACTION_TECH_DISCOVERED</strong></li>
</ul>
<p>如果您的action按照ACTION_TECH_DISCOVERED意图进行过滤，则必须创建一个XML资源文件，以指定您的活动在一个tech-list集合内支持的技术。如果某个tech-list集合是标记所支持的技术的子集，则您的活动被视为匹配，您可以通过调用获取该技术getTechList()。</p>
<p>例如，如果扫描的标签支持MifareClassic，NdefFormatable和NfcA，则您的 tech-list设置必须指定全部三种，两种或一种技术（而不是其他任何技术），以便使您的活动得到匹配。</p>
<p>以下示例定义了所有技术。你可以删除那些你不需要的。保存这个文件（你可以将它命名为任何你想要的）在 <project-root>/res/xml文件夹中。</project-root></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;resources xmlns:xliff=&quot;urn:oasis:names:tc:xliff:document:1.2&quot;&gt;</div><div class="line">    &lt;tech-list&gt;</div><div class="line">        &lt;tech&gt;android.nfc.tech.IsoDep&lt;/tech&gt;</div><div class="line">        &lt;tech&gt;android.nfc.tech.NfcA&lt;/tech&gt;</div><div class="line">        &lt;tech&gt;android.nfc.tech.NfcB&lt;/tech&gt;</div><div class="line">        &lt;tech&gt;android.nfc.tech.NfcF&lt;/tech&gt;</div><div class="line">        &lt;tech&gt;android.nfc.tech.NfcV&lt;/tech&gt;</div><div class="line">        &lt;tech&gt;android.nfc.tech.Ndef&lt;/tech&gt;</div><div class="line">        &lt;tech&gt;android.nfc.tech.NdefFormatable&lt;/tech&gt;</div><div class="line">        &lt;tech&gt;android.nfc.tech.MifareClassic&lt;/tech&gt;</div><div class="line">        &lt;tech&gt;android.nfc.tech.MifareUltralight&lt;/tech&gt;</div><div class="line">    &lt;/tech-list&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure>
<p>您也可以指定多个tech-list集合。每个tech-list 集合都是独立考虑的，如果任何一个tech-list集合是返回的技术的子集，那么您的活动就被认为是匹配 的getTechList()。这提供了AND与OR 匹配技术，语义。以下示例匹配可以支持NfcA和Ndef技术或可以支持NfcB和Ndef技术的标签：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;resources xmlns:xliff=&quot;urn:oasis:names:tc:xliff:document:1.2&quot;&gt;</div><div class="line">    &lt;tech-list&gt;</div><div class="line">        &lt;tech&gt;android.nfc.tech.NfcA&lt;/tech&gt;</div><div class="line">        &lt;tech&gt;android.nfc.tech.Ndef&lt;/tech&gt;</div><div class="line">    &lt;/tech-list&gt;</div><div class="line">&lt;/resources&gt;</div><div class="line"></div><div class="line">&lt;resources xmlns:xliff=&quot;urn:oasis:names:tc:xliff:document:1.2&quot;&gt;</div><div class="line">    &lt;tech-list&gt;</div><div class="line">        &lt;tech&gt;android.nfc.tech.NfcB&lt;/tech&gt;</div><div class="line">        &lt;tech&gt;android.nfc.tech.Ndef&lt;/tech&gt;</div><div class="line">    &lt;/tech-list&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure>
<p>在你的AndroidManifest.xml文件中， 像下面的例子那样，在<meta-data>元素内部的<activity>元素中指定刚创建的资源文件：</activity></meta-data></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;activity&gt;</div><div class="line">	...</div><div class="line">	&lt;intent-filter&gt;</div><div class="line">	    &lt;action android:name=&quot;android.nfc.action.TECH_DISCOVERED&quot;/&gt;</div><div class="line">	&lt;/intent-filter&gt;</div><div class="line">	</div><div class="line">	&lt;meta-data android:name=&quot;android.nfc.action.TECH_DISCOVERED&quot;</div><div class="line">	    android:resource=&quot;@xml/nfc_tech_filter&quot; /&gt;</div><div class="line">	...</div><div class="line">&lt;/activity&gt;</div></pre></td></tr></table></figure>
<ul>
<li><strong>ACTION_TAG_DISCOVERED</strong></li>
</ul>
<p>要过滤ACTION_TAG_DISCOVERED使用以下意图过滤器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;intent-filter&gt;</div><div class="line">    &lt;action android:name=&quot;android.nfc.action.TAG_DISCOVERED&quot;/&gt;</div><div class="line">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure>
<h3 id="3-从intent获取信息"><a href="#3-从intent获取信息" class="headerlink" title="3. 从intent获取信息"></a>3. 从intent获取信息</h3><p>如果某个action是由于NFC的intent而启动的，则您可以从intent获取有关扫描的NFC标签的信息。intent可以包含以下附加内容，具体取决于扫描的标签：</p>
<ul>
<li>EXTRA_TAG（必需）：Tag代表扫描标签的对象。</li>
<li>EXTRA_NDEF_MESSAGES（可选）：从标签解析的NDEF消息数组。这个额外的ACTION_NDEF_DISCOVERED意图是强制性的 。</li>
<li>EXTRA_ID （可选）：标签的低级ID。</li>
</ul>
<p>要获取这些附加内容，请检查您的活动是否以NFC意图之一启动，以确保扫描标签，然后从意图中获取附加信息。以下示例检查ACTION_NDEF_DISCOVERED 意图并从意图附加中获取NDEF消息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onNewIntent(Intent intent) &#123;</div><div class="line">    super.onNewIntent(intent);</div><div class="line">    ...</div><div class="line">    if (intent != null &amp;&amp; NfcAdapter.ACTION_NDEF_DISCOVERED.equals(intent.getAction())) &#123;</div><div class="line">        Parcelable[] rawMessages =</div><div class="line">            intent.getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES);</div><div class="line">        if (rawMessages != null) &#123;</div><div class="line">            NdefMessage[] messages = new NdefMessage[rawMessages.length];</div><div class="line">            for (int i = 0; i &lt; rawMessages.length; i++) &#123;</div><div class="line">                messages[i] = (NdefMessage) rawMessages[i];</div><div class="line">            &#125;</div><div class="line">            // Process the messages array.</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者，您可以Tag从intent获取对象，该对象将包含有效内容并允许枚举标记的技术：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Tag tag = intent.getParcelableExtra(NfcAdapter.EXTRA_TAG);</div></pre></td></tr></table></figure>
<h3 id="4-创建常见的NDEF记录类型"><a href="#4-创建常见的NDEF记录类型" class="headerlink" title="4. 创建常见的NDEF记录类型"></a>4. 创建常见的NDEF记录类型</h3><p>以下将会介绍创建常见类型的NDEF记录以在使用Android Beam编写NFC标签或发送数据时使用。<br>从Android 4.0（API级别14）开始，该 createUri()方法可以帮助您自动创建URI记录。<br>在开始的Android 4.1（API级别16）， createExternal() 并且createMime()可以帮助您创建MIME和外部类型NDEF记录。<br>尽可能使用这些帮助器方法，以避免在手动创建NDEF记录时出错。</p>
<p>以下还将会介绍如何为记录创建相应的intent过滤器。所有这些NDEF记录示例应该放在NDEF消息的第一个NDEF记录中，您正在写入标签或发送。</p>
<p><strong>TNF_ABSOLUTE_URI</strong></p>
<p>建议使用 RTD_URI类型而不是TNF_ABSOLUTE_URI，因为它更高效。<br>您可以TNF_ABSOLUTE_URI通过以下方式创建NDEF记录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NdefRecord uriRecord = new NdefRecord(</div><div class="line">    NdefRecord.TNF_ABSOLUTE_URI ,</div><div class="line">    &quot;http://developer.android.com/index.html&quot;.getBytes(Charset.forName(&quot;US-ASCII&quot;)),</div><div class="line">    new byte[0], new byte[0]);</div></pre></td></tr></table></figure>
<p>以前的NDEF记录的intent filter 如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;intent-filter&gt;</div><div class="line">    &lt;action android:name=&quot;android.nfc.action.NDEF_DISCOVERED&quot; /&gt;</div><div class="line">    &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</div><div class="line">    &lt;data android:scheme=&quot;http&quot;</div><div class="line">        android:host=&quot;developer.android.com&quot;</div><div class="line">        android:pathPrefix=&quot;/index.html&quot; /&gt;</div><div class="line">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure>
<p><strong>TNF_MIME_MEDIA</strong></p>
<p>您可以TNF_MIME_MEDIA通过以下方式创建NDEF记录：<br>使用createMime()方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NdefRecord mimeRecord = NdefRecord.createMime(&quot;application/vnd.com.example.android.beam&quot;,</div><div class="line">    &quot;Beam me up, Android&quot;.getBytes(Charset.forName(&quot;US-ASCII&quot;)));</div></pre></td></tr></table></figure>
<p>NdefRecord手动创建：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NdefRecord mimeRecord = new NdefRecord(</div><div class="line">    NdefRecord.TNF_MIME_MEDIA ,</div><div class="line">    &quot;application/vnd.com.example.android.beam&quot;.getBytes(Charset.forName(&quot;US-ASCII&quot;)),</div><div class="line">    new byte[0], &quot;Beam me up, Android!&quot;.getBytes(Charset.forName(&quot;US-ASCII&quot;)));</div></pre></td></tr></table></figure>
<p>以前的NDEF记录的意图过滤器如下所示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;intent-filter&gt;</div><div class="line">    &lt;action android:name=&quot;android.nfc.action.NDEF_DISCOVERED&quot; /&gt;</div><div class="line">    &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</div><div class="line">    &lt;data android:mimeType=&quot;application/vnd.com.example.android.beam&quot; /&gt;</div><div class="line">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure>
<p><strong>TNF_WELL_KNOWN与RTD_TEXT</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public NdefRecord createTextRecord(String payload, Locale locale, boolean encodeInUtf8) &#123;</div><div class="line">    byte[] langBytes = locale.getLanguage().getBytes(Charset.forName(&quot;US-ASCII&quot;));</div><div class="line">    Charset utfEncoding = encodeInUtf8 ? Charset.forName(&quot;UTF-8&quot;) : Charset.forName(&quot;UTF-16&quot;);</div><div class="line">    byte[] textBytes = payload.getBytes(utfEncoding);</div><div class="line">    int utfBit = encodeInUtf8 ? 0 : (1 &lt;&lt; 7);</div><div class="line">    char status = (char) (utfBit + langBytes.length);</div><div class="line">    byte[] data = new byte[1 + langBytes.length + textBytes.length];</div><div class="line">    data[0] = (byte) status;</div><div class="line">    System.arraycopy(langBytes, 0, data, 1, langBytes.length);</div><div class="line">    System.arraycopy(textBytes, 0, data, 1 + langBytes.length, textBytes.length);</div><div class="line">    NdefRecord record = new NdefRecord(NdefRecord.TNF_WELL_KNOWN,</div><div class="line">    NdefRecord.RTD_TEXT, new byte[0], data);</div><div class="line">    return record;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以前的创建方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;intent-filter&gt;</div><div class="line">    &lt;action android:name=&quot;android.nfc.action.NDEF_DISCOVERED&quot; /&gt;</div><div class="line">    &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</div><div class="line">    &lt;data android:mimeType=&quot;text/plain&quot; /&gt;</div><div class="line">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure>
<p><strong>TNF_WELL_KNOWN与RTD_URI</strong></p>
<p>使用 createUri(String) 创建</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NdefRecord rtdUriRecord1 = NdefRecord.createUri(&quot;http://example.com&quot;);</div></pre></td></tr></table></figure>
<p>使用  createUri(Uri) 创建</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Uri uri = new Uri(&quot;http://example.com&quot;);</div><div class="line">NdefRecord rtdUriRecord2 = NdefRecord.createUri(uri);</div></pre></td></tr></table></figure>
<p>NdefRecord手动创建：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">byte[] uriField = &quot;example.com&quot;.getBytes(Charset.forName(&quot;US-ASCII&quot;));</div><div class="line">byte[] payload = new byte[uriField.length + 1];              //add 1 for the URI Prefix</div><div class="line">byte payload[0] = 0x01;                                      //prefixes http://www. to the URI</div><div class="line">System.arraycopy(uriField, 0, payload, 1, uriField.length);  //appends URI to payload</div><div class="line">NdefRecord rtdUriRecord = new NdefRecord(</div><div class="line">    NdefRecord.TNF_WELL_KNOWN, NdefRecord.RTD_URI, new byte[0], payload);</div></pre></td></tr></table></figure>
<p>以前的创建方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;intent-filter&gt;</div><div class="line">    &lt;action android:name=&quot;android.nfc.action.NDEF_DISCOVERED&quot; /&gt;</div><div class="line">    &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</div><div class="line">    &lt;data android:scheme=&quot;http&quot;</div><div class="line">        android:host=&quot;example.com&quot;</div><div class="line">        android:pathPrefix=&quot;&quot; /&gt;</div><div class="line">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure>
<p><strong>TNF_EXTERNAL_TYPE</strong></p>
<p>使用 createExternal()  方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">byte[] payload; //assign to your data</div><div class="line">String domain = &quot;com.example&quot;; //usually your app&apos;s package name</div><div class="line">String type = &quot;externalType&quot;;</div><div class="line">NdefRecord extRecord = NdefRecord.createExternal(domain, type, payload);</div></pre></td></tr></table></figure>
<p>NdefRecord手动创建：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">byte[] payload;</div><div class="line">...</div><div class="line">NdefRecord extRecord = new NdefRecord(</div><div class="line">    NdefRecord.TNF_EXTERNAL_TYPE, &quot;com.example:externalType&quot;, new byte[0], payload);</div></pre></td></tr></table></figure>
<p>以前的创建方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;intent-filter&gt;</div><div class="line">    &lt;action android:name=&quot;android.nfc.action.NDEF_DISCOVERED&quot; /&gt;</div><div class="line">    &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</div><div class="line">    &lt;data android:scheme=&quot;vnd.android.nfc&quot;</div><div class="line">        android:host=&quot;ext&quot;</div><div class="line">        android:pathPrefix=&quot;/com.example:externalType&quot;/&gt;</div><div class="line">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure>
<h3 id="5-Android应用程序记录-Android-Application-Record-AAR"><a href="#5-Android应用程序记录-Android-Application-Record-AAR" class="headerlink" title="5. Android应用程序记录 Android Application Record (AAR)"></a>5. Android应用程序记录 Android Application Record (AAR)</h3><p>在Android 4.0（API级别14）中引入Android应用程序记录（AAR）可以更强有力地确定您的应用程序在扫描NFC标签时启动。 AAR具有嵌入NDEF记录内的应用程序的包名称。 您可以将AAR添加到NDEF消息的任何NDEF记录中，因为Android会在整个NDEF消息中搜索AAR。 如果它发现AAR，它将根据AAR中的包名称启动应用程序。 如果设备上没有应用程序，则会启动Google Play以下载应用程序。</p>
<p>如果想要阻止其他应用程序针对相同的意图进行过滤并可能处理您已部署的特定标记，则AAR很有用。AAR仅在应用程序级别受支持，因为包名称约束，而不是在意图过滤的活动级别。</p>
<p>如果标签包含AAR，则标签分派系统按以下方式分派：</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 7.0 FileProvider]]></title>
      <url>/Android-7-0-FileProvider/</url>
      <content type="html"><![CDATA[<p>参考：<a href="https://blog.csdn.net/lmj623565791/article/details/72859156" target="_blank" rel="external">https://blog.csdn.net/lmj623565791/article/details/72859156</a></p>
<p>Android 7.0 行为变更 FileProvider</p>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="1-声明provider"><a href="#1-声明provider" class="headerlink" title="1. 声明provider"></a>1. 声明provider</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;provider</div><div class="line">    android:name=&quot;android.support.v4.content.FileProvider&quot;</div><div class="line">    android:authorities=&quot;com.zhy.android7.fileprovider&quot;</div><div class="line">    android:exported=&quot;false&quot;</div><div class="line">    android:grantUriPermissions=&quot;true&quot;&gt;</div><div class="line">    &lt;meta-data</div><div class="line">        android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;</div><div class="line">        android:resource=&quot;@xml/file_paths&quot; /&gt;</div><div class="line">&lt;/provider&gt;</div></pre></td></tr></table></figure>
<h2 id="1-因为FileProvider是ContentProvider子类-注意一点，他需要设置一个meta-data，里面指向一个xml文件。"><a href="#1-因为FileProvider是ContentProvider子类-注意一点，他需要设置一个meta-data，里面指向一个xml文件。" class="headerlink" title="1. 因为FileProvider是ContentProvider子类, 注意一点，他需要设置一个meta-data，里面指向一个xml文件。"></a>1. 因为FileProvider是ContentProvider子类, 注意一点，他需要设置一个meta-data，里面指向一个xml文件。</h2><h2 id="2-export设置false权限问题："><a href="#2-export设置false权限问题：" class="headerlink" title="2. export设置false权限问题："></a>2. export设置false权限问题：</h2><p>contentprovider的export设置的是false, 将会导致Permission Denial。</p>
<p>context提供了两个方法：</p>
<ul>
<li><strong>grantUriPermission(String toPackage, Uri uri,<br>int modeFlags)</strong></li>
</ul>
<p>grantUriPermission需要传递一个包名，就是你给哪个应用授权,根据Intent查询出的所以符合的应用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">List&lt;ResolveInfo&gt; resInfoList = context.getPackageManager()</div><div class="line">            .queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);</div><div class="line">for (ResolveInfo resolveInfo : resInfoList) &#123;</div><div class="line">    String packageName = resolveInfo.activityInfo.packageName;</div><div class="line">    context.grantUriPermission(packageName, uri, flag);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>revokeUriPermission(Uri uri, int modeFlags);</strong></li>
</ul>
<h1 id="2-编写resource-xml-file"><a href="#2-编写resource-xml-file" class="headerlink" title="2. 编写resource xml file"></a>2. 编写resource xml file</h1><p>在<strong>paths</strong>节点内部支持以下几个子节点，分别为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;root-path/&gt; 代表设备的根目录new File(&quot;/&quot;);</div><div class="line">&lt;files-path/&gt; 代表context.getFilesDir()</div><div class="line">&lt;cache-path/&gt; 代表context.getCacheDir()</div><div class="line">&lt;external-path/&gt; 代表Environment.getExternalStorageDirectory()</div><div class="line">&lt;external-files-path&gt;代表context.getExternalFilesDirs()</div><div class="line">&lt;external-cache-path&gt;代表getExternalCacheDirs()</div></pre></td></tr></table></figure>
<p>每个节点都支持两个属性：</p>
<ul>
<li>name</li>
<li>path</li>
</ul>
<p><strong>例如：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;external-path</div><div class="line">    name=&quot;external&quot;</div><div class="line">    path=&quot;pics&quot; /&gt;</div></pre></td></tr></table></figure>
<p>目录即为：<code>Environment.getExternalStorageDirectory()/pics</code></p>
<p><strong>要使用content://uri替代file://uri</strong></p>
<h1 id="3-使用FileProvider-API"><a href="#3-使用FileProvider-API" class="headerlink" title="3. 使用FileProvider API"></a>3. 使用FileProvider API</h1><p><strong>通过FileProvider把我们的file转化为content://uri</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FileProvider.getUriForFile(this, &quot;com.zhy.android7.fileprovider&quot;, file);</div></pre></td></tr></table></figure>
<p>第二个参数就是我们配置的authorities，映射到确定的ContentProvider。</p>
<p>生成的uri：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">content://com.zhy.android7.fileprovider/external/XXXXX</div></pre></td></tr></table></figure>
<p>格式为：<strong>content://authorities/定义的name属性/文件的相对路径</strong>，即name隐藏了可存储的文件夹路径。</p>
<h1 id="4-使用FileProvider兼容安装apk"><a href="#4-使用FileProvider兼容安装apk" class="headerlink" title="4. 使用FileProvider兼容安装apk"></a>4. 使用FileProvider兼容安装apk</h1><p>原版：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public void installApk(View view) &#123;</div><div class="line">    File file = new File(Environment.getExternalStorageDirectory(), &quot;testandroid7-debug.apk&quot;);</div><div class="line"></div><div class="line">    Intent intent = new Intent(Intent.ACTION_VIEW);</div><div class="line">    intent.setDataAndType(Uri.fromFile(file),</div><div class="line">            &quot;application/vnd.android.package-archive&quot;);</div><div class="line">    startActivity(intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[APK版本（Version）更新（Update）]]></title>
      <url>/APK%E7%89%88%E6%9C%AC%EF%BC%88Version%EF%BC%89%E6%9B%B4%E6%96%B0%EF%BC%88Update%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考：<a href="https://blog.csdn.net/wenzhi20102321/article/details/62044892" target="_blank" rel="external">https://blog.csdn.net/wenzhi20102321/article/details/62044892</a><br>参考：基础 <a href="https://blog.csdn.net/luoyingbiao/article/details/55504491" target="_blank" rel="external">https://blog.csdn.net/luoyingbiao/article/details/55504491</a><br>参考：不同的升级操作 <a href="https://blog.csdn.net/u013278099/article/details/52692008" target="_blank" rel="external">https://blog.csdn.net/u013278099/article/details/52692008</a></p>
</blockquote>
<p>Android 应用apk更新 总结</p>
<a id="more"></a>
<h1 id="1-基础"><a href="#1-基础" class="headerlink" title="1. 基础"></a>1. 基础</h1><ul>
<li><strong>版本号（VersionCode）</strong>：是一个Integer类型的值</li>
<li><strong>版本名（VersionName）</strong>：一个值为String类型的属性，一般和VersionCode成对出现,是方便程序开发者运行和维护Application而设置的一个有效的值。一般格式可以为：1.1.2。</li>
</ul>
<p><strong>总结：</strong></p>
<p><strong>版本号(versionCode)</strong>是用于<strong>判断是否升级</strong>的，一般每次版本更新，版本号加一。如果获取服务器上的版本号比检测到本程序的版本号高，那么提示升级。<br><strong>版本名(versionName)</strong>用于<strong>显示版本改变的幅度大小</strong>，比如从2.0.1改变为2.0.2可能只是修改了一个很小的debug，如果改变为2.1.0可能是新增了一些功能，如果改变为3.0.0可能是有很大幅度的修改，比如很多UI界面或功能的添加！ </p>
<p>也就是版本号用于判断是否可以升级，而版本名用于显示給用户看！</p>
<ul>
<li><strong>版本控制的文件位置</strong></li>
</ul>
<p>在Android Studio中，在 Manifest.xml 中定义 versionCode 和 versionName 这里设置是无效的！需要在 app 的<strong>build.grade</strong>文件中设置,图解：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/20170314160551494.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ViewPager与Fragment]]></title>
      <url>/ViewPager%E4%B8%8EFragment/</url>
      <content type="html"><![CDATA[<p>在ViewPager与Fragment的搭配使用中，生命周期函数的调用顺序</p>
<a id="more"></a>
<p><strong><em>注意：此处的log输出是 RadioGroup + ViewPager + Fragment 实现的</em></strong></p>
<p><strong><em>在此种情况的搭配下: 在宿主Activity中不会调用Fragment的 ‘onDestroy()’ 与 ‘onDetach()’ 方法</em></strong></p>
<h1 id="ViewPager与Fragment搭配说明："><a href="#ViewPager与Fragment搭配说明：" class="headerlink" title="ViewPager与Fragment搭配说明："></a>ViewPager与Fragment搭配说明：</h1><p><strong>主MainActivity中有1个ViewPager与4个Fragment，其中第2个Fragment中嵌套1个ViewPager与2个Fragment.</strong></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/S80322-14580161.jpg" alt=""></p>
<h1 id="Activity调用顺序"><a href="#Activity调用顺序" class="headerlink" title="Activity调用顺序"></a>Activity调用顺序</h1><p><strong>Activity的生命周期有7个函数</strong></p>
<h2 id="启动时，生命周期函数的调用顺序："><a href="#启动时，生命周期函数的调用顺序：" class="headerlink" title="启动时，生命周期函数的调用顺序："></a>启动时，生命周期函数的调用顺序：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">03-22 13:35:18.621 		LoginActivity: ヽ(｀Д´)ﾉ -&gt; onCreate : </div><div class="line">03-22 13:35:18.782 		LoginActivity: ヽ(｀Д´)ﾉ -&gt; onStart : </div><div class="line">03-22 13:35:18.787 		LoginActivity: ヽ(｀Д´)ﾉ -&gt; onResume :</div></pre></td></tr></table></figure>
<p>在<strong>长期黑屏</strong>后，调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">03-22 13:36:18.400 		LoginActivity: ヽ(｀Д´)ﾉ -&gt; onPause : </div><div class="line">03-22 13:36:18.458 		LoginActivity: ヽ(｀Д´)ﾉ -&gt; onStop :</div></pre></td></tr></table></figure>
<p><strong>再次被唤醒</strong> 后，调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">03-22 13:42:43.822 		LoginActivity: ヽ(｀Д´)ﾉ -&gt; onRestart : </div><div class="line">03-22 13:42:43.834 		LoginActivity: ヽ(｀Д´)ﾉ -&gt; onStart : </div><div class="line">03-22 13:42:43.884 		LoginActivity: ヽ(｀Д´)ﾉ -&gt; onResume :</div></pre></td></tr></table></figure>
<p>由<strong>当前ActivityA</strong>跳转至另一个<strong>ActivityB</strong>后，<strong>原ActivityA</strong>调用顺序为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ActivityB调用onCreate、onStart、onResume后，再调用：</div><div class="line"></div><div class="line">03-22 13:44:20.090 		LoginActivity: ヽ(｀Д´)ﾉ -&gt; onPause : </div><div class="line">03-22 13:44:20.888 		LoginActivity: ヽ(｀Д´)ﾉ -&gt; onStop :</div><div class="line">03-22 13:50:01.678 		LoginActivity: ヽ(｀Д´)ﾉ -&gt; onDestroy :</div></pre></td></tr></table></figure>
<h1 id="Fragment调用顺序"><a href="#Fragment调用顺序" class="headerlink" title="Fragment调用顺序"></a>Fragment调用顺序</h1><p>参考：<a href="https://www.cnblogs.com/fajieyefu/p/6092465.html" target="_blank" rel="external">https://www.cnblogs.com/fajieyefu/p/6092465.html</a></p>
<p><strong>Fragment的生命周期有11个函数</strong></p>
<h2 id="Fragment声明周期函数："><a href="#Fragment声明周期函数：" class="headerlink" title="Fragment声明周期函数："></a>Fragment声明周期函数：</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/771042-20170304162533391-72210111.png" alt=""></p>
<h2 id="Fragment声明周期函数调用："><a href="#Fragment声明周期函数调用：" class="headerlink" title="Fragment声明周期函数调用："></a>Fragment声明周期函数调用：</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/945877-20161123093212096-2032834078.png" alt=""></p>
<p><strong>进入宿主Activity中时</strong>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">03-22 14:36:54.109 		MainActivity: ヽ(｀Д´)ﾉ -&gt; onCreate : </div><div class="line">03-22 14:36:54.147 		MainActivity: ヽ(｀Д´)ﾉ -&gt; onStart : </div><div class="line">03-22 14:36:54.151 		MainActivity: ヽ(｀Д´)ﾉ -&gt; onResume : </div><div class="line"></div><div class="line">03-22 14:36:54.178 		AA: ヽ(｀Д´)ﾉ -&gt; onAttach : </div><div class="line">03-22 14:36:54.178 		AA: ヽ(｀Д´)ﾉ -&gt; onCreate : </div><div class="line">03-22 14:36:54.178 		AA: ヽ(｀Д´)ﾉ -&gt; onCreateView : </div><div class="line">03-22 14:36:54.230 		AA: ヽ(｀Д´)ﾉ -&gt; onActivityCreated : </div><div class="line">03-22 14:36:54.233 		AA: ヽ(｀Д´)ﾉ -&gt; onStart : </div><div class="line">03-22 14:36:54.233		AA: ヽ(｀Д´)ﾉ -&gt; onResume : </div><div class="line"></div><div class="line">03-22 14:36:54.256 		BB: ヽ(｀Д´)ﾉ -&gt; onAttach : </div><div class="line">03-22 14:36:54.256 		BB: ヽ(｀Д´)ﾉ -&gt; onCreate : </div><div class="line">03-22 14:36:54.178 		BB: ヽ(｀Д´)ﾉ -&gt; onCreateView : </div><div class="line">03-22 14:36:54.256 		CC: ヽ(｀Д´)ﾉ -&gt; onAttach : </div><div class="line">03-22 14:36:54.256 		CC: ヽ(｀Д´)ﾉ -&gt; onCreate : </div><div class="line">03-22 14:36:54.178 		CC: ヽ(｀Д´)ﾉ -&gt; onCreateView : </div><div class="line">03-22 14:36:54.276 		BB: ヽ(｀Д´)ﾉ -&gt; onActivityCreated : </div><div class="line">03-22 14:36:54.279 		BB: ヽ(｀Д´)ﾉ -&gt; onStart : </div><div class="line">03-22 14:36:54.279 		BB: ヽ(｀Д´)ﾉ -&gt; onResume : </div><div class="line">03-22 14:36:54.294 		CC: ヽ(｀Д´)ﾉ -&gt; onActivityCreated : </div><div class="line">03-22 14:36:54.297 		CC: ヽ(｀Д´)ﾉ -&gt; onStart : </div><div class="line">03-22 14:36:54.297 		CC: ヽ(｀Д´)ﾉ -&gt; onResume :</div></pre></td></tr></table></figure>
<p>在<strong>长期黑屏</strong>后，调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">03-22 14:37:20.726 		AA: ヽ(｀Д´)ﾉ -&gt; onPause : </div><div class="line">03-22 14:37:20.726 		BB: ヽ(｀Д´)ﾉ -&gt; onPause : </div><div class="line">03-22 14:37:20.726 		CC: ヽ(｀Д´)ﾉ -&gt; onPause : </div><div class="line">03-22 14:37:20.726 		MainActivity: ヽ(｀Д´)ﾉ -&gt; onPause : </div><div class="line">03-22 14:37:20.786 		AA: ヽ(｀Д´)ﾉ -&gt; onStop : </div><div class="line">03-22 14:37:20.786 		BB: ヽ(｀Д´)ﾉ -&gt; onStop : </div><div class="line">03-22 14:37:20.787 		CC: ヽ(｀Д´)ﾉ -&gt; onStop : </div><div class="line">03-22 14:37:20.787 		MainActivity: ヽ(｀Д´)ﾉ -&gt; onStop :</div></pre></td></tr></table></figure>
<p><strong>再次被唤醒</strong> 后，调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">03-22 14:37:39.228 		MainActivity: ヽ(｀Д´)ﾉ -&gt; onRestart : </div><div class="line">03-22 14:37:39.240 		AA: ヽ(｀Д´)ﾉ -&gt; onStart : </div><div class="line">03-22 14:37:39.240 		BB: ヽ(｀Д´)ﾉ -&gt; onStart : </div><div class="line">03-22 14:37:39.240 		CC: ヽ(｀Д´)ﾉ -&gt; onStart : </div><div class="line">03-22 14:37:39.241 		MainActivity: ヽ(｀Д´)ﾉ -&gt; onStart : </div><div class="line">03-22 14:37:39.244 		MainActivity: ヽ(｀Д´)ﾉ -&gt; onResume : </div><div class="line">03-22 14:37:39.245 		AA: ヽ(｀Д´)ﾉ -&gt; onResume : </div><div class="line">03-22 14:37:39.245 		BB: ヽ(｀Д´)ﾉ -&gt; onResume : </div><div class="line">03-22 14:37:39.245 		CC: ヽ(｀Д´)ﾉ -&gt; onResume :</div></pre></td></tr></table></figure>
<p>当点击<strong>第2个Fragment</strong>时，<strong>第4个Fragment</strong>的调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">03-22 14:38:46.521 		DD: ヽ(｀Д´)ﾉ -&gt; onAttach : </div><div class="line">03-22 14:38:46.521 		DD: ヽ(｀Д´)ﾉ -&gt; onCreate : </div><div class="line">03-22 14:38:46.521 		DD: ヽ(｀Д´)ﾉ -&gt; onCreateView : </div><div class="line">03-22 14:38:46.556 		DD: ヽ(｀Д´)ﾉ -&gt; onActivityCreated : </div><div class="line">03-22 14:38:46.558 		DD: ヽ(｀Д´)ﾉ -&gt; onStart : </div><div class="line">03-22 14:38:46.559 		DD: ヽ(｀Д´)ﾉ -&gt; onResume :</div></pre></td></tr></table></figure>
<p>直接点击<strong>第4个Fragment</strong>时，<strong>第1、5个Fragment</strong>的调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">03-22 14:41:31.900 		DD: ヽ(｀Д´)ﾉ -&gt; onAttach : </div><div class="line">03-22 14:41:31.900 		DD: ヽ(｀Д´)ﾉ -&gt; onCreate : </div><div class="line">03-22 14:41:31.900 		DD: ヽ(｀Д´)ﾉ -&gt; onCreateView : </div><div class="line">03-22 14:41:31.900 		EE: ヽ(｀Д´)ﾉ -&gt; onAttach : </div><div class="line">03-22 14:41:31.900 		EE: ヽ(｀Д´)ﾉ -&gt; onCreate : </div><div class="line">03-22 14:41:31.900 		EE: ヽ(｀Д´)ﾉ -&gt; onCreateView : </div><div class="line">03-22 14:41:31.930 		DD: ヽ(｀Д´)ﾉ -&gt; onActivityCreated : </div><div class="line">03-22 14:41:31.933 		DD: ヽ(｀Д´)ﾉ -&gt; onStart : </div><div class="line">03-22 14:41:31.933 		DD: ヽ(｀Д´)ﾉ -&gt; onResume : </div><div class="line">03-22 14:41:31.976 		EE: ヽ(｀Д´)ﾉ -&gt; onActivityCreated : </div><div class="line">03-22 14:41:31.979 		EE: ヽ(｀Д´)ﾉ -&gt; onStart : </div><div class="line">03-22 14:41:31.979 		EE: ヽ(｀Д´)ﾉ -&gt; onResume : </div><div class="line">03-22 14:41:32.322 		AA: ヽ(｀Д´)ﾉ -&gt; onPause : </div><div class="line">03-22 14:41:32.322 		AA: ヽ(｀Д´)ﾉ -&gt; onStop : </div><div class="line">03-22 14:41:32.323 		AA: ヽ(｀Д´)ﾉ -&gt; onDestroyView :</div></pre></td></tr></table></figure>
<p>点击<strong>第5个Fragment</strong>时，<strong>第1、2、3个Fragment</strong>的调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">03-22 14:41:32.322 		AA: ヽ(｀Д´)ﾉ -&gt; onPause : </div><div class="line">03-22 14:41:32.322 		AA: ヽ(｀Д´)ﾉ -&gt; onStop : </div><div class="line">03-22 14:41:32.323 		AA: ヽ(｀Д´)ﾉ -&gt; onDestroyView : </div><div class="line">03-22 14:42:59.494 		BB: ヽ(｀Д´)ﾉ -&gt; onPause : </div><div class="line">03-22 14:42:59.494 		CC: ヽ(｀Д´)ﾉ -&gt; onPause : </div><div class="line">03-22 14:42:59.494 		BB: ヽ(｀Д´)ﾉ -&gt; onStop : </div><div class="line">03-22 14:42:59.494 		CC: ヽ(｀Д´)ﾉ -&gt; onStop : </div><div class="line">03-22 14:42:59.495 		BB: ヽ(｀Д´)ﾉ -&gt; onDestroyView : </div><div class="line">03-22 14:42:59.497 		CC: ヽ(｀Д´)ﾉ -&gt; onDestroyView :</div></pre></td></tr></table></figure>
<p>再次点击<strong>第1个Fragment</strong>时，<strong>第4、5个Fragment</strong>的调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">03-22 14:44:16.794 		AA: ヽ(｀Д´)ﾉ -&gt; onCreateView : </div><div class="line">03-22 14:44:16.794 		AA: ヽ(｀Д´)ﾉ -&gt; onActivityCreated : </div><div class="line">03-22 14:44:16.797 		EE: ヽ(｀Д´)ﾉ -&gt; onPause : </div><div class="line">03-22 14:44:16.798 		EE: ヽ(｀Д´)ﾉ -&gt; onStop : </div><div class="line">03-22 14:44:16.798 		EE: ヽ(｀Д´)ﾉ -&gt; onDestroyView : </div><div class="line">03-22 14:44:16.799 		AA: ヽ(｀Д´)ﾉ -&gt; onStart : </div><div class="line">03-22 14:44:16.799 		AA: ヽ(｀Д´)ﾉ -&gt; onResume : </div><div class="line">03-22 14:44:36.074 		DD: ヽ(｀Д´)ﾉ -&gt; onPause : </div><div class="line">03-22 14:44:36.074 		DD: ヽ(｀Д´)ﾉ -&gt; onStop : </div><div class="line">03-22 14:44:36.075 		DD: ヽ(｀Д´)ﾉ -&gt; onDestroyView :</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RecycleView相关]]></title>
      <url>/RecycleView%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<p>与RecyclerView使用相关的集合</p>
<a id="more"></a>
<h1 id="1-item-滑动删除、更改位置：SimpleItemTouchHelperCallback类的使用"><a href="#1-item-滑动删除、更改位置：SimpleItemTouchHelperCallback类的使用" class="headerlink" title="1. item 滑动删除、更改位置：SimpleItemTouchHelperCallback类的使用"></a>1. item 滑动删除、更改位置：SimpleItemTouchHelperCallback类的使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ItemTouchHelper.Callback mCallback = <span class="keyword">null</span>;</div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line"></div><div class="line">mCallback = <span class="keyword">new</span> SimpleItemTouchHelperCallback(mAdapter);</div><div class="line">ItemTouchHelper touchHelper = <span class="keyword">new</span> ItemTouchHelper(mCallback);</div><div class="line">touchHelper.attachToRecyclerView(mRecyclerView);</div></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChildDraw</span><span class="params">(Canvas c, RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, <span class="keyword">float</span> dX, <span class="keyword">float</span> dY, <span class="keyword">int</span> actionState, <span class="keyword">boolean</span> isCurrentlyActive)</span> </span>&#123;</div><div class="line">        .</div><div class="line">        .</div><div class="line">        .</div><div class="line">        </div><div class="line">                <span class="comment">// 此处的操作是根据 具体的item view布局具体执行的。</span></div><div class="line">                <span class="keyword">if</span> ((<span class="keyword">int</span>) dX &gt; oldDX) &#123;</div><div class="line">                    ((TextView) mViewGroup.getChildAt(<span class="number">1</span>).findViewById(R.id.notice_view)).setText(<span class="string">"松手取消删除"</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    ((TextView) mViewGroup.getChildAt(<span class="number">1</span>).findViewById(R.id.notice_view)).setText(<span class="string">"继续左划删除"</span>);</div><div class="line">                &#125;</div><div class="line">	.</div><div class="line">     .</div><div class="line">     .</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="2-数据加载滑动处理"><a href="#2-数据加载滑动处理" class="headerlink" title="2. 数据加载滑动处理"></a>2. 数据加载滑动处理</h1><h2 id="2-1-xml局部布局文件"><a href="#2-1-xml局部布局文件" class="headerlink" title="2.1 xml局部布局文件"></a>2.1 xml局部布局文件</h2><p><strong>注意：</strong><br>在布局文件中，<code>SwipeToLoadLayout</code> 、<code>RefreshHeadView</code>、<code>RecyclerView</code> 、 <code>LoadMoreFooterView</code> 控件的 <strong>id值</strong>均是<strong>固定</strong>的，<strong>不可修改</strong>的。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.zhy.autolayout.AutoRelativeLayout</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_nodate"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"暂无数据"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"@color/Deep_Orange_700"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"@dimen/text56"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:visibility</span>=<span class="string">"gone"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">com.aspsine.swipetoloadlayout.SwipeToLoadLayout</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/swipeToLoadLayout"</span></span></div><div class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"@style/SwipeToLoadLayout"</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">smallb.com.smallenterpriseserver.view.recycler_view_load_refresh.RefreshHeadView</span></span></div><div class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/swipe_refresh_header"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"300px"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></div><div class="line"><span class="tag">            /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/swipe_target"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"@color/Grey_100"</span>/&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">smallb.com.smallenterpriseserver.view.recycler_view_load_refresh.LoadMoreFooterView</span></span></div><div class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/swipe_load_more_footer"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"300px"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">"center"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">com.aspsine.swipetoloadlayout.SwipeToLoadLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">com.zhy.autolayout.AutoRelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="2-2-xml布局中使用到的style样式文件"><a href="#2-2-xml布局中使用到的style样式文件" class="headerlink" title="2.2 xml布局中使用到的style样式文件"></a>2.2 xml布局中使用到的style样式文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- RecyclerView上拉、下拉样式--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"SwipeToLoadLayout"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="xml">    <span class="comment">&lt;!--是否可以上拉、下拉刷新--&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"refresh_enabled"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"load_more_enabled"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="comment">&lt;!-- 宽高--&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_width"</span>&gt;</span>match_parent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_height"</span>&gt;</span>match_parent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="comment">&lt;!-- 上拉、下拉持续时间--&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"load_more_complete_delay_duration"</span>&gt;</span>50<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"refresh_complete_delay_duration"</span>&gt;</span>50<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="comment">&lt;!--上拉、下拉最大可拖动量--&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"load_more_final_drag_offset"</span>&gt;</span>200px<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"refresh_final_drag_offset"</span>&gt;</span>200px<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="comment">&lt;!-- 释放上拉、下拉持续的时间--&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"release_to_loading_more_scrolling_duration"</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"release_to_refreshing_scrolling_duration"</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="comment">&lt;!-- 设置下拉刷新与上拉加载的样式，其值为classic，above，blew或scale--&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"swipe_style"</span>&gt;</span>blew<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="2-3-java代码中使用-加载控件"><a href="#2-3-java代码中使用-加载控件" class="headerlink" title="2.3 java代码中使用 加载控件"></a>2.3 java代码中使用 加载控件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void connectOK() &#123;</div><div class="line">    mData.setVisibility(View.VISIBLE);</div><div class="line">    mNullData.setVisibility(View.GONE);</div><div class="line"></div><div class="line">    initMyView();</div><div class="line">    initMyData();</div><div class="line">    initSwipeLayout();</div><div class="line">    click();</div><div class="line">&#125;</div><div class="line"></div><div class="line">private void click() &#123;</div><div class="line">	searchBtn.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">        @Override</div><div class="line">        public void onClick(View v) &#123;</div><div class="line">            if (mSwipeToLoadLayout.isLoadingMore()) &#123;</div><div class="line">                mSwipeToLoadLayout.setLoadMoreEnabled(false);</div><div class="line">            &#125;</div><div class="line">            mListBeans.clear();</div><div class="line">            list_num = 1;</div><div class="line">            initMyData();</div><div class="line">            mSwipeToLoadLayout.setLoadMoreEnabled(true);</div><div class="line">            mSwipeToLoadLayout.setRefreshing(false);</div><div class="line">        &#125;</div><div class="line">    &#125;);        </div><div class="line">&#125;</div><div class="line"></div><div class="line">// 初始化 刷新、加载控件</div><div class="line">private void initSwipeLayout() &#123;</div><div class="line">    mSwipeToLoadLayout.setRefreshHeaderView(mSwipeRefreshHeader);</div><div class="line">    mSwipeToLoadLayout.setLoadMoreFooterView(mSwipeLoadMoreFooter);</div><div class="line">    mSwipeToLoadLayout.setLoadMoreEnabled(true);</div><div class="line">    mSwipeToLoadLayout.setRefreshEnabled(true);</div><div class="line"></div><div class="line">    //刷新</div><div class="line">    mSwipeToLoadLayout.setOnRefreshListener(new OnRefreshListener() &#123;</div><div class="line">        @Override</div><div class="line">        public void onRefresh() &#123;</div><div class="line">            if (mSwipeToLoadLayout.isLoadingMore()) &#123;</div><div class="line">                mSwipeToLoadLayout.setLoadMoreEnabled(false);</div><div class="line">            &#125;</div><div class="line">            mListBeans.clear();</div><div class="line">            list_num = 1;</div><div class="line">            initMyData();</div><div class="line">            mSwipeToLoadLayout.setLoadMoreEnabled(true);</div><div class="line">            mSwipeToLoadLayout.setRefreshing(false);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    //加载更多</div><div class="line">    mSwipeToLoadLayout.setOnLoadMoreListener(new OnLoadMoreListener() &#123;</div><div class="line">        @Override</div><div class="line">        public void onLoadMore() &#123;</div><div class="line">            if (mSwipeToLoadLayout.isRefreshing()) &#123;</div><div class="line">                mSwipeToLoadLayout.setRefreshEnabled(false);</div><div class="line">            &#125;</div><div class="line">            list_num = list_num + 1;</div><div class="line">            initMyData();</div><div class="line">            mSwipeToLoadLayout.setRefreshEnabled(true);</div><div class="line">            mSwipeToLoadLayout.setLoadingMore(false);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 在 网络请求获取数据的过程中使用</div><div class="line">private void initMyData() &#123;</div><div class="line">    HttpParams params = new HttpParams();</div><div class="line">    params.put(&quot;idcode&quot;, choseidcode);</div><div class="line">    params.put(&quot;page&quot;, list_num);</div><div class="line">    OkGo.post(MEASURE_HISTORY_PRESSURE).params(params).execute(new StringDialogCallback(mContext) &#123;</div><div class="line">        @Override</div><div class="line">        public void onSuccess(String s, Call call, Response response) &#123;</div><div class="line">            Log.e(&quot;aaaaaa&quot;, s);</div><div class="line">            History_Pressure history_pressure = JSON.parseObject(s, History_Pressure.class);</div><div class="line">            if (history_pressure.getCode() == 100) &#123;</div><div class="line">                if (history_pressure.getData().getList().get(0) != null) &#123;</div><div class="line"></div><div class="line">                    nodataTv.setVisibility(View.GONE);</div><div class="line">                    mSwipeToLoadLayout.setVisibility(View.VISIBLE);</div><div class="line"></div><div class="line">                    if (history_pressure.getData().getList().size() &lt; 10) &#123;</div><div class="line">                        mSwipeToLoadLayout.setLoadMoreEnabled(false);</div><div class="line">                        showToast(HistoryPressureActivity.this, &quot;没有更多数据&quot;);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    if (history_pressure.getData().getList().size() &gt; 0) &#123;</div><div class="line">                        for (History_Pressure.DataBean.ListBean listBean : history_pressure.getData().getList()) &#123;</div><div class="line">                            mListBeans.add(listBean);</div><div class="line">                            mAdapter.notifyDataSetChanged();</div><div class="line">                        &#125;</div><div class="line">                    &#125; else &#123;</div><div class="line">                        showToast(HistoryPressureActivity.this, &quot;没有更多数据&quot;);</div><div class="line">                        mSwipeToLoadLayout.setLoadMoreEnabled(false);</div><div class="line">                    &#125;</div><div class="line">                &#125; else &#123;</div><div class="line">                    if (list_num == 1) &#123;</div><div class="line">                        nodataTv.setVisibility(View.VISIBLE);</div><div class="line">                        mSwipeToLoadLayout.setVisibility(View.GONE);</div><div class="line">                    &#125;</div><div class="line">                    // showToast(HistoryPressureActivity.this, &quot;暂无数据&quot;);</div><div class="line">                    mSwipeToLoadLayout.setLoadMoreEnabled(false);</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                showToast(mContext, &quot;加载数据失败&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 初始化界面中的各个控件</div><div class="line">private void initMyView() &#123;</div><div class="line">    mRecyclerView.setLayoutManager(new LinearLayoutManager(this));</div><div class="line">    mRecyclerView.setItemAnimator(new DefaultItemAnimator());</div><div class="line">    mAdapter = new HealthAdapter(HistoryPressureActivity.this, mListBeans);</div><div class="line">    mRecyclerView.setAdapter(mAdapter);</div><div class="line"></div><div class="line">    lists = new ArrayList&lt;&gt;();</div><div class="line">    mFamilyBeans = new ArrayList&lt;&gt;();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="3-适配器"><a href="#3-适配器" class="headerlink" title="3. 适配器"></a>3. 适配器</h1><p>万能适配器：点击事件处理<br>    compile ‘com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.15’<br>数据加载、刷新 ：自己的工具类<br>item条目的处理（滑动、位置移动）：自己的工具类   </p>
<p>使用参考：<a href="https://www.jianshu.com/p/1e20f301272e" target="_blank" rel="external">https://www.jianshu.com/p/1e20f301272e</a><br>官方参考：<a href="http://www.recyclerview.org/" target="_blank" rel="external">http://www.recyclerview.org/</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[框架-MVP初探]]></title>
      <url>/%E6%A1%86%E6%9E%B6-MVP%E5%88%9D%E6%8E%A2/</url>
      <content type="html"><![CDATA[<p>关于Android 的 MVP 框架</p>
<a id="more"></a>
<blockquote>
<p>csdn 参考：<a href="https://www.jianshu.com/p/2ecfc1f4561d" target="_blank" rel="external">https://www.jianshu.com/p/2ecfc1f4561d</a><br>简书 参考：<a href="http://blog.csdn.net/hanchendong/article/details/61919599" target="_blank" rel="external">http://blog.csdn.net/hanchendong/article/details/61919599</a><br>简书 对象销毁 参考：<a href="https://www.jianshu.com/p/1f91cfd68d48" target="_blank" rel="external">https://www.jianshu.com/p/1f91cfd68d48</a><br>简书 命名规范（个人）：<a href="https://www.jianshu.com/p/c43b558c72b4" target="_blank" rel="external">https://www.jianshu.com/p/c43b558c72b4</a></p>
</blockquote>
<p>[TOC]</p>
<h1 id="铺垫"><a href="#铺垫" class="headerlink" title="铺垫"></a>铺垫</h1><p><img src="http://oy991qm3u.bkt.clouddn.com/bg2015020109.png" alt=""></p>
<ol>
<li><p>各部分之间的通信，都是双向的。</p>
</li>
<li><p>View 与 Model 不发生联系，都通过 Presenter 传递。</p>
</li>
<li><p>View 非常薄，不部署任何业务逻辑，称为”被动视图”（Passive View），即没有任何主动性，而 Presenter非常厚，所有逻辑都部署在那里。</p>
</li>
</ol>
<h2 id="项目分析"><a href="#项目分析" class="headerlink" title="项目分析"></a>项目分析</h2><p><strong>设计原则：面向接口编程</strong></p>
<p>他山之石，可以攻玉：</p>
<pre><code>接口的作用类似给层与层之间制定的一种通信协议，两个不同的层级相互交流，只要遵守这些协议即可，并不需要知道具体的实现是怎样
</code></pre><p>构建框架的最终目的是增强项目代码的<strong>可读性</strong> ，<strong>维护性</strong>，和<strong>方便测试</strong> 。<br>要解决上述的三个问题，核心思想有两种：</p>
<ul>
<li><strong>分层</strong> </li>
<li><strong>模块化</strong> 。</li>
</ul>
<p>两个方法最终要实现的就是<strong>解耦</strong>，分层讲的是<strong>纵向</strong>层面上的解耦，模块化则是<strong>横向</strong>上的解耦。</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li><strong>Activity</strong>是全体的控制器，它<strong>创建</strong>并<strong>连接</strong>views和presenters</li>
<li>一般来说，<strong>业务逻辑在presenter中</strong>，并且<strong>依赖view</strong>（在相应的Activity中实现各个View接口）去做Android UI（在View接口的方法中进行数据布置）的工作。</li>
<li>view几乎不包含业务逻辑，它将presenter的<strong>命令转换为UI动作</strong>（在View接口的方法中进行数据布置），并且<strong>监听用户动作传递给presenter</strong>（接口方法被回调）。</li>
<li><strong>合同接口</strong>用于定义views和presenters之间的<strong>联系</strong>。</li>
</ul>
<p><strong>注意</strong>：</p>
<ul>
<li>在一个MVP环境中，”View”项被重载（实现各个View接口）。</li>
<li>在MVP中从presenter接受命令的视图被简单的称为”view”</li>
</ul>
<h2 id="各个角色"><a href="#各个角色" class="headerlink" title="各个角色"></a>各个角色</h2><ul>
<li><strong>Contract（合同）</strong></li>
<li><strong>Activity</strong></li>
<li><strong>Fragment</strong></li>
<li><strong>Presenter（主持人-业务逻辑）</strong></li>
<li><strong>View（UI动作）</strong></li>
<li><strong>Mode（数据操作）</strong></li>
</ul>
<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>引用了诸多 mvp、mvc架构的网络图片，总有那么几张能让自己豁然开朗。</p>
<ul>
<li>Android MVC框架</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/1.jpg" alt=""></p>
<p>Activity 或者 Fragment 直接与数据层交互</p>
<ul>
<li>Android MVP框架</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/2.jpg" alt=""></p>
<p>多了两个层，一个是 Presenter 和 DataManager 层。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[框架-Retrofit2的了解]]></title>
      <url>/%E6%A1%86%E6%9E%B6-Retrofit2%E7%9A%84%E4%BA%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考：<a href="http://blog.csdn.net/ljd2038/article/details/51046512" target="_blank" rel="external">http://blog.csdn.net/ljd2038/article/details/51046512</a><br>参考：<a href="https://www.jianshu.com/p/af8bd1abda82" target="_blank" rel="external">https://www.jianshu.com/p/af8bd1abda82</a></p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<p>retrofit2.0它依赖于OkHttp,不需要显示的导入okHttp,在retrofit中已经导入okhttp3。</p>
<p>retrofit的官网 ：<a href="http://square.github.io/retrofit/" target="_blank" rel="external">http://square.github.io/retrofit/</a></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-04%2014.37.31.png" alt=""></p>
<h1 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h1><h2 id="1-1-将HTTP-API-转换为-java接口"><a href="#1-1-将HTTP-API-转换为-java接口" class="headerlink" title="1.1 将HTTP API 转换为 java接口"></a>1.1 将HTTP API 转换为 java接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GitHubService</span> </span>&#123;</div><div class="line">  <span class="meta">@GET</span>(<span class="string">"users/&#123;user&#125;/repos"</span>)</div><div class="line">  Call&lt;List&lt;Repo&gt;&gt; listRepos(<span class="meta">@Path</span>(<span class="string">"user"</span>) String user);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1-2-接口的实现类"><a href="#1-2-接口的实现类" class="headerlink" title="1.2 接口的实现类"></a>1.2 接口的实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">    .baseUrl(<span class="string">"https://api.github.com/"</span>)</div><div class="line">    .build();</div><div class="line"></div><div class="line">GitHubService service = retrofit.create(GitHubService.class);</div></pre></td></tr></table></figure>
<h2 id="1-3-Call创建的每个GitHubService请求都可以向远程Web服务器发出同步或异步HTTP请求。"><a href="#1-3-Call创建的每个GitHubService请求都可以向远程Web服务器发出同步或异步HTTP请求。" class="headerlink" title="1.3 Call创建的每个GitHubService请求都可以向远程Web服务器发出同步或异步HTTP请求。"></a>1.3 Call创建的每个GitHubService请求都可以向远程Web服务器发出同步或异步HTTP请求。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Call &lt;List &lt;Repo &gt;&gt; repos = service.listRepos（“octocat”）;</div><div class="line"></div><div class="line">call.enqueue(<span class="keyword">new</span> Callback&lt;ResponseBody&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;ResponseBody&gt; call, Response&lt;ResponseBody&gt; response)</span> </span>&#123;</div><div class="line">        ···</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;ResponseBody&gt; call, Throwable t)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="1-4-取消请求"><a href="#1-4-取消请求" class="headerlink" title="1.4 取消请求"></a>1.4 取消请求</h2><p>我们可以终止一个请求。终止操作是对底层的httpclient执行cancel操作。即使是正在执行的请求，也能够立即终止。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">call.cancel();</div></pre></td></tr></table></figure>
<h1 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h1><h3 id="2-1-1-为Retrofit添加Gson转换器"><a href="#2-1-1-为Retrofit添加Gson转换器" class="headerlink" title="2.1.1 为Retrofit添加Gson转换器"></a>2.1.1 为Retrofit添加Gson转换器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">        .baseUrl(<span class="string">"https://api.github.com/"</span>)</div><div class="line">        .addConverterFactory(GsonConverterFactory.create())</div><div class="line">        .build();</div></pre></td></tr></table></figure>
<p><strong>gson依赖：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.squareup.retrofit2:converter-gson:2.0.1&apos;</div></pre></td></tr></table></figure>
<p><strong>Simple XML依赖:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.squareup.retrofit2:converter-simplexml&apos;</div></pre></td></tr></table></figure>
<h3 id="2-1-2-自定义转换器"><a href="#2-1-2-自定义转换器" class="headerlink" title="2.1.2 自定义转换器"></a>2.1.2 自定义转换器</h3><p>如果您需要与使用Retrofit不支持开箱即用的内容格式（例如YAML，txt，自定义格式）的API进行通信，或者希望使用不同的库来实现现有格式，则可以轻松创建你自己的转换器。创建一个扩展<strong>Converter.Factory类</strong>并在构建适配器时传入实例的类。</p>
<h3 id="2-2-增加日志信息"><a href="#2-2-增加日志信息" class="headerlink" title="2.2 增加日志信息"></a>2.2 增加日志信息</h3><p>在retrofit2.0中是没有日志功能的。但是retrofit2.0中依赖OkHttp，所以也就能够通过OkHttp中的interceptor来实现实际的底层的请求和响应日志。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 创建 OkHttp日志拦截器</div><div class="line">HttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor();</div><div class="line">httpLoggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);</div><div class="line">OkHttpClient okHttpClient = new OkHttpClient.Builder()</div><div class="line">        .addInterceptor(httpLoggingInterceptor)</div><div class="line">        .build();</div><div class="line">        </div><div class="line"> // 在 Retrofit 2.0 中通过&apos;client()&apos;进行配置</div><div class="line">Retrofit retrofit = new Retrofit.Builder()</div><div class="line">		.client(okHttpClient)</div><div class="line">		.baseUrl(&quot;https://api.github.com/&quot;)</div><div class="line">		.addConverterFactory(GsonConverterFactory.create())</div><div class="line">		.build();</div></pre></td></tr></table></figure>
<p><strong>日志信息-需要添加如下依赖</strong>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.squareup.okhttp3:logging-interceptor:3.1.2&apos;</div></pre></td></tr></table></figure>
<h3 id="2-3-添加请求头"><a href="#2-3-添加请求头" class="headerlink" title="2.3 添加请求头"></a>2.3 添加请求头</h3><p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Headers(&#123;</div><div class="line">        &quot;Accept: application/vnd.github.v3.full+json&quot;,</div><div class="line">        &quot;User-Agent: RetrofitBean-Sample-App&quot;,</div><div class="line">        &quot;name:ljd&quot;</div><div class="line">&#125;)</div><div class="line">@GET(&quot;repos/&#123;owner&#125;/&#123;repo&#125;/contributors&quot;)</div><div class="line">Call&lt;List&lt;Contributor&gt;&gt; contributorsAndAddHeader(@Path(&quot;owner&quot;) String owner,@Path(&quot;repo&quot;) String repo);</div></pre></td></tr></table></figure>
<p><strong>http的header</strong>：<a href="https://www.cnblogs.com/printN/p/6534529.html" target="_blank" rel="external">https://www.cnblogs.com/printN/p/6534529.html</a><br>                  : <a href="http://blog.csdn.net/qingkongyeyue/article/details/54925741" target="_blank" rel="external">http://blog.csdn.net/qingkongyeyue/article/details/54925741</a></p>
<h1 id="3-请求"><a href="#3-请求" class="headerlink" title="3 请求"></a>3 请求</h1><p>每个方法都必须有一个提供请求方法和相对URL的HTTP注释。有五个内置注释：<strong>GET</strong>，<strong>POST</strong>，<strong>PUT</strong>，<strong>DELETE</strong>，和<strong>HEAD</strong>。资源的相对URL在注释中指定。</p>
<h2 id="3-1-Get请求"><a href="#3-1-Get请求" class="headerlink" title="3.1 Get请求"></a>3.1 Get请求</h2><h3 id="3-1-1-请求方法"><a href="#3-1-1-请求方法" class="headerlink" title="3.1.1 请求方法"></a>3.1.1 请求方法</h3><p><strong>直接一个url：</strong>，<code>@Url</code>，它允许我们直接传入一个请求的URL</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@GET</div><div class="line">Call&lt;List&lt;Contributor&gt;&gt; repoContributorsPaginate(@Url String url);</div></pre></td></tr></table></figure>
<p><strong>路径式</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@GET(&quot;users/list&quot;)</div></pre></td></tr></table></figure>
<h3 id="3-1-2-网址操作"><a href="#3-1-2-网址操作" class="headerlink" title="3.1.2 网址操作"></a>3.1.2 网址操作</h3><p>可以使用方法上的替换块和参数动态更新请求URL。替换块是由{和包围的字母数字字符串}。相应的参数必须@Path使用相同的字符串进行注释。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@GET(&quot;group/&#123;id&#125;/users&quot;)</div><div class="line">Call&lt;List&lt;User&gt;&gt; groupList(@Path(&quot;id&quot;) int groupId);</div></pre></td></tr></table></figure>
<p>您也可以在URL中指定查询参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@GET(&quot;users/list?sort=desc&quot;)</div></pre></td></tr></table></figure>
<h3 id="3-1-3-查询参数也可以添加"><a href="#3-1-3-查询参数也可以添加" class="headerlink" title="3.1.3 查询参数也可以添加"></a>3.1.3 查询参数也可以添加</h3><p>查询参数也可以添加。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@GET(&quot;group/&#123;id&#125;/users&quot;)</div><div class="line">Call&lt;List&lt;User&gt;&gt; groupList(@Path(&quot;id&quot;) int groupId, @Query(&quot;sort&quot;) String sort);</div></pre></td></tr></table></figure>
<h3 id="3-1-4-对于复杂的查询参数组合，Map可以使用"><a href="#3-1-4-对于复杂的查询参数组合，Map可以使用" class="headerlink" title="3.1.4 对于复杂的查询参数组合，Map可以使用"></a>3.1.4 对于复杂的查询参数组合，Map可以使用</h3><p>对于复杂的查询参数组合，Map可以使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@GET(&quot;group/&#123;id&#125;/users&quot;)</div><div class="line">Call&lt;List&lt;User&gt;&gt; groupList(@Path(&quot;id&quot;) int groupId, @QueryMap Map&lt;String, String&gt; options);</div></pre></td></tr></table></figure>
<h1 id="4-Form-encoded：发送表单数据"><a href="#4-Form-encoded：发送表单数据" class="headerlink" title="4. Form encoded：发送表单数据"></a>4. Form encoded：发送表单数据</h1><h2 id="4-1-表单数据"><a href="#4-1-表单数据" class="headerlink" title="4.1 表单数据"></a>4.1 表单数据</h2><p>使用<strong>@FormUrlEncoded</strong>注解来发送表单数据。使用 <strong>@Field</strong>注解和参数来指定每个表单项的<strong>Key</strong>，<strong>value</strong>为参数的值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FormUrlEncoded</span></div><div class="line"><span class="meta">@POST</span>(<span class="string">"user/edit"</span>)</div><div class="line"><span class="function">Call&lt;User&gt; <span class="title">updateUser</span><span class="params">(@Field(<span class="string">"first_name"</span>)</span> String first, @<span class="title">Field</span><span class="params">(<span class="string">"last_name"</span>)</span> String last)</span>;</div></pre></td></tr></table></figure>
<h2 id="4-2-多个表单参数"><a href="#4-2-多个表单参数" class="headerlink" title="4.2 多个表单参数"></a>4.2 多个表单参数</h2><p>可以通过<strong>@FieldMap</strong>注解和<strong>Map对象参数</strong>来指定每个表单项的<strong>Key</strong>，<strong>value</strong>的值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@FormUrlEncoded</div><div class="line">@POST(&quot;user/edit&quot;)</div><div class="line">Call&lt;User&gt; updateUser(@FieldMap Map&lt;String,String&gt; fieldMap);</div></pre></td></tr></table></figure>
<h1 id="5-Multipart-图片上传"><a href="#5-Multipart-图片上传" class="headerlink" title="5. Multipart 图片上传"></a>5. Multipart 图片上传</h1><blockquote>
<p>参考：<a href="http://blog.csdn.net/ITjianghuxiaoxiong/article/details/52135748" target="_blank" rel="external">http://blog.csdn.net/ITjianghuxiaoxiong/article/details/52135748</a><br>单图片：<a href="http://blog.csdn.net/sw5131899/article/details/52062321" target="_blank" rel="external">http://blog.csdn.net/sw5131899/article/details/52062321</a><br><a href="http://blog.csdn.net/sk719887916/article/details/51755427" target="_blank" rel="external">http://blog.csdn.net/sk719887916/article/details/51755427</a><br>完整：<a href="http://blog.csdn.net/sk719887916/article/details/51755427" target="_blank" rel="external">http://blog.csdn.net/sk719887916/article/details/51755427</a><br>封装：<a href="https://www.jianshu.com/p/29c2a9ac5abf" target="_blank" rel="external">https://www.jianshu.com/p/29c2a9ac5abf</a><br>基础：<a href="https://www.jianshu.com/p/308f3c54abdd" target="_blank" rel="external">https://www.jianshu.com/p/308f3c54abdd</a><br>http基础：<a href="https://www.jianshu.com/p/e544b7a76dac" target="_blank" rel="external">https://www.jianshu.com/p/e544b7a76dac</a></p>
</blockquote>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Multipart</span>  </div><div class="line">  <span class="meta">@POST</span>(<span class="string">"/member/uploadMemberIcon.do"</span>)  </div><div class="line">  Call&lt;Result&lt;String&gt;&gt; uploadMemberIcon(<span class="meta">@Part</span> MultipartBody.Part part<span class="comment">/*, @Part(ParamKey.TOKEN) RequestBody token*/</span>);</div></pre></td></tr></table></figure>
<h1 id="6-Retrofit与RxJava结合"><a href="#6-Retrofit与RxJava结合" class="headerlink" title="6. Retrofit与RxJava结合"></a>6. Retrofit与RxJava结合</h1><p>创建retrofit对象实例时，通过addCallAdapterFactory来添加对RxJava的支持。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">        .client(okHttpClient)</div><div class="line">        .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class="line">        .addConverterFactory(GsonConverterFactory.create())</div><div class="line">        .baseUrl(<span class="string">"https://api.github.com/"</span>)</div><div class="line">        .build();</div></pre></td></tr></table></figure>
<p>使用Observable创建一个API接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"repos/&#123;owner&#125;/&#123;repo&#125;/contributors"</span>)</div><div class="line">Observable&lt;List&lt;Contributor&gt;&gt; contributorsByRxJava(<span class="meta">@Path</span>(<span class="string">"owner"</span>) String owner,<span class="meta">@Path</span>(<span class="string">"repo"</span>) String repo);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[温故知新-数据结构-2]]></title>
      <url>/%E6%B8%A9%E6%95%85%E7%9F%A5%E6%96%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-2/</url>
      <content type="html"><![CDATA[<p>温故知新</p>
<a id="more"></a>
<p>[TOC]</p>
<h2 id="寄语"><a href="#寄语" class="headerlink" title="寄语"></a>寄语</h2><hr>
<p><strong>日、周、月 –&gt;</strong></p>
<p><strong>郝斌：<br>    　　想要学软件，靠软件吃饭，就要一直学，天天学，几年以后就是高手了，不要想着转行。<br>    　　想要当高手必须要学数据结构，不学数据结构，怎么当高手。<br>        看懂答案。</strong></p>
<hr>
<p>根本：</p>
<ul>
<li><strong>一般：存储不一样，操作不一样；</strong></li>
<li><strong>泛型：存储不一样，操作也一样。</strong></li>
</ul>
<hr>
<p><strong>流程 –&gt; 功能 –&gt; 试数</strong></p>
<hr>
<h2 id="1-数据存储"><a href="#1-数据存储" class="headerlink" title="1. 数据存储"></a>1. 数据存储</h2><h3 id="1-1-存储结构"><a href="#1-1-存储结构" class="headerlink" title="1.1 存储结构"></a>1.1 存储结构</h3><ul>
<li><p><strong>线性结构</strong>：把所有的<strong>结点（数组中的元素、个体）</strong>用一根直线穿起来。</p>
<ul>
<li>连续存储：数组</li>
<li>离散存储：链表</li>
</ul>
</li>
<li><p><strong>非线性结构</strong></p>
</li>
</ul>
<h3 id="1-2-存储结构应用"><a href="#1-2-存储结构应用" class="headerlink" title="1.2 存储结构应用"></a>1.2 存储结构应用</h3><ul>
<li><strong>栈</strong></li>
<li><strong>队列</strong></li>
</ul>
<h2 id="2-存储结构-数组【连续存储】"><a href="#2-存储结构-数组【连续存储】" class="headerlink" title="2. 存储结构 - 数组【连续存储】"></a>2. 存储结构 - 数组【连续存储】</h2><h3 id="2-1-数组定义："><a href="#2-1-数组定义：" class="headerlink" title="2.1 数组定义："></a>2.1 数组定义：</h3><p>元素类型相同，大小相等。</p>
<h3 id="2-2-数组定义："><a href="#2-2-数组定义：" class="headerlink" title="2.2 数组定义："></a>2.2 数组定义：</h3><ul>
<li><p><strong>优点：</strong></p>
<ul>
<li>存取效率高</li>
</ul>
</li>
<li><p><strong>缺点：</strong></p>
<ul>
<li>插入、删除慢</li>
<li>需要占用大块连续的内存空间</li>
<li>需要知道数组的长度</li>
</ul>
</li>
</ul>
<h3 id="2-3-代码实践："><a href="#2-3-代码实践：" class="headerlink" title="2.3 代码实践："></a>2.3 代码实践：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mm_malloc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 定义一个数据类型，该数据类型名字叫：struct ArrayYCA。数组所具有的条件:4个</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArrayYCA</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">int</span> * arrayBase; <span class="comment">// 存储的是数组的第一个元素的地址</span></div><div class="line">    <span class="keyword">int</span> length; <span class="comment">// 数组所能容纳的最大元素个数</span></div><div class="line">    <span class="keyword">int</span> cnt; <span class="comment">// 当前数组的有效个数</span></div><div class="line">    <span class="keyword">int</span> increment; <span class="comment">// 数组自动增长因子：当当前数组的元素个数已达到最大元素个数时,通过增加“increment”个元素个数，来扩充当前数组的内存空间。</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 定义一个数据类型，该数据类型名字叫：struct ArrayYCB。数组所具有的条件：3个</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArrayYCB</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">int</span> * arrayBase; <span class="comment">// 存储的是数组的第一个元素的地址</span></div><div class="line">    <span class="keyword">int</span> length; <span class="comment">// 数组所能容纳的最大元素个数</span></div><div class="line">    <span class="keyword">int</span> cnt; <span class="comment">// 当前数组的有效个数</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 是否已满</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_full</span><span class="params">(struct ArrayYCB * <span class="built_in">array</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">array</span>-&gt;cnt == <span class="built_in">array</span>-&gt;length)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 追加</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">append_array</span><span class="params">(struct ArrayYCB * <span class="built_in">array</span>, <span class="keyword">int</span> value)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (is_full(<span class="built_in">array</span>))</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"当前数组已满！\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">array</span>-&gt;arrayBase[<span class="built_in">array</span>-&gt;cnt] = value;</div><div class="line">        <span class="built_in">array</span>-&gt;cnt++;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 插入 position的值从1开始</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert_array</span><span class="params">(struct ArrayYCB * <span class="built_in">array</span>, <span class="keyword">int</span> value, <span class="keyword">int</span> position)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (is_full(<span class="built_in">array</span>)) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"已满，插入失败\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (position &lt; <span class="number">1</span> || position &gt; <span class="built_in">array</span>-&gt;cnt + <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"position参数输入异常\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (i = <span class="built_in">array</span>-&gt;cnt - <span class="number">1</span>; i &gt;= position - <span class="number">1</span>; i--) &#123;</div><div class="line">        <span class="built_in">array</span>-&gt;arrayBase[i+<span class="number">1</span>] = <span class="built_in">array</span>-&gt;arrayBase[i];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">array</span>-&gt;arrayBase[position<span class="number">-1</span>] = value;</div><div class="line">    <span class="built_in">array</span>-&gt;cnt++;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 判空</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_empty</span><span class="params">(struct ArrayYCB * <span class="built_in">array</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">array</span>-&gt;cnt)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 删除 删除指定元素后，既能返回 删除bool值，又能返回所删除的具体值。</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">delete_array</span><span class="params">(struct ArrayYCB * <span class="built_in">array</span>, <span class="keyword">int</span> position, <span class="keyword">int</span> * delValue)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (is_empty(<span class="built_in">array</span>))</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (position &lt; <span class="number">1</span> || position &gt; <span class="built_in">array</span>-&gt;cnt) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 主函数中获取删除的数值</span></div><div class="line">    * delValue = <span class="built_in">array</span>-&gt;arrayBase[position - <span class="number">1</span>];</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (i = position; i &lt; <span class="built_in">array</span>-&gt;cnt; ++i) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"更新前数值为： %d, 更新后数值为： %d， 当前i值为： %d \n"</span>, <span class="built_in">array</span>-&gt;arrayBase[i<span class="number">-1</span>], <span class="built_in">array</span>-&gt;arrayBase[i], i);</div><div class="line">        <span class="built_in">array</span>-&gt;arrayBase[i<span class="number">-1</span>] = <span class="built_in">array</span>-&gt;arrayBase[i];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">array</span>-&gt;cnt--;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_array</span><span class="params">(struct ArrayYCB * <span class="built_in">array</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (is_empty(<span class="built_in">array</span>)) </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"当前数组为空！\n"</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">array</span>-&gt;cnt; i++) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,<span class="built_in">array</span>-&gt;arrayBase[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 排序</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">sort_array</span><span class="params">(struct ArrayYCB * <span class="built_in">array</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> temp;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">array</span>-&gt;cnt; i++) &#123;</div><div class="line">         <span class="built_in">printf</span>(<span class="string">"i is %d\n"</span>, <span class="built_in">array</span>-&gt;arrayBase[i]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j =  i+<span class="number">1</span>; j &lt; <span class="built_in">array</span>-&gt;cnt; j++) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"j is %d, "</span>, <span class="built_in">array</span>-&gt;arrayBase[j]);</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">array</span>-&gt;arrayBase[i] &gt; <span class="built_in">array</span>-&gt;arrayBase[j]) &#123;</div><div class="line">                temp = <span class="built_in">array</span>-&gt;arrayBase[i];</div><div class="line">                <span class="built_in">array</span>-&gt;arrayBase[i] = <span class="built_in">array</span>-&gt;arrayBase[j];</div><div class="line">                <span class="built_in">array</span>-&gt;arrayBase[j] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n第 %d 次排序后的结果为："</span>, i+<span class="number">1</span>);</div><div class="line">        show_array(<span class="built_in">array</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 倒序</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inversion_array</span><span class="params">(struct ArrayYCB * <span class="built_in">array</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> j = <span class="built_in">array</span>-&gt;cnt - <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> temp;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</div><div class="line">        temp= <span class="built_in">array</span>-&gt;arrayBase[i];</div><div class="line">        <span class="built_in">array</span>-&gt;arrayBase[i] = <span class="built_in">array</span>-&gt;arrayBase[j];</div><div class="line">        <span class="built_in">array</span>-&gt;arrayBase[j] = temp;</div><div class="line">        i++;</div><div class="line">        j--;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 初始化</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_array</span><span class="params">(struct ArrayYCB * <span class="built_in">array</span>, <span class="keyword">int</span> length)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">// array这个指针变量指向结构体变量中的arrayBase；</span></div><div class="line">    <span class="built_in">array</span>-&gt;arrayBase = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * length);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == <span class="built_in">array</span>-&gt;arrayBase) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"状态内存分配异常！\n"</span>);</div><div class="line">        <span class="comment">// 终止整个程序</span></div><div class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//(*array).length = 99;</span></div><div class="line">        <span class="built_in">array</span>-&gt;length = length;</div><div class="line">        <span class="built_in">array</span>-&gt;cnt = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 主函数</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ArrayYCB</span> <span class="title">arr</span>;</span></div><div class="line">    </div><div class="line">    init_array(&amp;arr,<span class="number">6</span>);</div><div class="line">    </div><div class="line">    append_array(&amp;arr, <span class="number">11</span>);</div><div class="line">    append_array(&amp;arr, <span class="number">22</span>);</div><div class="line">    append_array(&amp;arr, <span class="number">33</span>);</div><div class="line">    append_array(&amp;arr, <span class="number">44</span>);</div><div class="line">    append_array(&amp;arr, <span class="number">55</span>);</div><div class="line">    insert_array(&amp;arr,<span class="number">99</span>,<span class="number">2</span>);</div><div class="line">    </div><div class="line"><span class="comment">//    if (!append_array(&amp;arr, 7)) &#123;</span></div><div class="line"><span class="comment">//        printf("追加失败\n");</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"删除前结果为："</span>);</div><div class="line">    show_array(&amp;arr);</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> val; <span class="comment">// 为获取删除元素的数值声明变量</span></div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (delete_array(&amp;arr, <span class="number">3</span>, &amp;val)) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"删除成功！\n"</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"删除的数值 = %d\n"</span>,val);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"到序前结果为："</span>);</div><div class="line">    show_array(&amp;arr);</div><div class="line">    inversion_array(&amp;arr);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"到序结果为："</span>);</div><div class="line">    show_array(&amp;arr);</div><div class="line">    </div><div class="line">    sort_array(&amp;arr);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"排序结果为："</span>);</div><div class="line">    show_array(&amp;arr);</div><div class="line">   </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>运行结果：</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">删除前结果为：<span class="number">11</span> <span class="number">99</span> <span class="number">22</span> <span class="number">33</span> <span class="number">44</span> <span class="number">55</span> </div><div class="line">更新前数值为： <span class="number">22</span>, 更新后数值为： <span class="number">33</span>， 当前i值为： <span class="number">3</span> </div><div class="line">更新前数值为： <span class="number">33</span>, 更新后数值为： <span class="number">44</span>， 当前i值为： <span class="number">4</span> </div><div class="line">更新前数值为： <span class="number">44</span>, 更新后数值为： <span class="number">55</span>， 当前i值为： <span class="number">5</span> </div><div class="line">删除成功！</div><div class="line">删除的数值 = <span class="number">22</span></div><div class="line">到序前结果为：<span class="number">11</span> <span class="number">99</span> <span class="number">33</span> <span class="number">44</span> <span class="number">55</span> </div><div class="line">到序结果为：<span class="number">55</span> <span class="number">44</span> <span class="number">33</span> <span class="number">99</span> <span class="number">11</span> </div><div class="line">i is <span class="number">55</span></div><div class="line">j is <span class="number">44</span>, j is <span class="number">33</span>, j is <span class="number">99</span>, j is <span class="number">11</span>, </div><div class="line">第 <span class="number">1</span> 次排序后的结果为：<span class="number">11</span> <span class="number">55</span> <span class="number">44</span> <span class="number">99</span> <span class="number">33</span> </div><div class="line"></div><div class="line">i is <span class="number">55</span></div><div class="line">j is <span class="number">44</span>, j is <span class="number">99</span>, j is <span class="number">33</span>, </div><div class="line">第 <span class="number">2</span> 次排序后的结果为：<span class="number">11</span> <span class="number">33</span> <span class="number">55</span> <span class="number">99</span> <span class="number">44</span> </div><div class="line"></div><div class="line">i is <span class="number">55</span></div><div class="line">j is <span class="number">99</span>, j is <span class="number">44</span>, </div><div class="line">第 <span class="number">3</span> 次排序后的结果为：<span class="number">11</span> <span class="number">33</span> <span class="number">44</span> <span class="number">99</span> <span class="number">55</span> </div><div class="line"></div><div class="line">i is <span class="number">99</span></div><div class="line">j is <span class="number">55</span>, </div><div class="line">第 <span class="number">4</span> 次排序后的结果为：<span class="number">11</span> <span class="number">33</span> <span class="number">44</span> <span class="number">55</span> <span class="number">99</span> </div><div class="line"></div><div class="line">i is <span class="number">99</span></div><div class="line"></div><div class="line">第 <span class="number">5</span> 次排序后的结果为：<span class="number">11</span> <span class="number">33</span> <span class="number">44</span> <span class="number">55</span> <span class="number">99</span> </div><div class="line"></div><div class="line">排序结果为：<span class="number">11</span> <span class="number">33</span> <span class="number">44</span> <span class="number">55</span> <span class="number">99</span></div></pre></td></tr></table></figure>
<h2 id="3-存储结构-链表【离散存储】"><a href="#3-存储结构-链表【离散存储】" class="headerlink" title="3. 存储结构 - 链表【离散存储】"></a>3. 存储结构 - 链表【离散存储】</h2><h3 id="3-1-重要性"><a href="#3-1-重要性" class="headerlink" title="3.1 重要性"></a>3.1 重要性</h3><p><strong>链表 -&gt; 树、图</strong></p>
<h3 id="3-2-链表定义："><a href="#3-2-链表定义：" class="headerlink" title="3.2 链表定义："></a>3.2 链表定义：</h3><ul>
<li>n个结点地址离散分配，彼此通过指针相连；</li>
<li>（除首尾结点外）每个结点只有一个前驱结点和一个后续结点；</li>
<li>首结点没有前驱结点，尾结点没有后续结点。</li>
</ul>
<h3 id="3-3-专业术语："><a href="#3-3-专业术语：" class="headerlink" title="3.3 专业术语："></a>3.3 专业术语：</h3><ul>
<li><p><strong>头结点</strong>：第一个有效结点之前的结点。</p>
<ul>
<li>无数据</li>
<li>无链表中结点个数</li>
<li>无实际含义，仅方便操作</li>
<li>头结点与首结点数据类型形同</li>
</ul>
</li>
<li><p><strong>首结点</strong>：第一个<strong>有效结点</strong>（存放数据）</p>
</li>
<li><strong>尾结点</strong>：最后一个<strong>有效结点</strong>（存放数据）</li>
<li><strong>头指针</strong>：指向<strong>头结点</strong>的指针变量</li>
<li><strong>尾指针</strong>：指向<strong>尾结点</strong>的指针变量</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-01%2013.17.54.png" alt=""></p>
<p>通过函数对一个链表进行处理，只需要<strong>1个参数</strong>确定唯一链表：<strong>头指针</strong></p>
<h3 id="3-3-链表分类："><a href="#3-3-链表分类：" class="headerlink" title="3.3 链表分类："></a>3.3 链表分类：</h3><ul>
<li><strong>单链表</strong></li>
<li><strong>双链表</strong>：每一个结点有2个指针域</li>
<li><strong>循环链表</strong>：能通过任何一个结点找到其他所有的结点。</li>
<li><strong>非循环链表</strong></li>
</ul>
<h3 id="3-4-链表算法："><a href="#3-4-链表算法：" class="headerlink" title="3.4 链表算法："></a>3.4 链表算法：</h3><ul>
<li><p><strong>优点：</strong></p>
<ul>
<li>空间没有限制</li>
<li>插入、删除元素快</li>
</ul>
</li>
<li><p><strong>缺点：</strong></p>
<ul>
<li>存取速度慢</li>
</ul>
</li>
</ul>
<h3 id="3-5-链表算法："><a href="#3-5-链表算法：" class="headerlink" title="3.5 链表算法："></a>3.5 链表算法：</h3><ul>
<li>遍历、输出元素</li>
<li>查找</li>
<li>清空</li>
<li>销毁</li>
<li>求长度</li>
<li>排序</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-01%2016.45.41.png" alt=""></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-01%2016.39.28.png" alt=""></p>
<ul>
<li>删除结点</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-01%2014.22.21.png" alt=""></p>
<ul>
<li>插入结点</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-01%2014.23.39.png" alt=""></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mm_malloc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 链表数据结构</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">int</span> data; <span class="comment">// 数据域</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">pNext</span>;</span>  <span class="comment">// 指针域</span></div><div class="line">&#125; NODE, * PNODE;</div><div class="line"></div><div class="line"><span class="comment">// 函数声明</span></div><div class="line"><span class="comment">// 创建链表</span></div><div class="line"><span class="function">PNODE <span class="title">create_link</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"><span class="comment">// 输出链表</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_link</span><span class="params">(PNODE pHead)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 判空</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_empty</span><span class="params">(PNODE pHead)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 长度</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">length_link</span><span class="params">(PNODE pHead)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 插入</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert_link</span><span class="params">(PNODE pHead, <span class="keyword">int</span> postion, <span class="keyword">int</span> val)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 删除</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">delete_link</span><span class="params">(PNODE pHead, <span class="keyword">int</span> postion, <span class="keyword">int</span> * val)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 排序</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_link</span><span class="params">(PNODE pHead)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    PNODE pHead = <span class="literal">NULL</span>;</div><div class="line">    pHead = create_link();</div><div class="line">    <span class="keyword">if</span> (is_empty(pHead))</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"该链表为空！"</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        traverse_link(pHead);</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> length = length_link(pHead);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"link length = %d\n"</span>,length);</div><div class="line">    <span class="comment">// link length = 2</span></div><div class="line">    </div><div class="line">    sort_link(pHead);</div><div class="line">    traverse_link(pHead);</div><div class="line">    <span class="comment">// data = 12, data = 34, data = 54, data = 88,</span></div><div class="line">    </div><div class="line">    insert_link(pHead, <span class="number">4</span>, <span class="number">76</span>);</div><div class="line">    traverse_link(pHead);</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    delete_link(pHead,<span class="number">3</span>,&amp;val);</div><div class="line">    traverse_link(pHead);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"删除的数据 = %d\n"</span>,val);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 创建链表</span></div><div class="line"><span class="function">PNODE <span class="title">create_link</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> len;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    </div><div class="line">    <span class="comment">// 1.分配了一个不存放数据的 头结点</span></div><div class="line">    PNODE pHead = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</div><div class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pHead) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"程序内存分配失败，终止！"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 2. 指向 头结点</span></div><div class="line">    PNODE pTail = pHead;</div><div class="line">    pTail-&gt;pNext = <span class="literal">NULL</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"请输入链表结点个数 = "</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;len);</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"请输入第%d个数值:"</span>,i+<span class="number">1</span>);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;val);</div><div class="line">        </div><div class="line">        <span class="comment">// 3.创建带有实际数据的结点</span></div><div class="line">        PNODE pNew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</div><div class="line">        <span class="keyword">if</span> (<span class="literal">NULL</span> == pNew) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"程序内存分配失败，终止！"</span>);</div><div class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// pTail的出现是使得pNew永远指向 尾结点</span></div><div class="line">        pNew-&gt;data = val;</div><div class="line">        <span class="comment">// 将新生成的pNew结点 “挂” 到链表中</span></div><div class="line">        pTail-&gt;pNext = pNew;</div><div class="line">        <span class="comment">// 使得 pNew成为尾结点</span></div><div class="line">        pNew-&gt;pNext = <span class="literal">NULL</span>;</div><div class="line">        <span class="comment">// 使得pTail成为尾结点</span></div><div class="line">        pTail = pNew;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> pHead;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 输出链表</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_link</span><span class="params">(PNODE pHead)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    PNODE p = pHead-&gt;pNext;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">NULL</span> != p) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"data = %d, "</span>,p-&gt;data);</div><div class="line">        <span class="comment">// data = 21, data = 23,</span></div><div class="line">        p = p-&gt;pNext;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> 请输入链表结点个数 = 4</span></div><div class="line"><span class="comment"> 请输入第1个数值:21</span></div><div class="line"><span class="comment"> 请输入第2个数值:23</span></div><div class="line"><span class="comment"> 请输入第3个数值:34</span></div><div class="line"><span class="comment"> 请输入第4个数值:45</span></div><div class="line"><span class="comment"> data = 21, data = 23, data = 34, data = 45,</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="comment">// 判空</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_empty</span><span class="params">(PNODE pHead)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pHead-&gt;pNext)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 长度</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">length_link</span><span class="params">(PNODE pHead)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    PNODE p = pHead-&gt;pNext;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">NULL</span> != p) &#123;</div><div class="line">        count++;</div><div class="line">        p = p-&gt;pNext;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 排序</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_link</span><span class="params">(PNODE pHead)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> length = length_link(pHead);</div><div class="line">    <span class="keyword">int</span> i, j, temp;</div><div class="line">    PNODE p,q;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, p = pHead-&gt;pNext; i &lt; length - <span class="number">1</span>; i++, p = p-&gt;pNext)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>, q = p-&gt;pNext; j &lt;length; j++, q = q-&gt;pNext)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (p-&gt;data &gt; q-&gt;data)</div><div class="line">            &#123;</div><div class="line">                temp = p-&gt;data;</div><div class="line">                p-&gt;data = q-&gt;data;</div><div class="line">                q-&gt;data = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 插入</span></div><div class="line"><span class="comment">// 在pHead所指向的链表的第position个结点前面插入一个新的结点。插入结点的值是val，并且position的值是1</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert_link</span><span class="params">(PNODE pHead, <span class="keyword">int</span> postion, <span class="keyword">int</span> val)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    PNODE p = pHead;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"pHead 当前地址 =  %X\n"</span>,p);</div><div class="line">    <span class="comment">// 进行条件判断</span></div><div class="line">    <span class="keyword">while</span> (<span class="literal">NULL</span> != p &amp;&amp; i &lt; postion - <span class="number">1</span>) &#123;</div><div class="line">        <span class="comment">// 获取到对应position-1位置的链表结点</span></div><div class="line">        p = p-&gt;pNext;</div><div class="line">        <span class="keyword">int</span> pVal = p-&gt;data;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"pHead  %d 当前地址 =  %X, 对应的数据为 = %d\n"</span>,i, p, pVal);</div><div class="line">        </div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (i &gt; postion || <span class="literal">NULL</span> == p) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 声明一个新结点</span></div><div class="line">    PNODE pNew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PNODE));</div><div class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pNew) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"内次分配失败，退出！"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 为新增加的结点赋值</span></div><div class="line">    pNew-&gt;data = val;</div><div class="line">    </div><div class="line">    PNODE q = p-&gt;pNext;</div><div class="line">    p-&gt;pNext = pNew;</div><div class="line">    pNew-&gt;pNext = q;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 删除 , 得到删除的元素值</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">delete_link</span><span class="params">(PNODE pHead, <span class="keyword">int</span> postion, <span class="keyword">int</span> * val)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    PNODE p = pHead;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> (<span class="literal">NULL</span> != p-&gt;pNext &amp;&amp; i &lt; postion - <span class="number">1</span>) &#123;</div><div class="line">        p = p-&gt;pNext;</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (i &gt; postion || <span class="literal">NULL</span> == p) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    PNODE q = p-&gt;pNext;</div><div class="line">    *val = q-&gt;data;</div><div class="line">    </div><div class="line">    p-&gt;pNext = p-&gt;pNext-&gt;pNext;</div><div class="line">    <span class="built_in">free</span>(q);</div><div class="line">    q = <span class="literal">NULL</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果为：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">请输入链表结点个数 = <span class="number">4</span></div><div class="line">请输入第<span class="number">1</span>个数值:<span class="number">21</span></div><div class="line">请输入第<span class="number">2</span>个数值:<span class="number">32</span></div><div class="line">请输入第<span class="number">3</span>个数值:<span class="number">14</span></div><div class="line">请输入第<span class="number">4</span>个数值:<span class="number">55</span></div><div class="line">data = <span class="number">21</span>, data = <span class="number">32</span>, data = <span class="number">14</span>, data = <span class="number">55</span>, </div><div class="line">link length = <span class="number">4</span></div><div class="line">data = <span class="number">14</span>, data = <span class="number">21</span>, data = <span class="number">32</span>, data = <span class="number">55</span>, </div><div class="line">pHead 当前地址 =  <span class="number">4072E0</span></div><div class="line">pHead  <span class="number">0</span> 当前地址 =  <span class="number">407360</span>, 对应的数据为 = <span class="number">14</span></div><div class="line">pHead  <span class="number">1</span> 当前地址 =  <span class="number">40</span>C520, 对应的数据为 = <span class="number">21</span></div><div class="line">pHead  <span class="number">2</span> 当前地址 =  <span class="number">601040</span>, 对应的数据为 = <span class="number">32</span></div><div class="line">data = <span class="number">14</span>, data = <span class="number">21</span>, data = <span class="number">32</span>, data = <span class="number">76</span>, data = <span class="number">55</span>, </div><div class="line">data = <span class="number">14</span>, data = <span class="number">21</span>, data = <span class="number">76</span>, data = <span class="number">55</span>, </div><div class="line">删除的数据 = <span class="number">32</span></div></pre></td></tr></table></figure>
<h2 id="4-额外"><a href="#4-额外" class="headerlink" title="4. 额外"></a>4. 额外</h2><ul>
<li>关于各个编译器支持标准不同，导致bool类型出错的问题：<br>参考：<a href="https://www.cnblogs.com/Ahair/p/5005561.html" target="_blank" rel="external">https://www.cnblogs.com/Ahair/p/5005561.html</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 温故知新 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 温故知新 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[温故知新-数据结构-1]]></title>
      <url>/%E6%B8%A9%E6%95%85%E7%9F%A5%E6%96%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-1/</url>
      <content type="html"><![CDATA[<p>温故知新</p>
<a id="more"></a>
<p>[TOC]</p>
<h2 id="寄语"><a href="#寄语" class="headerlink" title="寄语"></a>寄语</h2><hr>
<p><strong>日、周、月 –&gt;</strong></p>
<p><strong>郝斌：<br>    　　想要学软件，靠软件吃饭，就要一直学，天天学，几年以后就是高手了，不要想着转行。<br>    　　想要当高手必须要学数据结构，不学数据结构，怎么当高手。<br>    　　看懂答案。</strong></p>
<hr>
<p>根本：</p>
<ul>
<li><strong>一般：存储不一样，操作不一样；</strong></li>
<li><strong>泛型：存储不一样，操作也一样。</strong></li>
</ul>
<hr>
<p><strong>流程 –&gt; 功能 –&gt; 试数</strong></p>
<hr>
<h2 id="1-基础"><a href="#1-基础" class="headerlink" title="1. 基础"></a>1. 基础</h2><h3 id="1-1-数据结构定义："><a href="#1-1-数据结构定义：" class="headerlink" title="1.1 数据结构定义："></a>1.1 数据结构定义：</h3><ul>
<li><p><strong>完整：</strong><br>　　把现实中大量而复杂的问题以<strong>特定的数据类型（个体）</strong>和<strong>特定的存储结构（个体间的关系）</strong>保存到主存储器（内存）中，以及在此基础上为实现某一个功能而执行的相应<strong>操作</strong>，这个操作就叫做<strong>算法</strong>。<br>　　<br>　　数据结构是转门研究数据存储的问题。<br>　　数据的存储包含2方面：个体的存储 + 个体关系的存储 
　　</p>
</li>
<li><p><strong>简述：</strong><br>　　<strong>数据结构</strong> = 个体 + 个体间的关系<br>　　<strong>算法</strong> = 对存储数据的操作<br>　　<br>　　    <strong>-</strong> <strong>狭义</strong>的算法：与数据的存储方式密切<strong>相关</strong> - 伪算法。<br>　　    <strong>-</strong> <strong>广义</strong>的算法：与数据的存储方式<strong>无关</strong> - 代码算法。<br>　　<br>　　<strong>泛型</strong>：利用某种技术达到的效果就是：<strong>不同的数据存储方式，执行的操作是一样的</strong>。</p>
</li>
</ul>
<h3 id="1-2-衡量算法的标准："><a href="#1-2-衡量算法的标准：" class="headerlink" title="1.2 衡量算法的标准："></a>1.2 衡量算法的标准：</h3><ul>
<li><strong>时间复杂度</strong>：研究中。算法执行过程中大概执行的次数，而非时间。</li>
<li><strong>空间复杂度</strong>：研究中。算法执行过程中大概所占用的最大内存</li>
<li><strong>难易程度</strong>：应用中。</li>
<li>健壮性</li>
</ul>
<h3 id="1-3-数据结构重要性："><a href="#1-3-数据结构重要性：" class="headerlink" title="1.3 数据结构重要性："></a>1.3 数据结构重要性：</h3><p>　<strong>程序 = 数据存储（数据结构） ＋ 数据操作（算法） ＋ 可以被计算机执行的语言（语言）</strong>
　</p>
<h3 id="1-4-其他"><a href="#1-4-其他" class="headerlink" title="1.4 其他"></a>1.4 其他</h3><ul>
<li><p><strong>地址</strong>：</p>
<p>  　　地址 就是 内存单元编号。地址对应的内存中的位置是固定的，但地址对应的内存中的位置的数值是可变的。<br>  　　从0开始的非负整数<br>  　　范围：［0 － 4G-1］
  　　</p>
</li>
<li><p><strong>指针</strong>：</p>
<p>  　　指针是C语言的灵魂。<br>  　　指针　＜＝＞　地址</p>
<pre><code>指针变量是存放内存单元地址的变量
指针本质是一个操作受限的非负整数
</code></pre></li>
<li><p><strong>指针分类</strong>：</p>
<ul>
<li></li>
</ul>
</li>
<li><p><strong>结构体</strong></p>
</li>
<li><strong>动态内存分配和释放</strong></li>
</ul>
<h3 id="1-5-存储方式"><a href="#1-5-存储方式" class="headerlink" title="1.5 存储方式"></a>1.5 存储方式</h3><ul>
<li><strong>1. 线性</strong>：数组<ul>
<li>数组名：一维数组名是个指针常量，存放的是一维数组的的第一个元素的地址，他的值不能被改变，一维数组名指向的是数组的第一个元素。</li>
<li>下标：a[i]  &lt;&lt; = = &gt;&gt; *(a +i)</li>
<li><strong>常见应用</strong>：<ul>
<li>栈</li>
<li>队列 </li>
</ul>
</li>
</ul>
</li>
<li><strong>2. 离散</strong>：链表</li>
<li><strong>3.</strong> 数组存储不一样，操作不一样，<strong>泛型</strong></li>
</ul>
<h2 id="2-指针、指针变量、指针指向"><a href="#2-指针、指针变量、指针指向" class="headerlink" title="2. 指针、指针变量、指针指向"></a>2. 指针、指针变量、指针指向</h2><p> 在函数没有返回值的情况下，通过函数修改实参的值，仅通过获取<strong>实参地址</strong>。</p>
<h3 id="修改变量地址的写法："><a href="#修改变量地址的写法：" class="headerlink" title="修改变量地址的写法："></a>修改变量地址的写法：</h3><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-28%2010.15.28.png" alt=""></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-28%2010.18.02.png" alt=""></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> * p; <span class="comment">// 这个一个指针变量。'p'是变量名字，是内存抽象地址的实例表示;'int *' 表示p变量只能存储‘int类型变量’的地址，即，此时的p仅能存储‘int类型’的地址</span></div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"init p address :%X\n"</span>,p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"init p value :%D\n"</span>,*p);</div><div class="line">    <span class="keyword">int</span> i = <span class="number">12</span>; <span class="comment">// 这是一个普通变量</span></div><div class="line">    <span class="keyword">int</span> j;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"init value : %d, %d, %d\n"</span>,i,j,*p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"init i address :%X\n"</span>,&amp;i);</div><div class="line">    p = &amp;i; <span class="comment">// int  *p = &amp;i;</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"change p address :%X\n"</span>,p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"change p value :%D\n"</span>,*p);</div><div class="line">    </div><div class="line">    <span class="comment">// 修改*p的数值</span></div><div class="line">    *p = <span class="number">21</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"change p value %d\n"</span>, *p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"init i value :%d\n"</span>,i);</div><div class="line">    </div><div class="line">    <span class="comment">// 修改i的数值</span></div><div class="line">    i = <span class="number">33</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"change p value %d\n"</span>, *p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"init i value :%d\n"</span>,i);</div><div class="line">    </div><div class="line">    j = *p; <span class="comment">// j = i;</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"chagne value : %d, %d, %d\n"</span>,i,j,*p);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">init p address :EFBFF590</div><div class="line">init p value :<span class="number">0</span></div><div class="line">init value : <span class="number">12</span>, <span class="number">0</span>, <span class="number">0</span></div><div class="line">init i address :EFBFF56C</div><div class="line">change p address :EFBFF56C</div><div class="line">change p value :<span class="number">12</span></div><div class="line">change p value <span class="number">21</span></div><div class="line">init i value :<span class="number">21</span></div><div class="line">change p value <span class="number">33</span></div><div class="line">init i value :<span class="number">33</span></div><div class="line">chagne value : <span class="number">33</span>, <span class="number">33</span>, <span class="number">33</span></div></pre></td></tr></table></figure>
<p><strong>通过方法改变变量的数值</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 注意：此处不是定义了一个名字叫做 *p的形参(int *p)，而是定义了一个形参，形参的名字叫做p(int * p),类型是int *</span></div><div class="line"><span class="comment">// 此处有误' ',都不形象参数的类型。</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> * p)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    *p = <span class="number">100</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> * p; <span class="comment">// 这个一个指针变量。'p'是变量名字，是内存抽象地址的实例表示;'int *' 表示p变量只能存储‘int类型变量’的地址，即，此时的p仅能存储‘int类型’的地址</span></div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"init p address :%X\n"</span>,p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"init p value :%D\n"</span>,*p);</div><div class="line">    <span class="keyword">int</span> i = <span class="number">12</span>; <span class="comment">// 这是一个普通变量</span></div><div class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"init value : %d, %d, %d\n"</span>,i,j,*p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"init i address :%X\n"</span>,&amp;i);</div><div class="line">    p = &amp;i; <span class="comment">// int  *p = &amp;i;</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"change p address :%X\n"</span>,p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"change p value :%D\n"</span>,*p);</div><div class="line">    </div><div class="line">    <span class="comment">// 修改*p的数值</span></div><div class="line">    *p = <span class="number">21</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"change p value %d\n"</span>, *p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"init i value :%d\n"</span>,i);</div><div class="line">    </div><div class="line">    <span class="comment">// 修改i的数值</span></div><div class="line">    i = <span class="number">33</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"change p value %d\n"</span>, *p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"init i value :%d\n"</span>,i);</div><div class="line">    </div><div class="line">    j = *p; <span class="comment">// j = i;</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"chagne value : %d, %d, %d\n"</span>,i,j,*p);</div><div class="line">    </div><div class="line">    func(&amp;j);</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"j = %d\n"</span>,j);</div><div class="line">    <span class="comment">// 结果：j = 100</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> * temp)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    *temp = <span class="number">100</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 仅需要知道一个数组的 首地址 和 数组长度 ，即可操作此数组</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show_Array</span><span class="params">(<span class="keyword">int</span> *p, <span class="keyword">int</span> len)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    p[<span class="number">2</span>] = <span class="number">33</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     1</span></div><div class="line"><span class="comment">     2</span></div><div class="line"><span class="comment">     33</span></div><div class="line"><span class="comment">     4</span></div><div class="line"><span class="comment">     5</span></div><div class="line"><span class="comment">     */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">array</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> a[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"a[0] address is %d,*a address is %d\n"</span>,&amp;a[<span class="number">0</span>],a);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"*a + 3 = %d\n"</span>,*a+<span class="number">3</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"a[0] is %d,*a is %d\n"</span>,a[<span class="number">0</span>],*a);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"a[4] is %d,*(a+4) is %d\n"</span>,a[<span class="number">4</span>],*(a+<span class="number">4</span>));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"a[0] address is %d\n"</span>,&amp;a[<span class="number">0</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"a[1] address is %d\n"</span>,&amp;a[<span class="number">1</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"a[2] address is %d\n"</span>,&amp;a[<span class="number">2</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"a[3] address is %d\n"</span>,&amp;a[<span class="number">3</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"a[4] address is %d\n"</span>,&amp;a[<span class="number">4</span>]);</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     a[0] address is -272632336,*a address is -272632336</span></div><div class="line"><span class="comment">     a[0] is 1,*a is 1</span></div><div class="line"><span class="comment">     a[4] is 5,*(a+4) is 5</span></div><div class="line"><span class="comment">     </span></div><div class="line"><span class="comment">     a[0] == *(a),a[3] == *(a+3)</span></div><div class="line"><span class="comment">     </span></div><div class="line"><span class="comment">     a[0] address is -272632336</span></div><div class="line"><span class="comment">     a[1] address is -272632332</span></div><div class="line"><span class="comment">     a[2] address is -272632328</span></div><div class="line"><span class="comment">     a[3] address is -272632324</span></div><div class="line"><span class="comment">     a[4] address is -272632320</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    </div><div class="line">    Show_Array(a,<span class="number">5</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"a[2] = %d\n"</span>,a[<span class="number">2</span>]);</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     a[2] = 33</span></div><div class="line"><span class="comment">     */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> j = <span class="number">10</span>;</div><div class="line">    func(&amp;j);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"j is %d\n"</span>,j);</div><div class="line">    </div><div class="line">    <span class="built_in">array</span>();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-结构体"><a href="#3-结构体" class="headerlink" title="3. 结构体"></a>3. 结构体</h2><p>描述：</p>
<ul>
<li><strong>类似java类，模拟事物</strong></li>
<li><strong>只有属性，没有方法</strong></li>
</ul>
<p>为了表示一些复杂的数据，而普通的基本数据无法满足需要。<br>用户根据自己的实际需要，<strong>自己定义的数据类型，非变量，未分配内存</strong>。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 结构体, 数据类型叫：struct Student，</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">int</span> sid;</div><div class="line">    <span class="keyword">char</span> name[<span class="number">200</span>];</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">// 结构体声明变量</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu</span> = &#123;</span><span class="number">101</span>,<span class="string">"zhansan"</span>,<span class="number">32</span>&#125;;</div><div class="line">    <span class="comment">// 访问结构体变量的成员</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d, %s, %d\n"</span>,stu.age,stu.name,stu.age);</div><div class="line">    <span class="comment">// 32, zhansan, 32</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>修改结构体数值方式</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 修改数值方式1</span></div><div class="line">    stu.age = <span class="number">33</span>;</div><div class="line">    <span class="comment">// age = 33</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"age = %d\n"</span>,stu.age);</div><div class="line">    </div><div class="line">    <span class="comment">// 修改数值方式2</span></div><div class="line">    pst = &amp;stu;</div><div class="line">    pst-&gt;age = <span class="number">23</span>;<span class="comment">// pst-&gt;age == (*pst).age == stu.age</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"age age = %d\n"</span>,(*pst).age);</div><div class="line">    <span class="comment">// age age = 23</span></div></pre></td></tr></table></figure>
<p><code>pst-&gt;age</code><strong>含义</strong>（链表）：pst所指向的结构体变量中的age这个<strong>成员</strong></p>
<p><strong>注意：</strong></p>
<ul>
<li>结构体变量之间不能“+ - <em> /”，但是<em>*可以相互赋值</em></em></li>
<li><strong>普通结构体变量</strong> 和 <strong>结构体指针变量</strong>作为函数传参的问题：</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 输出结构体 方式1：整个结构体内存</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">goStruct</span><span class="params">(struct Student stu)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"goStruct data is %d, %s, %d\n"</span>,stu.sid,stu.name,stu.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 输出结构体 方式2：仅传递结构体地址</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">goStructPointer</span><span class="params">(struct Student * stu)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"goStructPointer data is %d, %s, %d\n"</span>,stu-&gt;sid,stu-&gt;name,stu-&gt;age);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>应用函数：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu</span> = &#123;</span><span class="number">101</span>,<span class="string">"zhansan"</span>,<span class="number">32</span>&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 不推荐，耗时、内存</span></div><div class="line">goStruct(stu);</div><div class="line"><span class="comment">// goStruct data is 1111, www, 66</span></div><div class="line">    </div><div class="line"><span class="comment">// 推荐</span></div><div class="line">goStructPointer(&amp;stu);</div><div class="line"><span class="comment">// goStructPointer data is 1111, www, 66</span></div></pre></td></tr></table></figure>
<h2 id="4-动态内存分配和释放"><a href="#4-动态内存分配和释放" class="headerlink" title="4. 动态内存分配和释放"></a>4. 动态内存分配和释放</h2><p>java中的new 实例：</p>
<pre><code>A aa = new A();
</code></pre><p>类似于c中的：</p>
<pre><code>A * aaM = (A *)malloc(sizeof(A));
</code></pre><p>主要语句：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mm_malloc.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// int类型地址</span></div><div class="line"><span class="keyword">int</span> * mArray = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * len);</div><div class="line"><span class="built_in">free</span>(mArray);</div></pre></td></tr></table></figure>
<p>完整：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// malloc() 动态函数</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myMalloc</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> len;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"input length:\n"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 手动输入数组长度</span></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;len);</div><div class="line">    </div><div class="line">    <span class="comment">// int类型地址</span></div><div class="line">    <span class="keyword">int</span> * mArray = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * len);</div><div class="line">    </div><div class="line">    <span class="comment">// 手动初始数组:</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"input array item :\n"</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d, "</span>,&amp;mArray[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 1 2 3 4 5</span></div><div class="line">    </div><div class="line">    <span class="comment">// 遍历数组</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d, "</span>,*(mArray+i));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 1, 2, 3, 4, 5,</span></div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="built_in">free</span>(mArray);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">    <span class="comment">//  动态内存</span></div><div class="line">    myMalloc();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-28%2013.26.37.png" alt=""></p>
<h3 id="跨函数调用内存空间-通过动态申请内存空间"><a href="#跨函数调用内存空间-通过动态申请内存空间" class="headerlink" title="跨函数调用内存空间 -通过动态申请内存空间"></a>跨函数调用内存空间 -通过动态申请内存空间</h3><p>一般情况下，当一个函数调动完毕之后，该函数之前占用的内存将会被释放。<br>下图展示的是，当一个main函数调用另一个fun函数后，fun函数中的变量所占用的内存仍然保留，未释放的例子：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-28%2014.10.38.png" alt=""></p>
<p>实例：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 动态分配内存</span></div><div class="line"><span class="function">struct StudentA * <span class="title">CreateStudentA</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">StudentA</span> * <span class="title">newSA</span> = (<span class="title">struct</span> <span class="title">StudentA</span> *)<span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">StudentA</span>));</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"newSA address is : %d\n"</span>,&amp;newSA);</div><div class="line">    newSA-&gt;age = <span class="number">120</span>;</div><div class="line">    newSA-&gt;sid = <span class="number">1001</span>;</div><div class="line">    <span class="keyword">return</span> newSA;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 展示内存中的数据</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowStudentA</span><span class="params">(struct StudentA * aa)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"ShowStudentA ：aa = %d , sid = %d \n"</span>, aa-&gt;age, aa-&gt;sid);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">StudentA</span> * <span class="title">sa</span>;</span></div><div class="line">    sa = CreateStudentA();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"sa address is : %d\n"</span>,&amp;sa);</div><div class="line">    ShowStudentA(sa);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"sa address is : %d\n"</span>,&amp;sa);</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     init sa address is : -272632288</span></div><div class="line"><span class="comment">	newSA address is : -272632328</span></div><div class="line"><span class="comment">	sa address is : -272632288</span></div><div class="line"><span class="comment">	ShowStudentA ：aa = 120 , sid = 1001 </span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>图文</strong></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-28%2014.38.57.png" alt=""></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-28%2014.39.08.png" alt=""></p>
<h2 id="5-struct与typedef的使用"><a href="#5-struct与typedef的使用" class="headerlink" title="5. struct与typedef的使用"></a>5. struct与typedef的使用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// typedef 的使用</span></div><div class="line"><span class="comment">// typedef的作用就是为已存在的数据类型重新取一个名字，即：别名</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span>  YC;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">int</span> sid;</div><div class="line">    <span class="keyword">char</span> name[<span class="number">100</span>];</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">&#125; ST;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    YC num = <span class="number">100</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"YC's num is %d \n"</span>,num);</div><div class="line">    </div><div class="line">    <span class="comment">//struct Student stu; 等价于 ST stu;</span></div><div class="line">    <span class="comment">//struct Student * stuA; 等价于 ST * stuA;</span></div><div class="line">    ST stu;</div><div class="line">    stu.age = <span class="number">32</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"stu age = %d\n"</span>, stu.age);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">YC's num is <span class="number">100</span> </div><div class="line">stu age = <span class="number">32</span></div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">int</span> sid;</div><div class="line">    <span class="keyword">char</span> name[<span class="number">100</span>];</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">&#125; * PST,ST;</div><div class="line"><span class="comment">// * PS 等价于 struct Student *</span></div><div class="line"><span class="comment">// ST 等价于 struct Student</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 温故知新 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 温故知新 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[开源的许可证GPL、LGPL、BSD、Apache 2.0的通俗解释]]></title>
      <url>/%E5%BC%80%E6%BA%90%E7%9A%84%E8%AE%B8%E5%8F%AF%E8%AF%81GPL%E3%80%81LGPL%E3%80%81BSD%E3%80%81Apache-2-0%E7%9A%84%E9%80%9A%E4%BF%97%E8%A7%A3%E9%87%8A/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考：<a href="https://www.cnblogs.com/jacob-tian/p/5976088.html" target="_blank" rel="external">https://www.cnblogs.com/jacob-tian/p/5976088.html</a></p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<p>软件开发者要开源软件，不单单是开放源代码就可以了，选择一种许可证很重要，一个许可证之于软件就相当于价值观之于普通人，代表了这个<strong>软件的基本品性</strong>。一个错误的许可证选择可能会直接导致整个项目的失败。</p>
<p>　　各种<strong>开源的许可证</strong>主要的<strong>限制</strong>还是在redistribution（发布），所以个人/商业公司开发的软件包含了GPL的代码，只要你不发布，是可以任意使用的。</p>
<p>下面是几个开源许可证的区别：</p>
<h2 id="GPL"><a href="#GPL" class="headerlink" title="GPL"></a>GPL</h2><p>　　GPL软件的<strong>使用者有权力得到软件的代码</strong>，只要使用了GPL，在<strong>发布(redistribution)时</strong>，<strong>整个项目</strong>也必须是GPL的，即主程序和静态链接的库（linux的.a和Windows的.lib）必须是GPL的，动态链接库(Linux的.so，Windows的.dll)必须是GPL兼容的。所谓GPL兼容，也就是GPL软件中可以使用的库，这些许可证必须比GPL弱(如LGPL，BSD)，而不能是某个商业许可证。正因如此，GPL是带<strong>有很强的传染性</strong>，只要你的软件使用了GPL的代码，那么就请以GPL开放源代码吧，并且你的项目中也<strong>不能有任何和GPL不兼容的库</strong>。</p>
<h2 id="LGPL"><a href="#LGPL" class="headerlink" title="LGPL"></a>LGPL</h2><p>　　GPL 带有很强的传染性，那么如果一个库使用GPL发布，那么使用这个库的所有软件也必须使用GPL发布，这对不想开放源代码的商业软件来讲是致命的打击——你可以不使用其他的库，但最基本的libc是无论如何绕不开的，如果libc是以GPL发布，就相当于所有软件必须以GPL发布了。所以，LGPL(Lesser GPL)诞生了。</p>
<p>　　LGPL定义为，<strong>在以LGPL发布的库的基础上开发新的库的时候，新的库必须以LGPL发布，但是如果仅仅是动态链接，那么则不受任何限制</strong>。这样商业软件就可以随意的使用LGPL的库了。因此，LGPL也具有<strong>传染性，但限制在其基础上开发的库上，而并不限制使用它的程序本身</strong>——它的传染性远小于GPL。</p>
<h2 id="BSD、Apache-2-0"><a href="#BSD、Apache-2-0" class="headerlink" title="BSD、Apache 2.0"></a>BSD、Apache 2.0</h2><p>　　相对GPL/LGPL的开放源代码，BSD，Apache 2.0就宽松许多——商业软件可以任意的使用BSD，Apache 2.0发布的软件代码，而<strong>不需要开放源代码，只需要提及代码的原出处就可以了</strong>。BSD和Apache 2.0提及的方式稍有不同，具体可以参考协议的详细内容。它们是GPL兼容的</p>
<p>看看下面选择开源许可证的案例：</p>
<p>　　andorid 使用宽松的Apache 2.0发布，因为Google作为一个商业公司，并不想失去商业软件的支持，它希望团结一切可以团结的力量加入的Android的开发中来，壮大自己的阵营，使用Apache 2.0就无可厚非了。而Google本身，并没有丧失对Android的控制权，不会担心另外一个公司拿走了Android的代码开发出一个闭源 Android的对手。因为，只要Android不断的出新版，社区不停的跟进，并且不停的修改API，其他基于Android开发的公司不得不把自己的Patch提回到主干上，否则，必然将耗费大量人力物力在维护自己的Patch上(钱这方面你斗得过Google？)，得不偿失。而且，闭源之后，与整个社区为敌，作为一个定位软件平台的项目，会流失大量应用软件开发者，以小博大，任何一个商业公司都不会干这种胜算不高的蠢事。<br>　　再看以GPL发布的Linux为什么比以BSD发布的FreeBSD成功。其实正是因为GPL的传染性。当一个开发人员在Linux基础上开发一个新功能之后， 不得不以GPL开放源代码，贡献回Linux，这样Linux本身才能越来也越壮大而且留住了相当的开发人员，形成了一个 <strong>优秀软件-&gt;很多使用者和贡献者-&gt;贡献－&gt;更优秀的软件-&gt;更多的使用者和贡献者…</strong> 的良性循环。</p>
]]></content>
      
        <categories>
            
            <category> 其他 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android-Service]]></title>
      <url>/Android-Service/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考：<a href="http://www.sunnyang.com/215.html" target="_blank" rel="external">http://www.sunnyang.com/215.html</a></p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Service 是一种在<strong>后台运行</strong>的组件，用于执行长时间运行的操作或为远程进程执行作业。 服务<strong>不提供用户界面</strong>。 例如，当用户位于其他应用中时，服务可能在后台播放音乐或者通过网络获取数据，但不会阻断用户与 Activity 的交互。 诸如 Activity 等其他组件可以启动服务，让其运行或与其绑定以便与其进行交互。</p>
<p>此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。 例如，服务可以处理网络事务、播放音乐，执行文件 I/O 或与内容提供程序交互，而所有这一切均可在后台进行。</p>
<p>Service 并不是一个进程也不是一个线程，是运行在主线程中的，因此如果处理cpu密集工作，建议在service开启一个新的子线程的。</p>
<ul>
<li>应用程序告诉系统在后台处理一些事情，甚至不需要用户同应用程序直接交互，系统主要是通过Context.startService()来启动服务的，除非Service本身或者其他人明确来停止它否则将一直运行下去。</li>
<li>将应用程序自己的某些功能暴露给其它程序，这种交互主要通过Context.bindService(),允许长连接的服务来与之交互。</li>
</ul>
<h2 id="服务基本上分为两种形式："><a href="#服务基本上分为两种形式：" class="headerlink" title="服务基本上分为两种形式："></a>服务基本上分为两种形式：</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>当应用组件（如 Activity）通过调用 <strong>startService()</strong> 启动服务时，服务即<strong>处于“启动”状态</strong>。一旦启动，服务即可在后台<strong>无限期运行</strong>，即使启动服务的组件已被销毁也不受影响。 已启动的服务通常是执行单一操作，而且不会将结果返回给调用方。例如，它可能通过网络下载或上传文件。 操作完成后，服务会自行停止运行。</p>
<h3 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h3><p>当应用组件通过调用 <strong>bindService()</strong> 绑定到服务时，服务即<strong>处于“绑定”状态</strong>。绑定服务提供了一个<strong>客户端-服务器接口</strong>，允许组件与服务进行交互、发送请求、获取结果，甚至是利用进程间通信 (IPC) 跨进程执行这些操作。 仅当与另一个应用组件绑定时，绑定服务才会运行。 多个组件可以同时绑定到该服务，但全部取消绑定后，该服务即会被销毁。</p>
<p><strong>注意：</strong></p>
<ul>
<li><p>服务可以<strong>同时以这两种方式运行</strong>，也就是说，它既可以是启动服务（以无限期运行），也允许绑定。问题只是在于您是否实现了一组回调方法：<strong>onStartCommand()（允许组件启动服务）</strong>和 <strong>onBind()（允许绑定服务）</strong>。</p>
<p>  无论应用是处于启动状态还是绑定状态，抑或处于启动并且绑定状态，任何应用组件均可像使用 Activity 那样通过调用 <strong>Intent 来使用服务</strong>（即使此服务来自另一应用）。 不过，您可以通过清单文件将服务声明为私有服务，并阻止其他应用访问</p>
</li>
</ul>
<ul>
<li>服务在其托管进程的<strong>主线程中运行</strong>，它<strong>既不创建自己的线程，也不在单独的进程中运行（除非另行指定）</strong>。 这意味着，如果服务将执行任何 CPU 密集型工作或阻止性操作（例如 MP3 播放或联网），则应在服务内创建新线程来完成这项工作。通过使用单独的线程，可以降低发生“应用无响应”(ANR) 错误的风险，而应用的主线程仍可继续专注于运行用户与 Activity 之间的交互。</li>
</ul>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>要创建服务，必须<strong>创建 Service 子类</strong>（或使用它的一个现有子类）。在实现中，您需要重写一些回调方法，以处理服务生命周期的某些关键方面并提供一种机制将组件绑定到服务（如适用）。 应重写的最重要的回调方法包括：</p>
<h2 id="onStartCommand"><a href="#onStartCommand" class="headerlink" title="onStartCommand()"></a>onStartCommand()</h2><p>当另一个组件（如 Activity）通过调用 startService() 请求启动服务时，系统将调用此方法。一旦执行此方法，服务即会启动并可在后台无限期运行。 如果您实现此方法，则在服务工作完成后，需要由您通过调用 stopSelf() 或 stopService() 来停止服务。（如果您只想提供绑定，则无需实现此方法。）</p>
<h2 id="onBind"><a href="#onBind" class="headerlink" title="onBind()"></a>onBind()</h2><p>当另一个组件想通过调用 bindService() 与服务绑定（例如执行 RPC）时，系统将调用此方法。在此方法的实现中，您必须通过返回 IBinder 提供一个接口，供客户端用来与服务进行通信。请务必实现此方法，但如果您并不希望允许绑定，则应返回 null。</p>
<h2 id="onCreate"><a href="#onCreate" class="headerlink" title="onCreate()"></a>onCreate()</h2><p>首次创建服务时，系统将调用此方法来<strong>执行一次性设置程序（在调用 onStartCommand() 或 onBind() 之前）</strong>。<strong>如果服务已在运行，则不会调用此方法</strong>。</p>
<h2 id="onDestroy"><a href="#onDestroy" class="headerlink" title="onDestroy()"></a>onDestroy()</h2><p>当服务不再使用且将被销毁时，系统将调用此方法。服务应该实现此方法来清理所有资源，如线程、注册的侦听器、接收器等。 这是服务接收的最后一个调用。</p>
<p>如果组件通过调用<strong>startService() 启动服务</strong>（这会导致对 onStartCommand() 的调用），则服务将一直运行，直到服务使用 stopSelf() 自行停止运行，或由其他组件通过调用 <strong>stopService() 停止</strong>它为止。</p>
<p>如果组件是通过调用 <strong>bindService() 来创建服务</strong>（且未调用 onStartCommand()，则服务只会在该组件与其绑定时运行。一旦该服务与所有客户端之间的绑定全部取消，系统便会销毁它。</p>
<h1 id="清单文件声明服务"><a href="#清单文件声明服务" class="headerlink" title="清单文件声明服务"></a>清单文件声明服务</h1><p>要声明服务，请添加 <service> 元素作为 <application> 元素的子元素。例如：</application></service></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;manifest ... &gt;</div><div class="line">  ...</div><div class="line">  &lt;application ... &gt;</div><div class="line">      &lt;service android:name=&quot;.ExampleService&quot; /&gt;</div><div class="line">      ...</div><div class="line">  &lt;/application&gt;</div><div class="line">&lt;/manifest&gt;</div></pre></td></tr></table></figure>
<p>为了确保应用的安全性，请始终使用<strong>显式 Intent 启动或绑定 Service</strong>，且<strong>不要为服务声明 Intent 过滤器</strong>。 启动哪个服务存在一定的不确定性，而如果对这种不确定性的考量非常有必要，则可为服务提供 Intent 过滤器并从 Intent 中排除相应的组件名称，但随后必须使用 setPackage() 方法设置 Intent 的软件包，这样可以充分消除目标服务的不确定性。</p>
<p>此外，还可以通过<strong>添加 android:exported 属性并将其设置为 “false”，确保服务仅适用于您的应用</strong>。这可以有效阻止其他应用启动您的服务，即便在使用显式 Intent 时也如此。</p>
<h1 id="服务生命周期"><a href="#服务生命周期" class="headerlink" title="服务生命周期:"></a>服务生命周期:</h1><p><img src="http://oy991qm3u.bkt.clouddn.com/service_lifecycle.png" alt=""></p>
<p>左图显示了使用 <strong>startService()</strong> 所创建的服务的生命周期，右图显示了使用 <strong>bindService()</strong> 所创建的服务的生命周期。</p>
<h2 id="服务生命周期的两个嵌套循环："><a href="#服务生命周期的两个嵌套循环：" class="headerlink" title="服务生命周期的两个嵌套循环："></a>服务生命周期的两个嵌套循环：</h2><ul>
<li><p>服务的<strong>整个生命周期</strong>从调用 <strong>onCreate() 开始</strong>起，到 <strong>onDestroy() 返回时结束</strong>。与 Activity 类似，服务也在 onCreate() 中完成初始设置，并在 onDestroy() 中释放所有剩余资源。例如，音乐播放服务可以在 onCreate() 中创建用于播放音乐的线程，然后在 onDestroy() 中停止该线程。<br>无论服务是通过 startService() 还是 bindService() 创建，都会为所有服务调用 onCreate() 和 onDestroy() 方法。</p>
</li>
<li><p>服务的<strong>有效生命周期</strong>从调用 <strong>onStartCommand()</strong> 或 <strong>onBind() 方法开始</strong>。每种方法均有 {Intent 对象，该对象分别传递到 startService() 或 bindService()。<br>对于启动服务，有效生命周期与整个生命周期同时结束（即便是在 onStartCommand() 返回之后，服务仍然处于活动状态）。对于绑定服务，有效生命周期在 <strong>onUnbind() 返回时结束</strong>。</p>
</li>
</ul>
<h1 id="启动方式1：创建启动服务"><a href="#启动方式1：创建启动服务" class="headerlink" title="启动方式1：创建启动服务"></a>启动方式1：创建启动服务</h1><p>启动服务由<strong>另一个组件</strong>通过调用 startService() 启动，这会导致调用服务的 onStartCommand() 方法。</p>
<p>服务启动之后，其<strong>生命周期即独立于启动它的组件</strong>，并且可以在后台无限期地运行，即使启动服务的组件已被销毁也不受影响。 因此，服务应通过调用 stopSelf() 结束工作来自行停止运行，或者由另一个组件通过调用 stopService() 来停止它。</p>
<p>应用组件（如 Activity）可以通过 <strong>调用startService() 方法并传递 Intent 对象</strong>（指定服务并包含待使用服务的所有数据）来启动服务。服务<strong>通过 onStartCommand() 方法接收此 Intent</strong>。</p>
<p>例如，假设某 Activity 需要将一些数据保存到在线数据库中。该 Activity 可以启动一个协同服务，并通过向 startService() 传递一个 Intent，为该服务提供要保存的数据。服务通过 onStartCommand() 接收 Intent，连接到互联网并执行数据库事务。事务完成之后，服务会自行停止运行并随即被销毁。</p>
<p><strong>可以扩展两个类来创建启动服务：</strong></p>
<ul>
<li><p><strong>Service</strong><br>这是适用于<strong>所有服务的基类</strong>。扩展此类时，必须创建一个用于执行所有服务工作的新线程，因为默认情况下，<strong>服务将使用应用的主线程</strong>，这会降低应用正在运行的所有 Activity 的性能。</p>
</li>
<li><p><strong>IntentService</strong><br>这是 <strong>Service 的子类</strong>，它<strong>使用工作线程逐一处理所有启动请求</strong>。如果您不要求服务同时处理多个请求，这是最好的选择。 您只需实现 <strong>onHandleIntent()</strong>方法即可，该方法会接收每个启动请求的 Intent，使您能够执行后台工作。</p>
</li>
</ul>
<p>#启动方式2：创建绑定服务</p>
<p>绑定服务允许应用组件通过调用 <strong>bindService() 与其绑定，以便创建长期连接</strong>。</p>
<p>如需与 Activity 和其他应用组件中的服务进行交互，或者需要通过进程间通信 (IPC) 向其他应用公开某些应用功能，则应创建绑定服务。</p>
<p>要创建绑定服务，<strong>必须实现 onBind() 回调方法以返回 IBinder，用于定义与服务通信的接口</strong>。然后，其他应用组件可以调用 bindService() 来检索该接口，并开始对服务调用方法。服务只用于与其绑定的应用组件，因此如果没有组件绑定到服务，则系统会销毁服务（不必按通过 onStartCommand() 启动的服务那样来停止绑定服务）。</p>
<p>要创建绑定服务，首先<strong>必须定义指定客户端如何与服务通信的接口</strong>。 服务与客户端之间的这个接口<strong>必须是 IBinder 的实现</strong>，并且服务<strong>必须从 onBind() 回调方法返回它</strong>。一旦客户端收到 IBinder，即可开始通过该接口与服务进行交互。</p>
<p><strong>多个客户端可以同时绑定到服务</strong>。客户端完成与服务的交互后，会<strong>调用 unbindService() 取消绑定。一旦没有客户端绑定到该服务，系统就会销毁它。</strong></p>
<h2 id="可以通过三种方法定义接口："><a href="#可以通过三种方法定义接口：" class="headerlink" title="可以通过三种方法定义接口："></a>可以通过三种方法定义接口：</h2><ul>
<li><strong>扩展 Binder 类</strong></li>
</ul>
<p>如果<strong>服务是供您的自有应用专用</strong>，并且在与客户端相同的进程中运行（常见情况），则应通过扩展 Binder 类并从 onBind() 返回它的一个实例来创建接口。<strong>客户端收到 Binder 后，可利用它直接访问 Binder 实现中乃至 Service 中可用的公共方法。</strong><br>如果服务只是您的自有应用的后台工作线程，则优先采用这种方法。 不以这种方式创建接口的唯一原因是，您的服务被其他应用或不同的进程占用。</p>
<ul>
<li><strong>使用 Messenger</strong></li>
</ul>
<p>如需<strong>让接口跨不同的进程工作，则可使用 Messenger 为服务创建接口</strong>。服务可以这种方式定义对应于不同类型 Message 对象的 Handler。此 Handler 是 Messenger 的基础，后者随后可与客户端分享一个 IBinder，从而让客户端能利用 Message 对象向服务发送命令。此外，客户端还可定义自有 Messenger，以便服务回传消息。<br>这是执行<strong>进程间通信 (IPC) 的最简单方法</strong>，因为 Messenger 会在<strong>单一线程中创建包含所有请求的队列，这样就不必对服务进行线程安全设计</strong></p>
<ul>
<li><strong>使用 AIDL</strong></li>
</ul>
<p><strong>AIDL（Android 接口定义语言）</strong>执行所有将对象分解成原语的工作，操作系统可以识别这些原语并将它们编组到各进程中，以执行 IPC。 之前采用 Messenger 的方法实际上是以 AIDL 作为其底层结构。 如上所述，Messenger 会在单一线程中创建包含所有客户端请求的队列，以便服务一次接收一个请求。 不过，如果您想让服务同时处理多个请求，则可直接使用 AIDL。 在此情况下，您的服务必须具备多线程处理能力，并采用线程安全式设计。<br>如需直接使用 AIDL，您必须创建一个定义编程接口的 .aidl 文件。Android SDK 工具利用该文件生成一个实现接口并处理 IPC 的抽象类，您随后可在服务内对其进行扩展。</p>
<h2 id="扩展-Binder-类"><a href="#扩展-Binder-类" class="headerlink" title="扩展 Binder 类"></a>扩展 Binder 类</h2><p><strong>注：</strong><br>此方法只有在客户端和服务位于同一应用和进程内这一最常见的情况下方才有效。 例如，对于需要将 Activity 绑定到在后台播放音乐的自有服务的音乐应用，此方法非常有效。</p>
<h2 id="具体的设置方法："><a href="#具体的设置方法：" class="headerlink" title="具体的设置方法："></a>具体的设置方法：</h2><ul>
<li><p>在您的服务中，创建一个可满足下列任一要求的 Binder 实例：</p>
<ul>
<li>包含客户端可调用的公共方法</li>
<li>返回当前 Service 实例，其中包含客户端可调用的公共方法</li>
<li>或返回由服务承载的其他类的实例，其中包含客户端可调用的公共方法</li>
</ul>
</li>
<li><p>从 onBind() 回调方法返回此 Binder 实例。</p>
</li>
<li>在客户端中，从 onServiceConnected() 回调方法接收 Binder，并使用提供的方法调用绑定服务。</li>
</ul>
<h1 id="向用户发送通知"><a href="#向用户发送通知" class="headerlink" title="向用户发送通知"></a>向用户发送通知</h1><ul>
<li><p>Toast 通知是指出现在当前窗口的表面、片刻随即消失不见的消息，而状态栏通知则在状态栏中随消息一起提供图标，用户可以选择该图标来采取操作（例如启动 Activity）。</p>
</li>
<li><p>通常，当某些后台工作已经完成（例如文件下载完成）且用户现在可以对其进行操作时，状态栏通知是最佳方法。 当用户从展开视图中选定通知时，通知即可启动 Activity（例如查看已下载的文件）。</p>
</li>
</ul>
<h1 id="在前台运行服务"><a href="#在前台运行服务" class="headerlink" title="在前台运行服务"></a>在前台运行服务</h1><p>前台服务被认为是<strong>用户主动意识到的一种服务，因此在内存不足时，系统也不会考虑将其终止</strong>。 前台服务必须为状态栏提供通知，放在“正在进行”标题下方，这意味着除非服务停止或从前台移除，否则不能清除通知。</p>
<p>例如，应该将通过服务播放音乐的音乐播放器设置为在前台运行，这是因为用户明确意识到其操作。 状态栏中的通知可能表示正在播放的歌曲，并允许用户启动 Activity 来与音乐播放器进行交互。</p>
<ul>
<li>要请求让服务运行于前台，请调用<strong>startForeground()</strong>。此方法采用两个参数：<strong>唯一标识通知</strong>的整型数和<strong>状态栏的 Notification</strong>。例如：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Notification notification = <span class="keyword">new</span> Notification(R.drawable.icon, getText(R.string.ticker_text),</div><div class="line">        System.currentTimeMillis());</div><div class="line">Intent notificationIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ExampleActivity.class);</div><div class="line">PendingIntent pendingIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>, notificationIntent, <span class="number">0</span>);</div><div class="line">notification.setLatestEventInfo(<span class="keyword">this</span>, getText(R.string.notification_title),</div><div class="line">        getText(R.string.notification_message), pendingIntent);</div><div class="line">startForeground(ONGOING_NOTIFICATION_ID, notification);</div></pre></td></tr></table></figure>
<p><strong>注意：</strong>提供给 startForeground() 的整型 ID 不得为 0。</p>
<ul>
<li>要<strong>从前台移除服务，请调用 stopForeground()</strong>。此方法采用<strong>一个布尔值</strong>，指示是否也移除状态栏通知。 此方法不会停止服务。 但是，如果您在服务正在前台运行时将其停止，则通知也会被移除。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android各个支持库]]></title>
      <url>/Android%E5%90%84%E4%B8%AA%E6%94%AF%E6%8C%81%E5%BA%93/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考：<a href="https://developer.android.google.cn/topic/libraries/support-library/features.html" target="_blank" rel="external">https://developer.android.google.cn/topic/libraries/support-library/features.html</a></p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<p>一般而言，建议添加 v4 支持库和 v7 appcompat 库，因为它们支持一系列 Android 版本，并且可以为推荐的用户界面模式提供 API。</p>
<h1 id="v4-支持库"><a href="#v4-支持库" class="headerlink" title="v4 支持库"></a>v4 支持库</h1><p>这些库旨在与 Android 2.3（API 级别 9）及更高版本搭配使用。与其他支持库相比，它们包含的 API 集合最大，包括对应用组件、用户界面功能、辅助功能、数据处理、网络连接以及编程实用工具的支持。</p>
<p><strong>注意：</strong><br>在支持库修订版 24.2.0 之前，存在一个 v4 支持库。为了提高效率，此库拆分成多个模块。出于向后兼容的考虑，如果您在 Gradle 脚本中列出了 support-v4，您的 APK 将包含所有的 v4 模块。不过，要减少 APK 大小，我们建议仅列出应用需要的特定模块。</p>
<h2 id="v4-compat-库"><a href="#v4-compat-库" class="headerlink" title="v4 compat 库"></a>v4 compat 库</h2><p>为众多框架 API 提供<strong>兼容性包装器</strong>，例如 Context.obtainDrawable() 和 View.performAccessibilityAction()。此库的 Gradle 构建脚本依赖关系标识符如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">com.android.support:support-compat:24.2.0</div></pre></td></tr></table></figure>
<h2 id="v4-core-utils-库"><a href="#v4-core-utils-库" class="headerlink" title="v4 core-utils 库"></a>v4 core-utils 库</h2><p>提供大量<strong>实用程序类</strong>，例如 AsyncTaskLoader 和 PermissionChecker。此库的 Gradle 构建脚本依赖关系标识符如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">com.android.support:support-core-utils:24.2.0</div></pre></td></tr></table></figure>
<h2 id="v4-core-ui-库"><a href="#v4-core-ui-库" class="headerlink" title="v4 core-ui 库"></a>v4 core-ui 库</h2><p>实现<strong>各种 UI 相关组件</strong>，例如 ViewPager、NestedScrollView 和 ExploreByTouchHelper。此库的 Gradle 构建脚本依赖关系标识符如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">com.android.support:support-core-ui:24.2.0</div></pre></td></tr></table></figure>
<h2 id="v4-media-compat-库"><a href="#v4-media-compat-库" class="headerlink" title="v4 media-compat 库"></a>v4 media-compat 库</h2><p>向后移植<strong>部分媒体框架</strong>，包括 MediaBrowser 和 MediaSession。此库的 Gradle 构建脚本依赖关系标识符如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">com.android.support:support-media-compat:24.2.0</div></pre></td></tr></table></figure>
<h2 id="v4-fragment-库"><a href="#v4-fragment-库" class="headerlink" title="v4 fragment 库"></a>v4 fragment 库</h2><p>添加<strong>对使用片段封装用户界面和功能的支持</strong>，从而使应用能够提供可以在大屏幕设备与小屏幕设备之间进行调节的布局。此模块依赖于<strong>compat、core-utils、core-ui 和 media-compat</strong>。此库的 Gradle 构建脚本依赖关系标识符如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">com.android.support:support-fragment:24.2.0</div></pre></td></tr></table></figure>
<h1 id="v7-支持库"><a href="#v7-支持库" class="headerlink" title="v7 支持库"></a>v7 支持库</h1><p>一些库旨在与 Android 2.3（API 级别 9）及更高版本搭配使用。这些库提供了特定的功能集，并且可以单独添加到应用中，与其他库互不影响。</p>
<h2 id="v7-appcompat-库"><a href="#v7-appcompat-库" class="headerlink" title="v7 appcompat 库"></a>v7 appcompat 库</h2><p>此库添加了<strong>对操作栏用户界面设计模式的支持</strong>。此库包含对 <strong>Material Design</strong> 用户界面实现的支持。</p>
<p><strong>注意：</strong>此库依赖于 v4 支持库。</p>
<p>下面是 v7 appcompat 库中包含的一些关键类：</p>
<ul>
<li><strong>ActionBar</strong> - 提供操作栏用户界面模式的实现。如需了解有关使用操作栏的详细信息，请参阅操作栏开发者指南。</li>
<li><strong>AppCompatActivity</strong> - 添加一个应用 Activity 类，此类可作为使用支持库操作栏实现的 Activity 的基础类。</li>
<li><strong>AppCompatDialog</strong> - 添加一个对话框类，此类可作为 AppCompat 主题对话框的基础类。</li>
<li><strong>ShareActionProvider</strong> - 包含对可以添加到操作栏中的标准化分享操作（例如电子邮件或发帖至社交应用）的支持。此库的 Gradle 构建脚本依赖关系标识符如下所示：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">com.android.support:appcompat-v7:24.2.0</div></pre></td></tr></table></figure>
<h2 id="v7-cardview-库"><a href="#v7-cardview-库" class="headerlink" title="v7 cardview 库"></a>v7 cardview 库</h2><p>此库添加了对 <strong>CardView</strong> 小部件的支持，让您能够在卡片内显示信息，从而使应用具备一致的外观。这些卡片对 Material Design 实现非常有用，并在电视应用布局中广为使用。此库的 Gradle 构建脚本依赖关系标识符如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">com.android.support:cardview-v7:24.2.0</div></pre></td></tr></table></figure>
<h2 id="v7-gridlayout-库"><a href="#v7-gridlayout-库" class="headerlink" title="v7 gridlayout 库"></a>v7 gridlayout 库</h2><p>下载 Android 支持库后，此库可以添加对 <strong>GridLayout</strong> 类的支持，让您能够使用网状方格安排用户界面元素。如需了解有关 v7 gridlayout 库 API 的详细信息，请参阅 API 参考中的 android.support.v7.widget 软件包。此库的 Gradle 构建脚本依赖关系标识符如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">com.android.support:gridlayout-v7:24.2.0</div></pre></td></tr></table></figure>
<h2 id="v7-mediarouter-库"><a href="#v7-mediarouter-库" class="headerlink" title="v7 mediarouter 库"></a>v7 mediarouter 库</h2><p>此库可以提供 <strong>MediaRouter</strong>、<strong>MediaRouteProvider</strong> 和支持 Google Cast 的相关媒体类。</p>
<p>一般而言，利用 v7 mediarouter 库中的 API，您可以控制当前设备到外部屏幕、扬声器和其他目标设备的媒体渠道和流的路由。此库包含的 API 可以用于发布应用特定的媒体路由提供程序、发现和选择目标设备，以及检查媒体状态，等等。如需了解有关 v7 mediarouter 库 API 的详细信息，请参阅 API 参考中的 android.support.v7.media 软件包。此库的 Gradle 构建脚本依赖关系标识符如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">com.android.support:mediarouter-v7:24.2.0</div></pre></td></tr></table></figure>
<h2 id="v7-palette-库"><a href="#v7-palette-库" class="headerlink" title="v7 palette 库"></a>v7 palette 库</h2><p>v7 palette 支持库包含 <strong>s</strong> 类，此类让您可以<strong>从图像中抽取突出颜色</strong>。例如，音乐应用可以使用 Palette 对象从专辑封面抽取主要颜色，然后使用这些颜色创建一个色彩协调的歌曲标题卡。</p>
<p>此库的 Gradle 构建脚本依赖关系标识符如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">com.android.support:palette-v7:24.2.0</div></pre></td></tr></table></figure>
<h2 id="v7-recyclerview-库"><a href="#v7-recyclerview-库" class="headerlink" title="v7 recyclerview 库"></a>v7 recyclerview 库</h2><p>recyclerview 库添加了 <strong>RecyclerView</strong> 类。此类能够为 RecyclerView 小部件提供支持，RecyclerView 是一种通过提供有限的数据项窗口有效显示大数据集的视图。此库的 Gradle 构建脚本依赖关系标识符如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">com.android.support:recyclerview-v7:24.2.0</div></pre></td></tr></table></figure>
<h2 id="v7-Preference-支持库"><a href="#v7-Preference-支持库" class="headerlink" title="v7 Preference 支持库"></a>v7 Preference 支持库</h2><p>首选项软件包提供的 API 支持添加 preference 对象（例如 CheckBoxPreference 和 ListPreference），方便用户修改 UI 设置。</p>
<p>v7 Preference 库添加了对接口（例如 Preference.OnPreferenceChangeListener 和 Preference.OnPreferenceClickListener）以及类（例如 CheckBoxPreference 和 ListPreference）的支持。此库的 Gradle 构建脚本依赖关系标识符如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">com.android.support:preference-v7:24.2.0</div></pre></td></tr></table></figure>
<h1 id="Dalvik-可执行文件分包支持库"><a href="#Dalvik-可执行文件分包支持库" class="headerlink" title="Dalvik 可执行文件分包支持库"></a>Dalvik 可执行文件分包支持库</h1><p>此库可以为<strong>使用多个 Dalvik Executable (DEX) 文件开发应用提供支持</strong>。引用<strong>超过 65536 个方法</strong>的应用须使用 Dalvik 可执行文件分包配置。如需了解有关使用 Dalvik 可执行文件分包的详细信息，请参阅使用超过 6.4 万种方法开发应用。此库的 Gradle 构建脚本依赖关系标识符如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">com.android.support:multidex:1.0.0</div></pre></td></tr></table></figure>
<h1 id="注解支持库"><a href="#注解支持库" class="headerlink" title="注解支持库"></a>注解支持库</h1><p>注解软件包提供的 API <strong>支持向应用中添加注解元数据</strong>。此库的 Gradle 构建脚本依赖关系标识符如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">com.android.support:support-annotations:24.2.0</div></pre></td></tr></table></figure>
<h1 id="设计支持库"><a href="#设计支持库" class="headerlink" title="设计支持库"></a>设计支持库</h1><p>设计软件包提供的 API 支持向应用中添加 <strong>Material Design</strong> 组件和模式。</p>
<p>设计支持库添加了对应用开发者依赖的各种 Material Design 组件和模式的支持，例如抽屉式导航栏、浮动操作按钮 (FAB)、快捷信息栏和标签页。此库的 Gradle 构建脚本依赖关系标识符如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">com.android.support:design:24.2.0</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android传统蓝牙开发]]></title>
      <url>/Android%E4%BC%A0%E7%BB%9F%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考：<a href="https://developer.android.google.cn/guide/topics/connectivity/bluetooth.html" target="_blank" rel="external">https://developer.android.google.cn/guide/topics/connectivity/bluetooth.html</a></p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h1><ul>
<li><strong>RFCOMM</strong> ：串行电缆仿真协议。</li>
</ul>
<h1 id="Android-传统蓝牙-Bluetooth-API"><a href="#Android-传统蓝牙-Bluetooth-API" class="headerlink" title="Android 传统蓝牙 Bluetooth API"></a>Android 传统蓝牙 Bluetooth API</h1><p>传统蓝牙适用于电池使用强度较大的操作，例如 Android 设备之间的流式传输和通信等。使用 Bluetooth API，Android 应用可执行以下操作：</p>
<ul>
<li>扫描其他蓝牙设备</li>
<li>查询本地蓝牙适配器的配对蓝牙设备</li>
<li>建立 RFCOMM 通道</li>
<li>通过服务发现连接到其他设备</li>
<li>与其他设备进行双向数据传输</li>
<li>管理多个连接</li>
</ul>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="使用-Android-Bluetooth-API-来完成使用蓝牙进行通信的四项主要任务："><a href="#使用-Android-Bluetooth-API-来完成使用蓝牙进行通信的四项主要任务：" class="headerlink" title="使用 Android Bluetooth API 来完成使用蓝牙进行通信的四项主要任务："></a>使用 Android Bluetooth API 来完成使用蓝牙进行通信的四项主要任务：</h2><ul>
<li>设置蓝牙</li>
<li>查找局部区域内的配对设备或可用设备</li>
<li>连接设备</li>
<li>在设备之间传输数据</li>
</ul>
<h2 id="创建蓝牙连接所需的类和接口："><a href="#创建蓝牙连接所需的类和接口：" class="headerlink" title="创建蓝牙连接所需的类和接口："></a>创建蓝牙连接所需的类和接口：</h2><h3 id="BluetoothAdapter"><a href="#BluetoothAdapter" class="headerlink" title="BluetoothAdapter"></a>BluetoothAdapter</h3><p>表示本地蓝牙适配器（蓝牙无线装置）。 BluetoothAdapter 是所有蓝牙交互的入口点。 利用它可以发现其他蓝牙设备，查询绑定（配对）设备的列表，使用已知的 MAC 地址实例化 BluetoothDevice，以及创建 BluetoothServerSocket 以侦听来自其他设备的通信。</p>
<h3 id="BluetoothDevice"><a href="#BluetoothDevice" class="headerlink" title="BluetoothDevice"></a>BluetoothDevice</h3><p>表示远程蓝牙设备。利用它可以通过 BluetoothSocket 请求与某个远程设备建立连接，或查询有关该设备的信息，例如设备的名称、地址、类和绑定状态等。<br>BluetoothSocket<br>表示蓝牙套接字接口（与 TCP Socket 相似）。这是允许应用通过 InputStream 和 OutputStream 与其他蓝牙设备交换数据的连接点。</p>
<h3 id="BluetoothServerSocket"><a href="#BluetoothServerSocket" class="headerlink" title="BluetoothServerSocket"></a>BluetoothServerSocket</h3><p>表示用于侦听传入请求的开放服务器套接字（类似于 TCP ServerSocket）。 要连接两台 Android 设备，其中一台设备必须使用此类开放一个服务器套接字。 当一台远程蓝牙设备向此设备发出连接请求时， BluetoothServerSocket 将会在接受连接后返回已连接的 BluetoothSocket。</p>
<h3 id="BluetoothClass"><a href="#BluetoothClass" class="headerlink" title="BluetoothClass"></a>BluetoothClass</h3><p>描述蓝牙设备的一般特征和功能。 这是一组只读属性，用于定义设备的主要和次要设备类及其服务。 不过，它不能可靠地描述设备支持的所有蓝牙配置文件和服务，而是适合作为设备类型提示。<br>BluetoothProfile<br>表示蓝牙配置文件的接口。 蓝牙配置文件是适用于设备间蓝牙通信的无线接口规范。 免提配置文件便是一个示例。 如需了解有关配置文件的详细讨论，请参阅使用配置文件</p>
<h3 id="BluetoothHeadset"><a href="#BluetoothHeadset" class="headerlink" title="BluetoothHeadset"></a>BluetoothHeadset</h3><p>提供蓝牙耳机支持，以便与手机配合使用。 其中包括蓝牙耳机和免提（1.5 版）配置文件。</p>
<h3 id="BluetoothA2dp"><a href="#BluetoothA2dp" class="headerlink" title="BluetoothA2dp"></a>BluetoothA2dp</h3><p>定义高质量音频如何通过蓝牙连接和流式传输，从一台设备传输到另一台设备。“A2DP”代表高级音频分发配置文件。</p>
<h3 id="BluetoothHealth"><a href="#BluetoothHealth" class="headerlink" title="BluetoothHealth"></a>BluetoothHealth</h3><p>表示用于控制蓝牙服务的健康设备配置文件代理。</p>
<h3 id="BluetoothHealthCallback"><a href="#BluetoothHealthCallback" class="headerlink" title="BluetoothHealthCallback"></a>BluetoothHealthCallback</h3><p>用于实现 BluetoothHealth 回调的抽象类。您必须扩展此类并实现回调方法，以接收关于应用注册状态和蓝牙通道状态变化的更新内容。</p>
<h3 id="BluetoothHealthAppConfiguration"><a href="#BluetoothHealthAppConfiguration" class="headerlink" title="BluetoothHealthAppConfiguration"></a>BluetoothHealthAppConfiguration</h3><p>表示第三方蓝牙健康应用注册的应用配置，以便与远程蓝牙健康设备通信。</p>
<h3 id="BluetoothProfile-ServiceListener"><a href="#BluetoothProfile-ServiceListener" class="headerlink" title="BluetoothProfile.ServiceListener"></a>BluetoothProfile.ServiceListener</h3><p>在 BluetoothProfile IPC 客户端连接到服务（即，运行特定配置文件的内部服务）或断开服务连接时向其发送通知的接口。</p>
<h1 id="蓝牙权限"><a href="#蓝牙权限" class="headerlink" title="蓝牙权限"></a>蓝牙权限</h1><ul>
<li><p>蓝牙权限 <strong>BLUETOOTH</strong> : </p>
<p>  要在应用中使用<strong>蓝牙功能</strong>，必须声明蓝牙权限 BLUETOOTH。您需要此权限才能执行任何蓝牙通信，例如请求连接、接受连接和传输数据等。</p>
</li>
<li><p>蓝牙权限 <strong>BLUETOOTH_ADMIN</strong> :</p>
<p> 如果你希望你的应用启动<strong>设备发现</strong>或<strong>操作蓝牙设置</strong></p>
</li>
</ul>
<p><strong>注意</strong>：如果要使用 BLUETOOTH_ADMIN 权限，则还必须拥有 BLUETOOTH 权限。</p>
<h1 id="设置蓝牙"><a href="#设置蓝牙" class="headerlink" title="设置蓝牙"></a>设置蓝牙</h1><h2 id="获取BluetoothAdapter，并检测设备是否支持蓝牙"><a href="#获取BluetoothAdapter，并检测设备是否支持蓝牙" class="headerlink" title="获取BluetoothAdapter，并检测设备是否支持蓝牙"></a>获取BluetoothAdapter，并检测设备是否支持蓝牙</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();</div><div class="line"><span class="keyword">if</span> (mBluetoothAdapter == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="comment">// Device does not support Bluetooth</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="启用蓝牙"><a href="#启用蓝牙" class="headerlink" title="启用蓝牙"></a>启用蓝牙</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!mBluetoothAdapter.isEnabled()) &#123;</div><div class="line">    Intent enableBtIntent = <span class="keyword">new</span> Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);</div><div class="line">    startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意</strong> ：</p>
<pre><code>此处的 REQUEST_ENABLE_BT 是自己编写定义的局部常量（必须&gt;0）
</code></pre><h3 id="进行判断之后，监听用户的操作："><a href="#进行判断之后，监听用户的操作：" class="headerlink" title="进行判断之后，监听用户的操作："></a>进行判断之后，监听用户的操作：</h3><h4 id="方式1：-重写onActivityResult"><a href="#方式1：-重写onActivityResult" class="headerlink" title="方式1： 重写onActivityResult()"></a>方式1： 重写<strong>onActivityResult()</strong></h4><p>如果成功启用蓝牙，Activity 将会在 onActivityResult() 回调中收到 <strong>RESULT_OK</strong> 结果代码。 如果由于某个错误（或用户响应“No”）而没有启用蓝牙，则结果代码为 <strong>RESULT_CANCELED</strong>。</p>
<h4 id="方式2：侦听-ACTION-STATE-CHANGED-广播-Intent"><a href="#方式2：侦听-ACTION-STATE-CHANGED-广播-Intent" class="headerlink" title="方式2：侦听 ACTION_STATE_CHANGED 广播 Intent"></a>方式2：侦听 ACTION_STATE_CHANGED 广播 Intent</h4><p>每当蓝牙<strong>状态发生变化</strong>时，系统都会广播此 Intent。 此广播包含额外字段 EXTRA_STATE 和 EXTRA_PREVIOUS_STATE，二者分别包含新的和旧的蓝牙状态。 这些额外字段可能的值包括 STATE_TURNING_ON、STATE_ON、STATE_TURNING_OFF 和 STATE_OFF。侦听<strong>此广播适用于检测在您的应用运行期间对蓝牙状态所做的更改</strong>。</p>
<p><strong>提示</strong> ：<br><strong>启用可检测性</strong>将会<strong>自动启用蓝牙</strong>。 如果您计划在执行蓝牙 Activity 之前一直启用设备的可检测性，则可以<strong>跳过 “启用蓝牙”步骤</strong></p>
<h1 id="查找设备"><a href="#查找设备" class="headerlink" title="查找设备"></a>查找设备</h1><p>使用 <strong>BluetoothAdapter</strong>，可以通过<strong>设备发现</strong>或通过<strong>查询配对（绑定）设备</strong>的列表来查找远程蓝牙设备。</p>
<p>设备发现是一个<strong>扫描过程</strong>，它会搜索局部区域内已启用蓝牙功能的设备，然后请求一些关于各台设备的信息。但局部区域内的蓝牙设备仅在其当前<strong>已启用可检测性</strong>时才会响应发现请求。 如果设备可检测到，它将通过<strong>共享一些信息（例如设备名称、类及其唯一 MAC 地址）来响应发现请求</strong>。 利用此信息，执行发现的设备可以选择发起到被发现设备的连接。</p>
<p>在<strong>首次与远程设备建立连接后</strong>，将会<strong>自动向用户显示配对请求</strong>。 设备<strong>完成配对后</strong>，将会<strong>保存</strong>关于<strong>该设备的基本信息</strong>（例如设备名称、类和 MAC 地址），并且可使用 Bluetooth API 读取这些信息。 利用远程设备的已知 MAC 地址<strong>可随时向其发起连接</strong>，而无需执行发现操作（假定该设备处于有效范围内）。</p>
<p><strong>注</strong>：<br>Android 设备<strong>默认处于不可检测到状态</strong>。 用户可通过系统设置将设备设为在<strong>有限的时间内</strong>处于可检测到状态，或者，应用可请求<strong>用户在不离开应用的同时启用可检测性</strong>。 </p>
<h2 id="查询已配对的设备"><a href="#查询已配对的设备" class="headerlink" title="查询已配对的设备"></a>查询已配对的设备</h2><p>在执行设备发现之前，有必要查询已配对的设备集，以了解所需的设备是否处于已知状态。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Set&lt;BluetoothDevice&gt; devices = mBluetoothAdapter.getBondedDevices();</div><div class="line">        <span class="keyword">if</span> (devices.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (BluetoothDevice device: devices) &#123;</div><div class="line">                Log.e(TAG, <span class="string">"ヽ(｀Д´)ﾉ -&gt; dealBluetooth device Name : "</span> + device.getName() + <span class="string">", Address : "</span> + device.getAddress());</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>若要<strong>发起连接</strong>，BluetoothDevice 对象仅仅需要提供 <strong>MAC 地址</strong>即可。</p>
<h2 id="发现设备"><a href="#发现设备" class="headerlink" title="发现设备"></a>发现设备</h2><p>要开始发现设备，只需调用 <strong>startDiscovery()</strong>。该进程为<strong>异步进程</strong>，并且该方法会立即<strong>返回一个布尔值</strong>，指示是否已成功启动发现操作。 发现进程通常包含约<strong>12 秒钟</strong>的<strong>查询扫描</strong>，之后对每台发现的设备进行页面扫描，以检索其蓝牙名称。</p>
<p>您的应用必须针对 <strong>ACTION_FOUND</strong> Intent 注册一个 <strong>BroadcastReceiver</strong>，以便接收每台发现的设备的相关信息。 针对每台设备，系统将会广播 ACTION_FOUND Intent。此 Intent 将携带额外字段 <strong>EXTRA_DEVICE</strong> 和 <strong>EXTRA_CLASS</strong>，二者分别包含 <strong>BluetoothDevice</strong> 和 <strong>BluetoothClass</strong>。 例如，下面说明了在发现设备时如何注册以处理广播。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Create a BroadcastReceiver for ACTION_FOUND</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> BroadcastReceiver mReceiver = <span class="keyword">new</span> BroadcastReceiver() &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        String action = intent.getAction();</div><div class="line">        <span class="comment">// When discovery finds a device</span></div><div class="line">        <span class="keyword">if</span> (BluetoothDevice.ACTION_FOUND.equals(action)) &#123;</div><div class="line">            <span class="comment">// Get the BluetoothDevice object from the Intent</span></div><div class="line">            BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);</div><div class="line">            <span class="comment">// Add the name and address to an array adapter to show in a ListView</span></div><div class="line">            mArrayAdapter.add(device.getName() + <span class="string">"\n"</span> + device.getAddress());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// Register the BroadcastReceiver</span></div><div class="line">IntentFilter filter = <span class="keyword">new</span> IntentFilter(BluetoothDevice.ACTION_FOUND);</div><div class="line">registerReceiver(mReceiver, filter); <span class="comment">// Don't forget to unregister during onDestroy</span></div></pre></td></tr></table></figure>
<p><strong>注意：</strong><br>执行设备发现对于蓝牙适配器而言是一个非常繁重的操作过程，并且会<strong>消耗大量资源</strong>。 在找到要连接的设备后，确保始终使用 <strong>cancelDiscovery()</strong>停止发现，然后再尝试连接。 此外，如果您已经保持与某台设备的连接，那么执行发现操作可能会大幅减少可用于该连接的带宽，因此不应该在处于连接状态时执行发现操作。</p>
<h2 id="启用可检测性"><a href="#启用可检测性" class="headerlink" title="启用可检测性"></a>启用可检测性</h2><p>如果希望<strong>将本地设备设为可被其他设备检测到</strong>，请使用 <strong>ACTION_REQUEST_DISCOVERABLE</strong> 操作 Intent 调用 startActivityForResult(Intent, int)。<br>这将通过系统设置发出<strong>启用可检测到模式的请求</strong>（无需停止您的应用）。 默认情况下，设备将变为可检测到并持续 120 秒钟。<br>您可以通过添加 <strong>EXTRA_DISCOVERABLE_DURATION</strong> Intent Extra 来定义不同的持续时间。 应用可以设置的最大持续时间为 3600 秒，值为 0 则表示设备始终可检测到。 任何小于 0 或大于 3600 的值都会自动设为<strong>120秒</strong>。 例如，以下片段会将持续时间设为 300 秒：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent discoverableIntent = <span class="keyword">new</span></div><div class="line">Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);</div><div class="line">discoverableIntent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, <span class="number">300</span>);</div></pre></td></tr></table></figure>
<p>如果您将要发起到远程设备的连接，则无需启用设备可检测性。 仅当您希望您的应用托管将用于接受传入连接的服务器套接字时，才有必要启用可检测性，因为远程设备必须能够发现该设备，然后才能发起连接</p>
<h1 id="连接设备"><a href="#连接设备" class="headerlink" title="连接设备"></a>连接设备</h1><p>要在<strong>两台设备</strong>上的应用之间<strong>创建连接</strong>，<strong>必须同时实现服务器端和客户端机制</strong>，因为其中<strong>一台设备必须开放服务器套接字</strong>，而<strong>另一台设备必须发起连接</strong>（使用服务器设备的 MAC 地址发起连接）。 </p>
<p> 当服务器和客户端在同一 RFCOMM 通道上分别拥有已连接的 BluetoothSocket 时，二者将被视为彼此连接。 这种情况下，每台设备都能获得输入和输出流式传输，并且可以开始传输数据。</p>
<p> 服务器设备和客户端设备分别以<strong>不同的方法获得需要的 BluetoothSocket</strong>。<strong>服务器将在传入连接被接受时收到套接字。 客户端将在其打开到服务器的 RFCOMM 通道时收到该套接字</strong>。</p>
<p> 一种实现技术是自动将每台设备准备为一个服务器，从而使每台设备开放一个服务器套接字并侦听连接。然后任一设备可以发起与另一台设备的连接，并成为客户端。 或者，其中一台设备可显式“托管”连接并按需开放一个服务器套接字，而另一台设备则直接发起连接。</p>
<p> 如果两台设备之前尚未配对，则在连接过程中，Android 框架会自动向用户显示配对请求通知或对话框。因此，在尝试连接设备时，您的应用无需担心设备是否已配对。</p>
<h2 id="连接为服务器"><a href="#连接为服务器" class="headerlink" title="连接为服务器"></a>连接为服务器</h2><p>当您需要连接两台设备时，其中一台设备<strong>必须通过保持开放的 BluetoothServerSocket 来充当服务器</strong>。 服务器套接字的用途是侦听传入的连接请求，并在接受一个请求后提供已连接的 BluetoothSocket。 从 BluetoothServerSocket 获取 BluetoothSocket 后，可以（并且应该）舍弃 BluetoothServerSocket，除非您需要接受更多连接。</p>
<h2 id="连接为客户端"><a href="#连接为客户端" class="headerlink" title="连接为客户端"></a>连接为客户端</h2><p>待续……</p>
]]></content>
      
        <categories>
            
            <category> 蓝牙 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 蓝牙 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于蓝牙(Bluetooth)技术]]></title>
      <url>/%E5%85%B3%E4%BA%8E%E8%93%9D%E7%89%99%20Bluetooth%20%E6%8A%80%E6%9C%AF/</url>
      <content type="html"><![CDATA[<p>资料来源于网络</p>
<blockquote>
<p><a href="http://www.eepw.com.cn/article/201610/306179.htm" target="_blank" rel="external">http://www.eepw.com.cn/article/201610/306179.htm</a><br><a href="https://zh.wikipedia.org/wiki/%E8%97%8D%E7%89%99" target="_blank" rel="external">https://zh.wikipedia.org/wiki/%E8%97%8D%E7%89%99</a></p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/u=1416040336,3208991526&amp;fm=27&amp;gp=0.jpg" alt=""></p>
<h1 id="相关名词"><a href="#相关名词" class="headerlink" title="相关名词"></a>相关名词</h1><h2 id="ISM频段"><a href="#ISM频段" class="headerlink" title="ISM频段"></a>ISM频段</h2><p><strong>ISM频段</strong>（Industrial Scientific Medical Band），中文意思分别是<strong>工业的(Industrial)、科学的(Scientific)和医学的(Medical)</strong>，因此顾名思义ISM频段就是各国挪出某一段频段主要开放给工业，科学和医学机构使用。应用这些频段无需许可证或费用，只需要遵守一定的发射功率（一般低于1W），并且不要对其它频段造成干扰即可。ISM频段在各国的规定并不统一。因此无线局域网（IEEE 802.11b/IEEE 802.11g），蓝牙，ZigBee等无线网络，均可工作在2.4GHz频段上。</p>
<h2 id="RS-232"><a href="#RS-232" class="headerlink" title="RS-232"></a>RS-232</h2><p>个人计算机上的<strong>通讯接口</strong>之一，由电子工业协会(Electronic Industries Association，EIA) 所制定的<strong>异步传输标准接口</strong>。通常 RS-232 接口以9个引脚 (DB-9) 或是25个引脚 (DB-25) 的型态出现，一般个人计算机上会有两组 RS-232 接口，分别称为 COM1 和 COM2。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/d009b3de9c82d1587b429de9800a19d8bd3e42a2.jpg" alt=""></p>
<p>rs232（9针）接口</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/359b033b5bb5c9ea10eb64c0d539b6003af3b3fc.jpg" alt=""></p>
<h2 id="蓝牙技术联盟（Bluetooth-Special-Interest-Group：SIG）"><a href="#蓝牙技术联盟（Bluetooth-Special-Interest-Group：SIG）" class="headerlink" title="蓝牙技术联盟（Bluetooth Special Interest Group：SIG）"></a>蓝牙技术联盟（Bluetooth Special Interest Group：SIG）</h2><p>其拥有蓝牙的商标，负责制定蓝牙规范、认证制造厂商，授权他们使用蓝牙技术与蓝牙标志，但本身不负责蓝牙设备的设计、生产及贩售。</p>
<h2 id="蓝牙协议堆栈"><a href="#蓝牙协议堆栈" class="headerlink" title="蓝牙协议堆栈"></a>蓝牙协议堆栈</h2><p>依照其<strong>功能</strong>可分四层：</p>
<ul>
<li>核心协议层（HCI、LMP、L2CAP、SDP）</li>
<li>线缆替换协议层（RFCOMM）</li>
<li>电话控制协议层（TCS-BIN）</li>
<li>选用协议层（PPP、TCP、IP、UDP、OBEX、IrMC、WAP、WAE）</li>
</ul>
<h2 id="蓝牙规范（Profile）"><a href="#蓝牙规范（Profile）" class="headerlink" title="蓝牙规范（Profile）"></a>蓝牙规范（Profile）</h2><blockquote>
<p>更多参考：<a href="https://zh.wikipedia.org/wiki/%E8%97%8D%E7%89%99%E8%A6%8F%E7%AF%84" target="_blank" rel="external">https://zh.wikipedia.org/wiki/%E8%97%8D%E7%89%99%E8%A6%8F%E7%AF%84</a></p>
</blockquote>
<h3 id="释义"><a href="#释义" class="headerlink" title="释义"></a>释义</h3><p>其是指蓝牙通信在哪<strong>一种用途下应该使用的通信协议和相关的规范</strong>。Profile目的是要确保Bluetooth设备间的互通性（interoperability）。<strong>Profile</strong>中文译名有很多，比如配置文件，剖面，应用协议，轮廓等，每一种翻译代表了一种对于profile的不同理解，<strong> 剖面 </strong>这个说法可能更贴切一点。</p>
<p>因为profile其实是蓝牙对应于<strong>每一个具体的应用场景</strong>以及<strong>每一种应用</strong>的<strong>不同的协议栈</strong>，也就是说它其实是实现某种功能对应的<strong>自下而上的协议的组合</strong>。类似于对于<strong>横向协议的纵向组合</strong>。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/1806858-80fcbfee9e8266d2.png" alt=""></p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>porile之间也并非平行的关系，他们是<strong>相互依赖组合构成</strong>的，存在<strong>明显的层级关系</strong>的。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/1806858-b642475951354ea2.png" alt=""></p>
<p>蓝牙1.1定义的profile有13个。SIG认为蓝牙设备有4个最基本的Profile：</p>
<ul>
<li><p><strong>通用接入剖面</strong>：General Access Profile（<strong>GAP</strong>）</p>
<p>  定义两个蓝牙单元如何<strong>发现</strong>对方并<strong>建立连接</strong>，保证两个蓝牙单元，无论其生产厂商及进行的应用，可以通过蓝牙交换信息从而发现个单元支持何种应用。<strong>所有蓝牙单元都必须支持GAP以保证基本的互操作性和共存性</strong>。</p>
</li>
<li><p><strong>服务发现应用剖面</strong>：Service Discovery Application Profile（<strong>SDAP</strong>）</p>
<p>  定义<strong>如何发现蓝牙单元支持的业务</strong>，该剖面可以用来搜索已知的特定业务，也可以用来进行普通业务浏览搜索。</p>
</li>
<li><p><strong>串行端口剖面</strong>：Serial Port Profile（<strong>SPP</strong>）</p>
<p>  定义<strong>如何在两个设备之间建立虚拟串行端口，并用蓝牙将其连接</strong>。采用串行端口剖面可在蓝牙单元上<strong>仿真基于RS-232控制信令的串行线缆</strong>，该剖面可保证高达<strong>128kbit/s</strong>的数据速率。</p>
</li>
<li><p><strong>普通对象交换剖面</strong>：General Object Exchange Profile（<strong>GOEP</strong>）</p>
<p>  定义<strong>处理对象交换</strong>的应用需采用的协议和程序，基于GOEP的应用模型（如文件传输、同步等）假定链路和信道已经建立如GAP所述，GOEP描述从一个蓝牙设备Push数据到另一个蓝牙设备的程序，还规定如何在两个单元之间Pull数据。</p>
</li>
</ul>
<h2 id="干扰"><a href="#干扰" class="headerlink" title="干扰"></a>干扰</h2><p>Bluetooth在2.4GHz的电波干扰问题一直为大家所诟病，特别和无线局域网间的互相干扰问题。有干扰发生时，就以<strong>重新发送数据包</strong>的方法来解决干扰。</p>
<h2 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h2><h1 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h1><p>这项无线技术的名称取自古代丹麦维京国王Harald Blåtand的名字，他以统一了因宗教战争和领土争议而分裂的挪威与丹麦而闻名于世，而这个名字的英文便是Harald Bluetooth。</p>
<p>“Bluetooth”一词是斯堪的纳维亚语言词汇Blåtand/Blåtann的英语化。这个词的来源是10世纪丹麦和挪威国王蓝牙哈拉尔（丹麦语：Harald Blåtand Gormsen），借国王的绰号“Blåtand”当名称，直接翻译成中文为“蓝牙”（blå＝蓝，tand＝牙）。2006年，蓝牙技术联盟组织已将全球中文译名统一改采直译为“蓝牙”，并注册为该组织的注册商标。</p>
<p>蓝牙的<strong>标志</strong>是<strong>卢恩字母</strong> Runic letter ior.svg（Hagall，ᚼ）和 Runic letter berkanan.svg（Bjarkan，ᛒ）的组合，也就<strong>是Harald Blåtand的首字母HB的合写</strong>。</p>
<p>这是一种<strong>无线通讯技术标准</strong>，用来让固定与移动设备，在<strong>短距离间交换数据</strong>，以形成个人局域网（PAN）。其使用短波特高频（UHF）无线电波，经由2.4至2.485 GHz的ISM频段来进行通信。1994年由电信商<strong>爱立信</strong>（Ericsson）发展出这个技术。它最初的设计，是希望创建一个<strong>RS-232数据线</strong>的无线通信替代版本。它能够链接多个设备，克服同步的问题。</p>
<p>蓝牙2.1+EDR/3.0+HS版本(通常指“<strong>标准蓝牙技术</strong>”)与<strong>蓝牙低能耗(BLE)技术</strong>有许多共同点：它们都是低成本、短距离、可互操作的鲁棒性无线技术，工作在免许可的2.4GHz ISM射频频段。</p>
<p>重要区别：蓝牙低能耗技术从一开始就设计为<strong>超低功耗(ULP)无线技术</strong>，而标准蓝牙技术<strong>主要是能够构成</strong>“低功耗的”无线连接。</p>
<h1 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h1><p>蓝牙技术分为<strong>基础率/增强数据率（BR/EDR）</strong>和<strong>低耗能（LE）</strong>两种技术类型。其中BR/EDR型是以点对点网络拓扑结构创建<strong>一对一</strong>设备通信；LE型则使用<strong>点对点（一对一）、广播（一对多）和网格（多对多）等</strong>多种网络拓扑结构</p>
<h1 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h1><blockquote>
<p>不同版本的特性，参考:<a href="http://www.eepw.com.cn/article/201709/364609.htm" target="_blank" rel="external">http://www.eepw.com.cn/article/201709/364609.htm</a></p>
</blockquote>
<ul>
<li>第三代，2009年4月21日，蓝牙技术联盟颁布了蓝牙核心规范<strong>3.0版（3.0+HS）</strong>，是一种全新的交替射频技术。蓝牙3.0+HS提高了数据传输速率，集成802.11PAL最高速度可达<strong>24Mbps</strong>。是蓝牙2.0速度的8倍。此外，引入了增强电源控制，<strong>实际空闲功耗明显降低</strong>。</li>
<li><p>第四代，2010年7月7日，蓝牙技术联盟推出了蓝牙<strong>4.0规范</strong>。其最重要的特性是<strong>支持省电</strong>。Bluetooth 4.0是Bluetooth从诞生至今唯一的一个综合协议规范。还提出了<strong>“低功耗蓝牙”、“传统蓝牙”和“高速蓝牙”</strong>三种模式。</p>
<ul>
<li><strong>高速蓝牙主</strong>：攻数据交换与传输；</li>
<li><strong>传统蓝牙</strong>：则以信息沟通、设备连接为重点；</li>
<li><p><strong>蓝牙低功耗</strong>：顾名思义，以不需占用太多带宽的设备连接为主。前身其实是<strong>NOKIA开发的Wibree技术</strong>，本是作为一项<strong>专为移动设备开发的极低功耗的移动无线通信技术</strong>，在被SIG接纳并规范化之后重命名为<strong>Bluetooth Low Energy（后简称低功耗蓝牙）</strong>。</p>
<p>这三种协议规范还能够互相组合搭配、从而实现更广泛的应用模式，此外，Bluetooth 4.0还把蓝牙的传输距离提升到<strong>100米以上（低功耗模式条件下）</strong></p>
<p>2013年底，蓝牙技术联盟推出了<strong>蓝牙4.1规范</strong>，其目的是为了让 Bluetooth Smart 技术最终成为<strong>物联网(Internet of Things)发展的核心动力</strong>。</p>
</li>
</ul>
</li>
<li>第五代，在2016年6月宣布<strong>蓝牙5.0</strong>。在有效传输距离上将是4.2LE版本的4倍（<strong>理论上可达300米）</strong>，传输速度将是4.2LE版本的2倍（速度上限为24Mbps）。蓝牙5.0还<strong>支持室内定位导航功能（结合WiFi可以实现精度小于1米的室内定位）</strong>，允许无需配对接受信标的数据（比如广告、Beacon、位置信息等，传输率提高了8倍），针对<strong>物联网</strong>进行了很多底层优化。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 蓝牙 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 蓝牙 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android BLE 蓝牙开发]]></title>
      <url>/Android%20BLE%20%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考文章：<a href="https://www.jianshu.com/p/3a372af38103" target="_blank" rel="external">https://www.jianshu.com/p/3a372af38103</a><br>参考文章：<a href="https://www.jianshu.com/p/29a730795294" target="_blank" rel="external">https://www.jianshu.com/p/29a730795294</a><br>android developers：<a href="https://developer.android.google.cn/guide/topics/connectivity/bluetooth-le.html#terms" target="_blank" rel="external">https://developer.android.google.cn/guide/topics/connectivity/bluetooth-le.html#terms</a><br>部分图片来源：<a href="https://www.youtube.com/watch?v=vUbFB1Qypg8" target="_blank" rel="external">https://www.youtube.com/watch?v=vUbFB1Qypg8</a><br>经典蓝牙使用参考：<a href="http://blog.csdn.net/axinmeng88/article/details/79059468" target="_blank" rel="external">http://blog.csdn.net/axinmeng88/article/details/79059468</a><br>BLE设备地址参考：<a href="http://www.wowotech.net/bluetooth/ble_address_type.html" target="_blank" rel="external">http://www.wowotech.net/bluetooth/ble_address_type.html</a></p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="蓝牙唯一身份标识"><a href="#蓝牙唯一身份标识" class="headerlink" title="蓝牙唯一身份标识"></a>蓝牙唯一身份标识</h1><ul>
<li><strong>MAC地址</strong>：这个地址是唯一的，就像网络上的<strong>IP地址</strong></li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-06%2009.29.46.png" alt=""></p>
<p><strong>UUID（Universally Unique Identifier）</strong>：可以把它理解为是IP地址中的<strong>端口号</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">更多UUID接口参考：https://www.jianshu.com/p/3de46c75f8ce，</div><div class="line">官网：https://www.bluetooth.com/zh-cn/specifications/assigned-numbers/service-discovery</div></pre></td></tr></table></figure>
<p><strong>MAC + UUID = IP地址 + 端口号</strong>。这两者合起来就是蓝牙的唯一身份标识。BLE扫描的过程，设备会生成随机地址。根据随机地址也能进行连接。</p>
<h1 id="BLE-Bluetooth-Low-Energy-低功耗蓝牙"><a href="#BLE-Bluetooth-Low-Energy-低功耗蓝牙" class="headerlink" title="BLE (Bluetooth Low Energy) 低功耗蓝牙"></a>BLE (Bluetooth Low Energy) 低功耗蓝牙</h1><p>Android 4.3（API级别18）引入了以低功耗蓝牙（BLE）为中心角色的内置平台支持，并提供应用程序可用于发现设备，查询服务和传输信息的API</p>
<p>常见用例包括以下内容：</p>
<ul>
<li>在附近的设备之间传输少量的数据</li>
<li>与Google Beacons等接近传感器进行互动，为用户提供基于当前位置的定制体验。</li>
</ul>
<p>传统蓝牙可以用于数据量比较大的传输，如语音，音乐，较高数据量传输等，但是比较耗电，低功耗蓝牙这样应用于实时性要求比较高，功耗比较低，但是数据速率比较低的产品，如遥控类的，如鼠标，键盘，遥控鼠标(Air Mouse)，传感设备的数据发送，如心跳带，血压计，温度传感器等。</p>
<h1 id="关键术语（Key-Terms）和-概念（Concepts）"><a href="#关键术语（Key-Terms）和-概念（Concepts）" class="headerlink" title="关键术语（Key Terms）和 概念（Concepts）"></a>关键术语（Key Terms）和 概念（Concepts）</h1><p><img src="http://oy991qm3u.bkt.clouddn.com/4985212-4eb4addccb3fe853.png" alt=""></p>
<p>GATT图示1</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/1806858-265d374ad9bb425f.png" alt=""></p>
<p>GATT图示2</p>
<ul>
<li><p><strong>通用属性配置文件 Generic Attribute Profile（GATT）</strong>：GATT配置文件是通过BLE链接发送和接收被称为“属性”的短小数据的通用规范。目前所有的低能耗应用程序都基于GATT。</p>
<ul>
<li>蓝牙SIG为低能耗设备定义了许多配置文件。 配置文件是设备如何在特定应用程序中工作的规范。 请注意，设备可以实现多个配置文件。 例如，一个设备可以包含一个心率监测器和一个电池电量检测器。</li>
<li><p>你可以把他看成xml来理解：</p>
<ul>
<li>每个GATT由完成不同功能的Service组成；</li>
<li>每个Service由不同的Characteristic组成；</li>
<li><p>每个Characteristic由一个value和一个或者多个Descriptor组成；</p>
<p>Service、Characteristic相当于标签（Service相当于他的类别，Characteristic相当于它的名字），而value才真正的包含数据，Descriptor是对这个value进行的说明和描述，当然我们可以从不同角度来描述和说明，因此可以有多个Descriptor.</p>
<p><strong>举一个简单的例子进行说明：</strong></p>
<p>常见的小米手环是一个BLE设备，（假设）它包含三个Service,分别是提供设备信息的Service、提供步数的Service、检测心率的Service;<br>而设备信息的service中包含的characteristic包括厂商信息、硬件信息、版本信息等；而心率Service则包括心率characteristic等，而心率characteristic中的value则真正的包含心率的数据，而descriptor则是对该value的描述说明，比如value的单位啊，描述啊，权限啊等。</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><strong>属性协议 Attribute Protocol（ATT）</strong>：GATT建立在属性协议（ATT）之上。 这也被称为GATT / ATT。 ATT经过优化，可在BLE设备上运行。 为此，它使用尽可能少的字节。 每个属性由一个<strong>通用唯一标识符（UUID）</strong>唯一标识，该标识符是用于唯一标识信息的字符串ID的标准化128位格式。 ATT传输的属性被格式化为特征和服务。</li>
<li><strong>特性 Characteristic</strong>： 特性包含描述特性值的单个值和0-n个描述符。一个特征可以被认为是一个类，类似于一个阶级。是最小的数据逻辑单元。</li>
<li><strong>描述符 Descriptor</strong>： 描述符是描述特征值的定义属性。 例如，一个描述符可以指定一个可读的描述，一个特征值的可接受范围，或者一个特征值特有的度量单位。value、descriptor中存储数据的解析由Server的工程师决定，并无规范，双发按照约定开发。</li>
<li><strong>服务 Service</strong>： 服务是一个特征的集合。 例如，您可以拥有一个名为“心率监测器”的服务，其中包含“心率测量”等特性。 您可以在bluetooth.org上找到现有基于GATT的配置文件和服务的列表。Service/Characteristic均有一个<strong>唯一的UUID标识</strong>，UUID既有<strong>16位</strong>的也有<strong>128位</strong>的，我们需要了解的是16位的UUID是经过蓝牙组织认证的，是需要购买的，当然也有一些通用的16位UUID。例如<strong>Heart Rate</strong>服务的UUID就是0X180D,代码中表示为0X00001800-0000-1000-8000-00805f9b34fb,其他位为固定的。而128位的UUID则可以自定义。</li>
</ul>
<h1 id="角色（Roles）和责任（Responsibilities）"><a href="#角色（Roles）和责任（Responsibilities）" class="headerlink" title="角色（Roles）和责任（Responsibilities）"></a>角色（Roles）和责任（Responsibilities）</h1><p>以下是Android设备与BLE设备交互时适用的角色和职责：</p>
<ul>
<li><strong>中央（Central）</strong> 与 <strong>周边（Peripheral）</strong>。这适用于BLE连接本身。处于中心角色的设备扫描，寻找广告，并且在外围角色中的设备进行广告。</li>
<li><strong>GATT服务器</strong> 与 <strong>GATT客户端</strong>。这决定了两台设备在建立连接后如何相互通话。</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-02%2010.10.05.png" alt=""></p>
<p>为了理解这个区别，假设你有一个Android手机和一个BLE设备的活动追踪器。 手机支持中心角色; 活动跟踪器支持外设角色（建立一个BLE连接，你需要每两个事物中只有一个支持外围设备的人不能彼此交谈，也不能只支持两个事物）。</p>
<p>一旦手机和活动追踪器建立了连接，他们就开始将GATT元数据转移到另一个。根据他们传输的数据的种类，其中一个或另一个可能充当服务器。例如，如果活动跟踪器想要将传感器数据报告给电话，则活动跟踪器可以充当服务器。如果活动跟踪器想要从手机接收更新，那么手机作为服务器可能是有意义的。</p>
<p>在本文档中使用的示例中，Android应用程序（在Android设备上运行）是GATT客户端。该应用程序从GATT服务器获取数据，GATT服务器是支持心率档案的BLE心率监测器。但你也可以设计你的Android应用程序来扮演GATT服务器的角色。有关更多信息，请参阅BluetoothGattServer。</p>
<h1 id="BLE-权限（Permissions）"><a href="#BLE-权限（Permissions）" class="headerlink" title="BLE 权限（Permissions）"></a>BLE 权限（Permissions）</h1><ul>
<li><p>为了在您的应用程序中使用蓝牙功能，您必须声明（declare） <strong>权限1：BLUETOOTH</strong>。您需要此权限才能执行（perform）任何 <strong>蓝牙通信</strong> ，例如 请求连接，接受连接以及传输数据。</p>
</li>
<li><p>如果您希望您的应用启动设备<strong>发现或操纵（manipulate）蓝牙设置</strong>，则还必须声明 <strong>权限2：BLUETOOTH_ADMIN</strong>。 注意：如果您使用BLUETOOTH_ADMIN权限，则还必须具有BLUETOOTH权限。</p>
</li>
</ul>
<p>在应用程序清单文件中声明蓝牙许可。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;/&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_ADMIN&quot;/&gt;</div></pre></td></tr></table></figure>
<p>如果您想声明您的应用<strong>仅适用于具有BLE功能的设备</strong>，请在应用的清单中包含以下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-feature android:name=&quot;android.hardware.bluetooth_le&quot; android:required=&quot;true&quot;/&gt;</div></pre></td></tr></table></figure>
<p>但是，如果您想让您的应用可用于不支持BLE的设备，则应该在应用的清单中包含此元素，但设置<code>required =“false”</code>。 然后在运行时，您可以使用<code>PackageManager.hasSystemFeature（）</code>来确定BLE可用性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// Use this check to determine whether BLE is supported on the device. Then</div><div class="line">// you can selectively disable BLE-related features.</div><div class="line">if (!getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) &#123;</div><div class="line">    Toast.makeText(this, R.string.ble_not_supported, Toast.LENGTH_SHORT).show();</div><div class="line">    finish();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：</strong><br>LE信标往往与<strong>位置</strong>有关。 为了在没有过滤器的情况下使用<strong>BluetoothLeScanner</strong>，您<strong>必须</strong>通过在应用的清单文件中声明</p>
<ul>
<li><strong>权限3：ACCESS_COARSE_LOCATION</strong> </li>
</ul>
<p>或</p>
<ul>
<li><strong>权限3：ACCESS_FINE_LOCATION</strong></li>
</ul>
<p>权限来请求用户的许可。 <strong>没有这些权限，扫描将不会返回任何结果</strong>。</p>
<h1 id="设置BLE"><a href="#设置BLE" class="headerlink" title="设置BLE"></a>设置BLE</h1><p>在您的应用程序可以通过BLE进行通信之前，您需要验证设备是否支持BLE，如果是，请确保已启用BLE。请注意，只有在<uses-feature ...="">设置为false时才需要执行此项检查</uses-feature></p>
<p>如果不支持BLE，那么您应该禁用任何BLE功能。<br>如果BLE支持，但被禁用，那么您可以请求用户启用蓝牙，而无需离开您的应用程序。 使用<strong>BluetoothAdapter</strong>，可以分两步完成此设置：</p>
<h2 id="1-获取-BluetoothAdapter"><a href="#1-获取-BluetoothAdapter" class="headerlink" title="1. 获取 BluetoothAdapter"></a>1. 获取 BluetoothAdapter</h2><p>BluetoothAdapter是任何和所有的蓝牙活动所必需的。 BluetoothAdapter代表<strong>设备自己的蓝牙适配器</strong>（蓝牙无线电）。整个系统有一个蓝牙适配器，您的应用程序可以<strong>使用这个对象与它进行交互</strong>。下面的代码展示了如何获取适配器。请注意，此方法使用getSystemService（）返回BluetoothManager的实例，然后用于获取适配器。 Android 4.3（API Level 18）介绍了BluetoothManager：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">private BluetoothAdapter mBluetoothAdapter;</div><div class="line">...</div><div class="line">// Initializes Bluetooth adapter.</div><div class="line">final BluetoothManager bluetoothManager =</div><div class="line">        (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);</div><div class="line">mBluetoothAdapter = bluetoothManager.getAdapter();</div></pre></td></tr></table></figure>
<h2 id="2-启用蓝牙"><a href="#2-启用蓝牙" class="headerlink" title="2. 启用蓝牙"></a>2. 启用蓝牙</h2><p>接下来，您需要确保蓝牙已启用。调用<strong>isEnabled（）</strong>来检查当前是否启用了蓝牙。如果此方法返回false，则蓝牙被禁用。以下片段检查是否启用了蓝牙。如果不是，该片段会显示一个错误，提示用户转到设置以启用蓝牙：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// Ensures Bluetooth is available on the device and it is enabled. If not,</div><div class="line">// displays a dialog requesting user permission to enable Bluetooth.</div><div class="line">if (mBluetoothAdapter == null || !mBluetoothAdapter.isEnabled()) &#123;</div><div class="line">    Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);</div><div class="line">    startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：</strong><br>传递给 startActivityForResult（android.content.Intent，int）的<strong>REQUEST_ENABLE_BT</strong>常量是系统在onActivityResult（int，int，android.content）中返回给您的本地定义的整数（它必须大于0））实现作为requestCode参数。</p>
<h1 id="查找BLE设备"><a href="#查找BLE设备" class="headerlink" title="查找BLE设备"></a>查找BLE设备</h1><p>要查找BLE设备，请使用<strong>startLeScan（）</strong>方法。 此方法将<strong>BluetoothAdapter.LeScanCallback</strong>作为参数。 您必须实现此<strong>BluetoothAdapter.LeScanCallback</strong>，因为这是如何<strong>返回扫描结果</strong>。 由于扫描耗电量大，您应遵守以下准则:</p>
<ul>
<li>一旦找到所需的设备，请停止扫描</li>
<li>切勿扫描循环，并在扫描上设置时间限制。以前可用的设备可能已移出范围，并继续扫描电池电量。</li>
</ul>
<p>以下片段显示了如何<strong>启动</strong>和<strong>停止</strong>扫描：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Activity for scanning and displaying available BLE devices.</div><div class="line"> */</div><div class="line">public class DeviceScanActivity extends ListActivity &#123;</div><div class="line"></div><div class="line">    private BluetoothAdapter mBluetoothAdapter;</div><div class="line">    private boolean mScanning;</div><div class="line">    private Handler mHandler;</div><div class="line"></div><div class="line">    // Stops scanning after 10 seconds.</div><div class="line">    private static final long SCAN_PERIOD = 10000;</div><div class="line">    ...</div><div class="line">    private void scanLeDevice(final boolean enable) &#123;</div><div class="line">        if (enable) &#123;</div><div class="line">            // Stops scanning after a pre-defined scan period.</div><div class="line">            mHandler.postDelayed(new Runnable() &#123;</div><div class="line">                @Override</div><div class="line">                public void run() &#123;</div><div class="line">                    mScanning = false;</div><div class="line">                    mBluetoothAdapter.stopLeScan(mLeScanCallback);</div><div class="line">                &#125;</div><div class="line">            &#125;, SCAN_PERIOD);</div><div class="line"></div><div class="line">            mScanning = true;</div><div class="line">            mBluetoothAdapter.startLeScan(mLeScanCallback);</div><div class="line">        &#125; else &#123;</div><div class="line">            mScanning = false;</div><div class="line">            mBluetoothAdapter.stopLeScan(mLeScanCallback);</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果只想扫描特定类型的外设，则改为调用<strong>startLeScan（UUID []，BluetoothAdapter.LeScanCallback）</strong>，提供<strong>指定</strong>您的应用程序支持的GATT服务的UUID对象数组。</p>
<p>以下是<strong>BluetoothAdapter.LeScanCallback</strong>的一个实现，它是用于<strong>传递BLE扫描结果</strong>的接口🤔：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">private LeDeviceListAdapter mLeDeviceListAdapter;</div><div class="line">...</div><div class="line">// Device scan callback.</div><div class="line">private BluetoothAdapter.LeScanCallback mLeScanCallback =</div><div class="line">        new BluetoothAdapter.LeScanCallback() &#123;</div><div class="line">    @Override</div><div class="line">    public void onLeScan(final BluetoothDevice device, int rssi,</div><div class="line">            byte[] scanRecord) &#123;</div><div class="line">        runOnUiThread(new Runnable() &#123;</div><div class="line">           @Override</div><div class="line">           public void run() &#123;</div><div class="line">               mLeDeviceListAdapter.addDevice(device);</div><div class="line">               mLeDeviceListAdapter.notifyDataSetChanged();</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">   &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>注意</strong>：<br>您<strong>只能</strong>扫描蓝牙LE设备或扫描经典蓝牙设备，如蓝牙中所述。您<strong>无法同时</strong>扫描Bluetooth LE和传统设备。</p>
<h1 id="连接到GATT服务器（发送数据的BLE设备）"><a href="#连接到GATT服务器（发送数据的BLE设备）" class="headerlink" title="连接到GATT服务器（发送数据的BLE设备）"></a>连接到GATT服务器（发送数据的BLE设备）</h1><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-02%2010.11.50.png" alt=""></p>
<p>与BLE设备交互的<strong>第一步是连接到它</strong>，更具体地说，连接到设备上的GATT服务器。 要连接到BLE设备上的GATT服务器，请使用<strong>connectGatt（）</strong>方法。 此方法有三个参数：一个<strong>Context</strong>对象，<strong>autoConnect</strong>（布尔值，指示<strong>是否</strong>在BLE设备<strong>变为可用时自动连接</strong>）以及对<strong>BluetoothGattCallback</strong>的引用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mBluetoothGatt = device.connectGatt(this, false, mGattCallback);</div></pre></td></tr></table></figure>
<p>这将连接到由BLE设备托管的GATT服务器，并返回一个BluetoothGatt实例，然后您可以使用该实例来执行GATT客户端操作。 调用者（Android应用程序）是GATT客户端。 BluetoothGattCallback用于向客户端传递结果，例如连接状态，以及任何其他GATT客户端操作</p>
<p>在这个例子中，BLE应用程序提供了一个Activity（DeviceControlActivity）来连接，显示数据，并显示设备支持的GATT服务和特性。 根据用户输入，此Activity与一个名为BluetoothLeService的服务进行通信，该服务通过Android BLE API与BLE设备进行交互：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">// A service that interacts with the BLE device via the Android BLE API.</div><div class="line">public class BluetoothLeService extends Service &#123;</div><div class="line">    private final static String TAG = BluetoothLeService.class.getSimpleName();</div><div class="line"></div><div class="line">    private BluetoothManager mBluetoothManager;</div><div class="line">    private BluetoothAdapter mBluetoothAdapter;</div><div class="line">    private String mBluetoothDeviceAddress;</div><div class="line">    private BluetoothGatt mBluetoothGatt;</div><div class="line">    private int mConnectionState = STATE_DISCONNECTED;</div><div class="line"></div><div class="line">    private static final int STATE_DISCONNECTED = 0;</div><div class="line">    private static final int STATE_CONNECTING = 1;</div><div class="line">    private static final int STATE_CONNECTED = 2;</div><div class="line"></div><div class="line">    public final static String ACTION_GATT_CONNECTED =</div><div class="line">            &quot;com.example.bluetooth.le.ACTION_GATT_CONNECTED&quot;;</div><div class="line">    public final static String ACTION_GATT_DISCONNECTED =</div><div class="line">            &quot;com.example.bluetooth.le.ACTION_GATT_DISCONNECTED&quot;;</div><div class="line">    public final static String ACTION_GATT_SERVICES_DISCOVERED =</div><div class="line">            &quot;com.example.bluetooth.le.ACTION_GATT_SERVICES_DISCOVERED&quot;;</div><div class="line">    public final static String ACTION_DATA_AVAILABLE =</div><div class="line">            &quot;com.example.bluetooth.le.ACTION_DATA_AVAILABLE&quot;;</div><div class="line">    public final static String EXTRA_DATA =</div><div class="line">            &quot;com.example.bluetooth.le.EXTRA_DATA&quot;;</div><div class="line"></div><div class="line">    public final static UUID UUID_HEART_RATE_MEASUREMENT =</div><div class="line">            UUID.fromString(SampleGattAttributes.HEART_RATE_MEASUREMENT);</div><div class="line"></div><div class="line">    // Various callback methods defined by the BLE API.</div><div class="line">    private final BluetoothGattCallback mGattCallback =</div><div class="line">            new BluetoothGattCallback() &#123;</div><div class="line">        @Override</div><div class="line">        public void onConnectionStateChange(BluetoothGatt gatt, int status,</div><div class="line">                int newState) &#123;</div><div class="line">            String intentAction;</div><div class="line">            if (newState == BluetoothProfile.STATE_CONNECTED) &#123;</div><div class="line">                intentAction = ACTION_GATT_CONNECTED;</div><div class="line">                mConnectionState = STATE_CONNECTED;</div><div class="line">                broadcastUpdate(intentAction);</div><div class="line">                Log.i(TAG, &quot;Connected to GATT server.&quot;);</div><div class="line">                Log.i(TAG, &quot;Attempting to start service discovery:&quot; +</div><div class="line">                        mBluetoothGatt.discoverServices());</div><div class="line"></div><div class="line">            &#125; else if (newState == BluetoothProfile.STATE_DISCONNECTED) &#123;</div><div class="line">                intentAction = ACTION_GATT_DISCONNECTED;</div><div class="line">                mConnectionState = STATE_DISCONNECTED;</div><div class="line">                Log.i(TAG, &quot;Disconnected from GATT server.&quot;);</div><div class="line">                broadcastUpdate(intentAction);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        // New services discovered</div><div class="line">        public void onServicesDiscovered(BluetoothGatt gatt, int status) &#123;</div><div class="line">            if (status == BluetoothGatt.GATT_SUCCESS) &#123;</div><div class="line">                broadcastUpdate(ACTION_GATT_SERVICES_DISCOVERED);</div><div class="line">            &#125; else &#123;</div><div class="line">                Log.w(TAG, &quot;onServicesDiscovered received: &quot; + status);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        // Result of a characteristic read operation</div><div class="line">        public void onCharacteristicRead(BluetoothGatt gatt,</div><div class="line">                BluetoothGattCharacteristic characteristic,</div><div class="line">                int status) &#123;</div><div class="line">            if (status == BluetoothGatt.GATT_SUCCESS) &#123;</div><div class="line">                broadcastUpdate(ACTION_DATA_AVAILABLE, characteristic);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">     ...</div><div class="line">    &#125;;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当一个特定的回调被触发时，它会调用相应的broadcastUpdate（）辅助方法并传递一个动作。 请注意，本节中的数据解析是根据蓝牙心率测量配置文件规范执行的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">private void broadcastUpdate(final String action) &#123;</div><div class="line">    final Intent intent = new Intent(action);</div><div class="line">    sendBroadcast(intent);</div><div class="line">&#125;</div><div class="line"></div><div class="line">private void broadcastUpdate(final String action,</div><div class="line">                             final BluetoothGattCharacteristic characteristic) &#123;</div><div class="line">    final Intent intent = new Intent(action);</div><div class="line"></div><div class="line">    // This is special handling for the Heart Rate Measurement profile. Data</div><div class="line">    // parsing is carried out as per profile specifications.</div><div class="line">    if (UUID_HEART_RATE_MEASUREMENT.equals(characteristic.getUuid())) &#123;</div><div class="line">        int flag = characteristic.getProperties();</div><div class="line">        int format = -1;</div><div class="line">        if ((flag &amp; 0x01) != 0) &#123;</div><div class="line">            format = BluetoothGattCharacteristic.FORMAT_UINT16;</div><div class="line">            Log.d(TAG, &quot;Heart rate format UINT16.&quot;);</div><div class="line">        &#125; else &#123;</div><div class="line">            format = BluetoothGattCharacteristic.FORMAT_UINT8;</div><div class="line">            Log.d(TAG, &quot;Heart rate format UINT8.&quot;);</div><div class="line">        &#125;</div><div class="line">        final int heartRate = characteristic.getIntValue(format, 1);</div><div class="line">        Log.d(TAG, String.format(&quot;Received heart rate: %d&quot;, heartRate));</div><div class="line">        intent.putExtra(EXTRA_DATA, String.valueOf(heartRate));</div><div class="line">    &#125; else &#123;</div><div class="line">        // For all other profiles, writes the data formatted in HEX.</div><div class="line">        final byte[] data = characteristic.getValue();</div><div class="line">        if (data != null &amp;&amp; data.length &gt; 0) &#123;</div><div class="line">            final StringBuilder stringBuilder = new StringBuilder(data.length);</div><div class="line">            for(byte byteChar : data)</div><div class="line">                stringBuilder.append(String.format(&quot;%02X &quot;, byteChar));</div><div class="line">            intent.putExtra(EXTRA_DATA, new String(data) + &quot;\n&quot; +</div><div class="line">                    stringBuilder.toString());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    sendBroadcast(intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>回到DeviceControlActivity中，这些事件由BroadcastReceiver处理：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">// Handles various events fired by the Service.</div><div class="line">// ACTION_GATT_CONNECTED: connected to a GATT server.</div><div class="line">// ACTION_GATT_DISCONNECTED: disconnected from a GATT server.</div><div class="line">// ACTION_GATT_SERVICES_DISCOVERED: discovered GATT services.</div><div class="line">// ACTION_DATA_AVAILABLE: received data from the device. This can be a</div><div class="line">// result of read or notification operations.</div><div class="line">private final BroadcastReceiver mGattUpdateReceiver = new BroadcastReceiver() &#123;</div><div class="line">    @Override</div><div class="line">    public void onReceive(Context context, Intent intent) &#123;</div><div class="line">        final String action = intent.getAction();</div><div class="line">        if (BluetoothLeService.ACTION_GATT_CONNECTED.equals(action)) &#123;</div><div class="line">            mConnected = true;</div><div class="line">            updateConnectionState(R.string.connected);</div><div class="line">            invalidateOptionsMenu();</div><div class="line">        &#125; else if (BluetoothLeService.ACTION_GATT_DISCONNECTED.equals(action)) &#123;</div><div class="line">            mConnected = false;</div><div class="line">            updateConnectionState(R.string.disconnected);</div><div class="line">            invalidateOptionsMenu();</div><div class="line">            clearUI();</div><div class="line">        &#125; else if (BluetoothLeService.</div><div class="line">                ACTION_GATT_SERVICES_DISCOVERED.equals(action)) &#123;</div><div class="line">            // Show all the supported services and characteristics on the</div><div class="line">            // user interface.</div><div class="line">            displayGattServices(mBluetoothLeService.getSupportedGattServices());</div><div class="line">        &#125; else if (BluetoothLeService.ACTION_DATA_AVAILABLE.equals(action)) &#123;</div><div class="line">            displayData(intent.getStringExtra(BluetoothLeService.EXTRA_DATA));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="读取BLE属性"><a href="#读取BLE属性" class="headerlink" title="读取BLE属性"></a>读取BLE属性</h1><p>一旦你的Android应用程序连接到GATT服务器并发现服务，它就可以在支持的地方读取和写入属性。例如，这个代码片段遍历服务器的服务和特性，并在UI中显示它们：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">public class DeviceControlActivity extends Activity &#123;</div><div class="line">    ...</div><div class="line">    // （演示）Demonstrates how to （遍历）iterate through the supported GATT</div><div class="line">    // Services/Characteristics.</div><div class="line">    // In this sample, we （填充）populate the data structure that is bound to the</div><div class="line">    // ExpandableListView on the UI.</div><div class="line">    private void displayGattServices(List&lt;BluetoothGattService&gt; gattServices) &#123;</div><div class="line">        if (gattServices == null) return;</div><div class="line">        String uuid = null;</div><div class="line">        String unknownServiceString = getResources().</div><div class="line">                getString(R.string.unknown_service);</div><div class="line">        String unknownCharaString = getResources().</div><div class="line">                getString(R.string.unknown_characteristic);</div><div class="line">        ArrayList&lt;HashMap&lt;String, String&gt;&gt; gattServiceData =</div><div class="line">                new ArrayList&lt;HashMap&lt;String, String&gt;&gt;();</div><div class="line">        ArrayList&lt;ArrayList&lt;HashMap&lt;String, String&gt;&gt;&gt; gattCharacteristicData</div><div class="line">                = new ArrayList&lt;ArrayList&lt;HashMap&lt;String, String&gt;&gt;&gt;();</div><div class="line">        mGattCharacteristics =</div><div class="line">                new ArrayList&lt;ArrayList&lt;BluetoothGattCharacteristic&gt;&gt;();</div><div class="line"></div><div class="line">        // Loops through available GATT Services.</div><div class="line">        for (BluetoothGattService gattService : gattServices) &#123;</div><div class="line">            HashMap&lt;String, String&gt; currentServiceData =</div><div class="line">                    new HashMap&lt;String, String&gt;();</div><div class="line">            uuid = gattService.getUuid().toString();</div><div class="line">            currentServiceData.put(</div><div class="line">                    LIST_NAME, SampleGattAttributes.</div><div class="line">                            lookup(uuid, unknownServiceString));</div><div class="line">            currentServiceData.put(LIST_UUID, uuid);</div><div class="line">            gattServiceData.add(currentServiceData);</div><div class="line"></div><div class="line">            ArrayList&lt;HashMap&lt;String, String&gt;&gt; gattCharacteristicGroupData =</div><div class="line">                    new ArrayList&lt;HashMap&lt;String, String&gt;&gt;();</div><div class="line">            List&lt;BluetoothGattCharacteristic&gt; gattCharacteristics =</div><div class="line">                    gattService.getCharacteristics();</div><div class="line">            ArrayList&lt;BluetoothGattCharacteristic&gt; charas =</div><div class="line">                    new ArrayList&lt;BluetoothGattCharacteristic&gt;();</div><div class="line">           // Loops through available Characteristics.</div><div class="line">            for (BluetoothGattCharacteristic gattCharacteristic :</div><div class="line">                    gattCharacteristics) &#123;</div><div class="line">                charas.add(gattCharacteristic);</div><div class="line">                HashMap&lt;String, String&gt; currentCharaData =</div><div class="line">                        new HashMap&lt;String, String&gt;();</div><div class="line">                uuid = gattCharacteristic.getUuid().toString();</div><div class="line">                currentCharaData.put(</div><div class="line">                        LIST_NAME, SampleGattAttributes.lookup(uuid,</div><div class="line">                                unknownCharaString));</div><div class="line">                currentCharaData.put(LIST_UUID, uuid);</div><div class="line">                gattCharacteristicGroupData.add(currentCharaData);</div><div class="line">            &#125;</div><div class="line">            mGattCharacteristics.add(charas);</div><div class="line">            gattCharacteristicData.add(gattCharacteristicGroupData);</div><div class="line">         &#125;</div><div class="line">    ...</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="接收GATT通知"><a href="#接收GATT通知" class="headerlink" title="接收GATT通知"></a>接收GATT通知</h1><p>BLE应用程序<strong>在设备上发生特定特征变化时</strong>要求收到通知是很常见的。这段代码展示了如何使用setCharacteristicNotification（）方法为特性<strong>设置通知</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">private BluetoothGatt mBluetoothGatt;</div><div class="line">BluetoothGattCharacteristic characteristic;</div><div class="line">boolean enabled;</div><div class="line">...</div><div class="line">mBluetoothGatt.setCharacteristicNotification(characteristic, enabled);</div><div class="line">...</div><div class="line">BluetoothGattDescriptor descriptor = characteristic.getDescriptor(</div><div class="line">        UUID.fromString(SampleGattAttributes.CLIENT_CHARACTERISTIC_CONFIG));</div><div class="line">descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);</div><div class="line">mBluetoothGatt.writeDescriptor(descriptor);</div></pre></td></tr></table></figure>
<p>一旦为特征启用了通知，如果特性在远程设备上发生变化，则会触发onCharacteristicChanged（）回调：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">// Characteristic notification</div><div class="line">public void onCharacteristicChanged(BluetoothGatt gatt,</div><div class="line">        BluetoothGattCharacteristic characteristic) &#123;</div><div class="line">    broadcastUpdate(ACTION_DATA_AVAILABLE, characteristic);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="关闭客户端App"><a href="#关闭客户端App" class="headerlink" title="关闭客户端App"></a>关闭客户端App</h1><p>一旦您的应用程序使用BLE设备，应该调用close（），以便系统可以正确释放资源：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public void close() &#123;</div><div class="line">    if (mBluetoothGatt == null) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    mBluetoothGatt.close();</div><div class="line">    mBluetoothGatt = null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Android-BLE-API"><a href="#Android-BLE-API" class="headerlink" title="Android BLE API"></a>Android BLE API</h1><h2 id="BluetoothAdapter"><a href="#BluetoothAdapter" class="headerlink" title="BluetoothAdapter"></a>BluetoothAdapter</h2><p>代表本地设备蓝牙适配器。 BluetoothAdapter允许您<strong>执行基本的蓝牙任务</strong>，例如启动设备发现，查询绑定（配对）设备列表，使用已知的MAC地址实例化BluetoothDevice，并创建BluetoothServerSocket以侦听来自其他设备的连接请求，并启动扫描蓝牙LE设备。</p>
<p>要获得代表本地蓝牙适配器的BluetoothAdapter，请在<strong>BluetoothManager</strong>上调用getAdapter（）函数。在JELLY_BEAN_MR1和下面，您将需要使用静态getDefaultAdapter（）方法。</p>
<p>从根本上说，这<strong>是所有蓝牙操作的起点</strong>。一旦你有了本地适配器，你就可以用getBondedDevices（）获得一组代表所有配对设备的BluetoothDevice对象。用startDiscovery（）启动设备发现;或者用listenUsingRfcommWithServiceRecord（String，UUID）创建一个BluetoothServerSocket监听传入的连接请求;或使用startLeScan（LeScanCallback）开始扫描蓝牙LE设备。</p>
<p><strong>注：</strong><br>大多数方法需要<strong>BLUETOOTH</strong>权限，有些还需要<strong>BLUETOOTH_ADMIN</strong>权限。</p>
<p><strong>BluetoothAdapter.LeScanCallback</strong>：用于提供LE扫描结果的回调接口。</p>
<h2 id="BluetoothManager"><a href="#BluetoothManager" class="headerlink" title="BluetoothManager"></a>BluetoothManager</h2><p>用于获取BluetoothAdapter的实例并进行整体蓝牙管理。使用带有BLUETOOTH_SERVICE的getSystemService（java.lang.String）来创建一个BluetoothManager，然后调用getAdapter（）来获得BluetoothAdapter</p>
<h2 id="BluetoothGatt"><a href="#BluetoothGatt" class="headerlink" title="BluetoothGatt"></a>BluetoothGatt</h2><p>蓝牙GATT配置文件的公共API。</p>
<p>本class提供蓝牙GATT功能，以实现与Bluetooth Smart或Smart Ready设备的通信。</p>
<p>要连接到远程外围设备，请创建一个BluetoothGattCallback并调用connectGatt（Context，boolean，BluetoothGattCallback）来获取此类的一个实例。 使用蓝牙设备发现或BLE扫描过程可以发现支持GATT的设备。</p>
<h2 id="BluetoothGattCallback"><a href="#BluetoothGattCallback" class="headerlink" title="BluetoothGattCallback"></a>BluetoothGattCallback</h2><p>这个抽象类的作用是实现<strong>BluetoothGatt</strong>的回调。</p>
<h2 id="BluetoothGattCharacteristic"><a href="#BluetoothGattCharacteristic" class="headerlink" title="BluetoothGattCharacteristic"></a>BluetoothGattCharacteristic</h2><p>代表蓝牙GATT特性。GATT特性是用于构建GATT服务的<strong>基本数据元素</strong>，BluetoothGattService。 该特性包含一个值以及附加信息和可选的GATT描述符BluetoothGattDescriptor。</p>
<h2 id="BluetoothGattService"><a href="#BluetoothGattService" class="headerlink" title="BluetoothGattService"></a>BluetoothGattService</h2><p>代表一个蓝牙GATT服务。Gatt服务包含一系列BluetoothGattCharacteristic以及引用的服务。</p>
<h2 id="BluetoothGattDescriptor"><a href="#BluetoothGattDescriptor" class="headerlink" title="BluetoothGattDescriptor"></a>BluetoothGattDescriptor</h2><p>代表一个蓝牙GATT描述符.GATT描述符包含GATT特性的<strong>附加信息</strong>和<strong>属性</strong>，BluetoothGattCharacteristic。 它们可以用来描述特征的特征或控制特征的某些行为。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 蓝牙 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Scrapy爬取地址5级联动数据 - 初级]]></title>
      <url>/Scrapy%E7%88%AC%E5%8F%96%E5%9C%B0%E5%9D%805%E7%BA%A7%E8%81%94%E5%8A%A8%E6%95%B0%E6%8D%AE%20-%20%E5%88%9D%E7%BA%A7/</url>
      <content type="html"><![CDATA[<p><strong>Scrapy使用</strong> - “区划代码和城乡划分代码”数据爬取 - 初级</p>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="1-数据来源"><a href="#1-数据来源" class="headerlink" title="1. 数据来源"></a>1. 数据来源</h1><p><strong>国家统计局：</strong>  <a href="http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/index.html" target="_blank" rel="external">http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/index.html</a></p>
<h1 id="2-Scrapy框架、项目结构："><a href="#2-Scrapy框架、项目结构：" class="headerlink" title="2. Scrapy框架、项目结构："></a>2. Scrapy框架、项目结构：</h1><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-30%2014.00.40.png" alt=""></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/949318-20160613164001885-1835954557.png" alt=""></p>
<h1 id="3-原始数据"><a href="#3-原始数据" class="headerlink" title="3. 原始数据"></a>3. 原始数据</h1><h2 id="3-1-第一级：省、直辖市"><a href="#3-1-第一级：省、直辖市" class="headerlink" title="3.1 第一级：省、直辖市"></a>3.1 第一级：省、直辖市</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-01%2008.55.34.png" alt=""></p>
<h2 id="3-2-第二级：地级市"><a href="#3-2-第二级：地级市" class="headerlink" title="3.2 第二级：地级市"></a>3.2 第二级：地级市</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-01%2008.54.49.png" alt=""></p>
<h2 id="3-3-第三级：区、县、乡"><a href="#3-3-第三级：区、县、乡" class="headerlink" title="3.3 第三级：区、县、乡"></a>3.3 第三级：区、县、乡</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-01%2008.56.09.png" alt=""></p>
<h2 id="3-4-第四级：街道、镇"><a href="#3-4-第四级：街道、镇" class="headerlink" title="3.4 第四级：街道、镇"></a>3.4 第四级：街道、镇</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-01%2008.56.19.png" alt=""></p>
<h2 id="3-5-第五级：社区、居委会、村"><a href="#3-5-第五级：社区、居委会、村" class="headerlink" title="3.5 第五级：社区、居委会、村"></a>3.5 第五级：社区、居委会、村</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-01%2008.56.54.png" alt=""></p>
<h2 id="3-6-区域代码含义："><a href="#3-6-区域代码含义：" class="headerlink" title="3.6 区域代码含义："></a>3.6 区域代码含义：</h2><p><strong>37(省)07(市)84(区)118(镇)224(村)</strong></p>
<h2 id="3-7-城乡分类代码"><a href="#3-7-城乡分类代码" class="headerlink" title="3.7  城乡分类代码"></a>3.7  城乡分类代码</h2><ul>
<li><strong>100</strong> 城镇   </li>
<li><strong>110</strong> 城区   <ul>
<li><strong>111</strong> 主城区 </li>
<li><strong>112</strong> 城乡结合区   </li>
</ul>
</li>
<li><strong>120</strong> 镇区 <ul>
<li><strong>121</strong> 镇中心区   </li>
<li><strong>122</strong> 镇乡结合区   </li>
<li><strong>123</strong> 特殊区域   </li>
</ul>
</li>
<li><strong>200</strong> 乡村   <ul>
<li><strong>210</strong> 乡中心区   </li>
<li><strong>220</strong> 村庄</li>
</ul>
</li>
</ul>
<h1 id="4-数据库结构"><a href="#4-数据库结构" class="headerlink" title="4. 数据库结构"></a>4. 数据库结构</h1><h2 id="4-1-整体结构"><a href="#4-1-整体结构" class="headerlink" title="4.1 整体结构"></a>4.1 整体结构</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-01%2009.25.39.png" alt=""></p>
<h2 id="4-2-类似的表结构"><a href="#4-2-类似的表结构" class="headerlink" title="4.2 类似的表结构"></a>4.2 类似的表结构</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-01%2009.26.42.png" alt=""></p>
<h1 id="5-爬取数据结果"><a href="#5-爬取数据结果" class="headerlink" title="5. 爬取数据结果"></a>5. 爬取数据结果</h1><h2 id="5-1-第四级：镇数据获取log"><a href="#5-1-第四级：镇数据获取log" class="headerlink" title="5.1 第四级：镇数据获取log"></a>5.1 第四级：镇数据获取log</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-31%2013.17.34.png" alt=""></p>
<h2 id="5-2-第五级：村数据获取log"><a href="#5-2-第五级：村数据获取log" class="headerlink" title="5.2 第五级：村数据获取log"></a>5.2 第五级：村数据获取log</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-31%2016.26.05.png" alt=""></p>
<h2 id="5-3-第四级：镇数据-数量-42866"><a href="#5-3-第四级：镇数据-数量-42866" class="headerlink" title="5.3 第四级：镇数据 数量 - 42866"></a>5.3 第四级：镇数据 数量 - 42866</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-31%2013.19.22.png" alt=""></p>
<h2 id="5-4-第五级：村数据-数量-666655"><a href="#5-4-第五级：村数据-数量-666655" class="headerlink" title="5.4 第五级：村数据 数量 - 666655"></a>5.4 第五级：村数据 数量 - 666655</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-31%2016.29.01.png" alt=""></p>
<h1 id="6-执行代码"><a href="#6-执行代码" class="headerlink" title="6. 执行代码"></a>6. 执行代码</h1><h2 id="6-1-核心处理："><a href="#6-1-核心处理：" class="headerlink" title="6.1 核心处理："></a>6.1 核心处理：</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-01%2009.45.18.png" alt=""></p>
<p><strong>目的数据解析：</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node = sel.xpath(<span class="string">'//tr[@class="provincetr"]/td/a/text()'</span>)</div><div class="line">node_href = sel.xpath(<span class="string">'//tr[@class="provincetr"]/td/a/@href'</span>)</div></pre></td></tr></table></figure>
<p><strong>爬取嵌套URL：</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> cl = <span class="string">"http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/"</span> + province_href[<span class="number">1</span>:<span class="number">8</span>]</div><div class="line"><span class="keyword">yield</span> Request(url=cl, callback=self.parse_second, dont_filter=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<p><strong>向数据库填写数据：</strong></p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">n = len(node_city)</div><div class="line">      m = <span class="number">0</span></div><div class="line">      <span class="keyword">while</span> m &lt; n:</div><div class="line">          code = json.dumps((node_city[m:m + <span class="number">1</span>]).extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">          name = json.dumps((node_city[m + <span class="number">1</span>:m + <span class="number">2</span>]).extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">          print(code[<span class="number">1</span>:len(code) - <span class="number">1</span>])</div><div class="line">          print(name[<span class="number">1</span>:len(name) - <span class="number">1</span>])</div><div class="line"></div><div class="line">          db = NorthernOpenSpacePipeline()</div><div class="line">          sql = <span class="string">"insert into city_table ("</span> + <span class="string">'city_code,'</span> + <span class="string">'city_name,'</span> + <span class="string">'simple_city_code,'</span> + <span class="string">'grade'</span> + <span class="string">") VALUE ("</span> + code[</div><div class="line">                                                                                                                         <span class="number">1</span>:len(</div><div class="line">                                                                                                                             code) - <span class="number">1</span>] + <span class="string">","</span> + name[</div><div class="line">                                                                                                                                                <span class="number">1</span>:len(</div><div class="line">                                                                                                                                                    name) - <span class="number">1</span>] + <span class="string">","</span> + (</div><div class="line">                                                                                                                                                                           code[</div><div class="line">                                                                                                                                                                           <span class="number">1</span>:len(</div><div class="line">                                                                                                                                                                               code) - <span class="number">1</span>])[</div><div class="line">                                                                                                                                                                       <span class="number">1</span>:<span class="number">5</span>] + <span class="string">","</span> + <span class="string">"2"</span> + <span class="string">")"</span></div><div class="line">          db.insertIntoTable(sql=sql)</div><div class="line">          m = m + <span class="number">2</span></div></pre></td></tr></table></figure>
<h2 id="6-2-代码版本展示"><a href="#6-2-代码版本展示" class="headerlink" title="6.2 代码版本展示"></a>6.2 代码版本展示</h2><h3 id="Version-1-获取数据，通过Terminal显示"><a href="#Version-1-获取数据，通过Terminal显示" class="headerlink" title="Version 1 - 获取数据，通过Terminal显示"></a>Version 1 - 获取数据，通过Terminal显示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="comment"># 要在代码中使用"中文"注释，应该首先添加如上注释，说明是中文注释</span></div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Spider, Selector</div><div class="line"><span class="keyword">from</span> scrapy.http.request <span class="keyword">import</span> Request</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NOSSpider</span><span class="params">(Spider)</span>:</span></div><div class="line">    name = <span class="string">"NOS"</span></div><div class="line"></div><div class="line">    allowed_domains = [<span class="string">"www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm"</span>]</div><div class="line">    start_urls = [<span class="string">"http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/index.html"</span>]</div><div class="line"></div><div class="line">    <span class="comment"># 第一级 url， 省级信息 一级</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        sel = Selector(response)</div><div class="line">        items = []</div><div class="line"></div><div class="line">        node = sel.xpath(<span class="string">'//tr[@class="provincetr"]/td/a/text()'</span>)</div><div class="line">        node_href = sel.xpath(<span class="string">'//tr[@class="provincetr"]/td/a/@href'</span>)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> item_node <span class="keyword">in</span> node:</div><div class="line">            province_name = json.dumps(item_node.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">            <span class="comment"># 名称 ："山东省"</span></div><div class="line">            <span class="comment"># print(province_name)</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> item_node2 <span class="keyword">in</span> node_href:</div><div class="line">            province_href = json.dumps(item_node2.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">            province_code = province_href[<span class="number">1</span>:<span class="number">3</span>]</div><div class="line"></div><div class="line">            <span class="comment"># Url ："37.html"</span></div><div class="line">            <span class="comment"># print(province_href)</span></div><div class="line"></div><div class="line">            <span class="comment"># 代码 ：37</span></div><div class="line">            <span class="comment"># print(province_code)</span></div><div class="line"></div><div class="line">            <span class="comment"># 获取当前省级名称下的 地级市信息 二级</span></div><div class="line">            cl = <span class="string">"http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/"</span> + province_href[<span class="number">1</span>:<span class="number">8</span>]</div><div class="line">            <span class="keyword">yield</span> Request(url=cl, callback=self.parse_second, dont_filter=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_second</span><span class="params">(self, response)</span>:</span></div><div class="line">        second = Selector(response)</div><div class="line">        <span class="comment"># node_city = json.dumps(sell.xpath('//tr[@class="citytr"]/td/a/text()').extract(), ensure_ascii=False)</span></div><div class="line"></div><div class="line">        node_city = second.xpath(<span class="string">'//tr[@class="citytr"]/td/a/text()'</span>)</div><div class="line">        node_city_href = second.xpath(<span class="string">'//tr[@class="citytr"]/td/a/@href'</span>)</div><div class="line"></div><div class="line">        <span class="comment"># print(node_city)</span></div><div class="line"></div><div class="line">        <span class="comment"># 城市代码list</span></div><div class="line">        city_codes = []</div><div class="line"></div><div class="line">        <span class="comment"># 城市名称list</span></div><div class="line">        city_name = []</div><div class="line"></div><div class="line">        <span class="comment"># 城市href list</span></div><div class="line">        city_href = []</div><div class="line"></div><div class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> node_city:</div><div class="line">            city = json.dumps(item.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">            <span class="comment"># 检测当前字符串是否全部为 数字 ？</span></div><div class="line">            <span class="keyword">if</span> city[<span class="number">1</span>:<span class="number">13</span>].isdigit():</div><div class="line"></div><div class="line">                <span class="comment"># 将字符串数据存至list类型数据中</span></div><div class="line">                city_codes.append(city)</div><div class="line">                <span class="comment"># print("代码：")</span></div><div class="line">                <span class="comment"># print(city)</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                city_name.append(city)</div><div class="line">                <span class="comment"># print("名称：")</span></div><div class="line">                <span class="comment"># print(city)</span></div><div class="line">        <span class="keyword">for</span> href_item <span class="keyword">in</span> node_city_href:</div><div class="line">            city_href_item = json.dumps(href_item.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">            <span class="comment"># 将单个 "城市href" 添加至 "list中"</span></div><div class="line">            city_href.append(city_href_item)</div><div class="line"></div><div class="line">        <span class="comment"># 对得到的 "城市href" 做 "list去重"</span></div><div class="line">        city_href = list(set(city_href))</div><div class="line">        city_codes = list(set(city_codes))</div><div class="line">        city_name = list(set(city_name))</div><div class="line"></div><div class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> city_href:</div><div class="line">            cl = <span class="string">"http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/"</span> + item[<span class="number">1</span>:<span class="number">13</span>]</div><div class="line"></div><div class="line">            <span class="comment"># 第三级数据展示</span></div><div class="line">            <span class="keyword">yield</span> Request(url=cl, callback=self.parse_thread, dont_filter=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_thread</span><span class="params">(self, response)</span>:</span></div><div class="line">        thread = Selector(response)</div><div class="line">        node_county = thread.xpath(<span class="string">'//tr[@class="countytr"]/td/a/text()'</span>)</div><div class="line">        node_county_href = thread.xpath(<span class="string">'//tr[@class="countytr"]/td/a/@href'</span>)</div><div class="line"></div><div class="line">        <span class="comment"># 县区级 代码list</span></div><div class="line">        county_codes = []</div><div class="line"></div><div class="line">        <span class="comment"># 县区级 名称list</span></div><div class="line">        county_name = []</div><div class="line"></div><div class="line">        <span class="comment"># 县区级 href list</span></div><div class="line">        county_href = []</div><div class="line"></div><div class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> node_county:</div><div class="line">            county = json.dumps(item.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            <span class="comment"># 检测当前字符串是否全部为 数字 ？</span></div><div class="line">            <span class="keyword">if</span> county[<span class="number">1</span>:<span class="number">13</span>].isdigit():</div><div class="line"></div><div class="line">                <span class="comment"># 将字符串数据存至list类型数据中</span></div><div class="line">                county_codes.append(county)</div><div class="line">                <span class="comment"># print("代码：")</span></div><div class="line">                <span class="comment"># print(county)</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                county_name.append(county)</div><div class="line">                <span class="comment"># print("名称：")</span></div><div class="line">                <span class="comment"># print(county)</span></div><div class="line">        <span class="keyword">for</span> href_item <span class="keyword">in</span> node_county_href:</div><div class="line">            county_href_item = json.dumps(href_item.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">            <span class="comment"># 将单个 "县区级 href" 添加至 "list中"</span></div><div class="line">            county_href.append(county_href_item)</div><div class="line"></div><div class="line">        <span class="comment"># 对得到的 "县区级 href" 做 "list去重"</span></div><div class="line">        county_href = list(set(county_href))</div><div class="line">        county_codes = list(set(county_codes))</div><div class="line">        <span class="comment"># print(county_codes)</span></div><div class="line">        county_name = list(set(county_name))</div><div class="line"></div><div class="line">        <span class="keyword">for</span> href, codes <span class="keyword">in</span> zip(county_href, county_codes):</div><div class="line">            <span class="comment"># 57 68</span></div><div class="line">            cl = <span class="string">"http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/"</span> + codes[<span class="number">1</span>:<span class="number">3</span>] + <span class="string">"/"</span> + href[<span class="number">1</span>:<span class="number">15</span>]</div><div class="line">            <span class="comment"># http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/21/13/211321.html</span></div><div class="line">            <span class="comment"># http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/21/13/211321.html</span></div><div class="line">            <span class="comment"># 第四级数据展示</span></div><div class="line">            <span class="keyword">yield</span> Request(url=cl, callback=self.parse_fourth, dont_filter=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_fourth</span><span class="params">(self, response)</span>:</span></div><div class="line">        thread = Selector(response)</div><div class="line">        node_towntr = thread.xpath(<span class="string">'//tr[@class="towntr"]/td/a/text()'</span>)</div><div class="line">        node_towntr_href = thread.xpath(<span class="string">'//tr[@class="towntr"]/td/a/@href'</span>)</div><div class="line"></div><div class="line">        <span class="comment"># 街道办 代码list</span></div><div class="line">        towntr_codes = []</div><div class="line"></div><div class="line">        <span class="comment"># 街道办 名称list</span></div><div class="line">        towntr_name = []</div><div class="line"></div><div class="line">        <span class="comment"># 街道办 href list</span></div><div class="line">        towntr_href = []</div><div class="line"></div><div class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> node_towntr:</div><div class="line">            towntr = json.dumps(item.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            <span class="comment"># 检测当前字符串是否全部为 数字 ？</span></div><div class="line">            <span class="keyword">if</span> towntr[<span class="number">1</span>:<span class="number">13</span>].isdigit():</div><div class="line">                <span class="comment"># 将字符串数据存至list类型数据中</span></div><div class="line">                towntr_codes.append(towntr)</div><div class="line">                print(<span class="string">"代码："</span>)</div><div class="line">                print(towntr)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                towntr_name.append(towntr)</div><div class="line">                print(<span class="string">"名称："</span>)</div><div class="line">                print(towntr)</div><div class="line">        <span class="keyword">for</span> href_item <span class="keyword">in</span> node_towntr_href:</div><div class="line">            towntr_href_item = json.dumps(href_item.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            <span class="comment"># print(towntr_href_item)</span></div><div class="line">            <span class="comment"># 将单个 "街道办 href" 添加至 "list中"</span></div><div class="line">            towntr_href.append(towntr_href_item)</div><div class="line"></div><div class="line">        <span class="comment"># 对得到的 "街道办 href" 做 "list去重"</span></div><div class="line">        towntr_href = list(set(towntr_href))</div><div class="line">        towntr_codes = list(set(towntr_codes))</div><div class="line">        towntr_name = list(set(towntr_name))</div><div class="line"></div><div class="line">        <span class="keyword">for</span> href, code <span class="keyword">in</span> zip(towntr_href, towntr_codes):</div><div class="line">            cl = <span class="string">"http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/"</span> + code[<span class="number">1</span>:<span class="number">3</span>] + <span class="string">"/"</span> + code[<span class="number">3</span>:<span class="number">5</span>] + <span class="string">"/"</span> + href[<span class="number">1</span>:<span class="number">18</span>]</div><div class="line">            print(cl)</div><div class="line">            <span class="comment"># http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/21/13/211321.html</span></div><div class="line">            <span class="comment"># http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/65/29/652927.html</span></div><div class="line">            <span class="comment"># http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/21/13/21/211321001.html</span></div><div class="line">            <span class="comment"># code : 211321001000</span></div><div class="line">            <span class="comment"># href : 21/211321001.html</span></div><div class="line">        <span class="comment"># 第五级数据展示</span></div><div class="line">            <span class="keyword">yield</span> Request(url=cl, callback=self.parse_Five, dont_filter=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_Five</span><span class="params">(self, response)</span>:</span></div><div class="line">        thread = Selector(response)</div><div class="line">        node_village = thread.xpath(<span class="string">'//tr[@class="villagetr"]/td/text()'</span>)</div><div class="line"></div><div class="line">        <span class="comment"># 社区 区划代码 list</span></div><div class="line">        village_codes = []</div><div class="line"></div><div class="line">        <span class="comment"># 社区 城乡分类代码 list</span></div><div class="line">        village_categary = []</div><div class="line"></div><div class="line">        <span class="comment"># 社区 名称 list</span></div><div class="line">        village_name = []</div><div class="line"></div><div class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> node_village:</div><div class="line">            village = json.dumps(item.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            <span class="comment"># 检测当前字符串是否全部为 数字 ？</span></div><div class="line">            <span class="keyword">if</span> village[<span class="number">1</span>:<span class="number">12</span>].isdigit():</div><div class="line">                <span class="comment"># 将字符串数据存至list类型数据中</span></div><div class="line">                village_codes.append(village)</div><div class="line">                print(<span class="string">"代码："</span>)</div><div class="line">                print(village)</div><div class="line">            <span class="keyword">elif</span> village[<span class="number">1</span>:<span class="number">4</span>].isdigit():</div><div class="line">                print(<span class="string">"城乡分类代码："</span>)</div><div class="line">                village_categary.append(village)</div><div class="line">                print(village)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                village_name.append(village)</div><div class="line">                print(<span class="string">"名称："</span>)</div><div class="line">                print(village)</div><div class="line"></div><div class="line">        <span class="comment"># 对得到的 "街道办 href" 做 "list去重"</span></div><div class="line">        village_categary = list(set(village_categary))</div><div class="line">        village_codes = list(set(village_codes))</div><div class="line">        village_name = list(set(village_name))</div></pre></td></tr></table></figure>
<h3 id="Version-2-处理，简化"><a href="#Version-2-处理，简化" class="headerlink" title="Version 2 - 处理，简化"></a>Version 2 - 处理，简化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="comment"># 要在代码中使用"中文"注释，应该首先添加如上注释，说明是中文注释</span></div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Spider, Selector</div><div class="line"><span class="keyword">from</span> scrapy.http.request <span class="keyword">import</span> Request</div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">从"国家统计局"官网爬取行政区域数据</span></div><div class="line"><span class="string">url:http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/index.html</span></div><div class="line"><span class="string">"""</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NOSSpider</span><span class="params">(Spider)</span>:</span></div><div class="line">    <span class="comment"># 基础配置 - 唯一名称</span></div><div class="line">    name = <span class="string">"NOS"</span></div><div class="line"></div><div class="line">    <span class="comment"># 基础配置 - 允许访问的域名</span></div><div class="line">    allowed_domains = [<span class="string">"www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm"</span>]</div><div class="line"></div><div class="line">    <span class="comment"># 基础配置 - 开发爬取的地址</span></div><div class="line">    start_urls = [<span class="string">"http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/index.html"</span>]</div><div class="line"></div><div class="line">    <span class="string">"""第一级：省级、直辖市 数据爬取"""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        sel = Selector(response)</div><div class="line">        node = sel.xpath(<span class="string">'//tr[@class="provincetr"]/td/a/text()'</span>)</div><div class="line">        node_href = sel.xpath(<span class="string">'//tr[@class="provincetr"]/td/a/@href'</span>)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> item_node, item_node2 <span class="keyword">in</span> zip(node, node_href):</div><div class="line">            <span class="comment"># 名称 ："山东省"</span></div><div class="line">            province_name = json.dumps(item_node.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            <span class="comment"># 名称 ："37.html"</span></div><div class="line">            province_href = json.dumps(item_node2.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            <span class="comment"># 名称 ："37"</span></div><div class="line">            province_code = province_href[<span class="number">1</span>:<span class="number">3</span>]</div><div class="line">            <span class="comment"># 拼接：地级市信息 二级</span></div><div class="line">            cl = <span class="string">"http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/"</span> + province_href[<span class="number">1</span>:<span class="number">8</span>]</div><div class="line">            <span class="keyword">yield</span> Request(url=cl, callback=self.parse_second, dont_filter=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="string">"""第二级：地级市 数据爬取"""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_second</span><span class="params">(self, response)</span>:</span></div><div class="line">        second = Selector(response)</div><div class="line">        node_city = second.xpath(<span class="string">'//tr[@class="citytr"]/td/a/text()'</span>)</div><div class="line">        node_city_href = second.xpath(<span class="string">'//tr[@class="citytr"]/td/a/@href'</span>)</div><div class="line"></div><div class="line">        <span class="comment"># 城市代码list</span></div><div class="line">        city_codes = []</div><div class="line"></div><div class="line">        <span class="comment"># 城市名称list</span></div><div class="line">        city_name = []</div><div class="line"></div><div class="line">        <span class="comment"># 城市href list</span></div><div class="line">        city_href = []</div><div class="line"></div><div class="line">        <span class="keyword">for</span> item, href_item <span class="keyword">in</span> zip(node_city, node_city_href):</div><div class="line">            city = json.dumps(item.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            <span class="comment"># 检测当前字符串是否全部为 数字 ？</span></div><div class="line">            <span class="keyword">if</span> city[<span class="number">1</span>:<span class="number">13</span>].isdigit():</div><div class="line">                <span class="comment"># 将字符串数据存至list类型数据中</span></div><div class="line">                city_codes.append(city)</div><div class="line">                <span class="comment"># print("代码：")</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                city_name.append(city)</div><div class="line">                <span class="comment"># print("名称：")</span></div><div class="line"></div><div class="line">            city_href_item = json.dumps(href_item.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            <span class="comment"># 将单个 "城市href" 添加至 "list中"</span></div><div class="line">            city_href.append(city_href_item)</div><div class="line"></div><div class="line">        <span class="comment"># 做 "list去重"</span></div><div class="line">        city_href = list(set(city_href))</div><div class="line">        city_codes = list(set(city_codes))</div><div class="line">        city_name = list(set(city_name))</div><div class="line"></div><div class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> city_href:</div><div class="line">            cl = <span class="string">"http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/"</span> + item[<span class="number">1</span>:<span class="number">13</span>]</div><div class="line">            <span class="comment"># 第三级url拼接</span></div><div class="line">            <span class="keyword">yield</span> Request(url=cl, callback=self.parse_thread, dont_filter=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="string">"""第三级：区县乡级 数据爬取"""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_thread</span><span class="params">(self, response)</span>:</span></div><div class="line">        thread = Selector(response)</div><div class="line">        node_county = thread.xpath(<span class="string">'//tr[@class="countytr"]/td/a/text()'</span>)</div><div class="line">        node_county_href = thread.xpath(<span class="string">'//tr[@class="countytr"]/td/a/@href'</span>)</div><div class="line"></div><div class="line">        <span class="comment"># 县区级 代码list</span></div><div class="line">        county_codes = []</div><div class="line"></div><div class="line">        <span class="comment"># 县区级 名称list</span></div><div class="line">        county_name = []</div><div class="line"></div><div class="line">        <span class="comment"># 县区级 href list</span></div><div class="line">        county_href = []</div><div class="line"></div><div class="line">        <span class="keyword">for</span> item, href_item <span class="keyword">in</span> zip(node_county, node_county_href):</div><div class="line">            county = json.dumps(item.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            <span class="comment"># 检测当前字符串是否全部为 数字 ？</span></div><div class="line">            <span class="keyword">if</span> county[<span class="number">1</span>:<span class="number">13</span>].isdigit():</div><div class="line"></div><div class="line">                <span class="comment"># 将字符串数据存至list类型数据中</span></div><div class="line">                county_codes.append(county)</div><div class="line">                <span class="comment"># print("代码：")</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                county_name.append(county)</div><div class="line">                <span class="comment"># print("名称：")</span></div><div class="line"></div><div class="line">            county_href_item = json.dumps(href_item.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            <span class="comment"># 将单个 "县区级 href" 添加至 "list中"</span></div><div class="line">            county_href.append(county_href_item)</div><div class="line"></div><div class="line">        <span class="comment"># 做 "list去重"</span></div><div class="line">        county_href = list(set(county_href))</div><div class="line">        county_codes = list(set(county_codes))</div><div class="line">        county_name = list(set(county_name))</div><div class="line"></div><div class="line">        <span class="keyword">for</span> href, codes <span class="keyword">in</span> zip(county_href, county_codes):</div><div class="line">            cl = <span class="string">"http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/"</span> + codes[<span class="number">1</span>:<span class="number">3</span>] + <span class="string">"/"</span> + href[<span class="number">1</span>:<span class="number">15</span>]</div><div class="line">            <span class="comment"># http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/21/13/211321.html</span></div><div class="line">            <span class="comment"># 第四级url拼接</span></div><div class="line">            <span class="keyword">yield</span> Request(url=cl, callback=self.parse_fourth, dont_filter=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="string">"""第四级：街道、居委会级 数据爬取"""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_fourth</span><span class="params">(self, response)</span>:</span></div><div class="line">        thread = Selector(response)</div><div class="line">        node_towntr = thread.xpath(<span class="string">'//tr[@class="towntr"]/td/a/text()'</span>)</div><div class="line">        node_towntr_href = thread.xpath(<span class="string">'//tr[@class="towntr"]/td/a/@href'</span>)</div><div class="line"></div><div class="line">        <span class="comment"># 街道办 代码list</span></div><div class="line">        town_codes = []</div><div class="line"></div><div class="line">        <span class="comment"># 街道办 名称list</span></div><div class="line">        town_name = []</div><div class="line"></div><div class="line">        <span class="comment"># 街道办 href list</span></div><div class="line">        town_href = []</div><div class="line"></div><div class="line">        <span class="keyword">for</span> item, href_item <span class="keyword">in</span> zip(node_towntr, node_towntr_href):</div><div class="line">            town = json.dumps(item.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            <span class="comment"># 检测当前字符串是否全部为 数字 ？</span></div><div class="line">            <span class="keyword">if</span> town[<span class="number">1</span>:<span class="number">13</span>].isdigit():</div><div class="line">                town_codes.append(town)</div><div class="line">                <span class="comment"># print("代码：")</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                town_name.append(town)</div><div class="line">                <span class="comment"># print("名称：")</span></div><div class="line"></div><div class="line">            towntr_href_item = json.dumps(href_item.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            <span class="comment"># 将单个 "街道办 href" 添加至 "list中"</span></div><div class="line">            town_href.append(towntr_href_item)</div><div class="line"></div><div class="line">        <span class="comment"># 做 "list去重"</span></div><div class="line">        town_href = list(set(town_href))</div><div class="line">        town_codes = list(set(town_codes))</div><div class="line">        town_name = list(set(town_name))</div><div class="line"></div><div class="line">        <span class="keyword">for</span> href, code <span class="keyword">in</span> zip(town_href, town_codes):</div><div class="line">            cl = <span class="string">"http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/"</span> + code[<span class="number">1</span>:<span class="number">3</span>] + <span class="string">"/"</span> + code[<span class="number">3</span>:<span class="number">5</span>] + <span class="string">"/"</span> + href[</div><div class="line">                                                                                                                <span class="number">1</span>:<span class="number">18</span>]</div><div class="line">            <span class="comment"># http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/21/13/21/211321001.html</span></div><div class="line">            <span class="comment"># code : 211321001000</span></div><div class="line">            <span class="comment"># href : 21/211321001.html</span></div><div class="line">            <span class="comment"># 第五级url拼接</span></div><div class="line">            <span class="keyword">yield</span> Request(url=cl, callback=self.parse_Five, dont_filter=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="string">"""第五级：社区级 数据爬取"""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_Five</span><span class="params">(self, response)</span>:</span></div><div class="line">        thread = Selector(response)</div><div class="line">        node_village = thread.xpath(<span class="string">'//tr[@class="villagetr"]/td/text()'</span>)</div><div class="line"></div><div class="line">        <span class="comment"># 社区 区划代码 list</span></div><div class="line">        village_codes = []</div><div class="line"></div><div class="line">        <span class="comment"># 社区 城乡分类代码 list</span></div><div class="line">        village_categary = []</div><div class="line"></div><div class="line">        <span class="comment"># 社区 名称 list</span></div><div class="line">        village_name = []</div><div class="line"></div><div class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> node_village:</div><div class="line">            village = json.dumps(item.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            <span class="keyword">if</span> village[<span class="number">1</span>:<span class="number">12</span>].isdigit():</div><div class="line">                <span class="comment"># 将字符串数据存至list类型数据中</span></div><div class="line">                village_codes.append(village)</div><div class="line">                print(<span class="string">"代码："</span>)</div><div class="line">                print(village)</div><div class="line">            <span class="keyword">elif</span> village[<span class="number">1</span>:<span class="number">4</span>].isdigit():</div><div class="line">                print(<span class="string">"城乡分类代码："</span>)</div><div class="line">                village_categary.append(village)</div><div class="line">                print(village)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                village_name.append(village)</div><div class="line">                print(<span class="string">"名称："</span>)</div><div class="line">                print(village)</div><div class="line"></div><div class="line">        <span class="comment"># 做 "list去重"</span></div><div class="line">        village_categary = list(set(village_categary))</div><div class="line">        village_codes = list(set(village_codes))</div><div class="line">        village_name = list(set(village_name))</div><div class="line"></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    最终结果：</span></div><div class="line"><span class="string">    </span></div><div class="line"><span class="string">    代码：</span></div><div class="line"><span class="string">    "610626001222"</span></div><div class="line"><span class="string">    城乡分类代码：</span></div><div class="line"><span class="string">    "220"</span></div><div class="line"><span class="string">    名称：</span></div><div class="line"><span class="string">    "陈砭村委会"</span></div><div class="line"><span class="string">    """</span></div></pre></td></tr></table></figure>
<h3 id="Version-3-将数据写入到MySQL数据库"><a href="#Version-3-将数据写入到MySQL数据库" class="headerlink" title="Version 3 - 将数据写入到MySQL数据库"></a>Version 3 - 将数据写入到MySQL数据库</h3><p><strong>0. 注意：</strong></p>
<p><strong><em>从本项目的一个文件中导入此文件中的某一个类时，需要导入一个完整的路劲。否则提示：ImportError: No module named items。在 settings文件中编写路径类时，同样需要编写带有路径的文件类，否则不认，同上错误</em></strong></p>
<p><strong>1. settings.py</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 自动生成</span></div><div class="line">BOT_NAME = <span class="string">'Northern_Open_Space'</span></div><div class="line">SPIDER_MODULES = [<span class="string">'Northern_Open_Space.spiders'</span>]</div><div class="line">NEWSPIDER_MODULE = <span class="string">'Northern_Open_Space.spiders'</span></div><div class="line">ROBOTSTXT_OBEY = <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># 设置请求头部，添加url</span></div><div class="line">DEFAULT_REQUEST_HEADERS = &#123;</div><div class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0;"</span>,</div><div class="line">    <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># 手动添加</span></div><div class="line">FEED_EXPORT_ENCODING = <span class="string">'utf-8'</span></div><div class="line">ITEM_PIPELINES = &#123;</div><div class="line">    <span class="string">'Northern_Open_Space.pipelines.NorthernOpenSpacePipeline'</span>: <span class="number">300</span>,  <span class="comment"># 保存到mysql数据库</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2. pipelines.py</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NorthernOpenSpacePipeline</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertIntoTable</span><span class="params">(self, sql)</span>:</span></div><div class="line">        <span class="comment"># 创建连接</span></div><div class="line">        conn = pymysql.connect(</div><div class="line">            host=<span class="string">'127.0.0.1'</span>,</div><div class="line">            port=<span class="number">3306</span>,</div><div class="line">            user=<span class="string">'root'</span>,</div><div class="line">            passwd=<span class="string">'0987'</span>,</div><div class="line">            db=<span class="string">'area_database'</span>,</div><div class="line">            charset=<span class="string">'utf8'</span>)  <span class="comment"># 要指定编码，否则中文可能乱码</span></div><div class="line"></div><div class="line">        <span class="comment"># 创建游标</span></div><div class="line">        cursor = conn.cursor()</div><div class="line"></div><div class="line">        <span class="comment"># 执行查询语句</span></div><div class="line">        cursor.execute(sql)</div><div class="line"></div><div class="line">        <span class="comment"># 提交，不然无法保存新建或者修改的数据</span></div><div class="line">        conn.commit()</div><div class="line"></div><div class="line">        <span class="comment"># 关闭游标</span></div><div class="line">        cursor.close()</div><div class="line"></div><div class="line">        <span class="comment"># 关闭连接</span></div><div class="line">        conn.close()</div></pre></td></tr></table></figure>
<p><strong>3. XXXXpider.py</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NOSSpider</span><span class="params">(Spider)</span>:</span></div><div class="line">    <span class="comment"># 基础配置 - 唯一名称</span></div><div class="line">    name = <span class="string">"NOS"</span></div><div class="line"></div><div class="line">    <span class="comment"># 基础配置 - 允许访问的域名</span></div><div class="line">    allowed_domains = [<span class="string">"www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm"</span>]</div><div class="line"></div><div class="line">    <span class="comment"># 基础配置 - 开发爬取的地址</span></div><div class="line">    start_urls = [<span class="string">"http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/index.html"</span>]</div><div class="line"></div><div class="line">    <span class="string">"""第一级：省级、直辖市 数据爬取"""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        sel = Selector(response)</div><div class="line">        node = sel.xpath(<span class="string">'//tr[@class="provincetr"]/td/a/text()'</span>)</div><div class="line">        node_href = sel.xpath(<span class="string">'//tr[@class="provincetr"]/td/a/@href'</span>)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> item_node, item_node2 <span class="keyword">in</span> zip(node, node_href):</div><div class="line">            <span class="comment"># 名称 ："山东省"</span></div><div class="line">            province_name = json.dumps(item_node.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            <span class="comment"># 名称 ："37.html"</span></div><div class="line">            province_href = json.dumps(item_node2.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            <span class="comment"># 名称 ："37"</span></div><div class="line">            province_code = province_href[<span class="number">1</span>:<span class="number">3</span>]</div><div class="line"></div><div class="line">            <span class="comment"># self.insertIntoProvince(province_code, province_name)</span></div><div class="line">            cl = <span class="string">"http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/"</span> + province_href[<span class="number">1</span>:<span class="number">8</span>]</div><div class="line">            <span class="keyword">yield</span> Request(url=cl, callback=self.parse_second, dont_filter=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertIntoProvince</span><span class="params">(self, province_code, province_name)</span>:</span></div><div class="line">        <span class="comment"># 将获取的数据插入到数据库中</span></div><div class="line">        db = NorthernOpenSpacePipeline()</div><div class="line">        sql = <span class="string">"insert into province_table ("</span> + <span class="string">'province_name,'</span> + <span class="string">'province_code,'</span> + <span class="string">'simple_province_code,'</span> + <span class="string">'grade'</span> + <span class="string">") VALUE ("</span> + province_name + <span class="string">","</span> + province_code + <span class="string">'0000000000'</span> + <span class="string">","</span> + province_code + <span class="string">","</span> + <span class="string">"1"</span> + <span class="string">")"</span></div><div class="line">        db.insertIntoTable(sql=sql)</div><div class="line"></div><div class="line">    <span class="string">"""第二级：地级市 数据爬取"""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_second</span><span class="params">(self, response)</span>:</span></div><div class="line">        second = Selector(response)</div><div class="line">        node_city = second.xpath(<span class="string">'//tr[@class="citytr"]/td/a/text()'</span>)</div><div class="line">        <span class="comment"># print(len(node_city))</span></div><div class="line">        <span class="comment"># print(json.dumps(node_city.extract(), ensure_ascii=False))</span></div><div class="line"></div><div class="line">        node_city_href = second.xpath(<span class="string">'//tr[@class="citytr"]/td/a/@href'</span>)</div><div class="line"></div><div class="line">        <span class="comment"># self.insertToCity(node_city)</span></div><div class="line"></div><div class="line">        <span class="comment"># 城市href list</span></div><div class="line">        city_href = []</div><div class="line"></div><div class="line">        <span class="keyword">for</span> href_item <span class="keyword">in</span> node_city_href:</div><div class="line">            city_href_item = json.dumps(href_item.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            <span class="comment"># 将单个 "城市href" 添加至 "list中"</span></div><div class="line">            city_href.append(city_href_item)</div><div class="line">        <span class="comment"># 做 "list去重"</span></div><div class="line">        city_href = list(set(city_href))</div><div class="line"></div><div class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> city_href:</div><div class="line">            cl = <span class="string">"http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/"</span> + item[<span class="number">1</span>:<span class="number">13</span>]</div><div class="line">            <span class="comment"># 第三级url拼接</span></div><div class="line">            <span class="keyword">yield</span> Request(url=cl, callback=self.parse_thread, dont_filter=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertToCity</span><span class="params">(self, node_city)</span>:</span></div><div class="line">        <span class="comment"># 循环赋值</span></div><div class="line">        n = len(node_city)</div><div class="line">        m = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> m &lt; n:</div><div class="line">            code = json.dumps((node_city[m:m + <span class="number">1</span>]).extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            name = json.dumps((node_city[m + <span class="number">1</span>:m + <span class="number">2</span>]).extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            print(code[<span class="number">1</span>:len(code) - <span class="number">1</span>])</div><div class="line">            print(name[<span class="number">1</span>:len(name) - <span class="number">1</span>])</div><div class="line"></div><div class="line">            db = NorthernOpenSpacePipeline()</div><div class="line">            sql = <span class="string">"insert into city_table ("</span> + <span class="string">'city_code,'</span> + <span class="string">'city_name,'</span> + <span class="string">'simple_city_code,'</span> + <span class="string">'grade'</span> + <span class="string">") VALUE ("</span> + code[</div><div class="line">                                                                                                                           <span class="number">1</span>:len(</div><div class="line">                                                                                                                               code) - <span class="number">1</span>] + <span class="string">","</span> + name[</div><div class="line">                                                                                                                                                  <span class="number">1</span>:len(</div><div class="line">                                                                                                                                                      name) - <span class="number">1</span>] + <span class="string">","</span> + (</div><div class="line">                                                                                                                                                                             code[</div><div class="line">                                                                                                                                                                             <span class="number">1</span>:len(</div><div class="line">                                                                                                                                                                                 code) - <span class="number">1</span>])[</div><div class="line">                                                                                                                                                                         <span class="number">1</span>:<span class="number">5</span>] + <span class="string">","</span> + <span class="string">"2"</span> + <span class="string">")"</span></div><div class="line">            db.insertIntoTable(sql=sql)</div><div class="line">            m = m + <span class="number">2</span></div><div class="line"></div><div class="line">    <span class="string">"""第三级：区县乡级 数据爬取"""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_thread</span><span class="params">(self, response)</span>:</span></div><div class="line">        thread = Selector(response)</div><div class="line">        node_county = thread.xpath(<span class="string">'//tr[@class="countytr"]/td/a/text()'</span>)</div><div class="line">        node_county_href = thread.xpath(<span class="string">'//tr[@class="countytr"]/td/a/@href'</span>)</div><div class="line"></div><div class="line">        <span class="comment"># self.insertIntoCounty(node_county)# 县区级 代码list</span></div><div class="line">        county_codes = []</div><div class="line"></div><div class="line">        <span class="comment"># 县区级 名称list</span></div><div class="line">        county_name = []</div><div class="line"></div><div class="line">        <span class="comment"># 县区级 href list</span></div><div class="line">        county_href = []</div><div class="line"></div><div class="line">        <span class="keyword">for</span> item, href_item <span class="keyword">in</span> zip(node_county, node_county_href):</div><div class="line">            county = json.dumps(item.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            <span class="comment"># 检测当前字符串是否全部为 数字 ？</span></div><div class="line">            <span class="keyword">if</span> county[<span class="number">1</span>:<span class="number">13</span>].isdigit():</div><div class="line">                <span class="comment"># 将字符串数据存至list类型数据中</span></div><div class="line">                county_codes.append(county)</div><div class="line">                <span class="comment"># print("代码：")</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                county_name.append(county)</div><div class="line">                <span class="comment"># print("名称：")</span></div><div class="line"></div><div class="line">            county_href_item = json.dumps(href_item.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            <span class="comment"># 将单个 "县区级 href" 添加至 "list中"</span></div><div class="line">            county_href.append(county_href_item)</div><div class="line"></div><div class="line">        <span class="comment"># 做 "list去重"</span></div><div class="line">        county_href = list(set(county_href))</div><div class="line">        county_codes = list(set(county_codes))</div><div class="line">        county_name = list(set(county_name))</div><div class="line"></div><div class="line">        <span class="keyword">for</span> href, codes <span class="keyword">in</span> zip(county_href, county_codes):</div><div class="line">            cl = <span class="string">"http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/"</span> + codes[<span class="number">1</span>:<span class="number">3</span>] + <span class="string">"/"</span> + href[<span class="number">1</span>:<span class="number">15</span>]</div><div class="line">            <span class="comment"># http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/21/13/211321.html</span></div><div class="line">            <span class="comment"># 第四级url拼接</span></div><div class="line">            <span class="keyword">yield</span> Request(url=cl, callback=self.parse_fourth, dont_filter=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertIntoCounty</span><span class="params">(self, node_county)</span>:</span></div><div class="line">        n = len(node_county)</div><div class="line">        m = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> m &lt; n:</div><div class="line">            code = json.dumps((node_county[m:m + <span class="number">1</span>]).extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            name = json.dumps((node_county[m + <span class="number">1</span>:m + <span class="number">2</span>]).extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            print(code[<span class="number">1</span>:len(code) - <span class="number">1</span>])</div><div class="line">            print(name[<span class="number">1</span>:len(name) - <span class="number">1</span>])</div><div class="line"></div><div class="line">            db = NorthernOpenSpacePipeline()</div><div class="line">            sql = <span class="string">"insert into county_table ("</span> + <span class="string">'county_code,'</span> + <span class="string">'county_name,'</span> + <span class="string">'simple_county_code,'</span> + <span class="string">'grade'</span> + <span class="string">") VALUE ("</span> + code[</div><div class="line">                                                                                                                                   <span class="number">1</span>:len(</div><div class="line">                                                                                                                                       code) - <span class="number">1</span>] + <span class="string">","</span> + name[</div><div class="line">                                                                                                                                                          <span class="number">1</span>:len(</div><div class="line">                                                                                                                                                              name) - <span class="number">1</span>] + <span class="string">","</span> + (</div><div class="line">                                                                                                                                                                                     code[</div><div class="line">                                                                                                                                                                                     <span class="number">1</span>:len(</div><div class="line">                                                                                                                                                                                         code) - <span class="number">1</span>])[</div><div class="line">                                                                                                                                                                                 <span class="number">1</span>:<span class="number">7</span>] + <span class="string">","</span> + <span class="string">"3"</span> + <span class="string">")"</span></div><div class="line">            db.insertIntoTable(sql=sql)</div><div class="line">            m = m + <span class="number">2</span></div><div class="line"></div><div class="line">    <span class="string">"""第四级：街道、居委会级 数据爬取"""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_fourth</span><span class="params">(self, response)</span>:</span></div><div class="line">        thread = Selector(response)</div><div class="line">        node_towntr = thread.xpath(<span class="string">'//tr[@class="towntr"]/td/a/text()'</span>)</div><div class="line">        node_towntr_href = thread.xpath(<span class="string">'//tr[@class="towntr"]/td/a/@href'</span>)</div><div class="line"></div><div class="line">        print(json.dumps(node_towntr.extract(), ensure_ascii=<span class="keyword">False</span>))</div><div class="line"></div><div class="line">        <span class="comment"># self.insertIntoTown(node_towntr)# 街道办 代码list</span></div><div class="line">        town_codes = []</div><div class="line"></div><div class="line">        <span class="comment"># 街道办 名称list</span></div><div class="line">        town_name = []</div><div class="line"></div><div class="line">        <span class="comment"># 街道办 href list</span></div><div class="line">        town_href = []</div><div class="line"></div><div class="line">        <span class="keyword">for</span> item, href_item <span class="keyword">in</span> zip(node_towntr, node_towntr_href):</div><div class="line">            town = json.dumps(item.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            <span class="comment"># 检测当前字符串是否全部为 数字 ？</span></div><div class="line">            <span class="keyword">if</span> town[<span class="number">1</span>:<span class="number">13</span>].isdigit():</div><div class="line">                town_codes.append(town)</div><div class="line">                <span class="comment"># print("代码：")</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                town_name.append(town)</div><div class="line">                <span class="comment"># print("名称：")</span></div><div class="line"></div><div class="line">            towntr_href_item = json.dumps(href_item.extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            <span class="comment"># 将单个 "街道办 href" 添加至 "list中"</span></div><div class="line">            town_href.append(towntr_href_item)</div><div class="line"></div><div class="line">        <span class="comment"># 做 "list去重"</span></div><div class="line">        town_href = list(set(town_href))</div><div class="line">        town_codes = list(set(town_codes))</div><div class="line">        town_name = list(set(town_name))</div><div class="line"></div><div class="line">        <span class="keyword">for</span> href, code <span class="keyword">in</span> zip(town_href, town_codes):</div><div class="line">            cl = <span class="string">"http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/"</span> + code[<span class="number">1</span>:<span class="number">3</span>] + <span class="string">"/"</span> + code[<span class="number">3</span>:<span class="number">5</span>] + <span class="string">"/"</span> + href[</div><div class="line">                                                                                                                <span class="number">1</span>:<span class="number">18</span>]</div><div class="line">            <span class="comment"># http://www.stats.gov.cn/tjsj/tjbz/tjyqhdmhcxhfdm/2016/21/13/21/211321001.html</span></div><div class="line">            <span class="comment"># code : 211321001000</span></div><div class="line">            <span class="comment"># href : 21/211321001.html</span></div><div class="line">            <span class="comment"># 第五级url拼接</span></div><div class="line">            <span class="keyword">yield</span> Request(url=cl, callback=self.parse_Five, dont_filter=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertIntoTown</span><span class="params">(self, node_towntr)</span>:</span></div><div class="line">        n = len(node_towntr)</div><div class="line">        m = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> m &lt; n:</div><div class="line">            code = json.dumps((node_towntr[m:m + <span class="number">1</span>]).extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            name = json.dumps((node_towntr[m + <span class="number">1</span>:m + <span class="number">2</span>]).extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            <span class="comment"># print(code[1:len(code) - 1])</span></div><div class="line">            <span class="comment"># print(name[1:len(name) - 1])</span></div><div class="line"></div><div class="line">            db = NorthernOpenSpacePipeline()</div><div class="line">            sql = <span class="string">"insert into town_table ("</span> + <span class="string">'town_code,'</span> + <span class="string">'town_name,'</span> + <span class="string">'simple_town_code,'</span> + <span class="string">'grade'</span> + <span class="string">") VALUE ("</span> + code[</div><div class="line">                                                                                                                           <span class="number">1</span>:len(</div><div class="line">                                                                                                                               code) - <span class="number">1</span>] + <span class="string">","</span> + name[</div><div class="line">                                                                                                                                                  <span class="number">1</span>:len(</div><div class="line">                                                                                                                                                      name) - <span class="number">1</span>] + <span class="string">","</span> + (</div><div class="line">                                                                                                                                                                             code[</div><div class="line">                                                                                                                                                                             <span class="number">1</span>:len(</div><div class="line">                                                                                                                                                                                 code) - <span class="number">1</span>])[</div><div class="line">                                                                                                                                                                         <span class="number">7</span>:<span class="number">10</span>] + <span class="string">","</span> + <span class="string">"4"</span> + <span class="string">")"</span></div><div class="line">            db.insertIntoTable(sql=sql)</div><div class="line"></div><div class="line">            m = m + <span class="number">2</span></div><div class="line"></div><div class="line">    <span class="string">"""第五级：社区级 数据爬取"""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_Five</span><span class="params">(self, response)</span>:</span></div><div class="line">        thread = Selector(response)</div><div class="line">        node_village = thread.xpath(<span class="string">'//tr[@class="villagetr"]/td/text()'</span>)</div><div class="line"></div><div class="line">        print(json.dumps(node_village.extract(), ensure_ascii=<span class="keyword">False</span>))</div><div class="line"></div><div class="line">        n = len(node_village)</div><div class="line">        m = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> m &lt; n:</div><div class="line">            code = json.dumps((node_village[m:m + <span class="number">1</span>]).extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            simple_code = json.dumps((node_village[m + <span class="number">1</span>:m + <span class="number">2</span>]).extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            name = json.dumps((node_village[m + <span class="number">2</span>:m + <span class="number">3</span>]).extract(), ensure_ascii=<span class="keyword">False</span>)</div><div class="line">            print(code[<span class="number">1</span>:len(code) - <span class="number">1</span>])</div><div class="line">            print(simple_code[<span class="number">1</span>:len(simple_code) - <span class="number">1</span>])</div><div class="line">            print(name[<span class="number">1</span>:len(name) - <span class="number">1</span>])</div><div class="line">            print((code[<span class="number">11</span>:<span class="number">14</span>]))</div><div class="line"></div><div class="line">            db = NorthernOpenSpacePipeline()</div><div class="line">            sql = <span class="string">"insert into village_table ("</span> + \</div><div class="line">                  <span class="string">'village_code,'</span> + <span class="string">'village_name,'</span> + <span class="string">'simple_village_code,'</span> + <span class="string">'village_category_code,'</span> + <span class="string">'grade'</span> + <span class="string">") VALUE ("</span> + \</div><div class="line">                  code[<span class="number">1</span>:len(code) - <span class="number">1</span>] + <span class="string">","</span> + name[<span class="number">1</span>:len(name) - <span class="number">1</span>] + <span class="string">","</span> + code[<span class="number">11</span>:<span class="number">14</span>] + <span class="string">","</span> + simple_code[<span class="number">1</span>:len(simple_code) - <span class="number">1</span>] + <span class="string">","</span> + <span class="string">"5"</span> + <span class="string">")"</span></div><div class="line">            db.insertIntoTable(sql=sql)</div><div class="line"></div><div class="line">            m = m + <span class="number">3</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python下使用PyMySQL操作MySQL数据库]]></title>
      <url>/Python%E4%B8%8B%E4%BD%BF%E7%94%A8PyMySQL%E6%93%8D%E4%BD%9CMySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<blockquote>
<p>使用参考：<a href="https://www.cnblogs.com/wt11/p/6141225.html" target="_blank" rel="external">https://www.cnblogs.com/wt11/p/6141225.html</a><br>安装：<a href="https://www.cnblogs.com/iOS-mainstay/p/5596608.html" target="_blank" rel="external">https://www.cnblogs.com/iOS-mainstay/p/5596608.html</a></p>
</blockquote>
<p><strong>说明</strong>：安装MySQLdb的过程就是浪费时间、浪费生命的过程。</p>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="方式1-pip安装"><a href="#方式1-pip安装" class="headerlink" title="方式1: pip安装"></a>方式1: pip安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install PyMySQL</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install PyMySQL</div></pre></td></tr></table></figure>
<h1 id="方式2：git安装"><a href="#方式2：git安装" class="headerlink" title="方式2：git安装"></a>方式2：git安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/PyMySQL/PyMySQL</div><div class="line">$ cd PyMySQL/</div><div class="line">$ python3 setup.py install</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GreenDao数据库的使用]]></title>
      <url>/GreenDao%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>GreenDao数据库使用</p>
<a id="more"></a>
<blockquote>
<p>使用参考：<a href="http://blog.csdn.net/liuchao9876543210/article/details/54378859" target="_blank" rel="external">http://blog.csdn.net/liuchao9876543210/article/details/54378859</a></p>
</blockquote>
<p>[TOC]</p>
<h1 id="一-添加依赖"><a href="#一-添加依赖" class="headerlink" title="一. 添加依赖"></a>一. 添加依赖</h1><h2 id="1-项目gradle中："><a href="#1-项目gradle中：" class="headerlink" title="1. 项目gradle中："></a>1. 项目gradle中：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">        classpath &apos;com.android.tools.build:gradle:2.3.2&apos;</div><div class="line">        //GreenDao3依赖</div><div class="line">        classpath &apos;org.greenrobot:greendao-gradle-plugin:3.2.1&apos;</div><div class="line"></div><div class="line">        // NOTE: Do not place your application dependencies here; they belong</div><div class="line">        // in the individual module build.gradle files</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="2-Module中："><a href="#2-Module中：" class="headerlink" title="2. Module中："></a>2. Module中：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//使用greendao</div><div class="line">apply plugin: &apos;org.greenrobot.greendao&apos;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ···</div><div class="line">    //greendao配置</div><div class="line">    greendao &#123;</div><div class="line">        //版本号，升级时可配置</div><div class="line">        schemaVersion 1</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">	···</div><div class="line">	//greendao依赖</div><div class="line">    compile &apos;org.greenrobot:greendao:3.2.0&apos;</div><div class="line">    //解决greendao使用过程中分包导致的异常、解决缺少类的异常</div><div class="line">    compile &apos;net.zetetic:android-database-sqlcipher:3.5.7&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="二-实际使用"><a href="#二-实际使用" class="headerlink" title="二. 实际使用"></a>二. 实际使用</h1><h2 id="1-实体对象（表）的创建"><a href="#1-实体对象（表）的创建" class="headerlink" title="1. 实体对象（表）的创建"></a>1. 实体对象（表）的创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * StudentBase 学生基本信息表</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * DAO：Data Access Object</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> wenjia.Cheng  cwj1714@163.com</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/1/20</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentBase</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 当前表中的学生数量的id值</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Id</span>(autoincrement = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id_num_stu;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 学生的学号</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Unique</span></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="keyword">private</span> String id_stu;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 身份证号</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Unique</span></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="keyword">private</span> String id_card_stu;</div><div class="line">&#125;</div><div class="line">``` </div><div class="line"></div><div class="line">### 注意：</div><div class="line"></div><div class="line">- 在创建完“实体”后，记得要“build”一下，“build”之后就会生成相应的“StudentBaseDao”类文件，否则不能使用。供之后调用。</div><div class="line">- 主键必须是<span class="keyword">long</span>类型</div><div class="line"></div><div class="line"></div><div class="line">### 注解说明：</div><div class="line"></div><div class="line"> - **<span class="meta">@Entity</span>**：告诉GreenDao该对象为实体，只有被<span class="meta">@Entity</span>注释的Bean类才能被dao类操作</div><div class="line"> - **<span class="meta">@Id</span>**：对象的Id，使用**Long**类型作为EntityId，否则会报错。</div><div class="line"> - **<span class="meta">@Property</span>**：可以自定义字段名，注意外键不能使用该属性</div><div class="line"> - **<span class="meta">@NotNull</span>**：属性不能为空</div><div class="line"> - **<span class="meta">@Transient</span>**：使用该注释的属性不会被存入数据库的字段中</div><div class="line"> - **<span class="meta">@Unique</span>**：该属性值必须在数据库中是唯一值</div><div class="line"> - **<span class="meta">@Generated</span>**：编译后自动生成的构造函数、方法等的注释，提示构造函数、方法等不能被修改</div><div class="line"> - **<span class="meta">@ToOne</span>**：定义与另一个实体（一个实体对象）的关系（底下会有详解）.如： </div><div class="line"> - **<span class="meta">@ToMany</span>**：定义与多个实体对象的关系（底下会有详解）</div><div class="line"> - **<span class="meta">@OrderBy</span>(date desc)**：降序</div><div class="line"></div><div class="line">### 关联：</div><div class="line"></div><div class="line">&gt; 参考：https:<span class="comment">//www.jianshu.com/p/dbec25bd575f</span></div><div class="line"></div><div class="line">-  **<span class="number">1</span>对<span class="number">1</span> ：<span class="meta">@ToOne</span>(joinProperty = “userId”)** ：通过外键来关联另一个实体。使用到的两个对象类为：（User，Picture） </div><div class="line"></div><div class="line">```java</div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> Long UserId;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> pictureId;</div><div class="line">    <span class="meta">@Property</span>(nameInDb = <span class="string">"NAME"</span>)</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="meta">@Property</span>(nameInDb = <span class="string">"AGE"</span>)</div><div class="line">    <span class="keyword">private</span> String age;</div><div class="line">    <span class="meta">@Property</span>(nameInDb = <span class="string">"SEX"</span>)</div><div class="line">    <span class="keyword">private</span> String sex;</div><div class="line">    <span class="meta">@ToOne</span>(joinProperty = <span class="string">"pictureId"</span>)<span class="comment">//pictureId是我们需要关联的外键</span></div><div class="line">    <span class="keyword">private</span> Picture picture;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Picture</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">11</span>;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> Long pictureId;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> userId;</div><div class="line">    <span class="meta">@Property</span></div><div class="line">    <span class="keyword">private</span> String pictureName;</div><div class="line">    <span class="meta">@Property</span>(nameInDb = <span class="string">"width"</span>)</div><div class="line">    <span class="keyword">private</span> String width;</div><div class="line">    <span class="meta">@Property</span>(nameInDb = <span class="string">"height"</span>)</div><div class="line">    <span class="keyword">private</span> String height;</div><div class="line">    <span class="meta">@ToOne</span>(joinProperty = <span class="string">"userId"</span>)</div><div class="line">   <span class="keyword">private</span> User user;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>1对n：</strong></li>
</ul>
<p><strong>注意：</strong>Intent传递对象需要用到：Serializable，必须把serialVersionUID 给带上，不然会报错。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ToMany</span>(referencedJoinProperty = <span class="string">"customerId"</span>)</div><div class="line">joinProperties这个参数是referencedJoinProperty 参数的升级版</div><div class="line"><span class="meta">@ToMany</span>(joinProperties = &#123;</div><div class="line">          <span class="meta">@JoinProperty</span>(name = <span class="string">"id"</span>, referencedName = <span class="string">"customerId"</span>)</div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="meta">@Property</span></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">	<span class="comment">// @ToMany(referencedJoinProperty = "customerId")</span></div><div class="line">    <span class="meta">@ToMany</span>(joinProperties = &#123;<span class="meta">@JoinProperty</span>(name = <span class="string">"id"</span>, referencedName = <span class="string">"customerId"</span>)&#125;)</div><div class="line">    <span class="meta">@OrderBy</span>(<span class="string">"date ASC"</span>)</div><div class="line">    <span class="keyword">private</span> List&lt;Order&gt; orders;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="meta">@Property</span></div><div class="line">    <span class="keyword">private</span> Date date;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> customerId;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>m:n 多对多</strong>: 创建三个实体类，其中一个为关联类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="meta">@Property</span></div><div class="line">    <span class="keyword">private</span> Date date;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> customerId;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="meta">@ToMany</span></div><div class="line">    <span class="meta">@JoinEntity</span>(</div><div class="line">            entity = JoinProductsWithOrders.class,</div><div class="line">            sourceProperty = <span class="string">"productId"</span>,</div><div class="line">            targetProperty = <span class="string">"orderId"</span></div><div class="line">    )</div><div class="line">    <span class="keyword">private</span> List&lt;Order&gt; ordersWithThisProduct;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinProductsWithOrders</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="keyword">private</span> Long productId;</div><div class="line">    <span class="keyword">private</span> Long orderId;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-数据库的创建："><a href="#2-数据库的创建：" class="headerlink" title="2. 数据库的创建："></a>2. 数据库的创建：</h2><p>   需要在自定义的“Application”类中进行声明。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DaoSession daoSession;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line"></div><div class="line">       ···</div><div class="line">        <span class="comment">//配置数据库</span></div><div class="line">        setupDatabase();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 配置数据库</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * 1、DevOpenHelper：创建SQLite数据库的SQLiteOpenHelper的具体实现</span></div><div class="line"><span class="comment">     * 2、DaoMaster：GreenDao的顶级对象，作为数据库对象、用于创建表和删除表</span></div><div class="line"><span class="comment">     * 3、DaoSession：管理所有的Dao对象，Dao对象中存在着增删改查等API</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setupDatabase</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 创建数据库:49_class_info.db</span></div><div class="line">        DaoMaster.DevOpenHelper helper = <span class="keyword">new</span> DaoMaster.DevOpenHelper(<span class="keyword">this</span>,<span class="string">"jujia.db"</span>,<span class="keyword">null</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 获取可写数据库</span></div><div class="line">        SQLiteDatabase db = helper.getWritableDatabase();</div><div class="line"></div><div class="line">        <span class="comment">// 获取数据库对象</span></div><div class="line">        DaoMaster daoMaster = <span class="keyword">new</span> DaoMaster(db);</div><div class="line"></div><div class="line">        <span class="comment">// 获取Dao对象管理者</span></div><div class="line">        daoSession = daoMaster.newSession();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DaoSession <span class="title">getDaoInstant</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> daoSession;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-最基本的CURD"><a href="#3-最基本的CURD" class="headerlink" title="3. 最基本的CURD"></a>3. 最基本的CURD</h2><h3 id="3-1-C-：增"><a href="#3-1-C-：增" class="headerlink" title="3.1 C ：增"></a>3.1 C ：增</h3><h3 id="3-1-Read-查"><a href="#3-1-Read-查" class="headerlink" title="3.1 Read : 查"></a>3.1 Read : 查</h3><ul>
<li><strong>orderAsc</strong>：升序排序</li>
<li><strong>orderDesc</strong>：降序排序</li>
<li><strong>eq()</strong>： == </li>
<li><strong>noteq()</strong>: !=</li>
<li><strong>gt()</strong>:    &gt;</li>
<li><strong>t()</strong>: &lt;</li>
<li><strong>ge</strong>: &gt;=</li>
<li><strong>le</strong>: &lt;=</li>
<li><strong>like()</strong>: 包含</li>
<li><strong>between</strong>: 两者之间</li>
<li><strong>in</strong>: 在某个范围之内</li>
<li><strong>notIn</strong>: 不在某个范围之内</li>
<li><strong>limit(int)</strong>: 限制查询的数量 - 分页</li>
<li><strong>offset(int)</strong>: 每次返回的数量 - 分页</li>
<li><strong>unique()</strong>: 如果只想获取一个结果时</li>
<li><strong>list()</strong>: 获取查询结果集合 - LazyList</li>
<li><strong>listLazy()懒查询</strong>：只有当调用list()中的实体对象时才会执行查询操作并且只缓存第一次被查询的结果，需要关闭 - LazyList</li>
<li><strong>listlazyUncached()懒查询</strong>：只有当调用list()中的实体对象时才会执行查询操作并且不缓存，需要关闭 - LazyList</li>
<li><strong>listIterator()</strong>：对查询结果进行遍历，不缓存，需要关闭 - LazyList</li>
</ul>
<h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoCURD</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"UserInfoCURD"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 增</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> userInfoBean 实体对象</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">insertToStudent</span><span class="params">(UserInfoBean userInfoBean)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> App.getDaoInstant().getUserInfoBeanDao().insert(userInfoBean);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 删</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> userInfoBean 实体对象</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteFromStudent</span><span class="params">(UserInfoBean userInfoBean)</span></span>&#123;</div><div class="line">        App.getDaoInstant().getUserInfoBeanDao().delete(userInfoBean);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteFromStudentAll</span><span class="params">()</span></span>&#123;</div><div class="line">        App.getDaoInstant().getUserInfoBeanDao().deleteAll();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 改</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> userInfoBean 实体对象</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateToStudent</span><span class="params">(UserInfoBean userInfoBean)</span></span>&#123;</div><div class="line">        App.getDaoInstant().getUserInfoBeanDao().update(userInfoBean);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 查 - 全部</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;UserInfoBean&gt; <span class="title">queryFromStudent</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> App.getDaoInstant().getUserInfoBeanDao().loadAll();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-数据库升级"><a href="#4-数据库升级" class="headerlink" title="4. 数据库升级"></a>4. 数据库升级</h2><blockquote>
<p>参考：<a href="http://blog.csdn.net/huangxiaoguo1/article/details/54574713" target="_blank" rel="external">http://blog.csdn.net/huangxiaoguo1/article/details/54574713</a></p>
</blockquote>
<p><strong>（1）思路</strong>：</p>
<p>创建临时表     –&gt;     删除旧表     –&gt;    创建新表 –&gt; 复制临时表中的数据到新表中，并删除临时表 </p>
<p><strong>（2）注意</strong>：</p>
<p>在对数据库进行升级的过程中，有时候会遇到“”的问题，要避免的这样的问题就要：</p>
<ul>
<li>新增加的和修改的字段最好为String类型，避免字段不能为null的情况发生</li>
<li>不要用基础数据类型，用封装的数据类型</li>
</ul>
<p><strong>附录：MigrationHelper类</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.choe.greendaodemo.utils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.database.Cursor;</div><div class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteDatabase;</div><div class="line"><span class="keyword">import</span> android.text.TextUtils;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> de.greenrobot.dao.AbstractDao;</div><div class="line"><span class="keyword">import</span> de.greenrobot.dao.internal.DaoConfig;</div><div class="line"><span class="keyword">import</span> me.itangqi.dao.DaoMaster;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by cyk </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MigrationHelper</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONVERSION_CLASS_NOT_FOUND_EXCEPTION = <span class="string">"MIGRATION HELPER - CLASS DOESN'T MATCH WITH THE CURRENT PARAMETERS"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MigrationHelper instance;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MigrationHelper <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</div><div class="line">            instance = <span class="keyword">new</span> MigrationHelper();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">migrate</span><span class="params">(SQLiteDatabase db, Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses)</span> </span>&#123;</div><div class="line">        generateTempTables(db, daoClasses);</div><div class="line">        DaoMaster.dropAllTables(db, <span class="keyword">true</span>);</div><div class="line">        DaoMaster.createAllTables(db, <span class="keyword">false</span>);</div><div class="line">        restoreData(db, daoClasses);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 生成临时列表</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> db</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> daoClasses</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateTempTables</span><span class="params">(SQLiteDatabase db, Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; daoClasses.length; i++) &#123;</div><div class="line">            DaoConfig daoConfig = <span class="keyword">new</span> DaoConfig(db, daoClasses[i]);</div><div class="line"></div><div class="line">            String divider = <span class="string">""</span>;</div><div class="line">            String tableName = daoConfig.tablename;</div><div class="line">            String tempTableName = daoConfig.tablename.concat(<span class="string">"_TEMP"</span>);</div><div class="line">            ArrayList&lt;String&gt; properties = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            StringBuilder createTableStringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">            createTableStringBuilder.append(<span class="string">"CREATE TABLE "</span>).append(tempTableName).append(<span class="string">" ("</span>);</div><div class="line"></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; daoConfig.properties.length; j++) &#123;</div><div class="line">                String columnName = daoConfig.properties[j].columnName;</div><div class="line"></div><div class="line">                <span class="keyword">if</span>(getColumns(db, tableName).contains(columnName)) &#123;</div><div class="line">                    properties.add(columnName);</div><div class="line">                    String type = <span class="keyword">null</span>;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        type = getTypeByClass(daoConfig.properties[j].type);</div><div class="line">                    &#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">                        exception.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    createTableStringBuilder.append(divider).append(columnName).append(<span class="string">" "</span>).append(type);</div><div class="line">                    <span class="keyword">if</span>(daoConfig.properties[j].primaryKey) &#123;</div><div class="line">                        createTableStringBuilder.append(<span class="string">" PRIMARY KEY"</span>);</div><div class="line">                    &#125;</div><div class="line">                    divider = <span class="string">","</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            createTableStringBuilder.append(<span class="string">");"</span>);</div><div class="line">            db.execSQL(createTableStringBuilder.toString());</div><div class="line">            StringBuilder insertTableStringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">            insertTableStringBuilder.append(<span class="string">"INSERT INTO "</span>).append(tempTableName).append(<span class="string">" ("</span>);</div><div class="line">            insertTableStringBuilder.append(TextUtils.join(<span class="string">","</span>, properties));</div><div class="line">            insertTableStringBuilder.append(<span class="string">") SELECT "</span>);</div><div class="line">            insertTableStringBuilder.append(TextUtils.join(<span class="string">","</span>, properties));</div><div class="line">            insertTableStringBuilder.append(<span class="string">" FROM "</span>).append(tableName).append(<span class="string">";"</span>);</div><div class="line">            db.execSQL(insertTableStringBuilder.toString());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 存储新的数据库表 以及数据</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> db</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> daoClasses</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">restoreData</span><span class="params">(SQLiteDatabase db, Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; daoClasses.length; i++) &#123;</div><div class="line">            DaoConfig daoConfig = <span class="keyword">new</span> DaoConfig(db, daoClasses[i]);</div><div class="line">            String tableName = daoConfig.tablename;</div><div class="line">            String tempTableName = daoConfig.tablename.concat(<span class="string">"_TEMP"</span>);</div><div class="line">            ArrayList&lt;String&gt; properties = <span class="keyword">new</span> ArrayList();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; daoConfig.properties.length; j++) &#123;</div><div class="line">                String columnName = daoConfig.properties[j].columnName;</div><div class="line">                <span class="keyword">if</span>(getColumns(db, tempTableName).contains(columnName)) &#123;</div><div class="line">                    properties.add(columnName);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            StringBuilder insertTableStringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">            insertTableStringBuilder.append(<span class="string">"INSERT INTO "</span>).append(tableName).append(<span class="string">" ("</span>);</div><div class="line">            insertTableStringBuilder.append(TextUtils.join(<span class="string">","</span>, properties));</div><div class="line">            insertTableStringBuilder.append(<span class="string">") SELECT "</span>);</div><div class="line">            insertTableStringBuilder.append(TextUtils.join(<span class="string">","</span>, properties));</div><div class="line">            insertTableStringBuilder.append(<span class="string">" FROM "</span>).append(tempTableName).append(<span class="string">";"</span>);</div><div class="line">            StringBuilder dropTableStringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">            dropTableStringBuilder.append(<span class="string">"DROP TABLE "</span>).append(tempTableName);</div><div class="line">            db.execSQL(insertTableStringBuilder.toString());</div><div class="line">            db.execSQL(dropTableStringBuilder.toString());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getTypeByClass</span><span class="params">(Class&lt;?&gt; type)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">if</span>(type.equals(String.class)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"TEXT"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(type.equals(Long.class) || type.equals(Integer.class) || type.equals(<span class="keyword">long</span>.class)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"INTEGER"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(type.equals(Boolean.class)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"BOOLEAN"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Exception exception = <span class="keyword">new</span> Exception(CONVERSION_CLASS_NOT_FOUND_EXCEPTION.concat(<span class="string">" - Class: "</span>).concat(type.toString()));</div><div class="line">        exception.printStackTrace();</div><div class="line">        <span class="keyword">throw</span> exception;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getColumns</span><span class="params">(SQLiteDatabase db, String tableName)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; columns = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        Cursor cursor = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            cursor = db.rawQuery(<span class="string">"SELECT * FROM "</span> + tableName + <span class="string">" limit 1"</span>, <span class="keyword">null</span>);</div><div class="line">            <span class="keyword">if</span> (cursor != <span class="keyword">null</span>) &#123;</div><div class="line">                columns = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(cursor.getColumnNames()));</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            Log.v(tableName, e.getMessage(), e);</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (cursor != <span class="keyword">null</span>)</div><div class="line">                cursor.close();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> columns;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> SQLite </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android的aseets中的文件读取]]></title>
      <url>/Android%E7%9A%84aseets%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/</url>
      <content type="html"><![CDATA[<p>assets中文件的使用</p>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="1-Android资源文件大致可以分为两种："><a href="#1-Android资源文件大致可以分为两种：" class="headerlink" title="1. Android资源文件大致可以分为两种："></a>1. Android资源文件大致可以分为两种：</h1><ul>
<li><strong>res</strong>目录下存放的<strong>可编译</strong>的资源文件：这种资源文件系统会在R.java里面自动生成该资源文件的ID，所以访问这种资源文件比较简单，通过R.XXX.ID即可；</li>
<li><strong>assets</strong>目录下存放的<strong>原生</strong>资源文件：系统在编译的时候不会编译assets下的资源文件。AssetManager提供对应用程序的原始资源文件进行访问；这个类提供了一个低级别的API，它允许你以简单的<strong>字节流</strong>的形式打开和读取和应用程序绑定在一起的原始资源文件。</li>
</ul>
<h1 id="2-AssetsManager类"><a href="#2-AssetsManager类" class="headerlink" title="2. AssetsManager类"></a>2. AssetsManager类</h1><h2 id="常量："><a href="#常量：" class="headerlink" title="常量："></a>常量：</h2><ul>
<li>ACCESS_UNKNOWN : 未指定具体的读取模式</li>
<li>ACCESS_RANDOM : 随机读取</li>
<li>ACCESS_STREAMING : 顺序读取 （默认）</li>
<li>ACCESS_BUFFER : 缓存读取</li>
</ul>
<h2 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h2><ul>
<li>close(); 关闭asset manager</li>
<li>String[] list(String path); 列出该目录下的下级文件和文件夹名称</li>
<li>InputStream open(String fileName); 以顺序读取模式打开文件，默认模式为ACCESS_STREAMING</li>
<li>InputStream open(String fileName, int accessMode); 以指定模式打开文件</li>
<li>AssetFileDescriptor openFd (String fileName)</li>
</ul>
<p><strong>注意</strong>：<br>Android中还有另外一个文件夹raw,和assets差不多,也不会被R文件编译,但是raw下不能在建文件夹,assets文件下是可以在建文件夹的,下面是获取raw文件夹下资源的方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">InputStream is = getResources().openRawResource(R.id.filename);</div></pre></td></tr></table></figure>
<h1 id="3-assets目录下主要存放四种文件："><a href="#3-assets目录下主要存放四种文件：" class="headerlink" title="3. assets目录下主要存放四种文件："></a>3. assets目录下主要存放四种文件：</h1><ul>
<li>文本文件</li>
<li>图像文件</li>
<li>网页文件（包括html中引用的js/ccs/jpg等资源</li>
<li>音频视频文件</li>
</ul>
<h1 id="4-读取四种文件："><a href="#4-读取四种文件：" class="headerlink" title="4. 读取四种文件："></a>4. 读取四种文件：</h1><ul>
<li>读取文本文件eg：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String fileName = <span class="string">"newFile.txt"</span>;</div><div class="line">InputStream is = getAssets().open(fileName);  </div><div class="line"><span class="keyword">int</span> lenght = is.available();  </div><div class="line"><span class="keyword">byte</span>[]  buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[lenght];  </div><div class="line">is.read(buffer);  </div><div class="line">String result = = <span class="keyword">new</span> String(buffer, <span class="string">"utf8"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>读取图像文件：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">InputStream is = getAssets().open(fileName);  </div><div class="line">bitmap = BitmapFactory.decodeStream(is); </div><div class="line">ivImg.setImageBitmap(bitmap);</div></pre></td></tr></table></figure>
<ul>
<li>读取网页文件：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webView.loadUrl(<span class="string">"file:///android_asset/html/index.htmll"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>读取音视频文件：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 打开指定音乐文件,获取assets目录下指定文件的AssetFileDescriptor对象  </span></div><div class="line">AssetFileDescriptor afd = am.openFd(music);  </div><div class="line">mPlayer.reset();  </div><div class="line"><span class="comment">// 使用MediaPlayer加载指定的声音文件。  </span></div><div class="line">mPlayer.setDataSource(afd.getFileDescriptor(),  </div><div class="line">    afd.getStartOffset(), afd.getLength());  </div><div class="line"><span class="comment">// 准备声音  </span></div><div class="line">mPlayer.prepare();  </div><div class="line"><span class="comment">// 播放  </span></div><div class="line">mPlayer.start();</div></pre></td></tr></table></figure>
<h1 id="5-将assets下的文件复制到SD卡中"><a href="#5-将assets下的文件复制到SD卡中" class="headerlink" title="5. 将assets下的文件复制到SD卡中"></a>5. 将assets下的文件复制到SD卡中</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**  </span></div><div class="line"><span class="comment"> *  从assets目录中复制整个文件夹内容  </span></div><div class="line"><span class="comment"> *  <span class="doctag">@param</span>  context  Context 使用CopyFiles类的Activity </span></div><div class="line"><span class="comment"> *  <span class="doctag">@param</span>  oldPath  String  原文件路径  如：/aa  </span></div><div class="line"><span class="comment"> *  <span class="doctag">@param</span>  newPath  String  复制后路径  如：xx:/bb/cc  </span></div><div class="line"><span class="comment"> */</span>   </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFilesFassets</span><span class="params">(Context context,String oldPath,String newPath)</span> </span>&#123;                      </div><div class="line">         <span class="keyword">try</span> &#123;  </div><div class="line">        String fileNames[] = context.getAssets().list(oldPath);<span class="comment">//获取assets目录下的所有文件及目录名  </span></div><div class="line">        <span class="keyword">if</span> (fileNames.length &gt; <span class="number">0</span>) &#123;<span class="comment">//如果是目录  </span></div><div class="line">            File file = <span class="keyword">new</span> File(newPath);  </div><div class="line">            file.mkdirs();<span class="comment">//如果文件夹不存在，则递归  </span></div><div class="line">            <span class="keyword">for</span> (String fileName : fileNames) &#123;  </div><div class="line">               copyFilesFassets(context,oldPath + <span class="string">"/"</span> + fileName,newPath+<span class="string">"/"</span>+fileName);  </div><div class="line">            &#125;  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果是文件  </span></div><div class="line">            InputStream is = context.getAssets().open(oldPath);  </div><div class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(newPath));  </div><div class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];  </div><div class="line">            <span class="keyword">int</span> byteCount=<span class="number">0</span>;                 </div><div class="line">            <span class="keyword">while</span>((byteCount=is.read(buffer))!=-<span class="number">1</span>) &#123;<span class="comment">//循环从输入流读取 buffer字节          </span></div><div class="line">                fos.write(buffer, <span class="number">0</span>, byteCount);<span class="comment">//将读取的输入流写入到输出流  </span></div><div class="line">            &#125;  </div><div class="line">            fos.flush();<span class="comment">//刷新缓冲区  </span></div><div class="line">            is.close();  </div><div class="line">            fos.close();  </div><div class="line">        &#125;  </div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">        <span class="comment">// TODO Auto-generated catch block  </span></div><div class="line">        e.printStackTrace();  </div><div class="line">        <span class="comment">//如果捕捉到错误则通知UI线程  </span></div><div class="line">                   MainActivity.handler.sendEmptyMessage(COPY_FALSE);  </div><div class="line">    &#125;                             </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EChart第三方JS库图表html文档示例]]></title>
      <url>/EChart%E7%AC%AC%E4%B8%89%E6%96%B9JS%E5%BA%93%E5%9B%BE%E8%A1%A8html%E6%96%87%E6%A1%A3%E7%A4%BA%E4%BE%8B/</url>
      <content type="html"><![CDATA[<p>示例文档：</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"echarts.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 为 ECharts 准备一个具备大小（宽高）的 DOM --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">style</span>=<span class="string">"width: 100% ;height: 1000%; "</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 编写JavaScript代码 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    //</span></div><div class="line"><span class="undefined">    var arrName = [];</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    // 高压</span></div><div class="line"><span class="undefined">    var arrDataH = [];</span></div><div class="line"><span class="undefined">    // 低压</span></div><div class="line"><span class="undefined">    var arrDataL = [];</span></div><div class="line"><span class="undefined">    // 心率</span></div><div class="line"><span class="undefined">    var arrDataM = [];</span></div><div class="line"><span class="undefined">    </span></div><div class="line"><span class="undefined">    //js调用Java</span></div><div class="line"><span class="undefined">    function getEveryDay() &#123;</span></div><div class="line"><span class="undefined">        return window.Fragment_Day.getDataByDay();</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    function getLocalTime(nS) &#123;</span></div><div class="line"><span class="undefined">        return new Date(parseInt(nS) * 1000);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    function formatDate(now) &#123;</span></div><div class="line"><span class="undefined">        var year = now.getFullYear(),</span></div><div class="line"><span class="undefined">            month = now.getMonth() + 1,</span></div><div class="line"><span class="undefined">            date = now.getDate();</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        return year + "-" + month + "-" + date;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    function topData() &#123;</span></div><div class="line"><span class="undefined">        //var strData = getEveryDay();</span></div><div class="line"><span class="undefined">        var strData = [&#123;</span></div><div class="line"><span class="undefined">            "addtime": 1515638273,</span></div><div class="line"><span class="undefined">            "com_mark": "yongnuo",</span></div><div class="line"><span class="undefined">            "h_pressure": 130,</span></div><div class="line"><span class="undefined">            "id": 33,</span></div><div class="line"><span class="undefined">            "idcode": "155023233265126",</span></div><div class="line"><span class="undefined">            "l_pressure": 84,</span></div><div class="line"><span class="undefined">            "pulse": 81</span></div><div class="line"><span class="undefined">        &#125;, &#123;</span></div><div class="line"><span class="undefined">            "addtime": 1515638273,</span></div><div class="line"><span class="undefined">            "com_mark": "yongnuo",</span></div><div class="line"><span class="undefined">            "h_pressure": 130,</span></div><div class="line"><span class="undefined">            "id": 33,</span></div><div class="line"><span class="undefined">            "idcode": "155023233265126",</span></div><div class="line"><span class="undefined">            "l_pressure": 84,</span></div><div class="line"><span class="undefined">            "pulse": 81</span></div><div class="line"><span class="undefined">        &#125;, &#123;</span></div><div class="line"><span class="undefined">            "addtime": 1515638273,</span></div><div class="line"><span class="undefined">            "com_mark": "yongnuo",</span></div><div class="line"><span class="undefined">            "h_pressure": 130,</span></div><div class="line"><span class="undefined">            "id": 33,</span></div><div class="line"><span class="undefined">            "idcode": "155023233265126",</span></div><div class="line"><span class="undefined">            "l_pressure": 84,</span></div><div class="line"><span class="undefined">            "pulse": 81</span></div><div class="line"><span class="undefined">        &#125;, &#123;</span></div><div class="line"><span class="undefined">            "addtime": 1515638273,</span></div><div class="line"><span class="undefined">            "com_mark": "yongnuo",</span></div><div class="line"><span class="undefined">            "h_pressure": 130,</span></div><div class="line"><span class="undefined">            "id": 33,</span></div><div class="line"><span class="undefined">            "idcode": "155023233265126",</span></div><div class="line"><span class="undefined">            "l_pressure": 84,</span></div><div class="line"><span class="undefined">            "pulse": 81</span></div><div class="line"><span class="undefined">        &#125;, &#123;</span></div><div class="line"><span class="undefined">            "addtime": 1515638273,</span></div><div class="line"><span class="undefined">            "com_mark": "yongnuo",</span></div><div class="line"><span class="undefined">            "h_pressure": 130,</span></div><div class="line"><span class="undefined">            "id": 33,</span></div><div class="line"><span class="undefined">            "idcode": "155023233265126",</span></div><div class="line"><span class="undefined">            "l_pressure": 84,</span></div><div class="line"><span class="undefined">            "pulse": 81</span></div><div class="line"><span class="undefined">        &#125;]</span></div><div class="line"><span class="undefined">        console.log(strData);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        for (var i = 0; i &lt; strData.length; i++) &#123;</span></div><div class="line"><span class="undefined">            arrName.push(formatDate(getLocalTime(strData[i].addtime)));</span></div><div class="line"><span class="undefined">            console.log(formatDate(getLocalTime(strData[i].addtime)));</span></div><div class="line"><span class="undefined">            arrDataH.push(strData[i].h_pressure);</span></div><div class="line"><span class="undefined">            arrDataL.push(strData[i].l_pressure);</span></div><div class="line"><span class="undefined">            arrDataM.push(strData[i].pulse);</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    window.onload = function () &#123;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        topData();</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        var myChart = echarts.init(document.getElementById('main'));</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        // 指定图表的配置项和数据</span></div><div class="line"><span class="undefined">        var option = &#123;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">            // 整体位置设置</span></div><div class="line"><span class="undefined">            grid: &#123;</span></div><div class="line"><span class="undefined">                top: '10%',</span></div><div class="line"><span class="undefined">                left: '10%',</span></div><div class="line"><span class="undefined">                right: '4%',</span></div><div class="line"><span class="undefined">                bottom: '15%'</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">            // 图例设置</span></div><div class="line"><span class="undefined">            legend: &#123;</span></div><div class="line"><span class="undefined">                //name=legend.data的时候才能显示图例</span></div><div class="line"><span class="undefined">                data: ['高压', '低压', '心率'],</span></div><div class="line"><span class="undefined">                top: '2%',</span></div><div class="line"><span class="undefined">                right: '10%',</span></div><div class="line"><span class="undefined">                itemGap: 150,</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">            // 字体大小设置</span></div><div class="line"><span class="undefined">            textStyle: &#123;</span></div><div class="line"><span class="undefined">                fontSize: "150%"</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">            // x轴设置</span></div><div class="line"><span class="undefined">            xAxis: &#123;</span></div><div class="line"><span class="undefined">                type: 'category',</span></div><div class="line"><span class="undefined">                boundaryGap: false,</span></div><div class="line"><span class="undefined">                data: arrName,</span></div><div class="line"><span class="undefined">                axisLabel: &#123;</span></div><div class="line"><span class="undefined">                    interval: 0,</span></div><div class="line"><span class="undefined">                    rotate: 45,</span></div><div class="line"><span class="undefined">                    formatter: '&#123;value&#125;',</span></div><div class="line"><span class="undefined">                    textStyle: &#123;</span></div><div class="line"><span class="undefined">                        fontSize: 24,</span></div><div class="line"><span class="undefined">                    &#125;</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">            // y轴设置</span></div><div class="line"><span class="undefined">            yAxis: &#123;</span></div><div class="line"><span class="undefined">                axisLabel: &#123;</span></div><div class="line"><span class="undefined">                    textStyle: &#123;</span></div><div class="line"><span class="undefined">                        fontSize: 24</span></div><div class="line"><span class="undefined">                    &#125;</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">            // 绘制折线</span></div><div class="line"><span class="undefined">            series: [</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                // 高压</span></div><div class="line"><span class="undefined">                &#123;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                    /**</span></div><div class="line"><span class="undefined">                     * 图表样式</span></div><div class="line"><span class="undefined">                     */</span></div><div class="line"><span class="undefined">                    name: '高压',</span></div><div class="line"><span class="undefined">                    type: 'line',</span></div><div class="line"><span class="undefined">                    label: &#123;</span></div><div class="line"><span class="undefined">                        normal: &#123;</span></div><div class="line"><span class="undefined">                            show: true,</span></div><div class="line"><span class="undefined">                            position: 'top',</span></div><div class="line"><span class="undefined">                            fontSize: 24</span></div><div class="line"><span class="undefined">                        &#125;</span></div><div class="line"><span class="undefined">                    &#125;,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                    /**</span></div><div class="line"><span class="undefined">                     * 设置折线颜色</span></div><div class="line"><span class="undefined">                     */</span></div><div class="line"><span class="undefined">                    itemStyle: &#123;</span></div><div class="line"><span class="undefined">                        normal: &#123;</span></div><div class="line"><span class="undefined">                            color: "#cc3300",</span></div><div class="line"><span class="undefined">                            barBorderColor: "#cc3300",</span></div><div class="line"><span class="undefined">                        &#125;</span></div><div class="line"><span class="undefined">                    &#125;,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                    /**</span></div><div class="line"><span class="undefined">                     * 设置y轴对应的具体数据</span></div><div class="line"><span class="undefined">                     */</span></div><div class="line"><span class="undefined">                    data: arrDataH,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                &#125;,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                // 低压</span></div><div class="line"><span class="undefined">                &#123;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                    /**</span></div><div class="line"><span class="undefined">                     * 图表样式</span></div><div class="line"><span class="undefined">                     */</span></div><div class="line"><span class="undefined">                    name: '低压',</span></div><div class="line"><span class="undefined">                    type: 'line',</span></div><div class="line"><span class="undefined">                    label: &#123;</span></div><div class="line"><span class="undefined">                        normal: &#123;</span></div><div class="line"><span class="undefined">                            show: true,</span></div><div class="line"><span class="undefined">                            position: 'top',</span></div><div class="line"><span class="undefined">                            fontSize: 24</span></div><div class="line"><span class="undefined">                        &#125;</span></div><div class="line"><span class="undefined">                    &#125;,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                    /**</span></div><div class="line"><span class="undefined">                     * 设置折线颜色</span></div><div class="line"><span class="undefined">                     */</span></div><div class="line"><span class="undefined">                    itemStyle: &#123;</span></div><div class="line"><span class="undefined">                        normal: &#123;</span></div><div class="line"><span class="undefined">                            color: "#33aa00",</span></div><div class="line"><span class="undefined">                            barBorderColor: "#33aa00",</span></div><div class="line"><span class="undefined">                        &#125;</span></div><div class="line"><span class="undefined">                    &#125;,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                    /**</span></div><div class="line"><span class="undefined">                     * 设置y轴对应的具体数据</span></div><div class="line"><span class="undefined">                     */</span></div><div class="line"><span class="undefined">                    data: arrDataL,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                &#125;,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                // 心率</span></div><div class="line"><span class="undefined">                &#123;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                    /**</span></div><div class="line"><span class="undefined">                     * 图表样式</span></div><div class="line"><span class="undefined">                     */</span></div><div class="line"><span class="undefined">                    name: '心率',</span></div><div class="line"><span class="undefined">                    type: 'line',</span></div><div class="line"><span class="undefined">                    label: &#123;</span></div><div class="line"><span class="undefined">                        normal: &#123;</span></div><div class="line"><span class="undefined">                            show: true,</span></div><div class="line"><span class="undefined">                            position: 'top',</span></div><div class="line"><span class="undefined">                            fontSize: 24</span></div><div class="line"><span class="undefined">                        &#125;</span></div><div class="line"><span class="undefined">                    &#125;,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                    /**</span></div><div class="line"><span class="undefined">                     * 设置折线颜色</span></div><div class="line"><span class="undefined">                     */</span></div><div class="line"><span class="undefined">                    itemStyle: &#123;</span></div><div class="line"><span class="undefined">                        normal: &#123;</span></div><div class="line"><span class="undefined">                            color: "#388CD9",</span></div><div class="line"><span class="undefined">                            barBorderColor: "#388CD9",</span></div><div class="line"><span class="undefined">                        &#125;</span></div><div class="line"><span class="undefined">                    &#125;,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                    /**</span></div><div class="line"><span class="undefined">                     * 设置y轴对应的具体数据</span></div><div class="line"><span class="undefined">                     */</span></div><div class="line"><span class="undefined">                    data: arrDataM,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">                &#125;]</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">        window.onresize = myChart.resize;</span></div><div class="line"><span class="undefined">        // 使用刚指定的配置项和数据显示图表。</span></div><div class="line"><span class="undefined">        myChart.setOption(option);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>最终结果样式:</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-18%2000.36.50.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[框架-RxJava的了解]]></title>
      <url>/%E6%A1%86%E6%9E%B6-RxJava%E7%9A%84%E4%BA%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考：<a href="https://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">https://gank.io/post/560e15be2dca930e00da1083</a></p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="一-准备"><a href="#一-准备" class="headerlink" title="一. 准备"></a>一. 准备</h1><ul>
<li><strong>Java泛型中&lt;？ extends E&gt;和&lt;？ super E&gt;的区别</strong></li>
</ul>
<blockquote>
<p>参考：<a href="http://blog.csdn.net/u014513883/article/details/49820569" target="_blank" rel="external">http://blog.csdn.net/u014513883/article/details/49820569</a></p>
</blockquote>
<ul>
<li><p><strong>PECS法则</strong></p>
<ul>
<li><p><strong>生产者</strong>（Producer）使用<code>extends</code></p>
<pre><code>如果你需要一个**提供**E类型元素的集合，使用泛型通配符&lt;? extends E&gt;。它好比一个生产者，可以提供数据。
</code></pre></li>
<li><p><strong>消费者</strong>（Consumer）使用<code>super</code></p>
<pre><code>如果你需要一个只能**装入**E类型元素的集合，使用泛型通配符&lt;? super E&gt;。它好比一个消费者，可以消费你提供的数据。
</code></pre></li>
<li>既是生产者也是消费者<pre><code>既要存储又要读取，那就别使用泛型通配符
</code></pre></li>
</ul>
</li>
</ul>
<h1 id="二-使用方式"><a href="#二-使用方式" class="headerlink" title="二.  使用方式"></a>二.  使用方式</h1><h2 id="（一）Observable中创造事件序列的方法"><a href="#（一）Observable中创造事件序列的方法" class="headerlink" title="（一）Observable中创造事件序列的方法"></a>（一）Observable中创造事件序列的方法</h2><h3 id="1-create"><a href="#1-create" class="headerlink" title="1. create()"></a>1. create()</h3><h4 id="1-Subscriber完整定义的回调"><a href="#1-Subscriber完整定义的回调" class="headerlink" title="1). Subscriber完整定义的回调"></a>1). Subscriber完整定义的回调</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Subscriber完整定义的回调</span></div><div class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class="line">        subscriber.onNext(<span class="string">"订阅者接收到----Hello"</span>);</div><div class="line">        subscriber.onNext(<span class="string">"订阅者接收到----RxJava"</span>);</div><div class="line">        subscriber.onNext(<span class="string">"订阅者接收到----Android"</span>);</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"ヽ(｀Д´)ﾉ -&gt; onNext : "</span> + s);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="2-Action1不完整定义的回调"><a href="#2-Action1不完整定义的回调" class="headerlink" title="2). Action1不完整定义的回调"></a>2). Action1不完整定义的回调</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Action1不完整定义的回调</span></div><div class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class="line">        subscriber.onNext(<span class="string">"订阅者接收到----Hello"</span>);</div><div class="line">        subscriber.onNext(<span class="string">"订阅者接收到----RxJava"</span>);</div><div class="line">        subscriber.onNext(<span class="string">"订阅者接收到----Android"</span>);</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"ヽ(｀Д´)ﾉ -&gt; call : "</span> + s);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="Action1-和-Action0区别："><a href="#Action1-和-Action0区别：" class="headerlink" title="Action1 和 Action0区别："></a>Action1 和 Action0区别：</h4><ul>
<li><p><strong>Action0</strong>：是 RxJava 的一个接口，它只有一个方法 call()，这个方法是<strong>无参无返回值</strong>的；由于 onCompleted() 方法也是无参无返回值的，因此 Action0 可以被当成一个包装对象，将 onCompleted() 的内容打包起来将自己作为一个参数传入 subscribe() 以实现不完整定义的回调。</p>
</li>
<li><p><strong>Action1</strong> ：也是一个接口，它同样只有一个方法 call(T param)，这个方法也<strong>无返回值，但有一个参数</strong>；与 Action0 同理，由于 <code>onNext(T obj)</code> 和 <code>onError(Throwable error)</code> 也是单参数无返回值的，因此 Action1 可以将 onNext(obj) 和 onError(error) 打包起来传入 subscribe() 以实现不完整定义的回调。</p>
</li>
</ul>
<h3 id="2-just-T…-将传入的参数依次发送出来。"><a href="#2-just-T…-将传入的参数依次发送出来。" class="headerlink" title="2. just(T…) : 将传入的参数依次发送出来。"></a>2. just(T…) : 将传入的参数依次发送出来。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用单个String</span></div><div class="line">Observable.just(<span class="string">"just Hello"</span>, <span class="string">"just RxJava"</span>, <span class="string">"just Android"</span>).subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"ヽ(｀Д´)ﾉ -&gt; call : "</span> + s);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 使用数组效果</span></div><div class="line">String[] strs = <span class="keyword">new</span> String[]&#123;<span class="string">"just Hello"</span>, <span class="string">"just RxJava"</span>, <span class="string">"just Android"</span>&#125;;</div><div class="line">Observable.just(strs).subscribe(<span class="keyword">new</span> Action1&lt;String[]&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String[] strings)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (String item : strings) &#123;</div><div class="line">            Log.e(TAG, <span class="string">"ヽ(｀Д´)ﾉ -&gt; call : "</span> + item);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 将会依次调用：</span></div><div class="line"><span class="comment">// onNext("Hello");</span></div><div class="line"><span class="comment">// onNext("Hi");</span></div><div class="line"><span class="comment">// onNext("Aloha");</span></div><div class="line"><span class="comment">// onCompleted();</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 结果：</span></div><div class="line"><span class="comment"> * just Hello</span></div><div class="line"><span class="comment"> * just RxJava</span></div><div class="line"><span class="comment"> * just Android</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure>
<h3 id="3-from-T-from-Iterable-lt-extends-T-gt-将传入的数组或-Iterable-拆分成具体对象后，依次发送出来。"><a href="#3-from-T-from-Iterable-lt-extends-T-gt-将传入的数组或-Iterable-拆分成具体对象后，依次发送出来。" class="headerlink" title="3. from(T[]) / from(Iterable&lt;? extends T&gt;) : 将传入的数组或 Iterable 拆分成具体对象后，依次发送出来。"></a>3. from(T[]) / from(Iterable&lt;? extends T&gt;) : 将传入的数组或 Iterable 拆分成具体对象后，依次发送出来。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 一下两种方式产生的结果相同</span></div><div class="line"></div><div class="line"><span class="comment">// 方式1</span></div><div class="line">String[] strs = &#123;<span class="string">"From Hello"</span>, <span class="string">"From RxJava"</span>, <span class="string">"From Android"</span>&#125;;</div><div class="line">Observable.from(strs).subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                Log.e(TAG, <span class="string">"ヽ(｀Д´)ﾉ -&gt; onNext haha : "</span> + s);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"> </div><div class="line"> <span class="comment">// 方式2</span></div><div class="line">Observable.from(strs).subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                Log.e(TAG, <span class="string">"ヽ(｀Д´)ﾉ -&gt; call : "</span> + s);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h2 id="（二）-线程控制-：-Scheduler"><a href="#（二）-线程控制-：-Scheduler" class="headerlink" title="（二） 线程控制 ： Scheduler"></a>（二） 线程控制 ： Scheduler</h2><h3 id="调度方法："><a href="#调度方法：" class="headerlink" title="调度方法："></a>调度方法：</h3><ul>
<li><p><strong>subscribeOn()</strong> : 指定 subscribe() 所发生的线程，即 Observable.OnSubscribe 被激活时所处的线程。或者叫做<strong>事件产生的线程</strong>。</p>
</li>
<li><p><strong>observeOn()</strong> ：指定 Subscriber 所运行在的线程。或者叫做<strong>事件消费的线程</strong>。</p>
</li>
</ul>
<h3 id="常用线程："><a href="#常用线程：" class="headerlink" title="常用线程："></a>常用线程：</h3><ul>
<li><strong>Schedulers.immediate()</strong> : 直接在当前线程运行，相当于不指定线程。这是<strong>默认的 Scheduler</strong>。</li>
<li><strong>Schedulers.newThread()</strong> ：总是<strong>启用新线程</strong>，并在新线程执行操作。</li>
<li><strong>Schedulers.io()</strong> : I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。顺序有变化。</li>
<li><strong>Schedulers.computation()</strong> : 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。</li>
<li><strong>AndroidSchedulers.mainThread()</strong> ：<strong>Android专用</strong>的 ，它指定的操作将在 Android 主线程运行。</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Drawable&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Drawable&gt; subscriber)</span> </span>&#123;</div><div class="line">        Drawable drawable = getResources().getDrawable(R.mipmap.ic_launcher_round);</div><div class="line">        subscriber.onNext(drawable);</div><div class="line">    &#125;</div><div class="line">&#125;).</div><div class="line">        subscribeOn(Schedulers.io()).</div><div class="line">        observeOn(AndroidSchedulers.mainThread()).subscribe(<span class="keyword">new</span> Subscriber&lt;Drawable&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"aboutObservable_03 onCompleted"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"aboutObservable_03 onError"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Drawable drawable)</span> </span>&#123;</div><div class="line">        mImage.setImageDrawable(drawable);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="（三）变换"><a href="#（三）变换" class="headerlink" title="（三）变换"></a>（三）变换</h2><p>将<strong>事件</strong>序列中的<strong>对象</strong>或<strong>整个序列</strong>进行加工处理，转换成<strong>不同的</strong>事件或事件序列。</p>
<h3 id="1-map-返回值为结果集。事件对象的直接变换，是一对一的转化，是-RxJava-最常用的变换。"><a href="#1-map-返回值为结果集。事件对象的直接变换，是一对一的转化，是-RxJava-最常用的变换。" class="headerlink" title="1. map() : 返回值为结果集。事件对象的直接变换，是一对一的转化，是 RxJava 最常用的变换。"></a>1. map() : 返回值为结果集。事件对象的直接变换，是一对一的转化，是 RxJava 最常用的变换。</h3><p><img src="http://oy991qm3u.bkt.clouddn.com/map.png" alt=""></p>
<p><strong>释义</strong></p>
<p>返回一个Observable，它将一个指定的函数应用于源Observable发出的每个项目，并发出这些函数应用程序的结果。</p>
<p>Func1()，包装的是有返回值的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="string">"images/logo.png"</span>) <span class="comment">// 输入类型 String</span></div><div class="line">    .map(<span class="keyword">new</span> Func1&lt;String, Bitmap&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Bitmap <span class="title">call</span><span class="params">(String filePath)</span> </span>&#123; <span class="comment">// 参数类型 String</span></div><div class="line">            <span class="keyword">return</span> getBitmapFromPath(filePath); <span class="comment">// 返回类型 Bitmap</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Bitmap&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Bitmap bitmap)</span> </span>&#123; <span class="comment">// 参数类型 Bitmap</span></div><div class="line">            showBitmap(bitmap);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h3 id="2-flatMap-无顺序。嵌套操作。返回值为-Observable-对象。flat铺平。是一对多的转化。"><a href="#2-flatMap-无顺序。嵌套操作。返回值为-Observable-对象。flat铺平。是一对多的转化。" class="headerlink" title="2. flatMap() : 无顺序。嵌套操作。返回值为 Observable 对象。flat铺平。是一对多的转化。"></a>2. flatMap() : 无顺序。嵌套操作。返回值为 Observable 对象。flat铺平。是一对多的转化。</h3><p><img src="http://oy991qm3u.bkt.clouddn.com/flatMap.png" alt=""></p>
<p><strong>释义</strong></p>
<p>对Observable发射的数据都应用(apply)一个函数，这个函数返回一个Observable，然后合并这些Observables，并且发送（emit）合并的结果。 flatMap和map操作符很相像，flatMap发送的是合并后的Observables，map操作符发送的是应用函数后返回的结果集</p>
<p><strong>原理：</strong></p>
<ul>
<li><ol>
<li><strong>嵌套</strong> ：使用传入的事件对象创建一个 Observable 对象，此处嵌套Observable操作；</li>
</ol>
</li>
<li><ol>
<li>并不发送这个 Observable, 而是将它<strong>激活（Observable执行 “产生数据”的过程，此时，每一个事件产生若干个结果集合）</strong>，但是不发送结果集合；</li>
</ol>
</li>
<li><ol>
<li><strong>合并(merge)操作</strong>  ——  <strong>事件传入顺序 != 传出顺序 -&gt; 顺序混乱</strong>：每一个创建出来的 Observable 发送的事件，都被<strong>汇入同一个</strong> Observable ，而这个 Observable 负责将这些<strong>事件（结果集的集合）**</strong>统一**交给 Subscriber 的回调方法。</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">List&lt;Course&gt; list1 = <span class="keyword">new</span> ArrayList&lt;Course&gt;();</div><div class="line">list1.add(<span class="keyword">new</span> Course(<span class="string">"three - Android"</span>, <span class="number">1</span>));</div><div class="line">list1.add(<span class="keyword">new</span> Course(<span class="string">"three - JSP"</span>, <span class="number">3</span>));</div><div class="line"></div><div class="line">List&lt;Course&gt; list2 = <span class="keyword">new</span> ArrayList&lt;Course&gt;();</div><div class="line">list2.add(<span class="keyword">new</span> Course(<span class="string">"three - Object-C"</span>, <span class="number">1</span>));</div><div class="line">list2.add(<span class="keyword">new</span> Course(<span class="string">"three - HTML 5"</span>, <span class="number">2</span>));</div><div class="line"></div><div class="line">StudentInCourse[] students = <span class="keyword">new</span> StudentInCourse[]&#123;</div><div class="line">        <span class="keyword">new</span> StudentInCourse(<span class="string">"张三"</span>, <span class="string">"男"</span>, <span class="number">10</span>, list1),</div><div class="line">        <span class="keyword">new</span> StudentInCourse(<span class="string">"張小盒"</span>, <span class="string">"女"</span>, <span class="number">20</span>, list2),</div><div class="line">&#125;;</div><div class="line">    </div><div class="line">Observable.from(students).</div><div class="line">        flatMap(<span class="keyword">new</span> Func1&lt;StudentInCourse, Observable&lt;Course&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;Course&gt; <span class="title">call</span><span class="params">(StudentInCourse studentInCourse)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> Observable.from(studentInCourse.getList());</div><div class="line">            &#125;</div><div class="line">        &#125;).subscribe(<span class="keyword">new</span> Subscriber&lt;Course&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Course course)</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"ヽ(｀Д´)ﾉ -&gt; onNext : "</span> + course.toString());</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Course&#123;name='three - Android', id=1&#125;</span></div><div class="line"><span class="comment"> * Course&#123;name='three - JSP', id=3&#125;</span></div><div class="line"><span class="comment"> * Course&#123;name='three - Object-C', id=1&#125;</span></div><div class="line"><span class="comment"> * Course&#123;name='three - HTML 5', id=2&#125;</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure>
<h4 id="详细说明："><a href="#详细说明：" class="headerlink" title="详细说明："></a>详细说明：</h4><p>图片来自网络：<a href="https://www.jianshu.com/p/52cd2d514528" target="_blank" rel="external">https://www.jianshu.com/p/52cd2d514528</a></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/1638147-aaca19cbcaa1ff9d.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">由上图可以看出Student1、Student2经过flatMap后，按顺序依次经历了Observable1、Observable2，分别转化为Course。</div><div class="line">最后按顺序得到Course1、Course2、Course3、Course4、Course5、Course6，</div><div class="line">其中1-3由Student1得到，4-6由Student2得到。</div></pre></td></tr></table></figure>
<p>我个人是在看到如上的配图+文字说明后，才恍然大悟的。</p>
<h3 id="3-concatMap-：有顺序性。同flatMap-相似"><a href="#3-concatMap-：有顺序性。同flatMap-相似" class="headerlink" title="3. concatMap() ：有顺序性。同flatMap()相似"></a>3. concatMap() ：有顺序性。同flatMap()相似</h3><p><img src="http://oy991qm3u.bkt.clouddn.com/concatMap.png" alt=""></p>
<h3 id="4-1-concat-多个数据源建立联系，one-by-one"><a href="#4-1-concat-多个数据源建立联系，one-by-one" class="headerlink" title="4.1 concat() : 多个数据源建立联系，one by one"></a>4.1 concat() : 多个数据源建立联系，one by one</h3><blockquote>
<p>参考：<a href="https://www.jianshu.com/p/94c433057440" target="_blank" rel="external">https://www.jianshu.com/p/94c433057440</a></p>
</blockquote>
<p><img src="http://oy991qm3u.bkt.clouddn.com/concat.png" alt=""></p>
<p>官方图</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/1019822-fdfd3e889ea30b34.png" alt=""></p>
<p>网络图：多个数据源一个接一个的连接成为一个数据源</p>
<p><strong>注意：</strong><br> 在使用此方法时，需要搭配<code>onComplete()</code> 或者 <code>onError()</code>。否则，最终返回的结果只能是第一个数据请求得到的结果。</p>
<p><strong>使用场景：</strong></p>
<ul>
<li>4.1 需要同时处理多个数据请求，最终需要将其作为一个统一的数据进行返回。</li>
<li>4.2 依次检查memory、disk和network中是否存在数据，任何一步一旦发现数据后面的操作都不执行。</li>
</ul>
<p><strong>搭配使用：</strong></p>
<ul>
<li><strong>first()</strong> : 请求多数据源时，<strong>只要有一个</strong>请求到数据（满足需求），即<strong>停止</strong>其他请求，动作。</li>
<li><strong>takeFirst()</strong> : 当请求多数据源时，<strong>所有</strong>的请求<strong>都没有数据</strong>时，为null时，不会报异常。</li>
</ul>
<p>示例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 信息1</span></div><div class="line">Observable&lt;Object&gt; oneOb = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Object&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Object&gt; subscriber)</span> </span>&#123;</div><div class="line">        String one = <span class="string">"商品信息1"</span>;</div><div class="line">        subscriber.onNext(one);</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(Schedulers.io());</div><div class="line"></div><div class="line"><span class="comment">// 信息2</span></div><div class="line">Observable&lt;Object&gt; twoOb = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Object&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Object&gt; subscriber)</span> </span>&#123;</div><div class="line">        String one = <span class="string">"这是艺术家的信息"</span>;</div><div class="line">        subscriber.onNext(one);</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(Schedulers.io());</div><div class="line"></div><div class="line"><span class="comment">// 信息3</span></div><div class="line">Observable&lt;Object&gt; threeOb = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Object&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Object&gt; subscriber)</span> </span>&#123;</div><div class="line">        Integer one = <span class="number">123</span>;</div><div class="line">        subscriber.onNext(one);</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(Schedulers.io());</div><div class="line"></div><div class="line"><span class="comment">// 信息汇总</span></div><div class="line">Observable.concat(oneOb, twoOb, threeOb).observeOn(AndroidSchedulers.mainThread()).subscribe(<span class="keyword">new</span> Action1&lt;Object&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"ヽ(｀Д´)ﾉ -&gt; call : "</span> + o.toString());</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 商品信息1</span></div><div class="line"><span class="comment"> * 这是艺术家的信息</span></div><div class="line"><span class="comment"> * 123</span></div><div class="line"><span class="comment"> */</span></div><div class="line"> </div><div class="line"> <span class="comment">// 只需要其中一个数据源有数据即可，即停止当前数据请求</span></div><div class="line"> Observable.concat(oneOb, twoOb, threeOb)</div><div class="line"> 	<span class="comment">// first()函数的使用</span></div><div class="line">        .first()</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Object&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"ヽ(｀Д´)ﾉ -&gt; call : "</span> + o.toString());</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 商品信息1</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure>
<h3 id="4-2-merge-合并"><a href="#4-2-merge-合并" class="headerlink" title="4.2 merge() 合并"></a>4.2 merge() 合并</h3><p><img src="http://oy991qm3u.bkt.clouddn.com/1019822-af11b153c1f5c67d.png" alt=""></p>
<h3 id="4-3-compose-组合"><a href="#4-3-compose-组合" class="headerlink" title="4.3 compose() 组合"></a>4.3 compose() 组合</h3><h3 id="5-zip-合并多个数据流，然后发送最终合并的数据。"><a href="#5-zip-合并多个数据流，然后发送最终合并的数据。" class="headerlink" title="5. zip() : 合并多个数据流，然后发送最终合并的数据。"></a>5. zip() : 合并多个数据流，然后发送最终合并的数据。</h3><blockquote>
<p>参考：<a href="http://blog.csdn.net/johnny901114/article/details/51614927" target="_blank" rel="external">http://blog.csdn.net/johnny901114/article/details/51614927</a></p>
</blockquote>
<p><img src="http://oy991qm3u.bkt.clouddn.com/zip.o.png" alt=""></p>
<p><strong>使用场景：</strong></p>
<p>在很多app种都会有图片上传的功能，比如商品的评价，客户端允许用户拍照上传(可能多张)，把图片上传到服务器，然后获取图片的url，再把图片的信息（图片url，图片大小）发送给服务器。</p>
<p>参考代码示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 1,先把所有的图片上传到又拍云（比如3张图片）</span></div><div class="line"><span class="comment"> * 2,获取图片的url路径，图片大小等</span></div><div class="line"><span class="comment"> * 3,最后把数据全部提交给服务器</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="comment">//需要上传的图片</span></div><div class="line">Picture[] ps = xxx;</div><div class="line">Observable.zip(</div><div class="line">        Observable.from(ps),</div><div class="line">        getUpYunAddress(ps.length),<span class="comment">//获取上传的url</span></div><div class="line">        <span class="keyword">new</span> Func2&lt;Picture, UpYunAddress, Picture&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Picture <span class="title">call</span><span class="params">(Picture picture, UpYunAddress upYunAddress)</span> </span>&#123;</div><div class="line">                <span class="comment">//如果该图片已经上传则不应该上传</span></div><div class="line">                <span class="keyword">if</span> (TextUtils.isEmpty(picture.getSource())) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        <span class="comment">//使用又拍云提供的工具类，上传图片</span></div><div class="line">                        String path = UpYunUtil.uploadImage(upYunAddress, picture.getLocalUrl());</div><div class="line">                        <span class="comment">//获取最终的url</span></div><div class="line">                        String finalUrl = upYunAddress.getPrefix() + path;</div><div class="line">                        picture.setSource(finalUrl);</div><div class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> picture;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        <span class="comment">//上传成功后获取图片大小</span></div><div class="line">        .flatMap(<span class="keyword">new</span> Func1&lt;Picture, Observable&lt;Picture&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;Picture&gt; <span class="title">call</span><span class="params">(Picture picture)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (TextUtils.isEmpty(picture.getHeight()) || TextUtils.isEmpty(picture.getWidth())) &#123;</div><div class="line">                    BitmapFactory.Options options;</div><div class="line">                    <span class="keyword">if</span> (!TextUtils.isEmpty(picture.getLocalUrl())) &#123;</div><div class="line">                        options = ImageUtil.getBitmapOptions(picture.getLocalUrl());</div><div class="line">                        picture.setLocalUrl(<span class="keyword">null</span>);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        options = ImageUtil.getBitmapOptions(picture.getSource());</div><div class="line">                    &#125;</div><div class="line">                    picture.setWidth(String.valueOf(options.outWidth));</div><div class="line">                    picture.setHeight(String.valueOf(options.outHeight));</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> Observable.just(picture);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//最后处理最终的数据。</span></div></pre></td></tr></table></figure>
<h3 id="4-filter-：集合进行过滤"><a href="#4-filter-：集合进行过滤" class="headerlink" title="4. filter() ：集合进行过滤"></a>4. filter() ：集合进行过滤</h3><h3 id="5-each-：遍历集合"><a href="#5-each-：遍历集合" class="headerlink" title="5. each() ：遍历集合"></a>5. each() ：遍历集合</h3><h3 id="6-take-：取出集合中的前几个"><a href="#6-take-：取出集合中的前几个" class="headerlink" title="6. take() ：取出集合中的前几个"></a>6. take() ：取出集合中的前几个</h3><h3 id="7-skip-：跳过前几个元素"><a href="#7-skip-：跳过前几个元素" class="headerlink" title="7. skip() ：跳过前几个元素"></a>7. skip() ：跳过前几个元素</h3>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[手势动画处理]]></title>
      <url>/%E6%89%8B%E5%8A%BF%E5%8A%A8%E7%94%BB%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考：<a href="https://developer.android.com/reference/android/view/MotionEvent.html" target="_blank" rel="external">https://developer.android.com/reference/android/view/MotionEvent.html</a></p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="相关的类"><a href="#相关的类" class="headerlink" title="相关的类"></a>相关的类</h1><ul>
<li><strong>MotionEvent</strong>类：存储触摸事件的信息</li>
<li><strong>VelocityTracker</strong>类：速度追踪类</li>
<li><strong>Gandroid.view.GestureDetector</strong> : 手势操作的识别类，通过他来使用下面的识别接口。</li>
<li><strong>android.view.GestureDetector.SimpleOnGestureListener</strong> : 手势识别的接口类，使用他可以按需重载自己想要的方法，方法多</li>
<li><strong>android.view.GestureDetector.OnGestureListener</strong> : 手势识别的类，SimpleOnGestureListener接口的父类。使用他需要实现他所有的方法。</li>
</ul>
<h1 id="Android事件响应机制"><a href="#Android事件响应机制" class="headerlink" title="Android事件响应机制"></a>Android事件响应机制</h1><p><strong>View.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span></span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span></span></div></pre></td></tr></table></figure>
<p><strong>ViewGroup.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span></span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span></span></div></pre></td></tr></table></figure>
<p><code>onTouchEvent</code>是真正用来进行业务逻辑处理的地方，返回true表示已经将该事件消费，返回false表明事件继续传递。</p>
<p><code>onInterceptTouchEvent</code>是用来进行判断是否需要对事件进行拦截从而阻止其继续往子组件传递的，返回false表示无需拦截，则递归的调用子组件的<code>dispatchTouchEvent</code>方法；返回true表示需要拦截，则直接调用本组件的onTouchEvent方法进行处理。</p>
<p>一般我们是在<code>View</code>的<code>onTouchEvent</code>方法中处理<code>MotionEvent</code>对象的.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span></span></div></pre></td></tr></table></figure>
<h1 id="1-概述：MotionEvent-用于报告移动事件对象"><a href="#1-概述：MotionEvent-用于报告移动事件对象" class="headerlink" title="1. 概述：MotionEvent 用于报告移动事件对象"></a>1. 概述：MotionEvent 用于报告移动事件对象</h1><ul>
<li>通过“<strong>动作代码</strong>” + “<strong>一组轴值</strong>”来描述运动。</li>
</ul>
<p><strong>动作代码</strong> ：发生的状态变化，如指针向下或向上<br><strong>一族轴值</strong> ：描述位置和其他运动属性</p>
<p>例如，当用户第一次触摸屏幕时，系统View通过动作代码ACTION_DOWN 和一组包含触摸的X和Y坐标的轴值以及关于触摸的压力，大小和方向的信息接触面积。</p>
<ul>
<li><strong>运动事件</strong> 与 <strong>指针</strong></li>
</ul>
<p>有些设备可以同时报告多个移动轨迹。多点触摸屏为每个手指发出一个<strong>运动轨迹</strong>。产生运动轨迹的<strong>各个手指</strong>或<strong>其他物体</strong>被称为<strong>指针</strong>。<strong>运动事件</strong>包含有关当前活动的<strong>所有指针</strong>的<strong>信息</strong>，即使其中一些指针自从上次事件发送以来尚未移动。除非手势被取消，否则指针的数目只会随着单个指针的上下而改变。</p>
<ul>
<li>指针 “<strong>ID</strong>” 与 “<strong>索引</strong>”</li>
</ul>
<p>每个<strong>指针</strong>都有一个<strong>唯一的标识</strong>，当它第一次出现时被分配（用ACTION_DOWNor 表示ACTION_POINTER_DOWN）。指针ID保持有效，直到指针最终上升（由ACTION_UP 或指示ACTION_POINTER_UP）或手势被取消（由指示 ACTION_CANCEL）。</p>
<p>所述MotionEvent类提供许多方法来<strong>查询</strong>位置和指针，如其他性质getX(int)，getY(int)，getAxisValue(int)， getPointerId(int)，getToolType(int)，和许多其他。大多数这些方法接受<strong>指针索引</strong>作为参数，而不是指针ID。事件中每个指针的指针索引的范围从0到1小于返回的值getPointerCount()。</p>
<p>单个指针在运动事件中出现的顺序是不确定的。因此，指针的指针索引可以从一个事件改变到下一个，但是只要指<strong>针保持活动状态</strong>，指针的<strong>指针ID就保证保持不变</strong>。使用该getPointerId(int)方法获取指针的指针ID，以在手势中的所有后续运动事件中跟踪指针。然后对于连续运动事件，使用该findPointerIndex(int)方法获取该运动事件中给定指针标识的指针索引。</p>
<ul>
<li><strong>坐标</strong></li>
</ul>
<p>使用<strong>最新</strong>的指针坐标 ：使用<strong>getX(int)</strong>和可以<strong>getY(int)</strong>。<br>使用<strong>较早</strong>坐标 ： 使用 <strong>getHistoricalX(int, int)</strong>和访问批次内的<strong>getHistoricalY(int, int)</strong>。<br>坐标是“历史的”，只要它们比批中的当前坐标更早; 然而，它们仍然不同于之前的动作事件中报告的任何其他坐标。要按时间顺序处理批次中的所有坐标，请先消耗历史坐标，然后消耗当前坐标。</p>
<ul>
<li><strong>设备类型</strong></li>
</ul>
<p>MotionEvent内容的解释根据设备的源类别而有很大的不同。</p>
<ul>
<li><strong>一致性保证</strong></li>
</ul>
<p>运动事件始终作为事件的一致性流传递给视图。什么构成一个一致的流取决于设备的类型。对于触摸事件来说，一致性意味着指针一次一个地下移，一个一个地移动，然后一次一个地移动或取消。</p>
<h1 id="2-静态内部类MotionEvent-PointerCoords-：传递对象的指针坐标。"><a href="#2-静态内部类MotionEvent-PointerCoords-：传递对象的指针坐标。" class="headerlink" title="2. 静态内部类MotionEvent.PointerCoords ：传递对象的指针坐标。"></a>2. 静态内部类MotionEvent.PointerCoords ：传递对象的指针坐标。</h1><h1 id="3-静态内部类MotionEvent-PointerProperties-：传递对象的指针属性。"><a href="#3-静态内部类MotionEvent-PointerProperties-：传递对象的指针属性。" class="headerlink" title="3. 静态内部类MotionEvent.PointerProperties ：传递对象的指针属性。"></a>3. 静态内部类MotionEvent.PointerProperties ：传递对象的指针属性。</h1><h1 id="4-主要常量"><a href="#4-主要常量" class="headerlink" title="4. 主要常量"></a>4. 主要常量</h1><p>ACTION_MASK : 作为动作本身的动作代码部分的位掩码</p>
<table>
<thead>
<tr>
<th style="text-align:left">常量 getActionMasked()</th>
<th style="text-align:center">非触摸事件，所以它被传递给 onGenericMotionEvent(MotionEvent)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ACTION_BUTTON_PRESS</td>
<td style="text-align:center">按钮已被按下。常量值：11（0x0000000b）</td>
</tr>
<tr>
<td style="text-align:left">ACTION_BUTTON_RELEASE</td>
<td style="text-align:center">一个按钮已被释放。常量值：12（0x0000000c）</td>
</tr>
<tr>
<td style="text-align:left">ACTION_HOVER_ENTER</td>
<td style="text-align:center">指针未关闭，但已经进入窗口或视图的边界。常量值：9（0x00000009）</td>
</tr>
<tr>
<td style="text-align:left">ACTION_HOVER_EXIT</td>
<td style="text-align:center">指针没有关闭，但已经退出了窗口或视图的边界。常量值：10（0x0000000a）</td>
</tr>
<tr>
<td style="text-align:left">ACTION_HOVER_MOVE</td>
<td style="text-align:center">发生了改变，但指针没有下降（不像ACTION_MOVE）常量值：7（0x00000007）</td>
</tr>
<tr>
<td style="text-align:left">ACTION_SCROLL</td>
<td style="text-align:center">运动事件包含相对垂直和/或水平滚动偏移。常量值：8（0x00000008）</td>
</tr>
</tbody>
</table>
<hr>
<table>
<thead>
<tr>
<th style="text-align:left">常量 getActionMasked()</th>
<th style="text-align:center">使用getButtonState()检索按钮状态</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ACTION_DOWN</td>
<td style="text-align:center">按下的手势已经开始，运动包含初始起始位置。常量值：0（0x00000000）</td>
</tr>
<tr>
<td style="text-align:left">ACTION_MOVE</td>
<td style="text-align:center">在按下手势期间（在ACTION_DOWN和之间ACTION_UP）发生改变。常数值：2（0x00000002）</td>
</tr>
<tr>
<td style="text-align:left">ACTION_UP</td>
<td style="text-align:center">按下的手势已经完成，常数值 : 1 (0x00000001)</td>
</tr>
<tr>
<td style="text-align:left">ACTION_CANCEL</td>
<td style="text-align:center">当前手势已被中止。如果父视图希望拦截其中的一些事件，不再继续转发事件给这个子视图的话，那么就需要给子视图一个ACTION_CANCEL事件。常数值 :  3 (0x00000003)</td>
</tr>
<tr>
<td style="text-align:left">ACTION_OUTSIDE</td>
<td style="text-align:center">移动发生在UI元素的正常界限之外。注意：由于任何事件的位置都将超出视图层次结构的范围，因此默认情况下不会将其分派给ViewGroup的任何子项。因此，ACTION_OUTSIDE的移动应该以根View或适当的方式Window.Callback （例如Activity或Dialog）来处理。常量值：4（0x00000004）</td>
</tr>
<tr>
<td style="text-align:left">ACTION_POINTER_DOWN</td>
<td style="text-align:center">非主指针已关闭</td>
</tr>
<tr>
<td style="text-align:left">ACTION_POINTER_UP</td>
<td style="text-align:center">非主指针已经上升。</td>
</tr>
<tr>
<td style="text-align:left">ACTION_POINTER_INDEX_MASK</td>
<td style="text-align:center">代表指针索引的动作代码中的位，与 ACTION_POINTER_DOWN和一起使用</td>
</tr>
<tr>
<td style="text-align:left">ACTION_POINTER_UP。</td>
<td style="text-align:center">非主指针已经上升。常量值：1（0x00000001）</td>
</tr>
<tr>
<td style="text-align:left">ACTION_POINTER_INDEX_SHIFT</td>
<td style="text-align:center">按照定义，保存指针索引的动作位的位移ACTION_POINTER_INDEX_MASK</td>
</tr>
</tbody>
</table>
<h1 id="5-主要公共方法"><a href="#5-主要公共方法" class="headerlink" title="5. 主要公共方法"></a>5. 主要公共方法</h1><table>
<thead>
<tr>
<th style="text-align:left">公共方法</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">getAction()</td>
<td style="text-align:center">返回正在执行的操作。</td>
</tr>
<tr>
<td style="text-align:left">getActionButton()</td>
<td style="text-align:center">获取在按下或释放操作期间哪个按钮已被修改。</td>
</tr>
<tr>
<td style="text-align:left">findPointerIndex(int pointerId)</td>
<td style="text-align:center">给定一个指针标识符，在事件中找到它的数据索引</td>
</tr>
<tr>
<td style="text-align:left">getActionIndex()</td>
<td style="text-align:center">对于ACTION_POINTER_DOWN或ACTION_POINTER_UP 作为返回getActionMasked()，这将返回关联的指针索引。</td>
</tr>
<tr>
<td style="text-align:left">getActionMasked()</td>
<td style="text-align:center">返回正在执行的被屏蔽的操作，没有指针索引信息。</td>
</tr>
<tr>
<td style="text-align:left">getDeviceId()</td>
<td style="text-align:center">获取此事件来自的设备的ID。</td>
</tr>
<tr>
<td style="text-align:left">getDownTime()</td>
<td style="text-align:center">返回用户最初按下时启动位置事件流的时间（以毫秒为单位）。</td>
</tr>
<tr>
<td style="text-align:left">getFlags()</td>
<td style="text-align:center">获取运动事件标志。</td>
</tr>
<tr>
<td style="text-align:left">getHistoricalEventTime(int pos)</td>
<td style="text-align:center">返回在此事件和上一个事件之间发生历史移动的uptimeMillis()时间。</td>
</tr>
<tr>
<td style="text-align:left">getHistoricalOrientation(int pointerIndex, int pos)</td>
<td style="text-align:center">根据getOrientation(int)在此事件与给定指针的上一个事件之间发生的历史方向坐标返回历史方向坐标。</td>
</tr>
<tr>
<td style="text-align:left">setSource(int source)</td>
<td style="text-align:center">修改事件的来源。</td>
</tr>
<tr>
<td style="text-align:left">setLocation(float x, float y)</td>
<td style="text-align:center">设置这个事件的位置。</td>
</tr>
<tr>
<td style="text-align:left">offsetLocation(float deltaX, float deltaY)</td>
<td style="text-align:center">调整此事件的位置。</td>
</tr>
<tr>
<td style="text-align:left">setAction(int action)</td>
<td style="text-align:center">设置此事件的操作。</td>
</tr>
<tr>
<td style="text-align:left">recycle()</td>
<td style="text-align:center">回收MotionEvent，以供稍后调用者重新使用。</td>
</tr>
<tr>
<td style="text-align:left">getYPrecision()</td>
<td style="text-align:center">返回正在报告的Y坐标的精度。</td>
</tr>
<tr>
<td style="text-align:left">getY(int pointerIndex)</td>
<td style="text-align:center">返回给定指针索引的此事件的Y坐标 （用于getPointerId(int)查找此索引的指针标识符）。</td>
</tr>
<tr>
<td style="text-align:left">getY()</td>
<td style="text-align:center">getY(int) 为第一个指针索引（可能是一个任意的指针标识符）。</td>
</tr>
<tr>
<td style="text-align:left">getRawY()</td>
<td style="text-align:center">返回此事件的原始Y坐标。</td>
</tr>
<tr>
<td style="text-align:left">getPressure(int pointerIndex)</td>
<td style="text-align:center">返回给定指针索引的此事件的当前压力 （用于getPointerId(int)查找此索引的指针标识符）。</td>
</tr>
<tr>
<td style="text-align:left">getSize(int pointerIndex)</td>
<td style="text-align:center">返回给定指针索引的近似大小的缩放值 （用于getPointerId(int)查找此索引的指针标识符）。</td>
</tr>
<tr>
<td style="text-align:left">getPointerCount()</td>
<td style="text-align:center">包含在这个事件中的数据指针的数量。</td>
</tr>
<tr>
<td style="text-align:left">getOrientation(int pointerIndex)</td>
<td style="text-align:center">返回给定指针索引（用于getPointerId(int)查找此索引的指针标识符）的触摸区域和工具区域的方向，从垂直方向顺时针旋转弧度。</td>
</tr>
<tr>
<td style="text-align:left">getSource()</td>
<td style="text-align:center">获取事件的来源。</td>
</tr>
</tbody>
</table>
<h1 id="6-事件坐标的含义"><a href="#6-事件坐标的含义" class="headerlink" title="6. 事件坐标的含义"></a>6. 事件坐标的含义</h1><ul>
<li>getX()和getY()：由这两个函数获得的x,y值是相对的坐标值，相对于消费这个事件的视图的左上点的坐标。</li>
<li>getRawX()和getRawY():有这两个函数获得的x,y值是绝对坐标，是相对于屏幕的。</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/623378-f45e4c2e22f0e8aa.png" alt=""></p>
<p>相对坐标与绝对坐标</p>
<h1 id="7-事件类型"><a href="#7-事件类型" class="headerlink" title="7. 事件类型"></a>7. 事件类型</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> action = MotionEventCompat.getActionMasked(event);</div><div class="line">   <span class="keyword">switch</span>(action) &#123;</div><div class="line">       <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">       <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">       <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h1 id="8-Pointer"><a href="#8-Pointer" class="headerlink" title="8. Pointer"></a>8. Pointer</h1><p>为了可以表示多个触摸点的动作，MotionEvent中引入了Pointer的概念，一个pointer就代表一个触摸点，每个pointer都有自己的事件类型，也有自己的横轴坐标值。一个MotionEvent对象中可能会存储多个pointer的相关信息，每个pointer都会有一个自己的id和index。pointer的id在整个事件流中是不会发生变化的，但是index会发生变化。</p>
<p>MotionEvent类中的很多方法都是可以传入一个int值作为参数的，其实传入的就是pointer的index值。比如getX(pointerIndex)和getY(pointerIndex)，此时，它们返回的就是index所代表的触摸点相关事件坐标值。</p>
<p>由于pointer的index值在不同的MotionEvent对象中会发生变化，但是id值却不会变化。所以，当我们要记录一个触摸点的事件流时，就只需要保存其id,然后使用findPointerIndex(int)来获得其index值，然后再获得其他信息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> INVALID_ID = -<span class="number">1</span>;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">int</span> mActivePointerId = INVALID_ID;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">int</span> mSecondaryPointerId = INVALID_ID;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">float</span> mPrimaryLastX = -<span class="number">1</span>;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">float</span> mPrimaryLastY = -<span class="number">1</span>;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">float</span> mSecondaryLastX = -<span class="number">1</span>;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">float</span> mSecondaryLastY = -<span class="number">1</span>;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> action = MotionEventCompat.getActionMasked(event);</div><div class="line"></div><div class="line">       <span class="keyword">switch</span> (action) &#123;</div><div class="line">           <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">               <span class="keyword">int</span> index = event.getActionIndex();</div><div class="line">               mActivePointerId = event.getPointerId(index);</div><div class="line">               mPrimaryLastX = MotionEventCompat.getX(event,index);</div><div class="line">               mPrimaryLastY = MotionEventCompat.getY(event,index);</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> MotionEvent.ACTION_POINTER_DOWN:</div><div class="line">               <span class="keyword">int</span> index = event.getActionIndex();</div><div class="line">               mSecondaryPointerId = event.getPointerId(index);</div><div class="line">               mSecondaryLastX = event.getX(index);</div><div class="line">               mSecondaryLastY = event.getY(index);</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">               <span class="keyword">int</span> index = event.findPointerIndex(mActivePointerId);</div><div class="line">               <span class="keyword">int</span> secondaryIndex = MotionEventCompat.findPointerIndex(event,mSecondaryPointerId);</div><div class="line">               <span class="keyword">final</span> <span class="keyword">float</span> x = MotionEventCompat.getX(event,index);</div><div class="line">               <span class="keyword">final</span> <span class="keyword">float</span> y = MotionEventCompat.getY(event,index);</div><div class="line">               <span class="keyword">final</span> <span class="keyword">float</span> secondX = MotionEventCompat.getX(event,secondaryIndex);</div><div class="line">               <span class="keyword">final</span> <span class="keyword">float</span> secondY = MotionEventCompat.getY(event,secondaryIndex);</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> MotionEvent.ACTION_POINTER_UP:</div><div class="line">               xxxxxx(涉及pointer id的转换，之后的文章会讲解)</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">           <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</div><div class="line">               mActivePointerId = INVALID_ID;</div><div class="line">               mPrimaryLastX =-<span class="number">1</span>;</div><div class="line">               mPrimaryLastY = -<span class="number">1</span>;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>除了pointer的概念，MotionEvent还引入了两个事件类型：</p>
<ul>
<li>ACTION_POINTER_DOWN:代表用户又使用一个手指触摸到屏幕上，也就是说，在已经有一个触摸点的情况下，有新出现了一个触摸点。</li>
<li>ACTION_POINTER_UP:代表用户的一个手指离开了触摸屏，但是还有其他手指还在触摸屏上。也就是说，在多个触摸点存在的情况下，其中一个触摸点消失了。它与ACTION_UP的区别就是，它是在多个触摸点中的一个触摸点消失时（此时，还有触摸点存在，也就是说用户还有手指触摸屏幕）产生，而ACTION_UP可以说是最后一个触摸点消失时产生。</li>
</ul>
<p>那么，用户先两个手指先后接触屏幕，同时滑动，然后在先后离开这一套动作所产生的事件流是什么样的呢？它所产生的事件流如下：</p>
<ul>
<li>先产生一个ACTION_DOWN事件，代表用户的第一个手指接触到了屏幕。</li>
<li>再产生一个ACTION_POINTER_DOWN事件，代表用户的第二个手指接触到了屏幕。<br>很多的ACTION_MOVE事件，但是在这些MotionEvent对象中，都保存着两个触摸点滑动的信息</li>
<li>一个ACTION_POINTER_UP事件，代表用户的一个手指离开了屏幕。<br>如果用户剩下的手指还在滑动时，就会产生很多ACTION_MOVE事件。</li>
<li>一个ACTION_UP事件，代表用户的最后一个手指离开了屏幕</li>
</ul>
<h1 id="9-getAction-和-getActionMasked"><a href="#9-getAction-和-getActionMasked" class="headerlink" title="9. getAction 和 getActionMasked"></a>9. getAction 和 getActionMasked</h1><p>一个MotionEvent对象中可以包含多个触摸点的事件。当MotionEvent对象只包含一个触摸点的事件时，上边两个函数的结果是相同的，但是当包含多个触摸点时，二者的结果就不同啦。<br>getAction获得的int值是由pointer的index值和事件类型值组合而成的，而getActionWithMasked则只返回事件的类型值<br> 举个例子（注:假设了int中不同位所代表的含义，可能不是例子所中的前8位代表id,后8位代表事件类型）:
 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getAction() returns <span class="number">0x0105</span>.</div><div class="line">getActionMasked() will <span class="keyword">return</span> <span class="number">0x0005</span></div><div class="line">其中<span class="number">0x0100</span>就是pointer的index值。</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 使用频率较少的控件]]></title>
      <url>/Android%E4%BD%BF%E7%94%A8%E9%A2%91%E7%8E%87%E8%BE%83%E5%B0%91%E7%9A%84%E6%8E%A7%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>控件了解</p>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h1><h2 id="1-CheckedTextView-列表文字选择"><a href="#1-CheckedTextView-列表文字选择" class="headerlink" title="1.CheckedTextView - 列表文字选择"></a>1.CheckedTextView - 列表文字选择</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-05%2011.41.12.png" alt=""></p>
<blockquote>
<p>参考：<a href="http://blog.csdn.net/zouchengxufei/article/details/51029489" target="_blank" rel="external">http://blog.csdn.net/zouchengxufei/article/details/51029489</a></p>
</blockquote>
<h2 id="2-QuickContactBadge-联系人快捷标识"><a href="#2-QuickContactBadge-联系人快捷标识" class="headerlink" title="2.QuickContactBadge - 联系人快捷标识"></a>2.QuickContactBadge - 联系人快捷标识</h2><h2 id="3-Space-用于填充View组件中的间隙"><a href="#3-Space-用于填充View组件中的间隙" class="headerlink" title="3.Space - 用于填充View组件中的间隙"></a>3.Space - 用于填充View组件中的间隙</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/20161031093303568" alt=""></p>
<h2 id="4-SearchView-原生的搜索框控件"><a href="#4-SearchView-原生的搜索框控件" class="headerlink" title="4.SearchView - 原生的搜索框控件"></a>4.SearchView - 原生的搜索框控件</h2><blockquote>
<p>参考：<a href="http://blog.csdn.net/airsaid/article/details/51087226" target="_blank" rel="external">http://blog.csdn.net/airsaid/article/details/51087226</a><br>参考： <a href="https://www.cnblogs.com/LT5505/p/5534357.html" target="_blank" rel="external">https://www.cnblogs.com/LT5505/p/5534357.html</a></p>
</blockquote>
<h2 id="5-ExpandableListView-显示二级节点的ListView"><a href="#5-ExpandableListView-显示二级节点的ListView" class="headerlink" title="5.ExpandableListView - 显示二级节点的ListView"></a>5.ExpandableListView - 显示二级节点的ListView</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/261527001568685.jpg" alt=""></p>
<blockquote>
<p>参考：<a href="https://www.cnblogs.com/hebao0514/p/4760939.html" target="_blank" rel="external">https://www.cnblogs.com/hebao0514/p/4760939.html</a></p>
</blockquote>
<h2 id="6-Chronometer-一个计时器-用来记录用户进行某项操作所消耗的时间"><a href="#6-Chronometer-一个计时器-用来记录用户进行某项操作所消耗的时间" class="headerlink" title="6.Chronometer - 一个计时器,用来记录用户进行某项操作所消耗的时间"></a>6.Chronometer - 一个计时器,用来记录用户进行某项操作所消耗的时间</h2><blockquote>
<p>参考：<a href="https://www.cnblogs.com/xianfeng-zhang/p/8110053.html" target="_blank" rel="external">https://www.cnblogs.com/xianfeng-zhang/p/8110053.html</a><br>参考：<a href="http://blog.csdn.net/mengweiqi33/article/details/76903986" target="_blank" rel="external">http://blog.csdn.net/mengweiqi33/article/details/76903986</a></p>
</blockquote>
<h3 id="6-1-CountDownTimer-倒计时"><a href="#6-1-CountDownTimer-倒计时" class="headerlink" title="6.1 CountDownTimer - 倒计时"></a>6.1 CountDownTimer - 倒计时</h3><blockquote>
<p><a href="https://www.jianshu.com/p/3c10432a4726" target="_blank" rel="external">https://www.jianshu.com/p/3c10432a4726</a></p>
</blockquote>
<h2 id="7-TextClock-显示时间"><a href="#7-TextClock-显示时间" class="headerlink" title="7.TextClock - 显示时间"></a>7.TextClock - 显示时间</h2><blockquote>
<p>参考：<a href="http://blog.csdn.net/EthanCo/article/details/72829656" target="_blank" rel="external">http://blog.csdn.net/EthanCo/article/details/72829656</a></p>
</blockquote>
<h2 id="8-ImageSwitcher-图像切换器"><a href="#8-ImageSwitcher-图像切换器" class="headerlink" title="8.ImageSwitcher - 图像切换器"></a>8.ImageSwitcher - 图像切换器</h2><blockquote>
<p>参考：<a href="http://blog.csdn.net/android_gjw/article/details/51759499" target="_blank" rel="external">http://blog.csdn.net/android_gjw/article/details/51759499</a><br>参考：<a href="https://www.cnblogs.com/scetopcsa/p/3695272.html" target="_blank" rel="external">https://www.cnblogs.com/scetopcsa/p/3695272.html</a></p>
</blockquote>
<h2 id="9-AdapterViewFlipper-显示上一个、下一个view"><a href="#9-AdapterViewFlipper-显示上一个、下一个view" class="headerlink" title="9.AdapterViewFlipper - 显示上一个、下一个view"></a>9.AdapterViewFlipper - 显示上一个、下一个view</h2><blockquote>
<p>参考：<a href="http://blog.csdn.net/yan8024/article/details/46879867" target="_blank" rel="external">http://blog.csdn.net/yan8024/article/details/46879867</a></p>
</blockquote>
<h2 id="10-StackView-卡片堆叠"><a href="#10-StackView-卡片堆叠" class="headerlink" title="10.StackView - 卡片堆叠"></a>10.StackView - 卡片堆叠</h2><blockquote>
<p>参考：<a href="http://blog.csdn.net/qq_16628781/article/details/49308355" target="_blank" rel="external">http://blog.csdn.net/qq_16628781/article/details/49308355</a><br>参考：<a href="http://blog.csdn.net/Small_Lee/article/details/51544975" target="_blank" rel="external">http://blog.csdn.net/Small_Lee/article/details/51544975</a></p>
</blockquote>
<h2 id="11-TextSwitcher-文字切换"><a href="#11-TextSwitcher-文字切换" class="headerlink" title="11.TextSwitcher - 文字切换"></a>11.TextSwitcher - 文字切换</h2><blockquote>
<p>参考：<a href="http://blog.csdn.net/bsmmaoshenbo/article/details/61198996" target="_blank" rel="external">http://blog.csdn.net/bsmmaoshenbo/article/details/61198996</a><br>参考：<a href="http://blog.csdn.net/u011418943/article/details/51871482" target="_blank" rel="external">http://blog.csdn.net/u011418943/article/details/51871482</a></p>
</blockquote>
<h2 id="12-ViewAnimator-View视图切换"><a href="#12-ViewAnimator-View视图切换" class="headerlink" title="12.ViewAnimator - View视图切换"></a>12.ViewAnimator - View视图切换</h2><blockquote>
<p>参考：<a href="http://www.jizhuomi.com/android/course/312.html" target="_blank" rel="external">http://www.jizhuomi.com/android/course/312.html</a><br>参考：<a href="http://blog.csdn.net/lgy64422575/article/details/50255657" target="_blank" rel="external">http://blog.csdn.net/lgy64422575/article/details/50255657</a></p>
</blockquote>
<h2 id="13-ViewFlipper-循环滚动的效果"><a href="#13-ViewFlipper-循环滚动的效果" class="headerlink" title="13.ViewFlipper - 循环滚动的效果"></a>13.ViewFlipper - 循环滚动的效果</h2><blockquote>
<p>参考：<a href="http://blog.csdn.net/u011150924/article/details/60867499" target="_blank" rel="external">http://blog.csdn.net/u011150924/article/details/60867499</a><br>参考：<a href="http://blog.csdn.net/qq_31715429/article/details/50972357" target="_blank" rel="external">http://blog.csdn.net/qq_31715429/article/details/50972357</a></p>
</blockquote>
<h2 id="14-include、merge-、ViewStub-布局优化"><a href="#14-include、merge-、ViewStub-布局优化" class="headerlink" title="14.include、merge 、ViewStub - 布局优化"></a>14.include、merge 、ViewStub - 布局优化</h2><blockquote>
<p>参考：<a href="http://blog.csdn.net/xyz_lmn/article/details/14524567" target="_blank" rel="external">http://blog.csdn.net/xyz_lmn/article/details/14524567</a></p>
</blockquote>
<h2 id="15-SurfaceView与TextureView"><a href="#15-SurfaceView与TextureView" class="headerlink" title="15.SurfaceView与TextureView"></a>15.SurfaceView与TextureView</h2><blockquote>
<p>参考：<a href="http://blog.csdn.net/hejjunlin/article/details/58582919" target="_blank" rel="external">http://blog.csdn.net/hejjunlin/article/details/58582919</a></p>
</blockquote>
<h2 id="16-NumberPicker-数字选择器"><a href="#16-NumberPicker-数字选择器" class="headerlink" title="16.NumberPicker - 数字选择器"></a>16.NumberPicker - 数字选择器</h2><blockquote>
<p>参考：<a href="https://www.cnblogs.com/xiaofeixiang/p/4125560.html" target="_blank" rel="external">https://www.cnblogs.com/xiaofeixiang/p/4125560.html</a><br>参考：<a href="https://www.2cto.com/kf/201407/320686.html" target="_blank" rel="external">https://www.2cto.com/kf/201407/320686.html</a></p>
</blockquote>
<h2 id="17-TextInputLayout-TextView容器"><a href="#17-TextInputLayout-TextView容器" class="headerlink" title="17.TextInputLayout - TextView容器"></a>17.TextInputLayout - TextView容器</h2><blockquote>
<p>参考：<a href="http://blog.csdn.net/q4878802/article/details/49780691" target="_blank" rel="external">http://blog.csdn.net/q4878802/article/details/49780691</a><br>参考：<a href="https://segmentfault.com/a/1190000009282096" target="_blank" rel="external">https://segmentfault.com/a/1190000009282096</a></p>
</blockquote>
<h2 id="18-GridView-宫格布局"><a href="#18-GridView-宫格布局" class="headerlink" title="18.GridView - 宫格布局"></a>18.GridView - 宫格布局</h2><blockquote>
<p><a href="http://blog.csdn.net/sinat_25926481/article/details/70880047" target="_blank" rel="external">http://blog.csdn.net/sinat_25926481/article/details/70880047</a></p>
</blockquote>
<h2 id="18-GridLayout-网格布局，平均分布"><a href="#18-GridLayout-网格布局，平均分布" class="headerlink" title="18.GridLayout - 网格布局，平均分布"></a>18.GridLayout - 网格布局，平均分布</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-05%2014.41.57.png" alt=""></p>
<blockquote>
<p>参考：<a href="http://blog.csdn.net/sunsteam/article/details/69486658" target="_blank" rel="external">http://blog.csdn.net/sunsteam/article/details/69486658</a><br>行划分：<a href="http://blog.csdn.net/huangxiaominglipeng/article/details/17448045" target="_blank" rel="external">http://blog.csdn.net/huangxiaominglipeng/article/details/17448045</a></p>
</blockquote>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-05%2014.47.23.png" alt=""></p>
<blockquote>
<p>具体示例：<a href="http://blog.csdn.net/yisizhu/article/details/51753003" target="_blank" rel="external">http://blog.csdn.net/yisizhu/article/details/51753003</a><br>主体、cell元素：<a href="http://blog.csdn.net/k316378085/article/details/52316633" target="_blank" rel="external">http://blog.csdn.net/k316378085/article/details/52316633</a></p>
</blockquote>
<h3 id="区分-GridView-与-GridLayout"><a href="#区分-GridView-与-GridLayout" class="headerlink" title="区分 GridView 与 GridLayout"></a>区分 GridView 与 GridLayout</h3><blockquote>
<p>参考：<a href="http://blog.csdn.net/studyboyjlu4/article/details/18192677" target="_blank" rel="external">http://blog.csdn.net/studyboyjlu4/article/details/18192677</a></p>
</blockquote>
<ul>
<li><p>GridView是一种适配器布局,它的继承关系是ViewGroup–&gt;AdapterView–&gt;AbsListView–&gt;GridView，他是从一个adapter中取出内容填充到GridView中的每一个子View。</p>
</li>
<li><p>GridLayout是一个布局，它大大简化了对复杂布局的处理，提高了性能。他直接继承自ViewGroup，和LinearLayout这种是类似的。</p>
</li>
</ul>
<h3 id="区分-GridView-与-GridLayout-与-TableLayout"><a href="#区分-GridView-与-GridLayout-与-TableLayout" class="headerlink" title="区分 GridView 与 GridLayout 与 TableLayout"></a>区分 GridView 与 GridLayout 与 TableLayout</h3><blockquote>
<p>参考：<a href="http://blog.csdn.net/shareus/article/details/52063761" target="_blank" rel="external">http://blog.csdn.net/shareus/article/details/52063761</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 控件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Google Zxing包 二维码的使用]]></title>
      <url>/Google%20Zxing%E5%8C%85%20%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>二维码的：生成、使用</p>
<a id="more"></a>
<blockquote>
<p>集成参考：<a href="http://blog.csdn.net/u012702547/article/details/51501350" target="_blank" rel="external">http://blog.csdn.net/u012702547/article/details/51501350</a><br>Zxing包地址：<a href="https://github.com/zxing/zxing" target="_blank" rel="external">https://github.com/zxing/zxing</a><br>生成二维码jar包地址：<a href="http://central.maven.org/maven2/com/google/zxing/core/3.2.1/core-3.2.1.jar" target="_blank" rel="external">http://central.maven.org/maven2/com/google/zxing/core/3.2.1/core-3.2.1.jar</a><br>操作参考：<a href="https://www.jianshu.com/p/b275e818de6a" target="_blank" rel="external">https://www.jianshu.com/p/b275e818de6a</a></p>
</blockquote>
<p>[TOC]</p>
<h1 id="ZXing简介："><a href="#ZXing简介：" class="headerlink" title="ZXing简介："></a>ZXing简介：</h1><p><a href="https://github.com/zxing/zxing" target="_blank" rel="external">https://github.com/zxing/zxing</a><br><strong>ZXing全称zebra crossing,翻译过来就是『斑马线』的意思。ZXing是一个采用Java实现的、开源的、支持多格式（一维/二维）的条形码图像处理库。</strong>QRCode（Quick Response Code：快速响应码）是二维条形码中最常用的一种格式，所以很多人直接将QRCode翻译为二维码。</p>
<h1 id="集成方式1：添加二维码生成jar包"><a href="#集成方式1：添加二维码生成jar包" class="headerlink" title="集成方式1：添加二维码生成jar包"></a>集成方式1：添加二维码生成jar包</h1><p>在项目中的位置：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-05%2010.31.34.png" alt=""></p>
<h1 id="集成方式2：引用"><a href="#集成方式2：引用" class="headerlink" title="集成方式2：引用"></a>集成方式2：引用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ......</div><div class="line">    compile &apos;com.google.zxing:core:3.3.0&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="工具类中的要点："><a href="#工具类中的要点：" class="headerlink" title="工具类中的要点："></a>工具类中的要点：</h1><ul>
<li><p>字符集：</p>
<p>  ZXing源码默认使用的是”ISO-8859-1”，而”ISO-8859-1”本身是不支持中文的。<br>  如果url中包含中文，字符集最好选用”UTF-8”。</p>
</li>
<li><p>容错级别：</p>
<p>  二维码图片有时出现部分缺失（或破损）也能扫描成功；我们近距离扫二维码时，图形还没扫全就提示扫描成功了；有些二维码中间贴了一个小图标，扫码也能成功……这其实都归功于二维码有很强大的容错性。</p>
</li>
</ul>
<h1 id="生成工具类"><a href="#生成工具类" class="headerlink" title="生成工具类"></a>生成工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZxingQRUtil</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 创建二维码位图</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> content 字符串内容</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> size 位图宽&amp;高(单位:px)</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createQRCodeBitmap</span><span class="params">(@Nullable String content, <span class="keyword">int</span> size)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> createQRCodeBitmap(content, size, <span class="string">"UTF-8"</span>, <span class="string">"H"</span>, <span class="string">"4"</span>, Color.BLACK, Color.WHITE, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0F</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 创建二维码位图 (自定义黑、白色块颜色)</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> content 字符串内容</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> size 位图宽&amp;高(单位:px)</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> color_black 黑色色块的自定义颜色值</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> color_white 白色色块的自定义颜色值</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createQRCodeBitmap</span><span class="params">(@Nullable String content, <span class="keyword">int</span> size, @ColorInt <span class="keyword">int</span> color_black, @ColorInt <span class="keyword">int</span> color_white)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> createQRCodeBitmap(content, size, <span class="string">"UTF-8"</span>, <span class="string">"H"</span>, <span class="string">"4"</span>, color_black, color_white, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0F</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 创建二维码位图 (带Logo小图片)</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> content 字符串内容</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> size 位图宽&amp;高(单位:px)</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> logoBitmap logo图片</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> logoPercent logo小图片在二维码图片中的占比大小,范围[0F,1F]。超出范围-&gt;默认使用0.2F</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createQRCodeBitmap</span><span class="params">(String content, <span class="keyword">int</span> size, @Nullable Bitmap logoBitmap, <span class="keyword">float</span> logoPercent)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> createQRCodeBitmap(content, size, <span class="string">"UTF-8"</span>, <span class="string">"H"</span>, <span class="string">"4"</span>, Color.BLACK, Color.WHITE, <span class="keyword">null</span>, logoBitmap, logoPercent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 创建二维码位图 (Bitmap颜色代替黑色) 注意!!!注意!!!注意!!! 选用的Bitmap图片一定不能有白色色块,否则会识别不出来!!!</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> content 字符串内容</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> size 位图宽&amp;高(单位:px)</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> targetBitmap 目标图片 (如果targetBitmap != null, 黑色色块将会被该图片像素色值替代)</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createQRCodeBitmap</span><span class="params">(String content, <span class="keyword">int</span> size, Bitmap targetBitmap)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> createQRCodeBitmap(content, size, <span class="string">"UTF-8"</span>, <span class="string">"H"</span>, <span class="string">"4"</span>, Color.BLACK, Color.WHITE, targetBitmap, <span class="keyword">null</span>, <span class="number">0F</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 创建二维码位图 (支持自定义配置和自定义样式)</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> content 字符串内容</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> size 位图宽&amp;高(单位:px)</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> character_set 字符集/字符转码格式 。传null时,zxing源码默认使用 "ISO-8859-1"</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> error_correction 容错级别 。传null时,zxing源码默认使用 "L"</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> margin 空白边距 (可修改,要求:整型且&gt;=0), 传null时,zxing源码默认使用"4"。</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> color_black 黑色色块的自定义颜色值</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> color_white 白色色块的自定义颜色值</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> targetBitmap 目标图片 (如果targetBitmap != null, 黑色色块将会被该图片像素色值替代)</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> logoBitmap logo小图片</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> logoPercent logo小图片在二维码图片中的占比大小,范围[0F,1F],超出范围-&gt;默认使用0.2F。</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createQRCodeBitmap</span><span class="params">(@Nullable String content, <span class="keyword">int</span> size,</span></span></div><div class="line"><span class="function"><span class="params">                                            @Nullable String character_set, @Nullable String error_correction, @Nullable String margin,</span></span></div><div class="line"><span class="function"><span class="params">                                            @ColorInt <span class="keyword">int</span> color_black, @ColorInt <span class="keyword">int</span> color_white, @Nullable Bitmap targetBitmap,</span></span></div><div class="line"><span class="function"><span class="params">                                            @Nullable Bitmap logoBitmap, <span class="keyword">float</span> logoPercent)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">/** 1.参数合法性判断 */</span></div><div class="line">        <span class="comment">// 字符串内容判空</span></div><div class="line">        <span class="keyword">if</span>(TextUtils.isEmpty(content))&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 宽&amp;高都需要&gt;0</span></div><div class="line">        <span class="keyword">if</span>(size &lt;= <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">/** 2.设置二维码相关配置,生成BitMatrix(位矩阵)对象 */</span></div><div class="line">            Hashtable&lt;EncodeHintType, String&gt; hints = <span class="keyword">new</span> Hashtable&lt;&gt;();</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(!TextUtils.isEmpty(character_set)) &#123;</div><div class="line">                <span class="comment">// 字符转码格式设置</span></div><div class="line">                hints.put(EncodeHintType.CHARACTER_SET, character_set);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(!TextUtils.isEmpty(error_correction))&#123;</div><div class="line">                <span class="comment">// 容错级别设置</span></div><div class="line">                hints.put(EncodeHintType.ERROR_CORRECTION, error_correction);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(!TextUtils.isEmpty(margin))&#123;</div><div class="line">                <span class="comment">// 空白边距设置</span></div><div class="line">                hints.put(EncodeHintType.MARGIN, margin);</div><div class="line">            &#125;</div><div class="line">            BitMatrix bitMatrix = <span class="keyword">new</span> QRCodeWriter().encode(content, BarcodeFormat.QR_CODE, size, size, hints);</div><div class="line"></div><div class="line">            <span class="comment">/** 3.根据BitMatrix(位矩阵)对象为数组元素赋颜色值 */</span></div><div class="line">            <span class="keyword">if</span>(targetBitmap != <span class="keyword">null</span>)&#123;</div><div class="line">                targetBitmap = Bitmap.createScaledBitmap(targetBitmap, size, size, <span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span>[] pixels = <span class="keyword">new</span> <span class="keyword">int</span>[size * size];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; size; y++)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; size; x++)&#123;</div><div class="line">                    <span class="keyword">if</span>(bitMatrix.get(x, y))&#123;</div><div class="line">                        <span class="comment">// 黑色色块像素设置</span></div><div class="line">                        <span class="keyword">if</span>(targetBitmap != <span class="keyword">null</span>) &#123;</div><div class="line">                            pixels[y * size + x] = targetBitmap.getPixel(x, y);</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            pixels[y * size + x] = color_black;</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="comment">// 白色色块像素设置</span></div><div class="line">                        pixels[y * size + x] = color_white;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">/** 4.创建Bitmap对象,根据像素数组设置Bitmap每个像素点的颜色值,之后返回Bitmap对象 */</span></div><div class="line">            Bitmap bitmap = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);</div><div class="line">            bitmap.setPixels(pixels, <span class="number">0</span>, size, <span class="number">0</span>, <span class="number">0</span>, size, size);</div><div class="line"></div><div class="line">            <span class="comment">/** 5.为二维码添加logo小图标 */</span></div><div class="line">            <span class="keyword">if</span>(logoBitmap != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">return</span> addLogo(bitmap, logoBitmap, logoPercent);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> bitmap;</div><div class="line">        &#125; <span class="keyword">catch</span> (WriterException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 向一张图片中间添加logo小图片(图片合成)</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> srcBitmap 原图片</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> logoBitmap logo图片</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> logoPercent 百分比 (用于调整logo图片在原图片中的显示大小, 取值范围[0,1], 传值不合法时使用0.2F)</span></div><div class="line"><span class="comment">     *                    原图片是二维码时,建议使用0.2F,百分比过大可能导致二维码扫描失败。</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Bitmap <span class="title">addLogo</span><span class="params">(@Nullable Bitmap srcBitmap, @Nullable Bitmap logoBitmap, <span class="keyword">float</span> logoPercent)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">/** 1. 参数合法性判断 */</span></div><div class="line">        <span class="keyword">if</span>(srcBitmap == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(logoBitmap == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> srcBitmap;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(logoPercent &lt; <span class="number">0F</span> || logoPercent &gt; <span class="number">1F</span>)&#123;</div><div class="line">            logoPercent = <span class="number">0.2F</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/** 2. 获取原图片和Logo图片各自的宽、高值 */</span></div><div class="line">        <span class="keyword">int</span> srcWidth = srcBitmap.getWidth();</div><div class="line">        <span class="keyword">int</span> srcHeight = srcBitmap.getHeight();</div><div class="line">        <span class="keyword">int</span> logoWidth = logoBitmap.getWidth();</div><div class="line">        <span class="keyword">int</span> logoHeight = logoBitmap.getHeight();</div><div class="line"></div><div class="line">        <span class="comment">/** 3. 计算画布缩放的宽高比 */</span></div><div class="line">        <span class="keyword">float</span> scaleWidth = srcWidth * logoPercent / logoWidth;</div><div class="line">        <span class="keyword">float</span> scaleHeight = srcHeight * logoPercent / logoHeight;</div><div class="line"></div><div class="line">        <span class="comment">/** 4. 使用Canvas绘制,合成图片 */</span></div><div class="line">        Bitmap bitmap = Bitmap.createBitmap(srcWidth, srcHeight, Bitmap.Config.ARGB_8888);</div><div class="line">        Canvas canvas = <span class="keyword">new</span> Canvas(bitmap);</div><div class="line">        canvas.drawBitmap(srcBitmap, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>);</div><div class="line">        canvas.scale(scaleWidth, scaleHeight, srcWidth/<span class="number">2</span>, srcHeight/<span class="number">2</span>);</div><div class="line">        canvas.drawBitmap(logoBitmap, srcWidth/<span class="number">2</span> - logoWidth/<span class="number">2</span>, srcHeight/<span class="number">2</span> - logoHeight/<span class="number">2</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> bitmap;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 二维码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kit]]></title>
      <url>/Kit/</url>
      <content type="html"><![CDATA[<p>零散工具</p>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="常用总结"><a href="#常用总结" class="headerlink" title="常用总结"></a>常用总结</h1><h2 id="0-Android屏幕适配"><a href="#0-Android屏幕适配" class="headerlink" title="0. Android屏幕适配"></a>0. Android屏幕适配</h2><blockquote>
<p>参考：<a href="https://www.jianshu.com/p/ec5a1a30694b" target="_blank" rel="external">https://www.jianshu.com/p/ec5a1a30694b</a></p>
</blockquote>
<h2 id="1-String-类的replace方法替换字符串“无效”、“不起作用”原因l"><a href="#1-String-类的replace方法替换字符串“无效”、“不起作用”原因l" class="headerlink" title="1. String 类的replace方法替换字符串“无效”、“不起作用”原因l"></a>1. String 类的<code>replace方法</code>替换字符串“无效”、“不起作用”原因l</h2><blockquote>
<p>参考： <a href="http://blog.csdn.net/huqingpeng321/article/details/52915324" target="_blank" rel="external">http://blog.csdn.net/huqingpeng321/article/details/52915324</a></p>
</blockquote>
<p><img src="http://oy991qm3u.bkt.clouddn.com/20161024205117384.png" alt=""></p>
<p>没有特殊字符的话，则返回的是同一个对象的引用；若出现特殊字符，则new一个新的对象,替换之前的对象。</p>
<h3 id="实际使用："><a href="#实际使用：" class="headerlink" title="实际使用："></a>实际使用：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// 存储待遍历img地址</div><div class="line">List&lt;String&gt; array = MatchHtmlValue.match(tempHtml,&quot;img&quot;, &quot;src&quot;);</div><div class="line">StringBuilder builder = new StringBuilder();</div><div class="line">// 执行遍历</div><div class="line">for (int i = 0; i &lt; array.size(); i++) &#123;</div><div class="line">    String oldHtmlVal = array.get(i);</div><div class="line">    String newHtmlVal = MyCommon.URL_BASE_IMG + array.get(i);</div><div class="line">    // ！！！ 此处执行替换时必须重新生成一个新的String串</div><div class="line">    builder.append(tempHtml.replace(oldHtmlVal,newHtmlVal));</div><div class="line">&#125;</div><div class="line">// 字符串拼接</div><div class="line">html.append(&quot;联系电话为：&quot; + tel);</div><div class="line">html.append(builder);</div><div class="line">                *//*html.append(getServerInfo.getData().getDesc().replace(&quot;/public/upload/20171213/31d2fd1460e2471bd0fbbb59689c9c50.png&quot;,&quot;http://192.168.31.178:8088/public/upload/20171213/31d2fd1460e2471bd0fbbb59689c9c50.png&quot;));*//*</div><div class="line">Log.e(TAG, &quot;ヽ(｀Д´)ﾉ -&gt; onSuccess tel : &quot; + tel + &quot;; \n html : &quot; + html);</div><div class="line">htmlStr = html.toString();</div><div class="line">CommonWebViewSets.setHtmlCode(mServerWebView,htmlStr);</div></pre></td></tr></table></figure>
<h2 id="2-通过正则表达式获取html标签中的指定属性值"><a href="#2-通过正则表达式获取html标签中的指定属性值" class="headerlink" title="2. 通过正则表达式获取html标签中的指定属性值"></a>2. 通过正则表达式获取html标签中的指定属性值</h2><blockquote>
<p>参考：<a href="http://blog.csdn.net/andybbc/article/details/50556668" target="_blank" rel="external">http://blog.csdn.net/andybbc/article/details/50556668</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class MatchHtmlElementAttrValue &#123;  </div><div class="line">      </div><div class="line">    /** </div><div class="line">     * 获取指定HTML标签的指定属性的值 </div><div class="line">     * @param source 要匹配的源文本 </div><div class="line">     * @param element 标签名称 </div><div class="line">     * @param attr 标签的属性名称 </div><div class="line">     * @return 属性值列表 </div><div class="line">     */  </div><div class="line">    public static List&lt;String&gt; match(String source, String element, String attr) &#123;  </div><div class="line">        List&lt;String&gt; result = new ArrayList&lt;String&gt;();  </div><div class="line">        String reg = &quot;&lt;&quot; + element + &quot;[^&lt;&gt;]*?\\s&quot; + attr + &quot;=[&apos;\&quot;]?(.*?)[&apos;\&quot;]?\\s.*?&gt;&quot;;  </div><div class="line">        Matcher m = Pattern.compile(reg).matcher(source);  </div><div class="line">        while (m.find()) &#123;  </div><div class="line">            String r = m.group(1);  </div><div class="line">            result.add(r);  </div><div class="line">        &#125;  </div><div class="line">        return result;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    public static void main(String[] args) &#123;  </div><div class="line">        String source = &quot;&lt;a title=中国体育报 href=&apos;&apos;&gt;aaa&lt;/a&gt;&lt;a title=&apos;北京日报&apos; href=&apos;&apos;&gt;bbb&lt;/a&gt;&quot;;  </div><div class="line">        List&lt;String&gt; list = match(source, &quot;a&quot;, &quot;title&quot;);  </div><div class="line">        System.out.println(list);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-Android-输入框与键盘之间的关系"><a href="#3-Android-输入框与键盘之间的关系" class="headerlink" title="3.Android 输入框与键盘之间的关系"></a>3.Android 输入框与键盘之间的关系</h2><p>为了不让键盘阻挡输入框，添加此配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line"><span class="tag">         <span class="attr">android:name</span>=<span class="string">"..."</span></span></div><div class="line"><span class="tag">         <span class="attr">android:windowSoftInputMode</span>=<span class="string">"adjustResize"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h2 id="4-TextView跑马灯效果"><a href="#4-TextView跑马灯效果" class="headerlink" title="4. TextView跑马灯效果"></a>4. TextView跑马灯效果</h2><ul>
<li><strong>在java文件中作出的修改</strong></li>
</ul>
<p>获取当前控件，将当前控件设置为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不设置这个属性,字体不会开始滚动</span></div><div class="line">tv.setSelected(<span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<ul>
<li><strong>在xml文件中作出的修改</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/myTextView"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"50dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">        </span></div><div class="line"><span class="tag">        <span class="attr">android:ellipsize</span>=<span class="string">"marquee"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:focusable</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:marqueeRepeatLimit</span>=<span class="string">"marquee_forever"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:singleLine</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">        </span></div><div class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"文本区域"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"@android:color/black"</span> &gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="5-账户相关属性正则表达式"><a href="#5-账户相关属性正则表达式" class="headerlink" title="5. 账户相关属性正则表达式"></a>5. 账户相关属性正则表达式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 账户相关属性验证工具</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountValidatorUtil</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 正则表达式：验证用户名</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEX_USERNAME = <span class="string">"^[a-zA-Z]\\w&#123;5,20&#125;$"</span>;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 正则表达式：验证密码</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEX_PASSWORD = <span class="string">"^[a-zA-Z0-9]&#123;6,20&#125;$"</span>;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 正则表达式：验证手机号</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEX_MOBILE = <span class="string">"^((17[0-9])|(14[0-9])|(13[0-9])|(15[^4,\\D])|(18[0,5-9]))\\d&#123;8&#125;$"</span>;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 正则表达式：验证邮箱</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEX_EMAIL = <span class="string">"^([a-z0-9A-Z]+[-|\\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-zA-Z]&#123;2,&#125;$"</span>;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 正则表达式：验证汉字</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEX_CHINESE = <span class="string">"^[\u4e00-\u9fa5],&#123;0,&#125;$"</span>;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 正则表达式：验证身份证</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEX_ID_CARD = <span class="string">"(^\\d&#123;18&#125;$)|(^\\d&#123;15&#125;$)"</span>;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 正则表达式：验证URL</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEX_URL = <span class="string">"http(s)?://([\\w-]+\\.)+[\\w-]+(/[\\w- ./?%&amp;=]*)?"</span>;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 正则表达式：验证IP地址</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEX_IP_ADDR = <span class="string">"(25[0-5]|2[0-4]\\d|[0-1]\\d&#123;2&#125;|[1-9]?\\d)"</span>;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 校验用户名</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 校验通过返回true，否则返回false</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Pattern.matches(REGEX_USERNAME, username);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 校验密码</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 校验通过返回true，否则返回false</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Pattern.matches(REGEX_PASSWORD, password);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 校验手机号</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> mobile</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 校验通过返回true，否则返回false</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMobile</span><span class="params">(String mobile)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Pattern.matches(REGEX_MOBILE, mobile);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 校验邮箱</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> email</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 校验通过返回true，否则返回false</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEmail</span><span class="params">(String email)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Pattern.matches(REGEX_EMAIL, email);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 校验汉字</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> chinese</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 校验通过返回true，否则返回false</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isChinese</span><span class="params">(String chinese)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Pattern.matches(REGEX_CHINESE, chinese);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 校验身份证</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> idCard</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 校验通过返回true，否则返回false</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isIDCard</span><span class="params">(String idCard)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Pattern.matches(REGEX_ID_CARD, idCard);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 校验URL</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 校验通过返回true，否则返回false</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isUrl</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Pattern.matches(REGEX_URL, url);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 校验IP地址</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> ipAddr</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isIPAddr</span><span class="params">(String ipAddr)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Pattern.matches(REGEX_IP_ADDR, ipAddr);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-将多次Toast弹出改为一次弹出"><a href="#6-将多次Toast弹出改为一次弹出" class="headerlink" title="6. 将多次Toast弹出改为一次弹出"></a>6. 将多次Toast弹出改为一次弹出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Toast toast;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showToast</span><span class="params">(Context context, </span></span></div><div class="line"><span class="function"><span class="params">        String content)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (toast == <span class="keyword">null</span>) &#123;</div><div class="line">            toast = Toast.makeText(context,</div><div class="line">                         content, </div><div class="line">                         Toast.LENGTH_SHORT);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            toast.setText(content);</div><div class="line">        &#125;</div><div class="line">        toast.show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Util.showToast(context, <span class="string">"things happened"</span>);</div></pre></td></tr></table></figure>
<h2 id="7-数据-转-json"><a href="#7-数据-转-json" class="headerlink" title="7. 数据 转 json"></a>7. 数据 转 json</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//生成Json对象</span></div><div class="line">Gson gson = <span class="keyword">new</span> Gson();</div><div class="line">String valueDateJson = gson.toJson(dataBean.getData());</div></pre></td></tr></table></figure>
<h2 id="7-关于-时间-与-时间戳"><a href="#7-关于-时间-与-时间戳" class="headerlink" title="7. 关于 时间 与 时间戳"></a>7. 关于 时间 与 时间戳</h2><h3 id="7-1-js中时间戳转换为时间"><a href="#7-1-js中时间戳转换为时间" class="headerlink" title="7.1 js中时间戳转换为时间"></a>7.1 js中时间戳转换为时间</h3><blockquote>
<p>参考：<a href="https://www.cnblogs.com/sufei/archive/2012/12/03/2799480.html" target="_blank" rel="external">https://www.cnblogs.com/sufei/archive/2012/12/03/2799480.html</a><br>参考：<a href="https://www.cnblogs.com/mr-wuxiansheng/p/6296646.html" target="_blank" rel="external">https://www.cnblogs.com/mr-wuxiansheng/p/6296646.html</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLocalTime</span>(<span class="params">nS</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(nS) * <span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">now</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> year = now.getFullYear(),</div><div class="line">        month = now.getMonth() + <span class="number">1</span>,</div><div class="line">        date = now.getDate();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> year + <span class="string">"-"</span> + month + <span class="string">"-"</span> + date;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(formatDate(getLocalTime(strData[i].addtime)));</div></pre></td></tr></table></figure>
<p>原始时间戳（示例）：1516165200<br>转换为时间（示例）：2018-01-17</p>
<h3 id="7-2-处理后的时间转换为时间戳"><a href="#7-2-处理后的时间转换为时间戳" class="headerlink" title="7.2 处理后的时间转换为时间戳"></a>7.2 处理后的时间转换为时间戳</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">strNew[<span class="number">0</span>] = year + <span class="string">"-"</span> + month + <span class="string">"-"</span> + day;</div><div class="line">Date date = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    date = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).parse(strNew[<span class="number">0</span>]);</div><div class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div><div class="line">unixTimestamp = date.getTime() / <span class="number">1000</span>;</div></pre></td></tr></table></figure>
<p><strong>关键：</strong> parse()</p>
<p>得到的时间：2018-01-17<br>处理后的时间戳1：Wed Jan 17 00:00:00 GMT-05:00 2018<br>处理后的时间戳2：1516165200</p>
<h3 id="7-3-java中时间戳与时间格式的转换"><a href="#7-3-java中时间戳与时间格式的转换" class="headerlink" title="7.3 java中时间戳与时间格式的转换"></a>7.3 java中时间戳与时间格式的转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment"> * 将时间转换为时间戳</span></div><div class="line"><span class="comment"> */</span>    </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">dateToStamp</span><span class="params">(String s)</span> <span class="keyword">throws</span> ParseException</span>&#123;</div><div class="line">    String res;</div><div class="line">    SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</div><div class="line">    Date date = simpleDateFormat.parse(s);</div><div class="line">    <span class="keyword">long</span> ts = date.getTime();</div><div class="line">    res = String.valueOf(ts);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line"><span class="comment"> * 将时间戳转换为时间</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">stampToDate</span><span class="params">(String s)</span></span>&#123;</div><div class="line">    String res;</div><div class="line">    SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</div><div class="line">    <span class="keyword">long</span> lt = <span class="keyword">new</span> Long(s);</div><div class="line">    Date date = <span class="keyword">new</span> Date(lt);</div><div class="line">    res = simpleDateFormat.format(date);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="8-Java-Collections-集合操作的静态多态方法，是一个工具类。"><a href="#8-Java-Collections-集合操作的静态多态方法，是一个工具类。" class="headerlink" title="8. Java - Collections 集合操作的静态多态方法，是一个工具类。"></a>8. Java - Collections 集合操作的静态多态方法，是一个工具类。</h2><blockquote>
<p>参考：<a href="http://blog.csdn.net/qq924862077/article/details/48022135" target="_blank" rel="external">http://blog.csdn.net/qq924862077/article/details/48022135</a></p>
</blockquote>
<h2 id="9-String／StringBuffer／StringBuilder它们之间的区别"><a href="#9-String／StringBuffer／StringBuilder它们之间的区别" class="headerlink" title="9. String／StringBuffer／StringBuilder它们之间的区别"></a>9. String／StringBuffer／StringBuilder它们之间的区别</h2><blockquote>
<p>参考：<a href="http://mp.weixin.qq.com/s/U1aIOERz7hqeC8JUH-fI6A" target="_blank" rel="external">http://mp.weixin.qq.com/s/U1aIOERz7hqeC8JUH-fI6A</a></p>
</blockquote>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-27%2009.58.17.png" alt=""></p>
<h3 id="为什么要引入其它两种字符串处理类"><a href="#为什么要引入其它两种字符串处理类" class="headerlink" title="为什么要引入其它两种字符串处理类?"></a>为什么要引入其它两种字符串处理类?</h3><p>提高字符串连接效率。在大部分情况下，字符串的拼接速度为：<br><strong>StringBuilder &gt; StringBuffer &gt; String</strong></p>
<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul>
<li><strong>不可变</strong>。因此每次对其操作改变其变量值，其实是<strong>生成一个新的对象</strong>，然后将变量引用指向新对象，因此速度慢。</li>
<li><strong>线程安全</strong>。</li>
<li><strong>存放在常量池</strong>，在编译期已经被确定了。<strong>new String()</strong>不是字符串常量，它有自己的地址空间，<strong>存放在堆空间</strong></li>
</ul>
<h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h3><ul>
<li><strong>可变</strong>。对其操作即<strong>直接操作对象指向的引用</strong>，<strong>无需产生新对象</strong>，速度很快；</li>
<li><strong>线程安全</strong>。在维护多线程的同步等也会消耗一点性能。</li>
<li><strong>堆空间</strong></li>
</ul>
<h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><ul>
<li><strong>可变</strong>。是<strong>jdk5之后新增</strong>的，其用法与StringBuffer完全一致，</li>
<li><strong>非线程安全</strong>。在<strong>单线程中最佳</strong>，因为其不需要维护线程的安全，因此是最快的。</li>
<li><strong>堆空间</strong></li>
</ul>
<h2 id="10-AS-编译时提示error-please-select-android-sdk"><a href="#10-AS-编译时提示error-please-select-android-sdk" class="headerlink" title="10. AS 编译时提示error please select android sdk"></a>10. AS 编译时提示error please select android sdk</h2><p>出现问题的界面：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/20160624202019873" alt=""></p>
<p>解决方法：<br>在<strong>File-&gt; Project Structure-&gt;app的属性中设置Compile Sdk Version</strong>即可。</p>
<h2 id="11-打开应用时出现“你的手机上未安装应用程序”–实际上该应用已经安装"><a href="#11-打开应用时出现“你的手机上未安装应用程序”–实际上该应用已经安装" class="headerlink" title="11. 打开应用时出现“你的手机上未安装应用程序”–实际上该应用已经安装"></a>11. 打开应用时出现“你的手机上未安装应用程序”–实际上该应用已经安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">        ···</div><div class="line">        android:exported=&quot;false&quot;</div><div class="line">        &gt;</div><div class="line">        ···</div><div class="line">&lt;/activity&gt;</div></pre></td></tr></table></figure>
<p>问题就是出在：<code>android:exported=&quot;false&quot;</code>。该属性的意思 “<strong>是否允许activity被其它程序调用</strong>”，<strong>默认为 true</strong>。</p>
<h2 id="12-Git-提示fatal-remote-origin-already-exists-错误解决办法"><a href="#12-Git-提示fatal-remote-origin-already-exists-错误解决办法" class="headerlink" title="12. Git 提示fatal: remote origin already exists 错误解决办法"></a>12. Git 提示fatal: remote origin already exists 错误解决办法</h2><p>参考：<a href="http://blog.csdn.net/top_code/article/details/50381432" target="_blank" rel="external">http://blog.csdn.net/top_code/article/details/50381432</a></p>
<p>解决办法： </p>
<p>1、先删除远程 Git 仓库</p>
<pre><code>$ git remote rm origin
</code></pre><p>2、再添加远程 Git 仓库</p>
<pre><code>$ git remote add origin xxx
</code></pre><h2 id="13-Http结构图"><a href="#13-Http结构图" class="headerlink" title="13. Http结构图"></a>13. Http结构图</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/1724103-ea242640383ed739.png" alt=""></p>
<h2 id="14-Activity生命周期图"><a href="#14-Activity生命周期图" class="headerlink" title="14. Activity生命周期图"></a>14. Activity生命周期图</h2><p>官方：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/activity_lifecycle.png" alt=""></p>
<h2 id="15-修改App的包名"><a href="#15-修改App的包名" class="headerlink" title="15. 修改App的包名"></a>15. 修改App的包名</h2><p><a href="http://blog.csdn.net/mr_zdd/article/details/78739485" target="_blank" rel="external">http://blog.csdn.net/mr_zdd/article/details/78739485</a></p>
<h2 id="16-App基本UI框架"><a href="#16-App基本UI框架" class="headerlink" title="16. App基本UI框架"></a>16. App基本UI框架</h2><h1 id="UI项目主框架：-TabLayout-ViewPager"><a href="#UI项目主框架：-TabLayout-ViewPager" class="headerlink" title="UI项目主框架： TabLayout + ViewPager"></a>UI项目主框架： TabLayout + ViewPager</h1><p><strong>效果图</strong></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/S80322-14580161.jpg" alt=""></p>
<p><strong>0. 变量</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">TabLayout mTabLayout;</div><div class="line"></div><div class="line"><span class="keyword">private</span> List&lt;String&gt; titles = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"><span class="keyword">private</span> List&lt;Fragment&gt; mFragmentList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"><span class="keyword">private</span> FragmentAdapter mFragmentAdapter;</div></pre></td></tr></table></figure>
<p><strong>1. 自定义TabLayout的TabItem布局文件：item_tab_layout_layout</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">com.zhy.autolayout.AutoLinearLayout</span></span></div><div class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"129px"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/img"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"47px"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"47px"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"24px"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/text_title"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"10px"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center|top"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"通知公告"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"@color/bottom_text_color_selector"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"@dimen/text_content_text_size"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">com.zhy.autolayout.AutoLinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>2. 主界面xml布局文件</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">com.zhy.autolayout.AutoRelativeLayout</span></span></div><div class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/container"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line"><span class="tag"></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/main_view_pager"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_above</span>=<span class="string">"@+id/line_main"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">View</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_above</span>=<span class="string">"@+id/navigation_01"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/line_main"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"1px"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#cacaca"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/navigation_01"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"129px"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">com.zhy.autolayout.AutoRelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>3. 选中样式配置 xml文件</strong></p>
<p><strong>3.1 选中字体样式配置： bottom_text_color_selector</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">"@color/colorPrimary"</span> <span class="attr">android:state_selected</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">"@color/textColor"</span> <span class="attr">android:state_selected</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>3.2 选中图片样式配置： notice_checked_selector</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_selected</span>=<span class="string">"true"</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/bottom_notice_check"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_selected</span>=<span class="string">"false"</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/bottom_notice_uncheck"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span>xx</div></pre></td></tr></table></figure>
<p><strong>4. 适配器：FragmentAdapter</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentStatePagerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; mStringList ;</div><div class="line">    <span class="keyword">private</span> List&lt;Fragment&gt; mFragmentList ;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FragmentAdapter</span><span class="params">(FragmentManager fm, List&lt;String&gt; mStrings, List&lt;Fragment&gt; mFragments)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(fm);</div><div class="line">        <span class="keyword">this</span>.mStringList = mStrings;</div><div class="line">        <span class="keyword">this</span>.mFragmentList = mFragments;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mFragmentList.get(position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mFragmentList.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> CharSequence <span class="title">getPageTitle</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mStringList.get(position);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>5. Activity中UI控件配置</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initAdapter</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    titles.add(<span class="string">"通知公告"</span>);</div><div class="line">    titles.add(<span class="string">"临时任务"</span>);</div><div class="line">    titles.add(<span class="string">"日常巡检"</span>);</div><div class="line">    titles.add(<span class="string">"设置"</span>);</div><div class="line"></div><div class="line">    mFragmentList.add(<span class="keyword">new</span> NoticeFragment());</div><div class="line">    mFragmentList.add(<span class="keyword">new</span> TempTaskFragment());</div><div class="line">    mFragmentList.add(<span class="keyword">new</span> CheckUsuallyFragment());</div><div class="line">    mFragmentList.add(<span class="keyword">new</span> SettingFragment());</div><div class="line"></div><div class="line">    <span class="keyword">int</span>[] imgs = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;R.drawable.notice_checked_selector,R.drawable.task_checked_selector,R.drawable.check_checked_selector,R.drawable.setting_checked_selector&#125;;</div><div class="line"></div><div class="line">    mFragmentAdapter = <span class="keyword">new</span> FragmentAdapter(getSupportFragmentManager(),titles,mFragmentList);</div><div class="line"></div><div class="line">    mMainViewPager.setAdapter(mFragmentAdapter);</div><div class="line">    mTabLayout.setupWithViewPager(mMainViewPager);</div><div class="line">    mTabLayout.setSelectedTabIndicatorHeight(<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; titles.size(); i++) &#123;</div><div class="line">        <span class="comment">//获得到对应位置的Tab</span></div><div class="line">        TabLayout.Tab itemTab = mTabLayout.getTabAt(i);</div><div class="line">        <span class="keyword">if</span> (itemTab != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//设置自定义的标题</span></div><div class="line">            itemTab.setCustomView(R.layout.item_tab_layout_layout);</div><div class="line">            TextView textView = (TextView) itemTab.getCustomView().findViewById(R.id.text_title);</div><div class="line">            textView.setText(titles.get(i));</div><div class="line">            ImageView imageView= (ImageView) itemTab.getCustomView().findViewById(R.id.img);</div><div class="line">            imageView.setImageResource(imgs[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    mTabLayout.getTabAt(<span class="number">0</span>).getCustomView().setSelected(<span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="17-转义字符"><a href="#17-转义字符" class="headerlink" title="17. 转义字符"></a>17. 转义字符</h2><p>\n 回车换行<br>\t 横向跳到下一制表位置   </p>
<p>\v 竖向跳格<br>\b 退格<br>\r 回车<br>\f 走纸换页<br>\ 反斜线符”\”<br>\’ 单引号符<br>\ddd 1～3位八进制数所代表的字符<br>\xhh 1～2位十六进制数所代表的字符</p>
<p>空格的ASC是32，转换为16进制是x20，使用转义字符为 \x20</p>
<h2 id="18-安装apk时INSTALL-FAILED-NO-MATCHING-ABIS"><a href="#18-安装apk时INSTALL-FAILED-NO-MATCHING-ABIS" class="headerlink" title="18. 安装apk时INSTALL_FAILED_NO_MATCHING_ABIS"></a>18. 安装apk时INSTALL_FAILED_NO_MATCHING_ABIS</h2><blockquote>
<p>参考：<a href="https://stackoverflow.com/questions/24572052/install-failed-no-matching-abis-when-install-apk" target="_blank" rel="external">https://stackoverflow.com/questions/24572052/install-failed-no-matching-abis-when-install-apk</a></p>
</blockquote>
<p>这个错误是由于使用了native libraries 。该native libraries 不支持当前的cpu的体系结构。</p>
<p>解决方式，在<code>app</code>的<code>build.gradle</code>文件中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">splits &#123;</div><div class="line">    abi &#123;</div><div class="line">        enable true</div><div class="line">        reset()</div><div class="line">        include &apos;x86&apos;, &apos;armeabi-v7a&apos;</div><div class="line">        universalApk true</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改依据：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/jheheh.png" alt=""></p>
<h2 id="19-Parcelable和Serializable的区别"><a href="#19-Parcelable和Serializable的区别" class="headerlink" title="19. Parcelable和Serializable的区别"></a>19. Parcelable和Serializable的区别</h2><blockquote>
<p>参考：<a href="https://www.ibm.com/developerworks/cn/java/j-lo-serial/index.html" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/java/j-lo-serial/index.html</a><br>参考：<a href="https://www.jianshu.com/p/a60b609ec7e7" target="_blank" rel="external">https://www.jianshu.com/p/a60b609ec7e7</a></p>
</blockquote>
<p>这两个都是和序列化相关的接口。</p>
<p>serializable只需要对某个类以及它的属性实现Serializable 接口即可。Serializable 接口是一种标识接口（marker interface），这意味着无需实现方法，Java便会对这个对象进行高效的序列化操作。</p>
<p>缺点是使用了反射，序列化的过程较慢。这种机制会在序列化的时候创建许多的临时对象，容易触发垃圾回收。</p>
<p>Parcelable方式的实现原理是将一个完整的对象进行分解，而分解后的每一部分都是Intent所支持的数据类型，这样也就实现传递对象的功能了。</p>
<h3 id="19-1-序列化、反序列化是什么？"><a href="#19-1-序列化、反序列化是什么？" class="headerlink" title="19.1 序列化、反序列化是什么？"></a>19.1 序列化、反序列化是什么？</h3><ul>
<li>对象的序列化：Java对象 转化为 字节流 的过程； </li>
<li>对象的反序列化：字节流 转化为 Java对象 的过程。</li>
</ul>
<h3 id="19-2-两者区别是什么"><a href="#19-2-两者区别是什么" class="headerlink" title="19.2 两者区别是什么?"></a>19.2 两者区别是什么?</h3><ul>
<li><code>Serializable</code> 的作用是为了保存对象的属性到本地文件、数据库、网络流以方便数据传输，当然这种<br>传输可以是程序内的也可以是两个程序间的。</li>
<li>Android的 <code>Parcelable</code> 的设计初衷是因为Serializable效率过慢，为了在程序内不同组件间以及不同Android程序间(AIDL)高效的传输数据而设计，这些数据仅在内存中存在，Parcelable是通过IBinder通信的消息的载体。</li>
</ul>
<h3 id="19-3-效率及选择？"><a href="#19-3-效率及选择？" class="headerlink" title="19.3 效率及选择？"></a>19.3 效率及选择？</h3><p>Parcelable的性能比Serializable好，在内存开销方面较小，所以在 <strong><code>内存间数据传输</code></strong> 时推荐使用Parcelable，如activity间传输数据，而Serializable可将数据持久化方便保存，所以在需要 <strong><code>保存或网络传输</code></strong>数据时选择Serializable，因为android不同版本Parcelable可能不同，所以<strong>不推荐使用Parcelable进行数据持久化</strong>。</p>
<h3 id="19-4-Java-序列化中的一些高级认识"><a href="#19-4-Java-序列化中的一些高级认识" class="headerlink" title="19.4 Java 序列化中的一些高级认识"></a>19.4 Java 序列化中的一些高级认识</h3><ul>
<li><strong>序列化 ID 问题</strong></li>
</ul>
<p>虚拟机是否允许反序列化，不仅取决于类路径和功能代码是否一致，一个非常重要的一点是两个类的序列化 ID 是否一致（就是 private static final long serialVersionUID = 1L）</p>
<ul>
<li><strong>静态变量序列化问题代码</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public class Test implements Serializable &#123;</div><div class="line"> </div><div class="line">    private static final long serialVersionUID = 1L;</div><div class="line"> </div><div class="line">    public static int staticVar = 5;</div><div class="line"> </div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        try &#123;</div><div class="line">            //初始时staticVar为5</div><div class="line">            ObjectOutputStream out = new ObjectOutputStream(</div><div class="line">                    new FileOutputStream(&quot;result.obj&quot;));</div><div class="line">            out.writeObject(new Test());</div><div class="line">            out.close();</div><div class="line"> </div><div class="line">            //序列化后修改为10</div><div class="line">            Test.staticVar = 10;</div><div class="line"> </div><div class="line">            ObjectInputStream oin = new ObjectInputStream(new FileInputStream(</div><div class="line">                    &quot;result.obj&quot;));</div><div class="line">            Test t = (Test) oin.readObject();</div><div class="line">            oin.close();</div><div class="line">             </div><div class="line">            //再读取，通过t.staticVar打印新的值</div><div class="line">            System.out.println(t.staticVar);</div><div class="line">             </div><div class="line">        &#125; catch (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <code>main</code> 方法，将对象序列化后，修改静态变量的数值，再将序列化对象读取出来，然后通过读取出来的对象获得静态变量的数值并打印出来。这个 <code>System.out.println(t.staticVar)</code> 语句输出的是 10。</p>
<p>之所以打印 10 的原因在于：<strong>序列化时并不保存静态变量</strong>。</p>
<p>这其实比较容易理解，序列化<strong>保存的是对象的状态</strong>，<strong>静态变量属于类的状态</strong>，因此 序列化并不保存静态变量。</p>
<h3 id="19-5-父类的序列化与-Transient-关键字"><a href="#19-5-父类的序列化与-Transient-关键字" class="headerlink" title="19.5 父类的序列化与 Transient 关键字"></a>19.5 父类的序列化与 Transient 关键字</h3><ul>
<li><strong>情境</strong>：一个子类实现了 Serializable 接口，它的父类都没有实现 Serializable 接口，序列化该子类对象，然后反序列化后输出父类定义的某变量的数值，该变量数值与序列化时的数值不同。</li>
<li><p><strong>解决</strong>：要想<strong>将父类对象也序列化</strong>，就需要<strong>让父类也实现Serializable 接口</strong>。如果父类不实现的话的，就需要<strong>有默认的无参的构造函数</strong>。</p>
<p>在父类没有实现 Serializable 接口时，虚拟机是不会序列化父对象的，而一个 Java 对象的构造必须先有父对象，才有子对象，反序列化也不例外。所以反序列化时，为了构造父对象，只能调用父类的无参构造函数作为默认的父对象。因此当我们<strong>取父对象的变量值时</strong>，它的值是调用<strong>父类无参构造函数后的值</strong>。如果你考虑到这种序列化的情况，在父类无参构造函数中对变量进行初始化，否则的话，父类变量值都是默认声明的值，如 int 型的默认是 0，string 型的默认是 null。</p>
</li>
<li><p><strong>Transient 关键字</strong> </p>
<p>其作用是控制变量的序列化，在变量声明前加上该关键字，可以<strong>阻止该变量被序列化</strong>到文件中，在<strong>被反序列化后，transient 变量的值被设为初始值</strong>，如 int 型的是 0，对象型的是 null。</p>
</li>
</ul>
<p>除了使用 Transient 关键字可以使得字段不被序列化，还可以根据父类对象序列化的规则，将不需要被序列化的字段抽取出来放到父类中，子类实现 Serializable 接口，父类不实现，根据父类序列化规则，父类的字段数据将不被序列化</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/image005.gif" alt=""></p>
<p>上图中可以看出，attr1、attr2、attr3、attr5 都不会被序列化，放在父类中的好处在于当有另外一个 Child 类时，attr1、attr2、attr3 依然不会被序列化，不用重复抒写 transient。</p>
<ul>
<li><p><strong>对敏感字段加密</strong></p>
</li>
<li><p><strong>情境</strong>：服务器端给客户端发送序列化对象数据，对象中有一些数据是敏感的，比如密码字符串等，希望对该密码字段在序列化时，进行加密，而客户端如果拥有解密的密钥，只有在客户端进行反序列化时，才可以对密码进行读取，这样可以一定程度保证序列化对象的数据安全。</p>
</li>
<li><p><strong>解决</strong>：在序列化过程中，虚拟机会试图调用对象类里的 writeObject 和 readObject 方法，进行用户自定义的序列化和反序列化，如果没有这样的方法，则默认调用是 ObjectOutputStream 的 defaultWriteObject 方法以及 ObjectInputStream 的 defaultReadObject 方法。用户自定义的 writeObject 和 readObject 方法可以允许用户控制序列化的过程，比如可以在序列化的过程中动态改变序列化的数值。基于这个原理，可以在实际应用中得到使用，用于敏感字段的加密工作，清单 3 展示了这个过程。</p>
</li>
</ul>
<h3 id="19-6-序列化存储规则"><a href="#19-6-序列化存储规则" class="headerlink" title="19.6 序列化存储规则"></a>19.6 序列化存储规则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">ObjectOutputStream out = new ObjectOutputStream(</div><div class="line">                   new FileOutputStream(&quot;result.obj&quot;));</div><div class="line">   Test test = new Test();</div><div class="line">   //试图将对象两次写入文件</div><div class="line">   out.writeObject(test);</div><div class="line">   out.flush();</div><div class="line">   System.out.println(new File(&quot;result.obj&quot;).length());</div><div class="line">   out.writeObject(test);</div><div class="line">   out.close();</div><div class="line">   System.out.println(new File(&quot;result.obj&quot;).length());</div><div class="line"> </div><div class="line">   ObjectInputStream oin = new ObjectInputStream(new FileInputStream(</div><div class="line">           &quot;result.obj&quot;));</div><div class="line">   //从文件依次读出两个文件</div><div class="line">   Test t1 = (Test) oin.readObject();</div><div class="line">   Test t2 = (Test) oin.readObject();</div><div class="line">   oin.close();</div><div class="line">            </div><div class="line">   //判断两个引用是否指向同一个对象</div><div class="line">   System.out.println(t1 == t2);</div></pre></td></tr></table></figure>
<p>对同一对象两次写入文件，打印出写入一次对象后的存储大小和写入两次后的存储大小，然后从文件中反序列化出两个对象，比较这两个对象是否为同一对象。</p>
<p>一般的思维是，两次写入对象，文件大小会变为两倍的大小，反序列化时，由于从文件读取，生成了两个对象，判断相等时应该是输入 false 才对，但是最后结果输出如图:</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/image009.jpg" alt=""></p>
<p>第二次写入对象时文件只增加了 5 字节，并且两个对象是相等的，这是因为Java 序列化机制为了节省磁盘空间，具有特定的<strong>存储规则</strong>：</p>
<p>当写入文件的为<strong>同一对象</strong>时，并不会再将对象的内容进行存储，而<strong>只是再次存储一份引用</strong>，上面增加的 5 字节的存储空间就是新增引用和一些控制信息的空间。<br>反序列化时，恢复引用关系，使得的 t1 和 t2 指向唯一的对象，二者相等，输出 true。<br>该存储规则极大的节省了存储空间。</p>
<h2 id="20-线性表、链表、哈希表"><a href="#20-线性表、链表、哈希表" class="headerlink" title="20. 线性表、链表、哈希表"></a>20. 线性表、链表、哈希表</h2><p>数组、链表、树（二叉树、平衡树）、哈希表被称为通用数据结构。之所以称之为通用数据结构是因为它们通过关键字的值来存储、查找数据。</p>
<p>具体使用哪一种数据结构，可以参考下图：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E9%80%9A%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%82%E8%80%83%E5%9B%BE.jpg" alt=""></p>
<p>上体育课的时候，老师说：你们站一队，每个人记住自己是第几个，我喊到几，那个人就举手，这就是数组。</p>
<p>老是说，你们每个人记住自己前面的人和后面的人，然后老师只知道第一人是谁。 然后你们各自由活动，老是要找某一个人，是不是每次都是从第一个开始往自己身后的人开始传达？这就是链表。</p>
<p>老师说： 大家1，2，3，4报数，凡是报1，为1队，凡是报2的为2队。。。。  而这个4就相当于预定义好的桶的个数。这就是散列（哈希）。</p>
<p>程序中，存放指定的数据最常用的数据结构有两种：数组和链表。</p>
<p><strong>数组和链表的区别：</strong>：</p>
<ul>
<li><p>数组是将元素在内存中连续存放。<br>链表中的元素在内存中不是顺序存储的，而是通过存在元素中的指针联系到一起。</p>
</li>
<li><p>数组必须事先定义固定的长度，不能适应数据动态的增减的情况。当数据增加时，可能超出原先定义的元素个数；当数据减少时，造成内存浪费； </p>
<pre><code>链表动态地进行存储分配，可以适应数据动态地增减的情况。
</code></pre></li>
<li><p>（静态）数组从栈中分配空间，对于程序员方便快速，但是自由度小；</p>
<pre><code>链表从堆中分配空间，自由度大但是申请管理比较麻烦。
</code></pre></li>
</ul>
<p>但是数组和链表在存储数据方面到底谁好？根据数组和链表的特性，分两种情况讨论：</p>
<p>1，当进行数据查询时，数组可以直接通过下标迅速访问数组中的元素。而链表则需要从第一个元素开始一直找到需要的元素位置，显然，数组的查询效率会比链表的高。</p>
<p>2，当进行增加或删除元素时，在数组中增加一个元素，需要移动大量元素，在内存中空出一个元素的空间，然后将要增加的元素放在其中。同样，如果想删除一个元素，需要移动大量去填掉被移动的元素，而链表只需改动元素中的指针即可实现增加或删除元素。</p>
<p>那么<strong>哈希表</strong>，是既能具备数组的快速查询的优点，又能融合链表方便快捷的增加删除元素的优势。</p>
<h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><blockquote>
<p>参考：<a href="https://blog.csdn.net/xiaoxik/article/details/74926090" target="_blank" rel="external">https://blog.csdn.net/xiaoxik/article/details/74926090</a><br>参考：<a href="https://www.cnblogs.com/s-b-b/p/6208565.html" target="_blank" rel="external">https://www.cnblogs.com/s-b-b/p/6208565.html</a></p>
</blockquote>
<p>Hash table是<strong>指针的数组或者说向量表</strong>。<br>哈希表(Hash Table)也叫散列表，是根据<strong>关键码值（Key Value）</strong>而直接进行访问的数据结构。它通过把关键码值映射到哈希表中的一个位置来访问记录，以加快查找的速度。这个映射函数就做<strong>散列函数，存放记录的数组叫做散列表</strong>。</p>
<p><strong>一张图类比描述哈希表：</strong></p>
<p>最典型的的例子就是字典，如果我想要获取“按”字详细信息，我肯定会去根据拼音<code>an</code>去查找 拼音索引（当然也可以是偏旁索引），我们首先去查<code>an</code>在字典的位置，查了一下得到<code>安</code>，结果如下。这<strong>过程就是键码映射</strong>，在公式里面，就是通过key去查找f(key)。其中，按就是关键字（key），f（）就是字典索引，也就是哈希函数，查到的<code>页码4</code>就是<strong>哈希值</strong>。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/799055-20161222093541698-299037518.png" alt=""></p>
<h2 id="21-Java中常见数据结构：list与map"><a href="#21-Java中常见数据结构：list与map" class="headerlink" title="21. Java中常见数据结构：list与map"></a>21. Java中常见数据结构：list与map</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E9%9B%86%E5%90%88.png" alt=""></p>
<h3 id="21-1-Collection（单列集合）"><a href="#21-1-Collection（单列集合）" class="headerlink" title="21.1. Collection（单列集合）"></a>21.1. Collection（单列集合）</h3><h4 id="21-1-1-（有序、可重复）List"><a href="#21-1-1-（有序、可重复）List" class="headerlink" title="21.1.1 （有序、可重复）List"></a>21.1.1 <strong>（有序、可重复）List</strong></h4><ul>
<li>ArrayList：底层数据结构是<strong>数组</strong>,查询快,增删慢；线程不安全,效率高</li>
<li>Vector：底层数据结构是<strong>数组</strong>,查询快,增删慢；线程安全,效率低</li>
<li>LinkedList：底层数据结构是<strong>链表</strong>,查询慢,增删快结构是链表,查询慢,增删快；线程不安全,效率高</li>
</ul>
<h4 id="21-1-12-无序-唯一-Set"><a href="#21-1-12-无序-唯一-Set" class="headerlink" title="21.1.12 (无序,唯一)Set"></a>21.1.12 <strong>(无序,唯一)Set</strong></h4><ul>
<li><p>HashSet</p>
<pre><code>底层数据结构是哈希表。
哈希表依赖两个方法：hashCode()和equals()
执行顺序：
    首先判断hashCode()值是否相同
        是：继续执行equals(),看其返回值
            是true:说明元素重复，不添加
            是false:就直接添加到集合
        否：就直接添加到集合
最终：
    自动生成hashCode()和equals()即可

最终：自动生成hashCode()和equals()即可
</code></pre></li>
<li><p>LinkedHashSet：</p>
<pre><code>底层数据结构由**链表**和**哈希表**组成。
由链表保证元素有序。
由哈希表保证元素唯一。
</code></pre></li>
<li><p>TreeSet</p>
<pre><code>底层数据结构是红黑树。(是一种自平衡的二叉树)
</code></pre></li>
</ul>
<h3 id="21-2-Map-双列集合"><a href="#21-2-Map-双列集合" class="headerlink" title="21.2 Map(双列集合)"></a>21.2 Map(双列集合)</h3><ul>
<li>Map集合的数据结构仅仅针对键有效，与值无关。</li>
<li>存储的是键值对形式的元素，键唯一，值可重复。</li>
</ul>
<hr>
<ul>
<li><p>HashMap</p>
<pre><code>底层数据结构是哈希表。线程不安全，效率高
    哈希表依赖两个方法：hashCode()和equals()
    执行顺序：
        首先判断hashCode()值是否相同
            是：继续执行equals(),看其返回值
                是true:说明元素重复，不添加
                是false:就直接添加到集合
            否：就直接添加到集合
    最终：
        自动生成hashCode()和equals()即可
</code></pre></li>
<li><p>LinkedHashMap</p>
<pre><code>底层数据结构由链表和哈希表组成。
    由链表保证元素有序。
    由哈希表保证元素唯一。
</code></pre></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WebView的使用]]></title>
      <url>/WebView%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>WebView的设置</p>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="Web相关代码块"><a href="#Web相关代码块" class="headerlink" title="Web相关代码块"></a>Web相关代码块</h1><h2 id="1-WebVIew的-Setting-代码"><a href="#1-WebVIew的-Setting-代码" class="headerlink" title="1. WebVIew的 Setting 代码"></a>1. WebVIew的 Setting 代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * CommonWebViewSets  WebView设置工具类</div><div class="line"> *</div><div class="line"> * @author wenjia.Cheng  cwj1714@163.com</div><div class="line"> * @date 2017/12/29</div><div class="line"> */</div><div class="line">public class CommonWebViewSets &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 设置URL</div><div class="line">     *</div><div class="line">     * @param webView 控件</div><div class="line">     * @param url     url地址</div><div class="line">     */</div><div class="line">    public static void setUrl(WebView webView, String url,ProgressBar mProgressBar) &#123;</div><div class="line">        initWeb(webView,mProgressBar);</div><div class="line">        webView.loadUrl(url);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 设置html源代码，无base Url</div><div class="line">     *</div><div class="line">     * @param webView 控件</div><div class="line">     * @param html    html源代码</div><div class="line">     */</div><div class="line">    public static void setHtmlCode(WebView webView, String html,ProgressBar mProgressBar) &#123;</div><div class="line">        initWeb(webView,mProgressBar);</div><div class="line">        webView.loadDataWithBaseURL(&quot;我的服务商&quot;, html, &quot;text/html&quot;, &quot;utf-8&quot;, null);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 设置html源代码，有base Url</div><div class="line">     *</div><div class="line">     * @param webView 控件</div><div class="line">     * @param baseUrl baseUrl</div><div class="line">     * @param html    html源代码</div><div class="line">     */</div><div class="line">    public static void setHtmlCodeBaseUrl(WebView webView, String baseUrl, String html,ProgressBar mProgressBar) &#123;</div><div class="line">        initWeb(webView,mProgressBar);</div><div class="line">        webView.loadDataWithBaseURL(baseUrl, html, &quot;text/html&quot;, &quot;utf-8&quot;, null);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param webView 控件</div><div class="line">     */</div><div class="line">    @SuppressLint(&quot;SetJavaScriptEnabled&quot;)</div><div class="line">    public static void initWeb(WebView webView, final ProgressBar mProgressBar) &#123;</div><div class="line"></div><div class="line">        // 获取webview设置属性</div><div class="line">        WebSettings settings = webView.getSettings();</div><div class="line"></div><div class="line">        // 设置编码格式</div><div class="line">        settings.setDefaultTextEncodingName(&quot;utf-8&quot;);</div><div class="line">        // 进行屏幕适配设置</div><div class="line">        settings.setUseWideViewPort(true);</div><div class="line">        settings.setLoadWithOverviewMode(true);</div><div class="line"></div><div class="line">        // 设置支持JavaScript</div><div class="line">        settings.setJavaScriptEnabled(true);</div><div class="line">        // 这个是给图片设置点击监听的，如果你项目需要webview中图片，点击查看大图功能，可以这么添加</div><div class="line">        // webView.addJavascriptInterface(new JavaScriptInterface(this), &quot;imagelistner&quot;);</div><div class="line"></div><div class="line">        settings.setAllowContentAccess(false);</div><div class="line">        settings.setAllowFileAccessFromFileURLs(false);</div><div class="line">        settings.setAllowUniversalAccessFromFileURLs(false);</div><div class="line">        settings.setAllowFileAccess(false);</div><div class="line">        // 把html中的内容放大webview等宽的一列中</div><div class="line">        settings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.SINGLE_COLUMN);</div><div class="line"></div><div class="line">        //settings.setDefaultFontSize(44);</div><div class="line">        // 设置可以支持缩放</div><div class="line">        //webView.getSettings().setSupportZoom(true);</div><div class="line">        // 设置出现缩放工具</div><div class="line">        //webView.getSettings().setBuiltInZoomControls(true);</div><div class="line">        //webView.getSettings().setDisplayZoomControls(true);</div><div class="line"></div><div class="line">        //如果不设置WebViewClient，请求会跳转系统浏览器</div><div class="line">        webView.setWebViewClient(new WebViewClient() &#123;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public boolean shouldOverrideUrlLoading(WebView view, String url) &#123;</div><div class="line">                //该方法在Build.VERSION_CODES.LOLLIPOP以前有效，从Build.VERSION_CODES.LOLLIPOP起，建议使用shouldOverrideUrlLoading(WebView, WebResourceRequest)&#125; instead</div><div class="line">                //返回false，意味着请求过程里，不管有多少次的跳转请求（即新的请求地址），均交给webView自己处理，这也是此方法的默认处理</div><div class="line">                //返回true，说明你自己想根据url，做新的跳转，比如在判断url符合条件的情况下，我想让webView加载http://ask.csdn.net/questions/178242</div><div class="line">                /*if (url.toString().contains(&quot;sina.cn&quot;))&#123;</div><div class="line">                    view.loadUrl(&quot;http://ask.csdn.net/questions/178242&quot;);</div><div class="line">                    return true;</div><div class="line">                &#125;*/</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request)</div><div class="line">            &#123;</div><div class="line">                //返回false，意味着请求过程里，不管有多少次的跳转请求（即新的请求地址），均交给webView自己处理，这也是此方法的默认处理</div><div class="line">                //返回true，说明你自己想根据url，做新的跳转，比如在判断url符合条件的情况下，我想让webView加载http://ask.csdn.net/questions/178242</div><div class="line">                /*if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class="line">                    if (request.getUrl().toString().contains(&quot;sina.cn&quot;))&#123;</div><div class="line">                        view.loadUrl(&quot;http://ask.csdn.net/questions/178242&quot;);</div><div class="line">                        return true;</div><div class="line">                    &#125;</div><div class="line">                &#125;*/</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onPageFinished(WebView view, String url) &#123;</div><div class="line">                super.onPageFinished(view, url);</div><div class="line">                //imgReset(view);//重置webview中img标签的图片大小</div><div class="line">                // html加载完成之后，添加监听图片的点击js函数</div><div class="line">                //addImageClickListner(view);</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        if (mProgressBar == null) &#123;</div><div class="line">        &#125; else &#123;</div><div class="line">            webView.setWebChromeClient(new WebChromeClient()&#123;</div><div class="line">                @Override</div><div class="line">                public void onProgressChanged(WebView view, int newProgress) &#123;</div><div class="line">                    // TODO 自动生成的方法存根</div><div class="line"></div><div class="line">                    if(newProgress==100)&#123;</div><div class="line">                        mProgressBar.setVisibility(View.GONE);//加载完网页进度条消失</div><div class="line">                    &#125;</div><div class="line">                    else&#123;</div><div class="line">                        mProgressBar.setVisibility(View.VISIBLE);//开始加载网页时显示进度条</div><div class="line">                        mProgressBar.setProgress(newProgress);//设置进度值</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 这段js函数的功能就是，遍历所有的img节点，并添加onclick函数，函数的功能是在图片点击的时候调用本地java接口并传递url过去</div><div class="line">     *</div><div class="line">     * @param view view</div><div class="line">     */</div><div class="line">    private static void addImageClickListner(WebView view) &#123;</div><div class="line">        view.loadUrl(&quot;javascript:(function()&#123;&quot; +</div><div class="line">                &quot;var objs = document.getElementsByTagName(\&quot;img\&quot;); &quot; +</div><div class="line">                &quot;for(var i=0;i&lt;objs.length;i++)  &quot; +</div><div class="line">                &quot;&#123;&quot;</div><div class="line">                + &quot;    objs[i].onclick=function()  &quot; +</div><div class="line">                &quot;    &#123;  &quot;</div><div class="line">                + &quot;        window.imagelistner.openImage(this.src);  &quot; +</div><div class="line">                &quot;    &#125;  &quot; +</div><div class="line">                &quot;&#125;&quot; +</div><div class="line">                &quot;&#125;)()&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 对图片进行重置大小，宽度就是手机屏幕宽度，高度根据宽度比便自动缩放</div><div class="line">     **/</div><div class="line">    private static void imgReset(WebView view) &#123;</div><div class="line">        view.loadUrl(&quot;javascript:(function()&#123;&quot; +</div><div class="line">                &quot;var objs = document.getElementsByTagName(\&quot;img\&quot;); &quot; +</div><div class="line">                &quot;for(var i=0;i&lt;objs.length;i++)  &quot; +</div><div class="line">                &quot;&#123;&quot;</div><div class="line">                + &quot;var img = objs[i];   &quot; +</div><div class="line">                &quot;    img.style.maxWidth = &apos;100%&apos;; img.style.height = &apos;auto&apos;;  &quot; +</div><div class="line">                &quot;&#125;&quot; +</div><div class="line">                &quot;&#125;)()&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static class JavaScriptInterface &#123;</div><div class="line">        private Context context;</div><div class="line"></div><div class="line">        public JavaScriptInterface(Context context) &#123;</div><div class="line">            this.context = context;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //点击图片回调方法</div><div class="line">        //必须添加注解,否则无法响应</div><div class="line">        @JavascriptInterface</div><div class="line">        public void openImage(String img) &#123;</div><div class="line">            Log.i(&quot;TAG&quot;, &quot;响应点击事件!&quot;);</div><div class="line">            Intent intent = new Intent();</div><div class="line">            intent.putExtra(&quot;image&quot;, img);</div><div class="line">            // BigImageActivity查看大图的类，自己定义就好</div><div class="line">            // intent.setClass(context, BigImageActivity.class);</div><div class="line">            context.startActivity(intent);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-WebView-不仅可以通过-URL-装载网页，也可以直接装载-HTML-代码，WebView-类有两个方法可以装载-HTML-代码"><a href="#2-WebView-不仅可以通过-URL-装载网页，也可以直接装载-HTML-代码，WebView-类有两个方法可以装载-HTML-代码" class="headerlink" title="2. WebView 不仅可以通过 URL 装载网页，也可以直接装载 HTML 代码，WebView 类有两个方法可以装载 HTML 代码:"></a>2. WebView 不仅可以通过 <code>URL</code> 装载网页，也可以直接装载 <code>HTML 代码</code>，WebView 类有两个方法可以装载 HTML 代码:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">loadData(String data, String mimeType, String encoding)</div></pre></td></tr></table></figure>
<p>此方法在装载包含中文的 HTML 代码时会有乱码</p>
<p>与</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">loadDataWithBaseURL(String baseUrl, String data, String mimeType, String encoding, String historyUrl)</div></pre></td></tr></table></figure>
<p>此方法不会有乱码</p>
<p><strong>参数：</strong></p>
<ul>
<li>baseUrl: 获得相对路径的根 URL, 如果设为null, 默认值为 about:blank </li>
<li>historyUrl: 如果HTML代码装载失败或为 null, WebView 组件会装载这个参数指定的URL.</li>
<li>data : HTML代码 </li>
<li>mimeType: Mime类型， 一般为 text/html </li>
<li>encoding: HTML代码的编码， 例如： GBK, uft-8</li>
</ul>
<h2 id="3-在HTML文档中设置自适应屏幕（文字）"><a href="#3-在HTML文档中设置自适应屏幕（文字）" class="headerlink" title="3. 在HTML文档中设置自适应屏幕（文字）"></a>3. 在HTML文档中设置自适应屏幕（文字）</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="4-在Android的WebView中点击“返回按钮”时的操作"><a href="#4-在Android的WebView中点击“返回按钮”时的操作" class="headerlink" title="4. 在Android的WebView中点击“返回按钮”时的操作"></a>4. 在Android的WebView中点击“返回按钮”时的操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * webView监听返回按钮</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> keyCode 按钮码</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> event   事件</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> 。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> ((keyCode == KeyEvent.KEYCODE_BACK)) &#123;</div><div class="line">        <span class="keyword">if</span> (web_act_view.canGoBack()) &#123;</div><div class="line">            <span class="comment">//goBack()表示返回WebView的上一页面</span></div><div class="line">            web_act_view.goBack();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            finish();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Activity总结]]></title>
      <url>/Activity%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>Activity总结</p>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="1-Activity生命周期图"><a href="#1-Activity生命周期图" class="headerlink" title="1. Activity生命周期图"></a>1. Activity生命周期图</h1><h2 id="1-1-典型生命周期"><a href="#1-1-典型生命周期" class="headerlink" title="1.1. 典型生命周期"></a>1.1. 典型生命周期</h2><p>用户参与的情况下，Activity所经过的生命周期。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/activity_lifecycle.png" alt=""></p>
<h3 id="1-1-1-生命周期分析"><a href="#1-1-1-生命周期分析" class="headerlink" title="1.1.1. 生命周期分析"></a>1.1.1. 生命周期分析</h3><ul>
<li><p><strong>onCreate()</strong></p>
<p>表示Activity正在被创建，可以进行一些初始化的操作。</p>
</li>
<li><p><strong>onRestart()</strong></p>
<p>表示Activity正在重新启动。从不可见变为可见时，此方法就会被调用。若当前Activity执行 onPause() 和 onStop() 方法后，再次回到此Activity时，此方法将会被调用。</p>
</li>
<li><p><strong>onStart()</strong></p>
<p>表示此Activity即将被启动，即将开始时。此时Activity已经可见，但是还在后台，无法和用户交互。</p>
</li>
<li><p><strong>onResume()</strong></p>
<p>表示Activity已经可见，并且出现在前台。</p>
</li>
<li><p><strong>onPause()</strong></p>
<p>表示Activity正在停止。</p>
</li>
<li><p><strong>onStop()</strong> </p>
<p>表示Activity即将停止。可以做一些回收工作，不能太耗时。</p>
</li>
<li><p><strong>onDestroy()</strong></p>
<p>表示Activity即将被销毁。可以做一些回收、资源释放操作。</p>
</li>
</ul>
<h3 id="1-1-2-声明周期执行过程"><a href="#1-1-2-声明周期执行过程" class="headerlink" title="1.1.2. 声明周期执行过程"></a>1.1.2. 声明周期执行过程</h3><ul>
<li><p><strong>第一次启动</strong></p>
<pre><code>onCreate() -&gt; onStart() -&gt; onResume()
</code></pre></li>
<li><p><strong>当用户打开新的Activity时或者回退到桌面时，调用</strong></p>
<pre><code>onPause() -&gt; onStop()
</code></pre></li>
<li><p><strong>当再次打开原Activity时，调用</strong></p>
<pre><code>onRestart()-&gt; onStart() -&gt; onResume()
</code></pre></li>
<li><p><strong>回退桌面时，调用</strong></p>
<pre><code>onPause() -&gt; onStop() -&gt; onDestroy()
</code></pre></li>
</ul>
<h3 id="1-1-3-说明"><a href="#1-1-3-说明" class="headerlink" title="1.1.3. 说明"></a>1.1.3. 说明</h3><p>当从当前的Activity A 打开Activity B时，Activity A将先执行 onPause() 方法，然后 Activity B 才执行 第一次启动时调用的声明周期方法。即：旧Activity先 onPause() ， 新Activity再启动。新Activity再启动后，旧Activity执行 onStop() 方法</p>
<h2 id="1-2-异常生命周期"><a href="#1-2-异常生命周期" class="headerlink" title="1.2. 异常生命周期"></a>1.2. 异常生命周期</h2><p>Activity被系统回收或者由于当前设备的Configuration发生改变而导致的Activity被销毁重建。</p>
<h3 id="1-2-1-系统配置发生改变导致Activity被杀死并被重建"><a href="#1-2-1-系统配置发生改变导致Activity被杀死并被重建" class="headerlink" title="1.2.1 系统配置发生改变导致Activity被杀死并被重建"></a>1.2.1 系统配置发生改变导致Activity被杀死并被重建</h3><p>在这种状态下的生命周期：</p>
<ul>
<li><p><strong>意外时：</strong></p>
<pre><code>Activity -&gt; onSaveInstanceState() -&gt; onDestroy()
</code></pre><p><strong>onSaveInstanceState()</strong>用来保存当前Activity状态，此方法将会在 onStop() 之前被调用。</p>
</li>
<li><p><strong>重建时：</strong></p>
<pre><code>Activity -&gt; onCreate() -&gt; onRestoreInstanceState()
</code></pre></li>
</ul>
<h3 id="1-2-2-内存不足导致-低优先级Activity-被杀死"><a href="#1-2-2-内存不足导致-低优先级Activity-被杀死" class="headerlink" title="1.2.2 内存不足导致 低优先级Activity 被杀死"></a>1.2.2 内存不足导致 低优先级Activity 被杀死</h3><ul>
<li><p><strong>优先级问题</strong></p>
<ul>
<li><strong>前台Activity：</strong> 与用户进行交互的Activity，优先级最高</li>
<li><strong>可见非前台Activity：</strong> 当前Activity弹出了一个对话框，原Activity虽可见，但是用户无法进行交互。</li>
<li><strong>后台Activity：</strong> 优先级最低</li>
</ul>
<p>如果一个进程中没有四大组件在执行，那么这个进程将会很快的被杀死。</p>
</li>
</ul>
<h1 id="2-Activity-启动模式"><a href="#2-Activity-启动模式" class="headerlink" title="2. Activity 启动模式"></a>2. Activity 启动模式</h1><h2 id="2-1-启动模式-4种："><a href="#2-1-启动模式-4种：" class="headerlink" title="2.1. 启动模式 - 4种："></a>2.1. 启动模式 - 4种：</h2><ul>
<li><p><strong>standard：</strong>标准模式。</p>
<p>对应Activity的 Flags ：<strong>FLAG_ACTIVITY_NEW_TASK</strong>  </p>
<p>当搭配<strong>FLAG_ACTIVITY_CLEAR_TOP</strong>时，连同此Activity在内的Activity都要一同出栈。</p>
<p>每次启动一个Activity都会创建一个新的实例，不论这个实例是否已经存在。此模式下的Activity会默认进入启动它的Activity的所属栈中。</p>
</li>
<li><p><strong>singleTop：</strong>栈顶（top）复用（single）模式。</p>
<p>对应Activity的 Flags ：<strong>FLAG_ACTIVITY_SINGLE_TOP</strong>  </p>
<p>如果新Activity已经位于任务栈顶，那么此Activity将不会被重新创建，同时它的 onNewIntent() 将会被调用。</p>
<p>示例：<br>1：若A为栈底，C为栈顶，当ABC时，在此模式下启动C时，则仍为ABC。<br>2：若A为栈底，B为栈顶，当ACB时，在此模式下启动C时，任务栈为：ACBC。</p>
</li>
<li><p><strong>singTask：</strong>栈内复用模式。</p>
<p>默认具 Activity的 Flags ：<strong>FLAG_ACTIVITY_CLEAR_TOP</strong>  。此 Flags 表示：它标记的Activity，当它启动时，在同一任务栈中的所有位与此Activity之上的Activity都要出栈。</p>
<p>如：之前栈内为：ABCD，当调用B后，栈内的情况变为：AB。</p>
<p>只要Activity在一个栈中存在，那么多次启动此Activity将不会重新创建该实例。默认具有 clearTop 功能</p>
<p><strong>创建过程</strong>，若：</p>
<p>1：启动 Activity A 时，若不存在A所需的任务栈，那么创建一个任务栈，然后创建 Activity A 的实例，将A实例压入任务栈中。</p>
<p>2：启动 Activity A 时，若存在A所需的的任务栈，看栈中是否存在 Activity A  实例，若存在，将其调到栈顶，并调用 onNewIntent() ；若不存在，创建A的实例，将其压入A所需的栈中。</p>
</li>
<li><p><strong>singleInstance：</strong>单实例模式，加强版 singleTask。</p>
<p>在 singleTask 原有的特点基础之上，还加强了一点：设置了此模式的 Activity 只能单独的位于一个任务栈中。</p>
</li>
</ul>
<h2 id="2-2-IntentFilter-匹配规则"><a href="#2-2-IntentFilter-匹配规则" class="headerlink" title="2.2. IntentFilter 匹配规则"></a>2.2. IntentFilter 匹配规则</h2><p>启动Activity分为两种：显式 + 隐式。如果二者同时存在的话以 显式 为主。 </p>
<h3 id="2-2-1-隐式调用"><a href="#2-2-1-隐式调用" class="headerlink" title="2.2.1 隐式调用"></a>2.2.1 隐式调用</h3><p>隐式调用需要 Intent 能够匹配目标组件中的 IntentFilter 中的过滤信息。</p>
<ul>
<li>只有一个 Intent 同时匹配这3个类别时，才能启动Activity，否则无法启动Activity。</li>
<li><p>一个Intent可以有多个intent-filter，一个Intent只要能匹配任何一组intent-filter即可成功启动对应Activity。</p>
</li>
<li><p><strong>action匹配规则：</strong> 是一个字符串，系统预定义，可自定义一些。要求Intent中的action存在且必须和过滤中规则中的一个action相同。</p>
</li>
<li><p><strong>categoryn匹配规则：</strong> 是一个字符串，系统预定义一些，可自定义。Intent中如果出现了category，那么不管有几个category，对于每一个category来说，它必须是过滤规则中已经存在的category。</p>
<p>  <strong>注意：</strong>Intent不设置category也可以匹配。原因是系统在调用 startActivity() 或 startActivityForResult() 时会默认为Intent添加 <code>android.intent.category.DEFAULT</code>这个category。</p>
<p>  所以，为了我们的Activity能够接受 隐式 调用，必须在 intent-filter 中指定以上这个category。</p>
</li>
<li><p><strong>data</strong></p>
</li>
</ul>
<h3 id="2-2-2-入口Activity，缺一不可"><a href="#2-2-2-入口Activity，缺一不可" class="headerlink" title="2.2.2 入口Activity，缺一不可"></a>2.2.2 入口Activity，缺一不可</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;intent-filter&gt;</div><div class="line">	&lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;</div><div class="line">	&lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;</div><div class="line">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure>
<h3 id="2-2-3-判断是否有Activity能够匹配-隐式-Intent。"><a href="#2-2-3-判断是否有Activity能够匹配-隐式-Intent。" class="headerlink" title="2.2.3 判断是否有Activity能够匹配 隐式 Intent。"></a>2.2.3 判断是否有Activity能够匹配 隐式 Intent。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public abstract List&lt;ResolveInfo&gt; queryIntentActivities(Intent intent, @ResolveInfoFlags int flags);</div><div class="line">public abstract ResolveInfo resolveActivity(Intent intent, @ResolveInfoFlags int flags);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 8.0/8.1 Notification的使用]]></title>
      <url>/Android%208.0%208.1%20Notification%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考：<a href="http://blog.csdn.net/rentee/article/details/78303532" target="_blank" rel="external">http://blog.csdn.net/rentee/article/details/78303532</a><br>非常全面的参考：<a href="https://www.jianshu.com/p/d2051a785309" target="_blank" rel="external">https://www.jianshu.com/p/d2051a785309</a></p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="起因-设置“Notification”后，状态栏并没有任何提示"><a href="#起因-设置“Notification”后，状态栏并没有任何提示" class="headerlink" title="起因 - 设置“Notification”后，状态栏并没有任何提示"></a>起因 - 设置“Notification”后，状态栏并没有任何提示</h1><p>最近项目中需要使用到“Notification”，这个原本在android中非常简单就能实现的功能，如今我却怎么设置都不成功，这让我颇为郁闷。</p>
<!-- more -->
<p>然后开始查看别人是怎么写的，但是同样并没有任何效果。然后我意识到我的系统版本时<strong>Android 8.1</strong>。设置方式已经变了。</p>
<p>一个前版本的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Notification.Builder builder = new Notification.Builder(this);</div><div class="line">   Intent intent = new Intent(this, TraceActivity.class);</div><div class="line">   Bitmap icon = BitmapFactory.decodeResource(this.getResources(), R.drawable.ic_person_pin_circle_cyan_700_24dp);</div><div class="line">   //设置pendingIntent</div><div class="line">   builder.setContentIntent(PendingIntent.getActivity(this, 0, intent, 0))</div><div class="line">           .setLargeIcon(icon)</div><div class="line">           .setContentTitle(&quot;领队定位&quot;)</div><div class="line">           .setSmallIcon(R.drawable.ic_person_pin_circle_white_18dp)</div><div class="line">           .setContentText(&quot;定位服务正在运行中……&quot;);</div><div class="line">   NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</div><div class="line">   manager.notify(1, builder.build());</div></pre></td></tr></table></figure>
<p>这样的写法运行在<strong>Android 8.0</strong>之上是没有任何效果的。</p>
<h1 id="Android-8-0-Notification"><a href="#Android-8-0-Notification" class="headerlink" title="Android 8.0 Notification"></a>Android 8.0 Notification</h1><p><strong>注意：</strong></p>
<p>代码中添加了：<code>NotificationChannel</code>这个类。<br>这是Android O新增的通知渠道，其允许您为要显示的每种通知类型创建用户可自定义的渠道。用户界面将通知渠道称之为通知类别。</p>
<p>NotificationChannel是Android O新增的特性，为了兼容老代码，如果channelId为null的话，Android O会把通知归到“Other Channel”上。<br>PS：将targetSdkVersion提到26以上的话，就必须设置channel了，不能为null。</p>
<h2 id="使用到的类"><a href="#使用到的类" class="headerlink" title="使用到的类"></a>使用到的类</h2><h3 id="1-NotificationChannel"><a href="#1-NotificationChannel" class="headerlink" title="1. NotificationChannel"></a>1. NotificationChannel</h3><p>官方解释为：适用于类似主题通知的集合的设置的表示形式。<br>使用方式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 创建自己的的NotificationChannel 参数1：id：channeId；参数2：name：自定义类别的名字，在&quot;设置界面&quot;的类别栏下回显示 name；参数3：重要等级</div><div class="line">NotificationChannel channel = new NotificationChannel(&quot;10&quot;,&quot;普通通知&quot;,NotificationManager.IMPORTANCE_DEFAULT);</div><div class="line">// NotificationManager管理器</div><div class="line">NotificationManager mNotifyMgr = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</div><div class="line">// 使用channel对象</div><div class="line">mNotifyMgr.createNotificationChannel(channel);</div></pre></td></tr></table></figure>
<h3 id="2-NotificationManager"><a href="#2-NotificationManager" class="headerlink" title="2. NotificationManager"></a>2. NotificationManager</h3><p>官方解释为：通知用户发生事件的类。 这是如何告诉用户在后台发生了什么事情。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NotificationManager mNotifyMgr = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</div><div class="line">// 发出通知</div><div class="line">mNotifyMgr.notify(10, notification);</div></pre></td></tr></table></figure>
<h3 id="3-Notification-Builder"><a href="#3-Notification-Builder" class="headerlink" title="3. Notification.Builder"></a>3. Notification.Builder</h3><p>官方解释：一个类，它表示如何使用一个持久化通知呈现给用户</p>
<h2 id="初步使用实例的图解"><a href="#初步使用实例的图解" class="headerlink" title="初步使用实例的图解"></a>初步使用实例的图解</h2><p><strong>较为完整的通知示例图解</strong></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-15%2015.44.27.png" alt=""></p>
<p>通知频道的名称：<strong>new NotificationChannel(“10”,”普通通知”,NotificationManager.IMPORTANCE_DEFAULT);</strong></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-15%2015.40.55.png" alt=""></p>
<p>未设置颜色的样式：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-15%2015.38.10.png" alt=""></p>
<h2 id="添加自定义提醒"><a href="#添加自定义提醒" class="headerlink" title="添加自定义提醒"></a>添加自定义提醒</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 添加自定义声音提醒</span></div><div class="line">builder.setSound(Uri.parse(<span class="string">"path/to/sound"</span>));</div><div class="line"></div><div class="line"><span class="comment">// 添加自定义震动提醒</span></div><div class="line"><span class="comment">// 延迟200ms后震动300ms，再延迟400ms后震动500ms</span></div><div class="line"><span class="keyword">long</span>[] pattern = <span class="keyword">new</span> <span class="keyword">long</span>[]&#123;<span class="number">200</span>,<span class="number">300</span>,<span class="number">400</span>,<span class="number">500</span>&#125;; </div><div class="line">builder.setVibrate(pattern);</div><div class="line"></div><div class="line"><span class="comment">// 添加自定义呼吸灯提醒，自动添加FLAG_SHOW_LIGHTS</span></div><div class="line"><span class="keyword">int</span> argb = <span class="number">0xffff0000</span>;  <span class="comment">// led灯光颜色</span></div><div class="line"><span class="keyword">int</span> onMs = <span class="number">300</span>;         <span class="comment">// led亮灯持续时间</span></div><div class="line"><span class="keyword">int</span> offMs = <span class="number">100</span>;        <span class="comment">// led熄灯持续时间</span></div><div class="line">builder.setLights(argb, onMs, offMs);</div></pre></td></tr></table></figure>
<h2 id="一个完整的Notification-初步使用-实例"><a href="#一个完整的Notification-初步使用-实例" class="headerlink" title="一个完整的Notification 初步使用 实例"></a>一个完整的Notification 初步使用 实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * android  8.0 新的Notification</div><div class="line"> */</div><div class="line">@RequiresApi(api = Build.VERSION_CODES.O)</div><div class="line">private void initNotification() &#123;</div><div class="line"></div><div class="line">    Bitmap bitmap = BitmapFactory.decodeResource(getResources(),R.drawable.ic_map_cyan_700_48dp);</div><div class="line"></div><div class="line">    // 创建自己的的NotificationChannel 参数1：id：channeId；参数2：name：自定义类别的名字，在&quot;设置界面&quot;的类别栏下回显示 name；参数3：重要等级</div><div class="line">    NotificationChannel channel = new NotificationChannel(&quot;10&quot;,&quot;普通通知&quot;,NotificationManager.IMPORTANCE_DEFAULT);</div><div class="line">    channel.enableLights(true);</div><div class="line">    channel.setLightColor(Color.RED);</div><div class="line">    channel.setShowBadge(true);</div><div class="line">    channel.setDescription(&quot;description&quot;);</div><div class="line"></div><div class="line">    // NotificationManager管理器</div><div class="line">    NotificationManager mNotifyMgr = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</div><div class="line">    // 使用channel对象</div><div class="line">    mNotifyMgr.createNotificationChannel(channel);</div><div class="line"></div><div class="line">    // 点击通知之后的意图</div><div class="line">    PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, new Intent(this, TraceActivity.class), 0);</div><div class="line">    PendingIntent pendingIntent2 = PendingIntent.getActivity(this, 0, new Intent(this, ChangePwdActivity.class), 0);</div><div class="line"></div><div class="line">    Notification notification = new Notification.Builder(this,&quot;10&quot;)</div><div class="line">            // 设置通知 右侧 大图标</div><div class="line">            .setLargeIcon(bitmap)</div><div class="line">            // 设置通知的图标、app文字名称，若不设置则整个通知均为黑灰色</div><div class="line">            .setColor(getResources().getColor(R.color.Deep_Orange_700))</div><div class="line">            // 无障碍服务所需文字</div><div class="line">            .setTicker(&quot;这是什么玩意？- 国旅&quot;)</div><div class="line">            // 小图标</div><div class="line">            .setSmallIcon(R.drawable.ic_person_pin_circle_cyan_700_24dp)</div><div class="line">            // 标题文本</div><div class="line">            .setContentTitle(&quot;Notification Title&quot;)</div><div class="line">            // 解释内容 - 子文本</div><div class="line">            .setContentText(&quot;Text &amp; Text&quot;)</div><div class="line">            // 在项目app名称右侧显示的内容文字</div><div class="line">            .setSubText(&quot;Sub_tex&quot;)</div><div class="line">            // 设置通知的动作数组</div><div class="line">            .setActions(new Notification.Action[]&#123;new Notification.Action(R.drawable.contact_me,&quot;进入Map&quot;,pendingIntent),new Notification.Action(R.drawable.contact_me,&quot;修改密码&quot;,pendingIntent2)&#125;)</div><div class="line">            // 设置单个动作</div><div class="line">            //.setActions(new Notification.Action(R.drawable.contact_me,&quot;修改密码&quot;,pendingIntent2))</div><div class="line">            // 仅当 配合&quot;setContentIntent(pendingIntent)&quot;使用时，点击通知会自动消失</div><div class="line">            .setAutoCancel(true)</div><div class="line">            // 为通知设置意图</div><div class="line">            //.setContentIntent(pendingIntent)</div><div class="line">            // 同时实现：铃声/振动/灯呼吸 三种提醒方式</div><div class="line">            .setDefaults(Notification.DEFAULT_ALL)</div><div class="line">            .setWhen(0)</div><div class="line">            .setNumber(3)</div><div class="line">            .build();   // getNotification()  deprecated in API level 16</div><div class="line"></div><div class="line">    // 发出通知</div><div class="line">    mNotifyMgr.notify(10, notification);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li><p>如果该通知只是起到 <strong>“通知”</strong>的作用，不希望用户点击后有相应的跳转，那么，<strong>intent、pendingIntent</strong>这几行代码可以不写，可以创建延时操作，当通知被成功 notify 后，一段时间后调用<strong>manager.cancel(notificationID)，将通知清除</strong>，此时builder.setAutoCancel()方法不写也可以。  </p>
</li>
<li><p>如果通知栏下拉后，希望用户<strong>点击并有相应的跳转事件</strong>。那么，要注意跳转后，通知是否有必要继续存在。如果点击后通知消失，两种方法：</p>
<ul>
<li>设置setAutoCancel 参数设置为 true，默认是false，</li>
<li><p>在intent事件中的如本例中的MainActivity的onCreate()方法调用 manager.cancel(notificationID)取消该通知，此ID要和创建通知的ID一致，否则通知不消失。</p>
<p>如果点击不消失，将setAutoCancel 参数设置为 false即可。</p>
</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android版本新特性 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第三方库]]></title>
      <url>/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>总结</p>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="1-SwipeToLoadLayout"><a href="#1-SwipeToLoadLayout" class="headerlink" title="1. SwipeToLoadLayout"></a>1. SwipeToLoadLayout</h1><p>滑动加载布局，可以实现下拉刷新与上拉加载更多。该库支持对ListView，GridView，RecyclerView，WebView，ScrollView等滑动视图的下载刷新与上拉加载更多。</p>
<h2 id="1-1-配置"><a href="#1-1-配置" class="headerlink" title="1.1 配置"></a>1.1 配置</h2><ul>
<li>首先在工程的build.gradle上面添加JitPack仓库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        ...</div><div class="line">        maven &#123; url &quot;https://jitpack.io&quot; &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在模块的build.gradle上面添加依赖</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile &apos;com.github.Aspsine:SwipeToLoadLayout:1.0.3&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1-2-基本使用"><a href="#1-2-基本使用" class="headerlink" title="1.2 基本使用"></a>1.2 基本使用</h2><p>SwipeToLoadLayout下面定义三个子视图:</p>
<ul>
<li>SwipeRefreshHeaderLayout : 代表下拉刷新的头部</li>
<li>RecyclerView: 代表滑动视图主体</li>
<li>SwipeLoadMoreFooterLayout: 代表上拉加载更多的尾部</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;com.aspsine.swipetoloadlayout.SwipeToLoadLayout</div><div class="line">    android:id=&quot;@+id/swipeToLoadLayout&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line">    &lt;com.aspsine.swipetoloadlayout.SwipeRefreshHeaderLayout</div><div class="line">        android:id=&quot;@id/swipe_refresh_header&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;100dp&quot;</div><div class="line">        android:gravity=&quot;center&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;android.support.v7.widget.RecyclerView</div><div class="line">        android:id=&quot;@+id/swipe_target&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line"></div><div class="line">    &lt;/android.support.v7.widget.RecyclerView&gt;</div><div class="line"></div><div class="line">    &lt;com.aspsine.swipetoloadlayout.SwipeLoadMoreFooterLayout</div><div class="line">        android:id=&quot;@id/swipe_load_more_footer&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;100dp&quot;</div><div class="line">        android:gravity=&quot;center&quot; /&gt;</div><div class="line">&lt;/com.aspsine.swipetoloadlayout.SwipeToLoadLayout&gt;</div></pre></td></tr></table></figure>
<p><strong>这三个子视图的id必须是上面所写的，否则会出错</strong></p>
<h2 id="1-3-常用属性"><a href="#1-3-常用属性" class="headerlink" title="1.3 常用属性"></a>1.3 常用属性</h2><ul>
<li>app:refresh_enabled：设置是否可以下拉刷新</li>
<li>app:load_more_enabled：设置是否可以上拉加载更多</li>
<li>app:swipe_style：设置下拉刷新与上拉加载的样式，其值为classic，above，blew或scale</li>
<li>app:refresh_trigger_offset：触发下拉刷新的偏移量，默认值是下拉刷新头部的高度</li>
<li>app:load_more_trigger_offset：触发上拉加载更多的偏移量，默认值是上拉加载更多的高度</li>
<li>app:refresh_final_drag_offset：下拉刷新最大可以拖动的偏移量</li>
<li>app:load_more_final_drag_offset：上拉加载更多最大可以拖动的偏移量</li>
<li>app:release_to_refreshing_scrolling_duration：释放下拉刷新持续滚动的时间</li>
<li>app:release_to_loading_more_scrolling_duration：释放上拉加载更多持续滚动的时间</li>
<li>app:refresh_complete_delay_duration：下拉刷新完成延迟的持续时间</li>
<li>app:load_more_complete_delay_duration：上拉加载更多完成延迟的持续时间</li>
<li>app:refresh_complete_to_default_scrolling_duration：默认完成下拉刷新持续滚动时间</li>
<li>app:load_more_complete_to_default_scrolling_duration： 默认完成上拉加载更多持续滚动时间</li>
<li>app:default_to_refreshing_scrolling_duration：默认下拉刷新滚动时间</li>
<li>app:default_to_loading_more_scrolling_duration：默认上拉加载更多滚动时间</li>
</ul>
<h2 id="1-4-自定义下拉刷新头部与上拉加载更多尾部"><a href="#1-4-自定义下拉刷新头部与上拉加载更多尾部" class="headerlink" title="1.4 自定义下拉刷新头部与上拉加载更多尾部"></a>1.4 自定义下拉刷新头部与上拉加载更多尾部</h2><ul>
<li>定义下拉刷新头部视图只需要实现SwipeRefreshTrigger, SwipeTrigger两个接口就行</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefreshHeaderView</span> <span class="keyword">extends</span> <span class="title">TextView</span> <span class="keyword">implements</span> <span class="title">SwipeRefreshTrigger</span>, <span class="title">SwipeTrigger</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RefreshHeaderView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RefreshHeaderView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">        setText(<span class="string">"REFRESHING"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPrepare</span><span class="params">()</span> </span>&#123;</div><div class="line">        setText(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMove</span><span class="params">(<span class="keyword">int</span> yScrolled, <span class="keyword">boolean</span> isComplete, <span class="keyword">boolean</span> automatic)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!isComplete) &#123;</div><div class="line">            <span class="keyword">if</span> (yScrolled &gt;= getHeight()) &#123;</div><div class="line">                setText(<span class="string">"RELEASE TO REFRESH"</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                setText(<span class="string">"SWIPE TO REFRESH"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            setText(<span class="string">"REFRESH RETURNING"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRelease</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">        setText(<span class="string">"COMPLETE"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReset</span><span class="params">()</span> </span>&#123;</div><div class="line">        setText(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>定义上拉加载更多尾部视图只需要实现SwipeLoadMoreTrigger, SwipeTrigger两个接口就行</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadMoreFooterView</span> <span class="keyword">extends</span> <span class="title">TextView</span> <span class="keyword">implements</span> <span class="title">SwipeTrigger</span>, <span class="title">SwipeLoadMoreTrigger</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoadMoreFooterView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoadMoreFooterView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadMore</span><span class="params">()</span> </span>&#123;</div><div class="line">        setText(<span class="string">"LOADING MORE"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPrepare</span><span class="params">()</span> </span>&#123;</div><div class="line">        setText(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMove</span><span class="params">(<span class="keyword">int</span> yScrolled, <span class="keyword">boolean</span> isComplete, <span class="keyword">boolean</span> automatic)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!isComplete) &#123;</div><div class="line">            <span class="keyword">if</span> (yScrolled &lt;= -getHeight()) &#123;</div><div class="line">                setText(<span class="string">"RELEASE TO LOAD MORE"</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                setText(<span class="string">"SWIPE TO LOAD MORE"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            setText(<span class="string">"LOAD MORE RETURNING"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRelease</span><span class="params">()</span> </span>&#123;</div><div class="line">        setText(<span class="string">"LOADING MORE"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">        setText(<span class="string">"COMPLETE"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReset</span><span class="params">()</span> </span>&#123;</div><div class="line">        setText(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 第三方 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac下在Androidstudio中获取数字签名证书的SHA1值]]></title>
      <url>/Mac%E4%B8%8B%E5%9C%A8Androidstudio%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E7%9A%84SHA1%E5%80%BC/</url>
      <content type="html"><![CDATA[<p>总结</p>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="获取步骤"><a href="#获取步骤" class="headerlink" title="获取步骤"></a>获取步骤</h1><ul>
<li><p>AndroidStudio切换到Terminal</p>
</li>
<li><p>输入命令：cd ~/.android </p>
</li>
<li><p>输入命令：keytool -list -v -keystore debug.keystore</p>
</li>
<li><p>输入密钥库口令:  <code>android</code> 或者 <code>回车</code></p>
</li>
</ul>
<p>得到的结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">*****************  WARNING WARNING WARNING  *****************</div><div class="line">* 存储在您的密钥库中的信息的完整性  *</div><div class="line">* 尚未经过验证!  为了验证其完整性, *</div><div class="line">* 必须提供密钥库口令。                  *</div><div class="line">*****************  WARNING WARNING WARNING  *****************</div><div class="line"></div><div class="line">密钥库类型: JKS</div><div class="line">密钥库提供方: SUN</div><div class="line"></div><div class="line">您的密钥库包含 1 个条目</div><div class="line"></div><div class="line">别名: androiddebugkey</div><div class="line">创建日期: 2017-6-24</div><div class="line">条目类型: PrivateKeyEntry</div><div class="line">证书链长度: 1</div><div class="line">证书[1]:</div><div class="line">所有者: C=US, O=Android, CN=Android Debug</div><div class="line">发布者: C=US, O=Android, CN=Android Debug</div><div class="line">序列号: 1</div><div class="line">有效期开始日期: Sat Jun 24 22:49:12 CST 2017, 截止日期: Mon Jun 17 22:49:12 CST 2047</div><div class="line">证书指纹:</div><div class="line">         MD5: ……</div><div class="line">         SHA1: ……</div><div class="line">         SHA256: ……</div><div class="line">         签名算法名称: SHA1withRSA</div><div class="line">         版本: 1</div><div class="line"></div><div class="line"></div><div class="line">*******************************************</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Kit </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[百度地图开发-鹰眼轨迹]]></title>
      <url>/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E5%BC%80%E5%8F%91-%E9%B9%B0%E7%9C%BC%E8%BD%A8%E8%BF%B9/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考：<a href="http://www.jianshu.com/p/29ccac3e1e42" target="_blank" rel="external">http://www.jianshu.com/p/29ccac3e1e42</a></p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h1><p><em>1. 后台service是否存活</em><br><em>2. 电量与流量提示</em><br><em>3. 坐标系说明</em></p>
<h1 id="需求概览"><a href="#需求概览" class="headerlink" title="需求概览"></a>需求概览</h1><ul>
<li>围栏：到达指定位置之后通知</li>
<li>鹰眼轨迹：根据行踪绘制轨迹</li>
<li>位置提醒：到达指定位置后提醒。</li>
</ul>
<h1 id="一、定位方式"><a href="#一、定位方式" class="headerlink" title="一、定位方式"></a>一、定位方式</h1><p>gps定位、wifi定位、基站（SIM卡）定位</p>
<h2 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h2><h3 id="1-gps定位："><a href="#1-gps定位：" class="headerlink" title="1. gps定位："></a>1. gps定位：</h3><p>卫星定位，利用手机gps硬件定位，实现简单，手机本地就能实现定位，不需要和服务端进行交互。<br>在室内或者有遮蔽物的地点无法接收到gps信号。此时利用wifi定位。</p>
<p>gps定位<strong>精度很高</strong>，几米到十几米，但是<strong>耗电严重</strong>。</p>
<h3 id="2-wifi定位："><a href="#2-wifi定位：" class="headerlink" title="2. wifi定位："></a>2. wifi定位：</h3><p>在室外既能接收gps信号，也能接收wifi信号。<br>wifi定位的原理是，我们在室外的时候，手机能接收到gps位置信息，也能扫描到WiFi，当手机把gps位置和WiFi传到后端服务器，WiFi和gps位置就建立了映射关系，当手机在室内无法接收到gps时，却能扫描WiFi，手机把WiFi传到服务器查询出对应的gps位置，然后进行计算可以得到位置结果（经纬度），其中映射和计算是很复杂的过程。</p>
<p>WiFi定位精度相对于gps<strong>差一点</strong>，但是也能到十几米、几十米，也有上百米的误差的，<strong>低耗电</strong>。</p>
<h3 id="3-基站定位："><a href="#3-基站定位：" class="headerlink" title="3. 基站定位："></a>3. 基站定位：</h3><p>当手机无法扫描到WiFi时，只要装了sim卡，就能连接移动或联通等基站，即可用基站定位，定位原理和WiFi大致相同。基站定位需要装了sim卡，并且手机能上网。</p>
<p><strong>wifi定位与基站定位统称为网络定位。</strong></p>
<p>基站定位<strong>精度很差</strong>，一般都有几百米，<strong>上千米的误差</strong>。</p>
<p><strong>误差其实和wifi、基站的<code>信号覆盖半径</code>有关，wifi覆盖半径大概100m左右，而基站的覆盖半径就到km级别了。</strong></p>
<h1 id="二、百度地图鹰眼认证"><a href="#二、百度地图鹰眼认证" class="headerlink" title="二、百度地图鹰眼认证"></a>二、百度地图鹰眼认证</h1><p>认证与不认证：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-29%2020.52.11.png" alt=""></p>
<p>权限及配额说明：</p>
<p><a href="http://lbsyun.baidu.com/index.php?title=android-yingyan/guide/quota" target="_blank" rel="external">http://lbsyun.baidu.com/index.php?title=android-yingyan/guide/quota</a></p>
<h1 id="三、百度地图-鹰眼轨迹服务-的使用"><a href="#三、百度地图-鹰眼轨迹服务-的使用" class="headerlink" title="三、百度地图 鹰眼轨迹服务 的使用"></a>三、百度地图 鹰眼轨迹服务 的使用</h1><blockquote>
<p>参考：<a href="http://lbsyun.baidu.com/index.php?title=android-yingyan/guide/buildproject" target="_blank" rel="external">http://lbsyun.baidu.com/index.php?title=android-yingyan/guide/buildproject</a></p>
</blockquote>
<h2 id="0-准备条件"><a href="#0-准备条件" class="headerlink" title="0. 准备条件"></a>0. 准备条件</h2><h3 id="01-获取-账号秘钥"><a href="#01-获取-账号秘钥" class="headerlink" title="01. 获取 账号秘钥"></a>01. 获取 账号秘钥</h3><p>账号秘钥 ： <a href="http://lbsyun.baidu.com/apiconsole/key" target="_blank" rel="external">http://lbsyun.baidu.com/apiconsole/key</a></p>
<h3 id="02-创建-鹰眼服务服务"><a href="#02-创建-鹰眼服务服务" class="headerlink" title="02. 创建 鹰眼服务服务"></a>02. 创建 鹰眼服务服务</h3><p>鹰眼服务 ：<a href="http://lbsyun.baidu.com/trace/admin/service" target="_blank" rel="external">http://lbsyun.baidu.com/trace/admin/service</a></p>
<h2 id="1-下载相关文件"><a href="#1-下载相关文件" class="headerlink" title="1. 下载相关文件"></a>1. 下载相关文件</h2><p><a href="http://lbsyun.baidu.com/index.php?title=android-yingyan/sdkandev-download" target="_blank" rel="external">http://lbsyun.baidu.com/index.php?title=android-yingyan/sdkandev-download</a></p>
<h2 id="2-导入库文件"><a href="#2-导入库文件" class="headerlink" title="2. 导入库文件"></a>2. 导入<code>库文件</code></h2><blockquote>
<p>倒库参考：<a href="https://www.cnblogs.com/jiy-for-you/p/6093199.html" target="_blank" rel="external">https://www.cnblogs.com/jiy-for-you/p/6093199.html</a></p>
</blockquote>
<p><strong>注意：使用AndroidStudio 路径</strong></p>
<ul>
<li><strong>将<code>jar文件</code>拷贝到<code>工程的libs目录</code>下，若使用鹰眼的图像存储功能，需导入bos-android-sdk-1.0.2.jar。</strong></li>
</ul>
<p><strong>注意：</strong><br>百度鹰眼包中有okhttp，而我的本地项目中也有okhttp，所以冲突，无法构建。此处注意保留一处即可。</p>
<p><strong>导入<code>so文件</code>方式：</strong></p>
<ul>
<li><strong>1. 将<code>so文件</code>导入到<code>src/main/jniLibs目录</code>下。</strong></li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/20140717191406562.png" alt=""></p>
<ul>
<li><strong>2. 将<code>so文件</code>导入到<code>libs目录</code>下。</strong>，然后在<code>build.gradle</code>文件中添加：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sourceSets &#123;</div><div class="line">    main &#123;</div><div class="line">        jniLibs.srcDir &apos;libs&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong><code>jar包</code>添加完毕之后，需要在<code>gradle文件</code>中进行添加：</strong></li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-29%2023.51.28.png" alt=""></p>
<h2 id="3-配置AndroidManifest-xml文件"><a href="#3-配置AndroidManifest-xml文件" class="headerlink" title="3. 配置AndroidManifest.xml文件"></a>3. 配置<code>AndroidManifest.xml</code>文件</h2><h3 id="3-1-声明使用权限"><a href="#3-1-声明使用权限" class="headerlink" title="3.1 声明使用权限"></a>3.1 声明使用<code>权限</code></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 这个权限用于进行网络定位--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_COARSE_LOCATION"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 用于加快GPS首次定位--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_LOCATION_EXTRA_COMMANDS"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 这个权限用于访问GPS定位--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_FINE_LOCATION"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 用于访问wifi网络信息，wifi信息会用于进行网络定位--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_WIFI_STATE"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 这个权限用于获取wifi的获取权限，wifi信息会用来进行网络定位--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.CHANGE_WIFI_STATE"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 用于读取手机当前的状态--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_PHONE_STATE"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 写入扩展存储，向扩展卡写入数据，用于写入对象存储BOS数据--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 访问网络，网络定位需要上网--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- SD卡读取权限，用于写入对象存储BOS数据--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.MOUNT_UNMOUNT_FILESYSTEMS"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_LOGS"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.VIBRATE"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WAKE_LOCK"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_SETTINGS"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 用于Android M及以上系统，申请加入忽略电池优化白名单--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h3 id="3-2-声明-lt-service-gt-组件"><a href="#3-2-声明-lt-service-gt-组件" class="headerlink" title="3.2 声明&lt;service&gt;组件"></a>3.2 声明<code>&lt;service&gt;</code>组件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">service</span></span></div><div class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"com.baidu.trace.LBSTraceService"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:enabled</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:process</span>=<span class="string">":remote"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="3-3-设置-AccessKey"><a href="#3-3-设置-AccessKey" class="headerlink" title="3.3 设置 AccessKey"></a>3.3 设置 <code>AccessKey</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;application</div><div class="line"></div><div class="line">	……</div><div class="line">	</div><div class="line">	&lt;meta-data             </div><div class="line">		android:name=&quot;com.baidu.lbsapi.API_KEY&quot;             </div><div class="line">		android:value=&quot;AK&quot; /&gt;       //key:开发者申请的Key</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 地图 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[对已有文字处理]]></title>
      <url>/SpannableString%20%E5%AF%B9%E5%B7%B2%E6%9C%89%E6%96%87%E5%AD%97%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考：<a href="http://blog.csdn.net/fan7983377/article/details/51776782" target="_blank" rel="external">http://blog.csdn.net/fan7983377/article/details/51776782</a><br>参考：<a href="http://www.jianshu.com/p/84067ad289d2" target="_blank" rel="external">http://www.jianshu.com/p/84067ad289d2</a></p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<p>关键类：<strong>SpannableString</strong></p>
<h1 id="一、一个实例"><a href="#一、一个实例" class="headerlink" title="一、一个实例"></a>一、一个实例</h1><h2 id="1-更改颜色"><a href="#1-更改颜色" class="headerlink" title="1. 更改颜色"></a>1. 更改颜色</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SpannableString mSpanStartTitle = <span class="keyword">new</span> SpannableString(<span class="string">"点击红色按钮开始录音"</span>);</div><div class="line"><span class="comment">//处理 提示文字的 颜色 样式</span></div><div class="line">ForegroundColorSpan colorSpan = <span class="keyword">new</span> ForegroundColorSpan(Color.parseColor(<span class="string">"#C62828"</span>));</div><div class="line">mSpanStartTitle.setSpan(colorSpan, <span class="number">2</span>, <span class="number">4</span>, Spanned.SPAN_INCLUSIVE_INCLUSIVE);</div><div class="line">mNoticeStartTitle.setText(mSpanStartTitle);</div></pre></td></tr></table></figure>
<h2 id="样式结果"><a href="#样式结果" class="headerlink" title="样式结果"></a>样式结果</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-27%2009.27.18.png" alt=""></p>
<h2 id="2-更改字体大小"><a href="#2-更改字体大小" class="headerlink" title="2. 更改字体大小"></a>2. 更改字体大小</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//代操作……</span></div><div class="line">SpannableString mSpanNoticeTitle = <span class="keyword">new</span> SpannableString(<span class="string">"正在录音中……"</span> + <span class="string">"\n"</span> + <span class="string">"点击停止录音"</span>);</div><div class="line"><span class="comment">//处理 提示文字的 大小 样式</span></div><div class="line">RelativeSizeSpan sizeSpan01 = <span class="keyword">new</span> RelativeSizeSpan(<span class="number">0.7f</span>);</div><div class="line">mSpanNoticeTitle.setSpan(sizeSpan01,<span class="number">7</span>,mSpanNoticeTitle.length(),Spanned.SPAN_INCLUSIVE_INCLUSIVE);</div><div class="line"><span class="comment">//处理 提示文字的 下标 样式</span></div><div class="line">SubscriptSpan subscriptSpan = <span class="keyword">new</span> SubscriptSpan();</div><div class="line">mSpanNoticeTitle.setSpan(subscriptSpan, <span class="number">7</span>, mSpanNoticeTitle.length(), Spanned.SPAN_INCLUSIVE_EXCLUSIVE);</div><div class="line">mNoticeRecordingTitle.setText(mSpanNoticeTitle);</div></pre></td></tr></table></figure>
<h2 id="样式结果-1"><a href="#样式结果-1" class="headerlink" title="样式结果"></a>样式结果</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-27%2009.27.06.png" alt=""></p>
<h1 id="二、SpannableString"><a href="#二、SpannableString" class="headerlink" title="二、SpannableString"></a>二、SpannableString</h1><p>SpannableString和String一样，都是一种字符串类型，同样TextView也可以直接设置SpannableString作为显示文本，不同的是SpannableString可以通过使用其方法setSpan()方法实现字符串各种形式风格的显示,重要的是可以指定设置的区间，也就是为字符串指定下标区间内的子字符串设置格式。</p>
<h1 id="三、SpannableStringBuilder"><a href="#三、SpannableStringBuilder" class="headerlink" title="三、SpannableStringBuilder"></a>三、SpannableStringBuilder</h1><p>应该有不少开发的小伙伴知道StringBuilder，可以使用append()方法实现字符串拼接，非常方便。同样，SpannableString中也有SpannableStringBuilder，顾名思义，就是实现对，SpannableString的一个拼接效果，同样是append()方法，可以实现各种风格效果的SpannableString拼接，非常实用。</p>
<h1 id="四、重要方法-setSpan"><a href="#四、重要方法-setSpan" class="headerlink" title="四、重要方法 - setSpan()"></a>四、重要方法 - setSpan()</h1><pre><code>setSpan(Object what, int start, int end, int flags)
</code></pre><p><code>what</code> ：设置的格式是什么，可以是前景色、背景色也可以是可点击的文本等等；<br><code>start</code>表示需要设置格式的子字符串的起始下标<br><code>end</code>表示终了下标<br><code>flags</code>属性就有意思了，共有四种属性：</p>
<ul>
<li><code>Spanned.SPAN_INCLUSIVE_EXCLUSIVE</code> 从起始下标到终了下标，包括起始下标</li>
<li><code>Spanned.SPAN_INCLUSIVE_INCLUSIVE</code> 从起始下标到终了下标，同时包括起始下标和终了下标</li>
<li><code>Spanned.SPAN_EXCLUSIVE_EXCLUSIVE</code> 从起始下标到终了下标，但都不包括起始下标和终了下标</li>
<li><code>Spanned.SPAN_EXCLUSIVE_INCLUSIVE</code> 从起始下标到终了下标，包括终了下标</li>
</ul>
<h1 id="五、Span常用格式"><a href="#五、Span常用格式" class="headerlink" title="五、Span常用格式"></a>五、Span常用格式</h1><h2 id="1-ForegroundColorSpan，为文本设置前景色，效果和TextView的setTextColor-类似"><a href="#1-ForegroundColorSpan，为文本设置前景色，效果和TextView的setTextColor-类似" class="headerlink" title="1. ForegroundColorSpan，为文本设置前景色，效果和TextView的setTextColor()类似"></a>1. <code>ForegroundColorSpan</code>，为文本设置前景色，效果和TextView的setTextColor()类似</h2><h2 id="2-BackgroundColorSpan，为文本设置背景色，效果和TextView的setBackground-类"><a href="#2-BackgroundColorSpan，为文本设置背景色，效果和TextView的setBackground-类" class="headerlink" title="2. BackgroundColorSpan，为文本设置背景色，效果和TextView的setBackground()类"></a>2. <code>BackgroundColorSpan</code>，为文本设置背景色，效果和TextView的setBackground()类</h2><h2 id="3-RelativeSizeSpan，设置文字相对大小，在TextView原有的文字大小的基础上，相对设置文字大小"><a href="#3-RelativeSizeSpan，设置文字相对大小，在TextView原有的文字大小的基础上，相对设置文字大小" class="headerlink" title="3. RelativeSizeSpan，设置文字相对大小，在TextView原有的文字大小的基础上，相对设置文字大小"></a>3. <code>RelativeSizeSpan</code>，设置文字相对大小，在TextView原有的文字大小的基础上，相对设置文字大小</h2><pre><code>SpannableString spannableString = new SpannableString(&quot;万丈高楼平地起&quot;);
RelativeSizeSpan sizeSpan04 = new RelativeSizeSpan(1.8f);
spannableString.setSpan(sizeSpan04, 3, 4, Spanned.SPAN_INCLUSIVE_EXCLUSIVE);
textView.setText(spannableString);
</code></pre><h2 id="4-StrikethroughSpan，为文本设置中划线，也就是常说的删除线"><a href="#4-StrikethroughSpan，为文本设置中划线，也就是常说的删除线" class="headerlink" title="4. StrikethroughSpan，为文本设置中划线，也就是常说的删除线"></a>4. <code>StrikethroughSpan</code>，为文本设置中划线，也就是常说的删除线</h2><pre><code>SpannableString spannableString = new SpannableString(&quot;为文字设置删除线&quot;);
StrikethroughSpan strikethroughSpan = new StrikethroughSpan();
spannableString.setSpan(strikethroughSpan, 5, spannableString.length(), Spanned.SPAN_INCLUSIVE_EXCLUSIVE);
textView.setText(spannableString);
</code></pre><h2 id="5-UnderlineSpan，为文本设置下划线，具体实现方法如下："><a href="#5-UnderlineSpan，为文本设置下划线，具体实现方法如下：" class="headerlink" title="5. UnderlineSpan，为文本设置下划线，具体实现方法如下："></a>5. UnderlineSpan，为文本设置下划线，具体实现方法如下：</h2><pre><code>SpannableString spannableString = new SpannableString(&quot;为文字设置下划线&quot;);
UnderlineSpan underlineSpan = new UnderlineSpan();
spannableString.setSpan(underlineSpan, 5, spannableString.length(), Spanned.SPAN_INCLUSIVE_EXCLUSIVE);
textView.setText(spannableString);
</code></pre><h2 id="6-SuperscriptSpan，设置上标，具体实现方法如下："><a href="#6-SuperscriptSpan，设置上标，具体实现方法如下：" class="headerlink" title="6. SuperscriptSpan，设置上标，具体实现方法如下："></a>6. SuperscriptSpan，设置上标，具体实现方法如下：</h2><pre><code>SpannableString spannableString = new SpannableString(&quot;为文字设置上标&quot;);
SuperscriptSpan superscriptSpan = new SuperscriptSpan();
spannableString.setSpan(superscriptSpan, 5, spannableString.length(), Spanned.SPAN_INCLUSIVE_EXCLUSIVE);
textView.setText(spannableString);
</code></pre><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-27%2011.01.08.png" alt=""></p>
<h2 id="7-SubscriptSpan，设置下标，具体实现方法如下："><a href="#7-SubscriptSpan，设置下标，具体实现方法如下：" class="headerlink" title="7. SubscriptSpan，设置下标，具体实现方法如下："></a>7. SubscriptSpan，设置下标，具体实现方法如下：</h2><pre><code>SpannableString spannableString = new SpannableString(&quot;为文字设置下标&quot;);
SubscriptSpan subscriptSpan = new SubscriptSpan();
spannableString.setSpan(subscriptSpan, 5, spannableString.length(), Spanned.SPAN_INCLUSIVE_EXCLUSIVE);
textView.setText(spannableString);

#### 8. StyleSpan，为文字设置风格（粗体、斜体），和TextView属性textStyle类似，实现方法如下：
</code></pre><h2 id="8-SpannableString-spannableString-new-SpannableString-“为文字设置粗体、斜体风格”"><a href="#8-SpannableString-spannableString-new-SpannableString-“为文字设置粗体、斜体风格”" class="headerlink" title="8. SpannableString spannableString = new SpannableString(“为文字设置粗体、斜体风格”);"></a>8. SpannableString spannableString = new SpannableString(“为文字设置粗体、斜体风格”);</h2><pre><code>StyleSpan styleSpan_B  = new StyleSpan(Typeface.BOLD);
StyleSpan styleSpan_I  = new StyleSpan(Typeface.ITALIC);
spannableString.setSpan(styleSpan_B, 5, 7, Spanned.SPAN_INCLUSIVE_EXCLUSIVE);
spannableString.setSpan(styleSpan_I, 8, 10, Spanned.SPAN_INCLUSIVE_EXCLUSIVE);
textView.setHighlightColor(Color.parseColor(&quot;#36969696&quot;));
textView.setText(spannableString);
</code></pre><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-27%2011.03.05.png" alt=""></p>
<h2 id="9-ImageSpan，设置文本图片"><a href="#9-ImageSpan，设置文本图片" class="headerlink" title="9. ImageSpan，设置文本图片"></a>9. ImageSpan，设置文本图片</h2><pre><code>SpannableString spannableString = new SpannableString(&quot;在文本中添加表情（表情）&quot;);
Drawable drawable = getResources().getDrawable(R.mipmap.a9c);
drawable.setBounds(0, 0, 42, 42);
ImageSpan imageSpan = new ImageSpan(drawable);
spannableString.setSpan(imageSpan, 6, 8, Spanned.SPAN_INCLUSIVE_EXCLUSIVE);
textView.setText(spannableString);
</code></pre><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-27%2011.05.09.png" alt=""></p>
<h2 id="10-ClickableSpan，设置可点击的文本，设置这个属性的文本可以相应用户点击事件，至于点击事件用户可以自定义"><a href="#10-ClickableSpan，设置可点击的文本，设置这个属性的文本可以相应用户点击事件，至于点击事件用户可以自定义" class="headerlink" title="10. ClickableSpan，设置可点击的文本，设置这个属性的文本可以相应用户点击事件，至于点击事件用户可以自定义"></a>10. ClickableSpan，设置可点击的文本，设置这个属性的文本可以相应用户点击事件，至于点击事件用户可以自定义</h2><p><strong>注意：</strong></p>
<p>使用ClickableSpan的文本如果想真正实现点击作用，必须为TextView设置<strong>setMovementMethod()</strong>方法，否则没有点击相应，至于setHighlightColor方法则是控制点击是的背景色。</p>
<pre><code>SpannableString spannableString = new SpannableString(&quot;为文字设置点击事件&quot;);
MyClickableSpan clickableSpan = new MyClickableSpan(&quot;http://www.jianshu.com/users/dbae9ac95c78&quot;);
spannableString.setSpan(clickableSpan, 5, spannableString.length(), Spanned.SPAN_INCLUSIVE_EXCLUSIVE);
textView.setMovementMethod(LinkMovementMethod.getInstance());
textView.setHighlightColor(Color.parseColor(&quot;#36969696&quot;)); 
textView.setText(spannableString);

// 自定义点击事件
class MyClickableSpan extends ClickableSpan {

    private String content;

    public MyClickableSpan(String content) {
        this.content = content;
    }

    @Override
    public void updateDrawState(TextPaint ds) {
        ds.setUnderlineText(false);
    }

    @Override
    public void onClick(View widget) {
        Intent intent = new Intent(MainActivity.this, OtherActivity.class);
        Bundle bundle = new Bundle();
        bundle.putString(&quot;content&quot;, content);
        intent.putExtra(&quot;bundle&quot;, bundle);
        startActivity(intent);
    }
}
</code></pre><p><img src="http://oy991qm3u.bkt.clouddn.com/430632-355ef15003cec823.gif" alt=""></p>
<h2 id="11-URLSpan，设置超链接文本"><a href="#11-URLSpan，设置超链接文本" class="headerlink" title="11. URLSpan，设置超链接文本"></a>11. URLSpan，设置超链接文本</h2><p>URLSpan就是继承自ClickableSpan，就是重写了父类的onClick事件，用系统自带浏览器打开链接。</p>
<pre><code>SpannableString spannableString = new SpannableString(&quot;为文字设置超链接&quot;);
URLSpan urlSpan = new URLSpan(&quot;http://www.jianshu.com/users/dbae9ac95c78&quot;);
spannableString.setSpan(urlSpan, 5, spannableString.length(), Spanned.SPAN_INCLUSIVE_EXCLUSIVE);
textView.setMovementMethod(LinkMovementMethod.getInstance());
textView.setHighlightColor(Color.parseColor(&quot;#36969696&quot;));
textView.setText(spannableString);
</code></pre>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 文字处理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[摘句]]></title>
      <url>/%E6%91%98%E5%8F%A5/</url>
      <content type="html"><![CDATA[<p>总结</p>
<a id="more"></a>
<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p><strong>将想法付诸于实践，借此来影响他人是一个人存在的真正价值。</strong></p>
<!-- more -->
<h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E4%BB%98%E5%87%BA%E4%B8%8E%E6%94%B6%E8%8E%B7.png" alt=""></p>
<h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p><strong>失败是什么？没有什么，只是更走近成功一步；成功是什么？就是走过了所有通向失败的路，只剩下一条路，那就是成功的路。</strong></p>
<h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p><strong>每当你在感叹 如果有这样一个东西就好了的时候 请注意 其实这是你的机会</strong></p>
<h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p><strong>目标赋予我们生命的意义和目的。有了目标，我们才会把注意力集中在追求喜悦，而不是在避免痛苦上。</strong></p>
<h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><p><strong>有时候，我们活得很累，并非生活过于刻薄，而是我们太容易被外界的氛围所感染，被他人的情绪所左右。行走在人群中，我们总是感觉有无数穿心掠肺的目光，有很多飞短流长的冷言，最终乱了心神，渐渐被缚于自己编织的一团乱麻中。</strong></p>
<h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-12%2008.21.54.png" alt=""></p>
<h2 id="8"><a href="#8" class="headerlink" title="8"></a>8</h2><p><strong>生活的悲欢离合永远在地平线以外，而眺望是一种青春的姿态…</strong></p>
<h2 id="9"><a href="#9" class="headerlink" title="9"></a>9</h2><p><strong>先做人，再做技术人员，最后做程序员。</strong></p>
]]></content>
      
        <categories>
            
            <category> 阅读 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式 - 生成器(Builder)模式]]></title>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E5%BB%BA%E9%80%A0%E8%80%85(Builder)%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>参考：《Head First 设计模式》</p>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="一个建造者（Builder）模式的骨架"><a href="#一个建造者（Builder）模式的骨架" class="headerlink" title="一个建造者（Builder）模式的骨架"></a>一个建造者（Builder）模式的骨架</h1><h2 id="1-应用场景："><a href="#1-应用场景：" class="headerlink" title="1. 应用场景："></a>1. 应用场景：</h2><ul>
<li>构建<code>复杂对象</code>，如参数特别多。</li>
<li>产品类非常复杂，或者产品类中不同的调用顺序产生了不同的作用。</li>
<li>一个对象有多个部件</li>
</ul>
<!-- more -->
<h2 id="2-建造者模式要点"><a href="#2-建造者模式要点" class="headerlink" title="2. 建造者模式要点:"></a>2. 建造者模式要点:</h2><ul>
<li>在<code>目标类</code>中有一个<code>静态类Builder</code></li>
<li><code>目标类</code>与<code>静态类Builder</code>拥有<code>同样的变量</code></li>
</ul>
<h2 id="3-骨架"><a href="#3-骨架" class="headerlink" title="3. 骨架"></a>3. 骨架</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/* </span></div><div class="line"><span class="comment">     声明变量</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    String name;</div><div class="line">    String address;</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">int</span> sex;</div><div class="line">    String job;</div><div class="line">    <span class="keyword">int</span> phoneNumber;</div><div class="line">    <span class="keyword">int</span> QQNumber;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 构造函数私有化</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 声明一个 静态类 Builder</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         声明同 person类 一样的变量</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        String name;</div><div class="line">        String address;</div><div class="line">        <span class="keyword">int</span> age;</div><div class="line">        <span class="keyword">int</span> sex;</div><div class="line">        String job;</div><div class="line">        <span class="keyword">int</span> phoneNumber;</div><div class="line">        <span class="keyword">int</span> QQNumber;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-一个完整含有建造者（Builder）模式的类"><a href="#4-一个完整含有建造者（Builder）模式的类" class="headerlink" title="4. 一个完整含有建造者（Builder）模式的类"></a>4. 一个完整含有建造者（Builder）模式的类</h2><p>此模式的主要实现是在”骨架”的基础上进行填充。</p>
<h3 id="4-1-实现关键-1-：类的私有构建方法"><a href="#4-1-实现关键-1-：类的私有构建方法" class="headerlink" title="4.1 实现关键 - 1 ：类的私有构建方法"></a>4.1 实现关键 - 1 ：类的私有构建方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">(Builder builder)</span></span>&#123;</div><div class="line">       <span class="comment">//···</span></div><div class="line">       <span class="keyword">this</span>.sex = builder.sex;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="4-2-实现关键-2-：静态类Builder中的方法返回值-build-方法。"><a href="#4-2-实现关键-2-：静态类Builder中的方法返回值-build-方法。" class="headerlink" title="4.2 实现关键 - 2 ：静态类Builder中的方法返回值 + build()方法。"></a>4.2 实现关键 - 2 ：静态类Builder中的<code>方法返回值</code> + <code>build()方法</code>。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//···</span></div><div class="line">   <span class="function"><span class="keyword">public</span> Person <span class="title">build</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-3-完整的实现"><a href="#4-3-完整的实现" class="headerlink" title="4.3 完整的实现"></a>4.3 完整的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     声明变量</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    String name;</div><div class="line">    String address;</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">int</span> sex;</div><div class="line">    String job;</div><div class="line">    <span class="keyword">int</span> phoneNumber;</div><div class="line">    <span class="keyword">int</span> QQNumber;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 构造函数私有化，通过这一点确保使用 Builder 实现动态构建（组合实现）当前类的实例化。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">(Builder builder)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.address = builder.address;</div><div class="line">        <span class="keyword">this</span>.age = builder.age;</div><div class="line">        <span class="keyword">this</span>.job = builder.job;</div><div class="line">        <span class="keyword">this</span>.name = builder.name;</div><div class="line">        <span class="keyword">this</span>.phoneNumber = builder.phoneNumber;</div><div class="line">        <span class="keyword">this</span>.QQNumber = builder.QQNumber;</div><div class="line">        <span class="keyword">this</span>.sex = builder.sex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> address;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.address = address;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSex</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">int</span> sex)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.sex = sex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJob</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> job;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJob</span><span class="params">(String job)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.job = job;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPhoneNumber</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> phoneNumber;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhoneNumber</span><span class="params">(<span class="keyword">int</span> phoneNumber)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.phoneNumber = phoneNumber;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQQNumber</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> QQNumber;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQQNumber</span><span class="params">(<span class="keyword">int</span> QQNumber)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.QQNumber = QQNumber;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</div><div class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", age="</span> + age +</div><div class="line">                <span class="string">", sex="</span> + sex +</div><div class="line">                <span class="string">", job='"</span> + job + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", phoneNumber="</span> + phoneNumber +</div><div class="line">                <span class="string">", QQNumber="</span> + QQNumber +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 声明一个 静态类 Builder</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * 通过这个Builder类，动态的构建（组合实现）当前对象的各个属性。</span></div><div class="line"><span class="comment">     * 特点：</span></div><div class="line"><span class="comment">     *      不需要编写多个构造函数。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         声明同 person类 一样的变量</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        String name;</div><div class="line">        String address;</div><div class="line">        <span class="keyword">int</span> age;</div><div class="line">        <span class="keyword">int</span> sex;</div><div class="line">        String job;</div><div class="line">        <span class="keyword">int</span> phoneNumber;</div><div class="line">        <span class="keyword">int</span> QQNumber;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">name</span><span class="params">(String name)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">address</span><span class="params">(String address)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.address = address;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">age</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.age = age;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sex</span><span class="params">(<span class="keyword">int</span> sex)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.sex = sex;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">job</span><span class="params">(String job)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.job = job;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">phoneNumber</span><span class="params">(<span class="keyword">int</span> phoneNumber)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.phoneNumber = phoneNumber;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">QQNumber</span><span class="params">(<span class="keyword">int</span> QQNumber)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.QQNumber = QQNumber;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 返回本类的实例化对象，此方法也真正实现当前类的实例化。</span></div><div class="line"><span class="comment">         * <span class="doctag">@return</span> 当前对象</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Person <span class="title">build</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-使用建造者（Builder）模式"><a href="#5-使用建造者（Builder）模式" class="headerlink" title="5. 使用建造者（Builder）模式"></a>5. 使用建造者（Builder）模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPerson</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] aegs)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 构造方式1</span></div><div class="line">        Person person = <span class="keyword">new</span> Person.Builder()</div><div class="line">                .name(<span class="string">"张三"</span>)</div><div class="line">                .sex(<span class="number">1</span>)</div><div class="line">                .age(<span class="number">24</span>)</div><div class="line">                .build();</div><div class="line">        System.out.println(person.toString());</div><div class="line"></div><div class="line">        <span class="comment">// 构造方式2</span></div><div class="line">        Person person2 = <span class="keyword">new</span> Person.Builder()</div><div class="line">                .name(<span class="string">"旺旺"</span>)</div><div class="line">                .sex(<span class="number">1</span>)</div><div class="line">                .age(<span class="number">12</span>)</div><div class="line">                .address(<span class="string">"广东"</span>)</div><div class="line">                .phoneNumber(<span class="number">122343423</span>)</div><div class="line">                .build();</div><div class="line">        System.out.println(person2.toString());</div><div class="line"></div><div class="line">        <span class="comment">// 构造方式3</span></div><div class="line">        Person person3 = <span class="keyword">new</span> Person.Builder()</div><div class="line">                .name(<span class="string">"刘贤"</span>)</div><div class="line">                .sex(<span class="number">0</span>)</div><div class="line">                .age(<span class="number">72</span>)</div><div class="line">                .address(<span class="string">"HK"</span>)</div><div class="line">                .phoneNumber(<span class="number">8989345</span>)</div><div class="line">                .QQNumber(<span class="number">11112232</span>)</div><div class="line">                .job(<span class="string">"司机"</span>)</div><div class="line">                .build();</div><div class="line">        System.out.println(person3.toString());</div><div class="line"></div><div class="line">        <span class="comment">// 构造方式4</span></div><div class="line">        Person person4 = <span class="keyword">new</span> Person.Builder()</div><div class="line">                .name(<span class="string">"张倩"</span>)</div><div class="line">                .sex(<span class="number">0</span>)</div><div class="line">                .age(<span class="number">22</span>)</div><div class="line">                .address(<span class="string">"JP"</span>)</div><div class="line">                .phoneNumber(<span class="number">0220330</span>)</div><div class="line">                .QQNumber(<span class="number">1233424</span>)</div><div class="line">                .job(<span class="string">"Student"</span>)</div><div class="line">                .build();</div><div class="line">        System.out.println(person4.toString());</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     *  Person&#123;name='张三', address='null', age=24, sex=1, job='null', phoneNumber=0, QQNumber=0&#125;</span></div><div class="line"><span class="comment">        Person&#123;name='旺旺', address='广东', age=12, sex=1, job='null', phoneNumber=122343423, QQNumber=0&#125;</span></div><div class="line"><span class="comment">        Person&#123;name='刘贤', address='HK', age=72, sex=0, job='司机', phoneNumber=8989345, QQNumber=11112232&#125;</span></div><div class="line"><span class="comment">        Person&#123;name='张倩', address='JP', age=22, sex=0, job='Student', phoneNumber=73944, QQNumber=1233424&#125;</span></div><div class="line"><span class="comment">     */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自定义View-8 TypedArray]]></title>
      <url>/%E8%87%AA%E5%AE%9A%E4%B9%89View-8%20TypedArray/</url>
      <content type="html"><![CDATA[<p>自定义View中的 <code>attrs.xml</code> 文件设置</p>
<a id="more"></a>
<p>[TOC]</p>
<h2 id="1-文件位置："><a href="#1-文件位置：" class="headerlink" title="1. 文件位置："></a>1. 文件位置：</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-23%2015.03.58.png" alt=""></p>
<h2 id="2-文件内容（仅供参考）："><a href="#2-文件内容（仅供参考）：" class="headerlink" title="2. 文件内容（仅供参考）："></a>2. 文件内容（仅供参考）：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"MyViewGroup"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"textOneTitle"</span> <span class="attr">format</span>=<span class="string">"string"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"textOneSize"</span> <span class="attr">format</span>=<span class="string">"integer"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"imageSrc"</span> <span class="attr">format</span>=<span class="string">"reference"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"textTwoTitle"</span> <span class="attr">format</span>=<span class="string">"string"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"textTwoSize"</span> <span class="attr">format</span>=<span class="string">"integer"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"textOneVisible"</span> <span class="attr">format</span>=<span class="string">"boolean"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="3-属性文件中参数属性的分类："><a href="#3-属性文件中参数属性的分类：" class="headerlink" title="3. 属性文件中参数属性的分类："></a>3. 属性文件中<code>参数属性</code>的分类：</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-23%2014.41.51.png" alt=""></p>
<h2 id="4-attrs-xml-文件中-format-取值类型"><a href="#4-attrs-xml-文件中-format-取值类型" class="headerlink" title="4. attrs.xml 文件中 format 取值类型"></a>4. <code>attrs.xml</code> 文件中 <code>format</code> 取值类型</h2><p><strong>1. reference：参考某一资源ID。</strong></p>
<p>属性的定义</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"imageSrc"</span> <span class="attr">format</span>=<span class="string">"reference"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>属性的使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cwj:imageSrc=<span class="string">"@drawable/maps"</span></div></pre></td></tr></table></figure>
<p>在java中获取数值（2种方式）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Drawable imgSrc = array.getDrawable(R.styleable.MyViewGroup_imageSrc);</div><div class="line">mImageView.setBackground(imgSrc);</div><div class="line"></div><div class="line"><span class="keyword">int</span> imgSrc = array.getResourceId(R.styleable.MyViewGroup_imageSrc,R.drawable.ic_launcher_background);</div><div class="line">mImageView.setBackgroundResource(imgSrc);</div></pre></td></tr></table></figure>
<p><strong>2. color：颜色值。</strong></p>
<p>属性的定义</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"textOneColor"</span> <span class="attr">format</span>=<span class="string">"color"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>属性的使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cwj:textOneColor=<span class="string">"#ff0000"</span></div></pre></td></tr></table></figure>
<p>在java中获取</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> textOneColor = array.getColor(R.styleable.MyViewGroup_textOneColor, Color.BLACK);</div><div class="line"></div><div class="line">mTextView2.setTextColor(textOneColor);</div></pre></td></tr></table></figure>
<p><strong>3. boolean：布尔值。</strong></p>
<p>属性的定义</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"textOneVisible"</span> <span class="attr">format</span>=<span class="string">"boolean"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>属性的使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cwj:textOneVisible=<span class="string">"false"</span></div></pre></td></tr></table></figure>
<p>在java中获取</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boolean</span> oneIsShow = array.getBoolean(R.styleable.MyViewGroup_textOneVisible,<span class="keyword">true</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (oneIsShow) &#123;</div><div class="line">    mTextView1.setVisibility(VISIBLE);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    mTextView1.setVisibility(INVISIBLE);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>4. dimension：尺寸值。</strong></p>
<p>属性的定义</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"textOneSize"</span> <span class="attr">format</span>=<span class="string">"dimension"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>属性的使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cwj:textTwoSize=<span class="string">"@dimen/textOneSize2"</span></div></pre></td></tr></table></figure>
<p>在java中获取</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span> textOneSize = array.getDimension(R.styleable.MyViewGroup_textOneSize,<span class="number">10</span>);</div><div class="line"></div><div class="line">mTextView1.setTextSize(textOneSize);</div></pre></td></tr></table></figure>
<p><strong>5. float：浮点值。</strong></p>
<p>属性的定义</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span> = <span class="string">"fromAlpha"</span> <span class="attr">format</span> = <span class="string">"float"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>属性的使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:fromAlpha = <span class="string">"1.0"</span></div></pre></td></tr></table></figure>
<p><strong>6. integer：整型值。</strong></p>
<p>属性的定义</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span> = <span class="string">"frameDuration"</span> <span class="attr">format</span>=<span class="string">"integer"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>属性的使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:frameDuration = <span class="string">"100"</span></div></pre></td></tr></table></figure>
<p><strong>7. string：字符串。</strong></p>
<p>属性的定义</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"textOneTitle"</span> <span class="attr">format</span>=<span class="string">"string"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>属性的使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cwj:textOneTitle=<span class="string">"大标题"</span></div></pre></td></tr></table></figure>
<p>在java中使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String textOneTitle = array.getString(R.styleable.MyViewGroup_textOneTitle);</div><div class="line"></div><div class="line">mTextView1.setText(textOneTitle);</div></pre></td></tr></table></figure>
<p><strong>8. fraction：百分数。</strong></p>
<p>属性的定义</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span> = <span class="string">"pivotY"</span> <span class="attr">format</span> = <span class="string">"fraction"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>属性的使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:pivotY = <span class="string">"300%"</span></div></pre></td></tr></table></figure>
<p><strong>9. enum：枚举值。</strong></p>
<p>属性的定义</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"textTwoGravity"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"top"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"center"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">attr</span>&gt;</span></div></pre></td></tr></table></figure>
<p>属性的使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cwj:textTwoGravity=<span class="string">"top"</span></div></pre></td></tr></table></figure>
<p>在java中获取</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> gracityIndex = array.getInt(R.styleable.MyViewGroup_textTwoGravity, Gravity.CENTER);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (gracityIndex == <span class="number">1</span>) &#123;</div><div class="line">    mTextView2.setGravity(Gravity.TOP);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (gracityIndex == <span class="number">2</span>) &#123;</div><div class="line">    mTextView2.setGravity(Gravity.CENTER);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>10. flag：位或运算。</strong></p>
<p>属性的定义</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"windowSoftInputMode"</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">flag</span> <span class="attr">name</span> = <span class="string">"stateUnspecified"</span> <span class="attr">value</span> = <span class="string">"0"</span> /&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">flag</span> <span class="attr">name</span> = <span class="string">"stateUnchanged"</span> <span class="attr">value</span> = <span class="string">"1"</span> /&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">flag</span> <span class="attr">name</span> = <span class="string">"stateHidden"</span> <span class="attr">value</span> = <span class="string">"2"</span> /&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">flag</span> <span class="attr">name</span> = <span class="string">"stateAlwaysHidden"</span> <span class="attr">value</span> = <span class="string">"3"</span> /&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">flag</span> <span class="attr">name</span> = <span class="string">"stateVisible"</span> <span class="attr">value</span> = <span class="string">"4"</span> /&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">flag</span> <span class="attr">name</span> = <span class="string">"stateAlwaysVisible"</span> <span class="attr">value</span> = <span class="string">"5"</span> /&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">flag</span> <span class="attr">name</span> = <span class="string">"adjustUnspecified"</span> <span class="attr">value</span> = <span class="string">"0x00"</span> /&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">flag</span> <span class="attr">name</span> = <span class="string">"adjustResize"</span> <span class="attr">value</span> = <span class="string">"0x10"</span> /&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">flag</span> <span class="attr">name</span> = <span class="string">"adjustPan"</span> <span class="attr">value</span> = <span class="string">"0x20"</span> /&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">flag</span> <span class="attr">name</span> = <span class="string">"adjustNothing"</span> <span class="attr">value</span> = <span class="string">"0x30"</span> /&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">attr</span>&gt;</span></div></pre></td></tr></table></figure>
<p>属性的使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:windowSoftInputMode = <span class="string">"stateUnspecified | stateUnchanged　|　stateHidden"</span></div></pre></td></tr></table></figure>
<p><strong>其他 - 组合属性设置：</strong></p>
<p>属性的定义</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span> = <span class="string">"background"</span> <span class="attr">format</span> = <span class="string">"reference|color"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>属性的使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:background = <span class="string">"@drawable/图片ID|#00FF00"</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自定义View-7 ViewGroup]]></title>
      <url>/%E8%87%AA%E5%AE%9A%E4%B9%89View-7%20ViewGroup/</url>
      <content type="html"><![CDATA[<p>这次描述的是<code>自定义ViewGroup</code>，这其中既包括<code>完全自定义ViewGroup</code>和<code>组合ViewGroup</code>。</p>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="自定义组合ViewGroup"><a href="#自定义组合ViewGroup" class="headerlink" title="自定义组合ViewGroup"></a>自定义组合ViewGroup</h1><h2 id="1-创建一个自定义ViewGroup的xml文件"><a href="#1-创建一个自定义ViewGroup的xml文件" class="headerlink" title="1. 创建一个自定义ViewGroup的xml文件"></a>1. 创建一个自定义ViewGroup的<code>xml文件</code></h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;com.zhy.autolayout.AutoRelativeLayout</div><div class="line">    xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    android:id=<span class="string">"@+id/item_single_view"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"210px"</span></div><div class="line">    android:background=<span class="string">"@color/login_txt"</span></div><div class="line">    android:gravity=<span class="string">"center"</span>&gt;</div><div class="line"></div><div class="line">    &lt;ImageView</div><div class="line">        android:id=<span class="string">"@+id/item_single_iv"</span></div><div class="line">        android:layout_width=<span class="string">"50px"</span></div><div class="line">        android:layout_height=<span class="string">"50px"</span></div><div class="line">        android:layout_centerHorizontal=<span class="string">"true"</span></div><div class="line">        android:layout_marginTop=<span class="string">"6px"</span></div><div class="line">        android:src=<span class="string">"@drawable/ic_launcher"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:id=<span class="string">"@+id/item_single_tv_title"</span></div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_below=<span class="string">"@+id/item_single_iv"</span></div><div class="line">        android:layout_marginTop=<span class="string">"16px"</span></div><div class="line">        android:gravity=<span class="string">"center_horizontal"</span></div><div class="line">        android:text=<span class="string">"信息"</span></div><div class="line">        android:textColor=<span class="string">"@color/button_text_color"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:id=<span class="string">"@+id/item_single_tv_val"</span></div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_below=<span class="string">"@id/item_single_tv_title"</span></div><div class="line">        android:layout_marginTop=<span class="string">"10px"</span></div><div class="line">        android:gravity=<span class="string">"center_horizontal"</span></div><div class="line">        android:text=<span class="string">"1223"</span></div><div class="line">        android:textColor=<span class="string">"@color/button_text_color"</span>/&gt;</div><div class="line"></div><div class="line">&lt;/com.zhy.autolayout.AutoRelativeLayout&gt;</div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-23%2014.17.20.png" alt=""></p>
<h2 id="2-创建一个继承自ViewGroup的自定义类。"><a href="#2-创建一个继承自ViewGroup的自定义类。" class="headerlink" title="2. 创建一个继承自ViewGroup的自定义类。"></a>2. 创建一个继承自<code>ViewGroup</code>的自定义类。</h2><h3 id="2-1-一个原始的自定义类："><a href="#2-1-一个原始的自定义类：" class="headerlink" title="2.1 一个原始的自定义类："></a>2.1 一个原始的自定义类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewGroup</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyViewGroup</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyViewGroup</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyViewGroup</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-2-对自定义组合控件中的子控件进行属性设置"><a href="#2-2-对自定义组合控件中的子控件进行属性设置" class="headerlink" title="2.2 对自定义组合控件中的子控件进行属性设置"></a>2.2 对<code>自定义组合控件</code>中的<code>子控件</code>进行<code>属性设置</code></h3><p><strong>使用到的类：</strong> <code>TypedArray</code></p>
<p><strong>使用的文件：</strong> <code>attrs.xml</code> 文件</p>
<p><strong>注意：</strong></p>
<ul>
<li><em>属性的初始化应该放在相应的构造函数中，例如本自定义ViewGroup中的构造过程应该写在第二个构造函数中，写在第三个构造函数中在使用时则不会显示。</em></li>
<li><p><em>在获取Layout布局文件时，注意参数的设置：</em></p>
<pre><code>View view = LayoutInflater.from(context).inflate(R.layout.my_view_group_layout,this,true);
</code></pre><p>  有时，此处参数设置出错，自定义view的控件将不会显示。</p>
</li>
</ul>
<p><strong>此步编写的步骤为：</strong></p>
<ul>
<li>获取Layout布局文件</li>
<li>声明 Layout布局文件中的子控件</li>
<li>通过 TypedArray 获取 子控件 中的属性值</li>
<li>为各个子控件设置参数值</li>
</ul>
<p>实例为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewGroup</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MyViewGroup"</span>;</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     2- 声明 xml文件用到的 控件</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    TextView mTextView1,mTextView2;</div><div class="line">    ImageView mImageView;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyViewGroup</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyViewGroup</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        <span class="comment">// 1 - 获取自定义的 xml文件</span></div><div class="line">        View view = LayoutInflater.from(context).inflate(R.layout.my_view_group_layout,<span class="keyword">this</span>,<span class="keyword">true</span>);</div><div class="line">        <span class="comment">// 3 - findViewById</span></div><div class="line">        mTextView1 = view.findViewById(R.id.one_tv);</div><div class="line">        mTextView2 = view.findViewById(R.id.two_tv);</div><div class="line">        mImageView = view.findViewById(R.id.image);</div><div class="line"></div><div class="line">        <span class="comment">// 4 - 通过 TypedArray 获取 attrs文件中的属性值</span></div><div class="line">        <span class="meta">@SuppressLint</span>(<span class="string">"Recycle"</span>)</div><div class="line">        TypedArray array = context.obtainStyledAttributes(attrs,R.styleable.MyViewGroup);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (array != <span class="keyword">null</span>) &#123;</div><div class="line">            String textOneTitle = array.getString(R.styleable.MyViewGroup_textOneTitle);</div><div class="line">            <span class="keyword">float</span> textOneSize = array.getDimension(R.styleable.MyViewGroup_textOneSize,<span class="number">10</span>);</div><div class="line">            String textTwoTitle = array.getString(R.styleable.MyViewGroup_textTwoTitle);</div><div class="line">            <span class="keyword">float</span> textTwoSize = array.getDimension(R.styleable.MyViewGroup_textTwoSize,<span class="number">10</span>);</div><div class="line"></div><div class="line">            <span class="comment">//两种方式均可</span></div><div class="line">            Drawable imgSrc = array.getDrawable(R.styleable.MyViewGroup_imageSrc);</div><div class="line">            <span class="comment">//int imgSrc = array.getResourceId(R.styleable.MyViewGroup_imageSrc,R.drawable.ic_launcher_background);</span></div><div class="line">            <span class="keyword">boolean</span> oneIsShow = array.getBoolean(R.styleable.MyViewGroup_textOneVisible,<span class="keyword">true</span>);</div><div class="line"></div><div class="line">            <span class="keyword">int</span> textOneColor = array.getColor(R.styleable.MyViewGroup_textOneColor, Color.BLACK);</div><div class="line"></div><div class="line">            <span class="keyword">int</span> gracityIndex = array.getInt(R.styleable.MyViewGroup_textTwoGravity, Gravity.CENTER);</div><div class="line"></div><div class="line">            array.recycle();</div><div class="line"></div><div class="line">            Log.e(TAG, <span class="string">"ヽ(｀Д´)ﾉ -&gt; MyViewGroup textOneTitle : "</span> + textOneTitle + <span class="string">", textOneSize : "</span>+ textOneSize + <span class="string">", textTwoTitle : "</span> + textTwoTitle + <span class="string">", textTwoSize : "</span> + textTwoSize);</div><div class="line"></div><div class="line">            <span class="comment">// 5 - 为控件中的各个控件设置参数值</span></div><div class="line">            mTextView1.setText(textOneTitle);</div><div class="line">            mTextView2.setText(textTwoTitle);</div><div class="line">            mTextView1.setTextSize(textOneSize);</div><div class="line">            mTextView2.setTextSize(textTwoSize);</div><div class="line">            mTextView2.setTextColor(textOneColor);</div><div class="line"></div><div class="line">            <span class="comment">//控制子控件的显隐性</span></div><div class="line">            <span class="keyword">if</span> (oneIsShow) &#123;</div><div class="line">                mTextView1.setVisibility(VISIBLE);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                mTextView1.setVisibility(INVISIBLE);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//设置自定义图片的两种方式</span></div><div class="line">            mImageView.setBackground(imgSrc);</div><div class="line">            <span class="comment">//mImageView.setBackgroundResource(imgSrc);</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (gracityIndex == <span class="number">1</span>) &#123;</div><div class="line">                mTextView2.setGravity(Gravity.TOP);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (gracityIndex == <span class="number">2</span>) &#123;</div><div class="line">                mTextView2.setGravity(Gravity.CENTER);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyViewGroup</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImageView</span><span class="params">(Drawable imageViewId)</span> </span>&#123;</div><div class="line">        mImageView.setBackground(imageViewId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTextView1</span><span class="params">(String textView1Title)</span> </span>&#123;</div><div class="line">        mTextView1.setText(textView1Title);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTextView2</span><span class="params">(String textView2Title)</span> </span>&#123;</div><div class="line">        mTextView2.setText(textView2Title);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTextView1Size</span><span class="params">(<span class="keyword">int</span> textView1Val)</span> </span>&#123;</div><div class="line">        mTextView1.setTextSize(textView1Val);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTextView2Size</span><span class="params">(<span class="keyword">int</span> textView2Val)</span> </span>&#123;</div><div class="line">        mTextView2.setTextSize(textView2Val);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTextView2Gravity</span><span class="params">(String gravity)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="string">"top"</span>.equals(gravity)) &#123;</div><div class="line">            mTextView2.setGravity(Gravity.TOP);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"center"</span>.equals(gravity)) &#123;</div><div class="line">            mTextView2.setGravity(Gravity.CENTER);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-布局文件"><a href="#3-布局文件" class="headerlink" title="3. 布局文件"></a>3. 布局文件</h2><h3 id="3-1-在相应的xml文件中调用自定义的ViewGroup类，实现对此类的调用。"><a href="#3-1-在相应的xml文件中调用自定义的ViewGroup类，实现对此类的调用。" class="headerlink" title="3.1 在相应的xml文件中调用自定义的ViewGroup类，实现对此类的调用。"></a>3.1 在相应的<code>xml文件</code>中调用<code>自定义的ViewGroup类</code>，实现对此类的调用。</h3><p>在这一步中，要想使用自定义view的属性进行数值的设置，首先要声明<code>命名空间</code>：</p>
<pre><code>xmlns:cwj=&quot;http://schemas.android.com/apk/res-auto&quot;
</code></pre><p>实际例子：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">xmlns:cwj</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></div><div class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">"com.yannischeng.custom_view.view_group.MyViewGroupActivity"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">com.yannischeng.custom_view.view_group.MyViewGroup</span></span></div><div class="line"><span class="tag">        <span class="attr">cwj:textOneSize</span>=<span class="string">"@dimen/textOneSize1"</span></span></div><div class="line"><span class="tag">        <span class="attr">cwj:textOneTitle</span>=<span class="string">"大标题"</span></span></div><div class="line"><span class="tag">        <span class="attr">cwj:textTwoSize</span>=<span class="string">"@dimen/textOneSize2"</span></span></div><div class="line"><span class="tag">        <span class="attr">cwj:textTwoTitle</span>=<span class="string">"具体的详细信息"</span></span></div><div class="line"><span class="tag">        <span class="attr">cwj:imageSrc</span>=<span class="string">"@drawable/maps"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"56dp"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-23%2016.56.52.png" alt=""></p>
<h3 id="3-2-修改之后布局文件"><a href="#3-2-修改之后布局文件" class="headerlink" title="3.2 修改之后布局文件"></a>3.2 修改之后布局文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.yannischeng.custom_view.view_group.MyViewGroup</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/my_view_group"</span></span></div><div class="line"><span class="tag">        <span class="attr">cwj:textOneSize</span>=<span class="string">"@dimen/textOneSize1"</span></span></div><div class="line"><span class="tag">        <span class="attr">cwj:textOneTitle</span>=<span class="string">"大标题"</span></span></div><div class="line"><span class="tag">        <span class="attr">cwj:textTwoSize</span>=<span class="string">"@dimen/textOneSize2"</span></span></div><div class="line"><span class="tag">        <span class="attr">cwj:textTwoTitle</span>=<span class="string">"具体的详细信息"</span></span></div><div class="line"><span class="tag">        <span class="attr">cwj:imageSrc</span>=<span class="string">"@drawable/maps"</span></span></div><div class="line"><span class="tag">        <span class="attr">cwj:textOneVisible</span>=<span class="string">"false"</span></span></div><div class="line"><span class="tag">        <span class="attr">cwj:textOneColor</span>=<span class="string">"#ff0000"</span></span></div><div class="line"><span class="tag">        <span class="attr">cwj:textTwoGravity</span>=<span class="string">"top"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"56dp"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果为：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-24%2009.50.32.png" alt=""></p>
<h2 id="4-在相应的类中像使用其他控件一样使用自定义ViewGroup类的属性。"><a href="#4-在相应的类中像使用其他控件一样使用自定义ViewGroup类的属性。" class="headerlink" title="4. 在相应的类中像使用其他控件一样使用自定义ViewGroup类的属性。"></a>4. 在相应的类中像使用其他控件一样使用<code>自定义ViewGroup类</code>的<code>属性</code>。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@BindView</span>(R.id.my_view_group)</div><div class="line">MyViewGroup mMyViewGroup;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_my_view_group);</div><div class="line">    ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    mMyViewGroup.setTextView1(<span class="string">"标题"</span>);</div><div class="line">    mMyViewGroup.setTextView1Size(<span class="number">14</span>);</div><div class="line">    mMyViewGroup.setTextView2(<span class="string">"小标题"</span>);</div><div class="line">    mMyViewGroup.setTextView2Size(<span class="number">10</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-23%2017.06.40.png" alt=""></p>
<h2 id="5-为自定义控件添加响应事件"><a href="#5-为自定义控件添加响应事件" class="headerlink" title="5. 为自定义控件添加响应事件"></a>5. 为自定义控件添加响应事件</h2><p>声明一个回调事件接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">textOneClickListener</span><span class="params">(View view)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">textTwoClickListener</span><span class="params">(View view)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在自定义控件中使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> 点击事件接口</span></div><div class="line"><span class="comment"> */</span></div><div class="line">ClickListener mClickListener = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> 构造方法</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyViewGroup</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">		</div><div class="line">		<span class="comment">//...</span></div><div class="line"></div><div class="line">        mTextView1.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                mClickListener.textOneClickListener(v);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        mTextView2.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                mClickListener.textTwoClickListener(v);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 点击方法声明</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClickListener</span><span class="params">(ClickListener listener)</span></span>&#123;</div><div class="line">    mClickListener = listener;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Activity中使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mMyViewGroup.setClickListener(<span class="keyword">new</span> ClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">textOneClickListener</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        Toast.makeText(MyViewGroupActivity.<span class="keyword">this</span>, <span class="string">"this is textOneClickListener!"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">textTwoClickListener</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        Toast.makeText(MyViewGroupActivity.<span class="keyword">this</span>, <span class="string">"this is textTwoClickListener!"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>点击左侧写有“标题”的按钮：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-24%2010.25.10.png" alt=""></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-24%2010.25.36.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[权限-FileProvider]]></title>
      <url>/%E6%9D%83%E9%99%90-FileProvider/</url>
      <content type="html"><![CDATA[<p>问题总结</p>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="问题起因："><a href="#问题起因：" class="headerlink" title="问题起因："></a>问题起因：</h1><pre><code>E/FileSource: Failed to open file &apos;/storage/emulated/0/DCIM/Camera/VID_20171121_203344.mp4&apos;. (Permission denied)
</code></pre><p>这是因为7.0的新的文件权限导致的。文件共享要采用FileProvicer的形式，不能使用之前的file路径来简单表示。</p>
<h1 id="3步解决问题"><a href="#3步解决问题" class="headerlink" title="3步解决问题"></a>3步解决问题</h1><h2 id="1-file-paths-文件"><a href="#1-file-paths-文件" class="headerlink" title="1. file_paths 文件"></a>1. file_paths 文件</h2><p>在<code>res/</code>下创建<code>xml/</code>文件夹，然后创建：<code>file_paths</code>文件。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">external-files-path</span></span></div><div class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"root_path"</span></span></div><div class="line"><span class="tag">        <span class="attr">path</span>=<span class="string">"."</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p><code>&lt;paths&gt;</code>元素可包含多个元素。</p>
<p>具体元素的含义：</p>
<ul>
<li><p><code>&lt;files-path name=&quot;name&quot; path=&quot;path&quot; /&gt;</code> 相当于 ：</p>
<pre><code>//  /data/user/0/com.yannischeng.simplemediaplayer/files
Context.getFilesDir() + /path/
</code></pre></li>
<li><p><code>&lt;cache-path name=&quot;name&quot; path=&quot;path&quot; /&gt;</code> 相当于 ：</p>
<pre><code>//  /data/user/0/com.yannischeng.simplemediaplayer/cache
Context.getCacheDir() + /path/
</code></pre></li>
<li><p><code>&lt;external-path name=&quot;name&quot; path=&quot;path&quot; /&gt;</code> 相当于 ：</p>
<pre><code>//  /storage/emulated/0
Environment.getExternalStorageDirectory() + /path/
</code></pre></li>
<li><p><code>&lt;external-files-path name=&quot;name&quot; path=&quot;path&quot; /&gt;</code> 相当于 ：</p>
<pre><code>//  /storage/emulated/0/Android/data/com.yannischeng.simplemediaplayer/files
Context.getExternalFilesDir(String) + /path/
</code></pre></li>
<li><p><code>&lt;external-cache-path name=&quot;name&quot; path=&quot;path&quot; /&gt;</code> 相当于 ：</p>
<pre><code>//  /storage/emulated/0/Android/data/com.yannischeng.simplemediaplayer/cache
Context.getExternalCacheDir() + /path/
</code></pre></li>
<li><p><code>&lt;root-path name=&quot;name&quot; path=&quot;path&quot; /&gt;</code> 相当于外置SD卡路径。</p>
<pre><code>//  /system
Environment.getRootDirectory().getAbsolutePath();
</code></pre></li>
</ul>
<h2 id="2-注册FileProvider"><a href="#2-注册FileProvider" class="headerlink" title="2. 注册FileProvider"></a>2. 注册FileProvider</h2><p>在<code>AndroidManifest.xml</code>里面注册<code>FileProvider</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">application</span></span></div><div class="line"><span class="tag">	<span class="attr">...</span></span></div><div class="line">        &lt;provider</div><div class="line">            android:name="android.support.v4.content.FileProvider"  <span class="comment">&lt;!-- 共享文件的文件根目录，名字可以自定义 --&gt;</span></div><div class="line">            android:authorities="media.player"   <span class="comment">&lt;!-- 自定义的权限 --&gt;</span></div><div class="line">            android:exported="false"    <span class="comment">&lt;!-- 是否设置为独立进程 --&gt;</span></div><div class="line">            android:grantUriPermissions="true"&gt;  <span class="comment">&lt;!-- 是否拥有共享文件的临时权限  --&gt;</span> </div><div class="line">            <span class="tag">&lt;<span class="name">meta-data</span></span></div><div class="line"><span class="tag">                <span class="attr">android:name</span>=<span class="string">"android.support.FILE_PROVIDER_PATHS"</span></span></div><div class="line"><span class="tag">                <span class="attr">android:resource</span>=<span class="string">"@xml/file_paths"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">provider</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><p>在<code>java</code>代码中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Uri fileURI = FileProvider.getUriForFile(mContext,<span class="string">"media.player"</span>,file);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 权限 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android视频]]></title>
      <url>/Android%E8%A7%86%E9%A2%91/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考：<a href="http://www.jianshu.com/p/10e357946447" target="_blank" rel="external">http://www.jianshu.com/p/10e357946447</a></p>
</blockquote>
<p>基础知识</p>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h1><p>写在前面：<strong>如果在很多专有名字，概念都不熟悉的情况下，想要去阅读播放器源码会是相当困难的事情。</strong></p>
<h2 id="1-Codec"><a href="#1-Codec" class="headerlink" title="1. Codec"></a>1. Codec</h2><p><strong>编码</strong>（encode） 和 <strong>解码</strong>(decode)。<br><strong>Codec</strong>就是一种<strong>程序</strong>，这种程序可以对视频文件进行编码和解码。</p>
<blockquote>
<p>A video codec is an electronic circuit or software that <strong>compresses（编码，压缩）</strong> or <strong>decompresses（解码，解压）</strong> digital video. It converts raw (uncompressed) digital video to a compressed format or vice versa. In the context of video compression, “codec” is a concatenation of “encoder” and “decoder”—a device that only compresses is typically called an encoder, and one that only decompresses is a decoder.</p>
</blockquote>
<p>视频文件的本质其实就是图片的集合，当一段连续的图片不断的出现在人眼前(一般一个连贯的电影或者动画至少要求一秒24帧，也就是一秒内连续出现24张图片)，肉眼就会“欺骗性”的告诉大脑我们在看一个视频，而不是幻灯片。</p>
<p>图片大小计算：720P</p>
<pre><code>1280 * 720 * 3byte = 2.7M
</code></pre><p>Android在xml中定义颜色格式：#ffffff，三原色：3X4X2 = 24位二进制位 24/8 = 3。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-20%2020.54.45.png" alt=""></p>
<p>仅仅是60s（1分钟）就有这么大，一部电影岂不……？</p>
<p>所以通过：<br><strong>Codec程序</strong>对这些连续的图片通过一定的算法压缩成体积更小的文件格式 - <strong>编码，压缩</strong>。<br>在屏幕上进行播放时，需要显示图片，所以要将图片进行还原 - <strong>解码，解压缩</strong>。<br><strong>Codec解码</strong>的编解码是分别针对：视频（图片）、音频（声波）。</p>
<p>视频的编解码是一个非常复杂的过程，但是现在有很多的工具及规范：</p>
<p>H.265/H.264/H.263</p>
<hr>
<h2 id="2-Container-format-file（视频容器文件）-结构化的文件"><a href="#2-Container-format-file（视频容器文件）-结构化的文件" class="headerlink" title="2. Container format file（视频容器文件） -  结构化的文件"></a>2. Container format file（视频容器文件） -  结构化的文件</h2><p>视频容器文件即：mp4、rmvb、avi。<br>容器：包括了视频(video)数据、(audio)音频数据、文字(Text)数据。<br>结构化：音频、视频、文字数据必须按照一定的规范，放在指定的地方（方便解析）。</p>
<pre><code>元数据 -&gt; Codec程序 -&gt; 视频容器文件 
</code></pre><p>一个典型的“MP4”视频容器文件</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-20%2021.18.19.png" alt=""></p>
<p>Track(轨道)，这是一个专业术语，用来区分不同的音视频/文字数据。<br>最重要的却是这个MetaData（头文件），它包含了很多关于视频的原始数据，比如视频的大小，视频的时长，还有一个索引表，这个索引表包含了不同轨道的起始位置(以字节为单位)，又因为每个轨道会被分成若干块sample(采样，每一块采样都是可以单独被播放器播放的一段数据，以微妙为单位)，metadata也会维护一个细粒度更小的索引表，记录了每一块sample的大小，起始位置，对应视频的时间是多少(以字节为单位)等等的信息。</p>
<h2 id="3-视频处理流程"><a href="#3-视频处理流程" class="headerlink" title="3. 视频处理流程"></a>3. 视频处理流程</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-20%2021.22.52.png" alt=""></p>
<pre><code>原片(Raw Data)  -Encode-&gt; 容器文件(container) -process-&gt; 不同分辨率 -服务器-&gt; 客户端使用
</code></pre><h1 id="二、MP4-解析"><a href="#二、MP4-解析" class="headerlink" title="二、MP4 解析"></a>二、MP4 解析</h1><h2 id="1-Mp4格式文件的构成"><a href="#1-Mp4格式文件的构成" class="headerlink" title="1. Mp4格式文件的构成"></a>1. Mp4格式文件的构成</h2><p>MP4是一种格式的规范，是被ISO机构认证的，只要你通过Codec生成了一个mp4文件，那么这个文件的格式必须是按照ISO机构的规矩来。这个规范很好理解，它定义了一个MP4文件里面，哪些数据应该放在什么位置(以字节为单位)，哪些数据的长度是多少。</p>
<blockquote>
<p>MP4格式定义：<a href="http://xhelmboyx.tripod.com/formats/mp4-layout.txt" target="_blank" rel="external">http://xhelmboyx.tripod.com/formats/mp4-layout.txt</a></p>
</blockquote>
<p>任何容器，包括mp4都是类似的结构化文件，只不过不同的格式文件ISO对其有严格的要求，数据的摆放顺序、排列等等不同而已。</p>
<h2 id="2-MP4头文件构成"><a href="#2-MP4头文件构成" class="headerlink" title="2. MP4头文件构成"></a>2. MP4头文件构成</h2><p>在Meta Data里面，每一个Header，头文件，我们都叫他们Atom Header(不知道咋翻译)。Atom Header分为Leaf Atom 和 Container Atom。前者代表一个连接着字符串信息的头文件，后者是一个包含了若干个子Atom的头文件，他们互相之间是有层级关系的(参考上图)。每次播放器获取了movie atom之后(moov)，会根据层级关系，向下，或者向下读取相关的其他信息。每一个头文件都会对它的子头文件保存位置的引用，所以只要根据mp4文件的规范获取了最顶级的头文件moov,就可以顺势往下读取其他头文件</p>
<blockquote>
<p>苹果MP4文档：<a href="https://developer.apple.com/library/content/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25706" target="_blank" rel="external">https://developer.apple.com/library/content/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25706</a></p>
</blockquote>
<p>mp4的头文件结构：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-20%2021.56.56.png" alt=""></p>
<p>最重要的信息是采样索引表(Sample Table Atoms).对应图中“stbl ”这个atom header。这个索引表保存了mp4文件所有的采样(sample)与视频时间的对应关系(一般以微秒为单位)，还有包括每个采样的大小，在mp4文件中的起始位置(以自己为单位)。</p>
<h2 id="3-标准播放器的启动流程"><a href="#3-标准播放器的启动流程" class="headerlink" title="3. 标准播放器的启动流程"></a>3. 标准播放器的启动流程</h2><h3 id="3-1-播放器构成："><a href="#3-1-播放器构成：" class="headerlink" title="3.1 播放器构成："></a>3.1 播放器构成：</h3><ul>
<li>数据源（source）</li>
<li>读取器（extractor）</li>
<li>加载控制器（load control）</li>
<li>渲染器（trackRenderer）</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/Screen%20Shot%202017-04-21%20at%204.43.11%20pm.png" alt=""></p>
<h3 id="3-1-播放器播放流程："><a href="#3-1-播放器播放流程：" class="headerlink" title="3.1 播放器播放流程："></a>3.1 播放器播放流程：</h3><p>在播放器可以把数据提交给渲染器之前，播放器需要把必需的头文件全部解析并存入内存，比如之前说的采样索引表。一般播放器在解析完毕后，会构建三个表：</p>
<ul>
<li>一个存放时间对应采样索引</li>
<li>一个存放采样索引对应在mp4文件中的起始位置(以字节为单位)</li>
<li>一个存放采样索引对应大小(以字节为单位)。</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/Screen%20Shot%202017-04-21%20at%204.57.38%20pm.png" alt=""></p>
<p>通过表1，我们知道该微秒对应第1个采样（sample），从第一个和第二个表我们知道，第1个采样的数据范围(在mp4文件内)是从第0字节到300（0+300）字节，那么播放器就会去读取这个范围的数据并且放入渲染器中进行渲染。</p>
<p>同时，加载器会基于当前已经缓存的数据，决定是否还需要不停的读取数据进入内存。一般来说每个播放器都有默认的缓存值，也会有一个基准线，只有当缓存足够数据才能放进渲染器进行渲染。</p>
<p>最后同理，当我们拖动滑动控制器(SeekBar)想快进的时候，我们和第一步一样，通过我们想滑动的时间获取采样的索引，再重新开始读取数据。</p>
<p>综上所述，播放器在正式播放视频文件之前，<strong>必须要把头文件全部读取并解析(这会是一段非常耗时的程序)，这也是在线视频播放的等待时间的瓶颈。</strong>在接下来的章节我会介绍<strong>自适应视频播放(Adaptive Streaming)</strong>，这个技术的发明使得了<strong>分段式mp4文件(Fragmented Mp4)技术</strong>得以诞生，大大的减少了在线视频播放的等待时间。</p>
<h2 id="4-在线视频播放的技术基础-online-video-streaming"><a href="#4-在线视频播放的技术基础-online-video-streaming" class="headerlink" title="4. 在线视频播放的技术基础(online video streaming)"></a>4. 在线视频播放的技术基础(online video streaming)</h2><p><strong>在线视频的播放</strong>其实和<strong>播放本地视频</strong>的区别就是Extractor<strong>读取的Source</strong>，数据源不一样。</p>
<p>在线播放需要下载数据到内存，再交由Extractor读取分析。但是既然是在线视频播放，我们肯定不能把整个容器文件下载到内存或者硬盘再开始解析播放。我们希望能控制下载的进度，比如我当前在看第10s的视频内容，所以我只想缓存/下载视频内容到第20s的位置。</p>
<p>我们俗称的<strong>渐进式下载(Progressive Downloading)</strong>就解决了这一难题。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/Screen%20Shot%202017-04-21%20at%205.14.22%20pm.png" alt=""></p>
<p>在HTTP请求里面加一个叫<strong>RANGE的header</strong>，放入<strong>起始字节</strong>和<strong>结束字节</strong>，就可以<strong>只下载对应部分</strong>的数据，这一header的支持也是各种下载软件<strong>实现断点下载的基础</strong>。每次<strong>断网</strong>的时候<strong>记录</strong>下来<strong>已经下载</strong>的数据的字节数，下次再下载的时候从<strong>字节数+1处</strong>重新下载并且写入原有文件就可以了。</p>
<h1 id="三、-Android的Media-API"><a href="#三、-Android的Media-API" class="headerlink" title="三、 Android的Media API"></a>三、 Android的Media API</h1><h2 id="1-Android平台视频播放历史"><a href="#1-Android平台视频播放历史" class="headerlink" title="1. Android平台视频播放历史"></a>1. Android平台视频播放历史</h2><p><strong>自带播放器缺点：</strong></p>
<ul>
<li>很多格式的容器文件不支持，也不支持自适应视频播放(Adaptive Streaming)</li>
<li>应用开发者很难debug播放器，MediaPlayer的代码很多都是Native Method。并不在Java层。</li>
<li>很难做自定义的拓展和设置，比如缓冲的大小，下载进度等等。</li>
</ul>
<p>安卓4.3之后 release 新的 Media Codec API组，把API组件设计的面向视频播放的更底层概念。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/Screen%20Shot%202017-04-26%20at%2011.12.24%20pm.png" alt=""></p>
<p>从结构图里看出，原来的MediaPlayer把Extractor，和Codec API全部封锁在了Framework层，应用层完全接触不到。在新的API设计里面，这些都挪到了应用层(其实虽然MediaCodec API，就是编解码API还在Framework，但是应用层可以调用他们)</p>
<h2 id="2-Android-Codec-API的使用"><a href="#2-Android-Codec-API的使用" class="headerlink" title="2. Android Codec API的使用"></a>2. Android Codec API的使用</h2><p>在全新的Media API里面，<strong>最最最重要</strong>的就是<strong>MediaExtractor</strong>和<strong>MediaCodec</strong>这两个类，第一个可以对容器文件进行<strong>读取控制</strong>，第二个就是对数据进行<strong>编解码</strong>的API。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-20%2023.57.51.png" alt=""></p>
<p>MediaExtractor可以从一个URL，获取容器文件的轨道数量、轨道信息(Track)。在确定了轨道信息之后，可以选择想要解码的轨道(只能选择一个，所以音轨和视频轨道需要两个不同MediaExtractor给两个不同MediaCodec解码)，再从该轨道不停的读取数据放入MediaCodec API进行解码。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-21%2000.00.34.png" alt=""></p>
<p>MediaCodec API则是创建的时候就需要选择Codec的类型。然后编码的时候需要安卓平台显示视频的Surface</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-21%2000.04.08.png" alt=""></p>
<p>一个MediaCodec在创建之后会在内部维护两个对列(Queue),一个是InputQueue，一个是OutputQueue。类似生产者消费者的模式，MediaCodec会不停的从InputQueue获取数据(InputQueue的数据又是又MediaExtractor提供)，解码，再把解码之后的数据放入OutputQueue，再提供给Surface让其视频内容。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 视频 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[动画]]></title>
      <url>/%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<p>总结</p>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="一、概览："><a href="#一、概览：" class="headerlink" title="一、概览："></a>一、概览：</h1><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-20%2018.12.54.jpg" alt=""></p>
<p>Animator :</p>
<p>这是为动画提供基本支持的类的超类，这些动画可以被<code>启动</code>、<code>结束</code>、并添加<code>AnimatorListeners</code>。</p>
<p>Animator的子类</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-20%2011.10.28.png" alt=""></p>
<h1 id="二、动画分类"><a href="#二、动画分类" class="headerlink" title="二、动画分类"></a>二、动画分类</h1><h2 id="0-复杂属性动画"><a href="#0-复杂属性动画" class="headerlink" title="0. 复杂属性动画"></a>0. 复杂属性动画</h2><ul>
<li>使用 <code>PropertyValuesHolder</code> 来对多个属性同时做动画；</li>
<li>使用 <code>AnimatorSet</code> 来同时管理调配多个动画；</li>
<li><code>PropertyValuesHolder</code> 的进阶使用：使用 PropertyValuesHolder.ofKeyframe() 来把一个属性拆分成多段，执行更加精细的属性动画。</li>
</ul>
<h2 id="1-最早的两种"><a href="#1-最早的两种" class="headerlink" title="1. 最早的两种"></a>1. 最早的两种</h2><ul>
<li>逐帧动画(frame-by-frame animation)</li>
<li>补间动画(tweened animation)</li>
</ul>
<h2 id="2-属性动画-：ValueAnimator（Android3-0）-某一属性（值）动画"><a href="#2-属性动画-：ValueAnimator（Android3-0）-某一属性（值）动画" class="headerlink" title="2. 属性动画 ：ValueAnimator（Android3.0） - 某一属性（值）动画"></a>2. 属性动画 ：ValueAnimator（Android3.0） - 某一属性（值）动画</h2><p>属性动画的运行机制是通过不断地对值进行操作来实现的，而初始值和结束值之间的动画过渡就是由ValueAnimator这个类来负责计算的，即：ValueAnimator只不过是对值进行了一个平滑的动画过渡。</p>
<p>它的内部使用一种时间循环的机制来计算值与值之间的动画过渡，我们只需要将初始值和结束值提供给ValueAnimator，并且告诉它动画所需运行的时长，那么ValueAnimator就会自动帮我们完成从初始值平滑地过渡到结束值这样的效果。除此之外，ValueAnimator还负责管理动画的播放次数、播放模式、以及对动画设置监听器等</p>
<p>补间动画是只能对View对象进行动画操作的。而属性动画就不再受这个限制，它可以对任意对象进行动画操作。</p>
<p>这个类提供了一个简单的计时引擎，用于运行计算动画值的动画并将其设置在目标对象上。<br>所有动画都有一个定时脉冲。它在自定义处理程序中运行，以确保在UI线程上发生属性更改。<br>默认情况下，ValueAnimator使用非线性时间插值，通过AccelerateDecelerateInterpolator类来加速和减速动画。这种行为可以通过调用{@link ValueAnimator＃setInterpolator（TimeInterpolator）}来改变。<br>动画师可以从代码或资源文件创建。这里是一个ValueAnimator资源文件的例子：</p>
<p>{@sample development / samples / ApiDemos / res / anim / animator.xml ValueAnimatorResources}<br> 也可以使用{@link PropertyValuesHolder}和<br> {@link Keyframe}资源标签来创建一个多步骤的动画。<br> 请注意，您可以<a href="media/XMind.app">XMind</a>为每个关键帧指定显式小数值（从0到1），以确定动画在整个持续时间内何时到达该值。或者，您可以关闭分数，关键帧将在总时长内平均分配：<br>{@sample development / samples / ApiDemos / res / anim / value_animator_pvh_kf.xml<br> ValueAnimatorKeyframeResources}</p>
<h3 id="（1）ObjectAnimator-ValueAnimator-子类"><a href="#（1）ObjectAnimator-ValueAnimator-子类" class="headerlink" title="（1）ObjectAnimator - ValueAnimator 子类"></a>（1）ObjectAnimator - ValueAnimator 子类</h3><p><code>ValueAnimator</code>的这个子类<code>ObjectAnimator</code>为动画目标对象上的属性提供了支持。<br>这个类的构造函数使用参数来定义将被动画的目标对象以及将被动画的属性名称。然后在内部确定适当的设置/获取函数，动画将根据需要调用这些函数来动画属性。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-20%2015.01.39.png" alt=""></p>
<p>简单使用方式:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator mObjectAnimator = ObjectAnimator.ofFloat(mTextView01,<span class="string">"rotation"</span>,<span class="number">0f</span>,<span class="number">360f</span>);</div><div class="line">mObjectAnimator.setDuration(<span class="number">2000</span>);</div><div class="line">mObjectAnimator.setInterpolator(mInterpolator);</div><div class="line">mObjectAnimator.start();</div></pre></td></tr></table></figure>
<h4 id="1-1-基本使用"><a href="#1-1-基本使用" class="headerlink" title="1.1 基本使用"></a>1.1 基本使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator animator = ObjectAnimator.ofFloat(view,<span class="string">"progress"</span>,<span class="number">0</span>,<span class="number">100</span>);</div><div class="line"><span class="comment">// 2. 用 start() 执行动画</span></div><div class="line">animator.setDuration(<span class="number">3000</span>);</div><div class="line">animator.setInterpolator(<span class="keyword">new</span> LinearOutSlowInInterpolator());</div><div class="line">animator.start();</div></pre></td></tr></table></figure>
<h4 id="在自定义View中使用objectAnimator的“属性”：添加setter-getter"><a href="#在自定义View中使用objectAnimator的“属性”：添加setter-getter" class="headerlink" title="在自定义View中使用objectAnimator的“属性”：添加setter()/getter()"></a>在自定义View中使用objectAnimator的“属性”：添加setter()/getter()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CameraFlipBoard</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    Paint mPaint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</div><div class="line">    Camera mCamera = <span class="keyword">new</span> Camera();</div><div class="line">    Bitmap mBitmap;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> degree;</div><div class="line">    ObjectAnimator mAnimator = ObjectAnimator.ofInt(<span class="keyword">this</span>,<span class="string">"degree"</span>,<span class="number">180</span>,<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CameraFlipBoard</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CameraFlipBoard</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CameraFlipBoard</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//设置自定义动画</span></div><div class="line">    &#123;</div><div class="line">        mBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.maps);</div><div class="line"></div><div class="line">        mAnimator.setDuration(<span class="number">2000</span>);</div><div class="line">        mAnimator.setInterpolator(<span class="keyword">new</span> FastOutLinearInInterpolator());</div><div class="line"></div><div class="line">        <span class="comment">//无限重复</span></div><div class="line">        mAnimator.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onAttachedToWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onAttachedToWindow();</div><div class="line">        mAnimator.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDetachedFromWindow();</div><div class="line">        mAnimator.end();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//unused这个参数是屏蔽：定义的变量在代码中并未使用且无法访问</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDegree</span><span class="params">(<span class="keyword">int</span> degree)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.degree = degree;</div><div class="line">        <span class="comment">//执行重绘</span></div><div class="line">        invalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDegree</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> degree;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">        <span class="keyword">float</span> centerX = getWidth() / <span class="number">2</span>;</div><div class="line">        <span class="keyword">float</span> centerY = getHeight() / <span class="number">2</span>;</div><div class="line"></div><div class="line">        <span class="keyword">float</span> cbx = centerX - mBitmap.getWidth() / <span class="number">2</span>;</div><div class="line">        <span class="keyword">float</span> cby = centerY - mBitmap.getHeight() / <span class="number">2</span>;</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">            本次要实现的是由图片的中间开始，上半部分不动，下半部分由上往下翻180度。</span></div><div class="line"><span class="comment">            所以，一张图片要被分成2部分：</span></div><div class="line"><span class="comment">                上半部分绘制完成之后不动</span></div><div class="line"><span class="comment">                下半部分则是反向转动180度</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="comment">//上半部分</span></div><div class="line">        canvas.save();</div><div class="line">        canvas.clipRect(<span class="number">0</span>,<span class="number">0</span>,getWidth(),centerY);</div><div class="line">        canvas.drawBitmap(mBitmap, cbx,cby, mPaint);</div><div class="line">        canvas.restore();</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">            未经移动的canvas坐标原点即为camera的坐标原点。</span></div><div class="line"><span class="comment">            移动的距离要看 具体的bitmap所在的具体位置：</span></div><div class="line"><span class="comment">                若bitmap在view的坐标原点，则移动bitmap的width/2和height/2即可。</span></div><div class="line"><span class="comment">                若bitmap不在view的坐标原点，则要根据他们的相对位置进行计算后移动。</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="comment">//下半部分</span></div><div class="line">        canvas.save();</div><div class="line">        <span class="keyword">if</span> (degree &lt; <span class="number">90</span>) &#123;</div><div class="line">            canvas.clipRect(<span class="number">0</span>,centerY,getWidth(),getHeight());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            canvas.clipRect(<span class="number">0</span>,<span class="number">0</span>,getWidth(),centerY);</div><div class="line">        &#125;</div><div class="line">        mCamera.save();</div><div class="line"></div><div class="line">        canvas.translate(centerX,centerY);</div><div class="line">        mCamera.rotateX(degree);</div><div class="line">        mCamera.applyToCanvas(canvas);</div><div class="line">        canvas.translate(-centerX,-centerY);</div><div class="line">        mCamera.restore();</div><div class="line">        canvas.drawBitmap(mBitmap,cbx,cby,mPaint);</div><div class="line">        canvas.restore();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-2-组合动画（一个接一个的动画）：AnimatorSet"><a href="#1-2-组合动画（一个接一个的动画）：AnimatorSet" class="headerlink" title="1.2 组合动画（一个接一个的动画）：AnimatorSet"></a>1.2 组合动画（一个接一个的动画）：AnimatorSet</h4><p>实现组合动画功能主要需要借助<code>AnimatorSet</code>这个类，这个类提供了一个<code>play()</code>方法，如果我们向这个方法中传入一个<code>Animator</code>对象(ValueAnimator或ObjectAnimator)将会返回一个<code>AnimatorSet.Builder</code>的实例，A<code>nimatorSet.Builder</code>中包括以下四个方法：</p>
<ul>
<li>after(Animator anim)   将现有动画插入到传入的动画之后执行</li>
<li>after(long delay)   将现有动画延迟指定毫秒后执行</li>
<li>before(Animator anim)   将现有动画插入到传入的动画之前执行</li>
<li>with(Animator anim)   将现有动画和传入的动画同时执行</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator moveIn = ObjectAnimator.ofFloat(textview, <span class="string">"translationX"</span>, -<span class="number">500f</span>, <span class="number">0f</span>);  </div><div class="line">ObjectAnimator rotate = ObjectAnimator.ofFloat(textview, <span class="string">"rotation"</span>, <span class="number">0f</span>, <span class="number">360f</span>);  </div><div class="line">ObjectAnimator fadeInOut = ObjectAnimator.ofFloat(textview, <span class="string">"alpha"</span>, <span class="number">1f</span>, <span class="number">0f</span>, <span class="number">1f</span>);  </div><div class="line">AnimatorSet animSet = <span class="keyword">new</span> AnimatorSet();  </div><div class="line">animSet.play(rotate).with(fadeInOut).after(moveIn);  </div><div class="line">animSet.setDuration(<span class="number">5000</span>);  </div><div class="line">animSet.start();</div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/006tNc79ly1fjfiuualxyg30gi09iwqa.gif" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator animator1 = ObjectAnimator.ofFloat(...);  </div><div class="line">animator1.setInterpolator(<span class="keyword">new</span> LinearInterpolator());  </div><div class="line">ObjectAnimator animator2 = ObjectAnimator.ofInt(...);  </div><div class="line">animator2.setInterpolator(<span class="keyword">new</span> DecelerateInterpolator());</div><div class="line"></div><div class="line">AnimatorSet animatorSet = <span class="keyword">new</span> AnimatorSet();  </div><div class="line"><span class="comment">// 两个动画依次执行,使用 playSequentially()，就可以让两个动画依次播放，而不用为它们设置监听器来手动为他们监管协作。</span></div><div class="line">animatorSet.playSequentially(animator1, animator2);  </div><div class="line">animatorSet.start(); </div><div class="line"></div><div class="line"><span class="comment">// 两个动画同时执行</span></div><div class="line">animatorSet.playTogether(animator1, animator2);  </div><div class="line">animatorSet.start();</div><div class="line"></div><div class="line"><span class="comment">// 使用 AnimatorSet.play(animatorA).with/before/after(animatorB)</span></div><div class="line"><span class="comment">// 的方式来精确配置各个 Animator 之间的关系</span></div><div class="line">animatorSet.play(animator1).with(animator2);  </div><div class="line">animatorSet.play(animator1).before(animator2);  </div><div class="line">animatorSet.play(animator1).after(animator2);  </div><div class="line">animatorSet.start();</div></pre></td></tr></table></figure>
<h4 id="1-3-同一个动画中改变多个属性：-PropertyValuesHolder"><a href="#1-3-同一个动画中改变多个属性：-PropertyValuesHolder" class="headerlink" title="1.3 同一个动画中改变多个属性： PropertyValuesHolder"></a>1.3 同一个动画中改变多个属性： PropertyValuesHolder</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PropertyValuesHolder holder1 = PropertyValuesHolder.ofFloat(<span class="string">"scaleX"</span>, <span class="number">1</span>);</div><div class="line">PropertyValuesHolder holder2 = PropertyValuesHolder.ofFloat(<span class="string">"scaleY"</span>, <span class="number">1</span>);  </div><div class="line">PropertyValuesHolder holder3 = PropertyValuesHolder.ofFloat(<span class="string">"alpha"</span>, <span class="number">1</span>);</div><div class="line">ObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(view, holder1, holder2, holder3)  </div><div class="line">animator.start();</div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/006tNc79ly1fjfirzt0kog30bc0a0wja.gif" alt=""></p>
<h4 id="1-4-把同一个属性拆分：PropertyValuesHolders-ofKeyframe"><a href="#1-4-把同一个属性拆分：PropertyValuesHolders-ofKeyframe" class="headerlink" title="1.4 把同一个属性拆分：PropertyValuesHolders.ofKeyframe()"></a>1.4 把同一个属性拆分：PropertyValuesHolders.ofKeyframe()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在 0% 处开始</span></div><div class="line">Keyframe keyframe1 = Keyframe.ofFloat(<span class="number">0</span>, <span class="number">0</span>);  </div><div class="line"><span class="comment">// 时间经过 50% 的时候，动画完成度 100%</span></div><div class="line">Keyframe keyframe2 = Keyframe.ofFloat(<span class="number">0.5f</span>, <span class="number">100</span>);  </div><div class="line"><span class="comment">// 时间见过 100% 的时候，动画完成度倒退到 80%，即反弹 20%</span></div><div class="line">Keyframe keyframe3 = Keyframe.ofFloat(<span class="number">1</span>, <span class="number">80</span>);  </div><div class="line">PropertyValuesHolder holder = PropertyValuesHolder.ofKeyframe(<span class="string">"progress"</span>, keyframe1, keyframe2, keyframe3);</div><div class="line"></div><div class="line">ObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(view, holder);  </div><div class="line">animator.start();</div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/006tNc79ly1fjfig8edhmg30ck07046i.gif" alt=""></p>
<h3 id="（2）ViewPropertyAnimator（Android3-1）"><a href="#（2）ViewPropertyAnimator（Android3-1）" class="headerlink" title="（2）ViewPropertyAnimator（Android3.1）"></a>（2）ViewPropertyAnimator（Android3.1）</h3><ul>
<li>该类可以在View对象上自动优化动画选择属性。</li>
<li>如果View对象上只有一个或两个属性被设置为动画，推荐使用<code>ObjectAnimator</code>。由<code>ObjectAnimator</code>调用的属性设置器能够正确地设置属性并使视图无效。</li>
<li><p>但是，如果同时对多个属性进行动画处理，或者只是想要更方便的语法来为特定的属性设置动画，则<code>ViewPropertyAnimator</code>可能更适合执行此任务。</p>
</li>
<li><p>这个类可以为几个同时动画提供更好的性能，因为它将优化无效调用，只发生一次对于多个属性，而不是每个动画属性独立地导致它自己的失效。而且，使用这个类的语法可能更容易使用，因为调用者只需要告诉View对象哪个属性需要动画。</p>
</li>
<li>这个类不是由调用者构造的，而是由View的属性来动画的。调用<code>View.animate()</code>将返回对该视图的相应ViewPropertyAnimator对象的引用。</li>
</ul>
<p><code>imageView.animate()</code>中的<code>animate()</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ViewPropertyAnimator <span class="title">animate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mAnimator == <span class="keyword">null</span>) &#123;</div><div class="line">        mAnimator = <span class="keyword">new</span> ViewPropertyAnimator(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> mAnimator;</div><div class="line">&#125;</div><div class="line">    </div><div class="line">ViewPropertyAnimator(View view) &#123;</div><div class="line">    mView = view;</div><div class="line">    view.ensureTransformationInfo();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-1-基本功能："><a href="#2-1-基本功能：" class="headerlink" title="2.1 基本功能："></a>2.1 基本功能：</h4><ul>
<li>rotation</li>
<li>scale</li>
<li>translation</li>
<li>alpha</li>
</ul>
<h4 id="2-2-使用到的其他相关接口："><a href="#2-2-使用到的其他相关接口：" class="headerlink" title="2.2 使用到的其他相关接口："></a>2.2 使用到的其他相关接口：</h4><ul>
<li>Animator ： 动画提供基本支持的类的超类</li>
<li>Animator.AnimatorListener ：动画侦听器从动画接收通知。</li>
<li>ValueAnimator.AnimatorUpdateListener ：</li>
<li>TimeInterpolator</li>
<li>ViewPropertyAnimatorRT</li>
</ul>
<h4 id="2-3-除了动画之外的价格set方法"><a href="#2-3-除了动画之外的价格set方法" class="headerlink" title="2.3 除了动画之外的价格set方法:"></a>2.3 除了动画之外的价格<code>set</code>方法:</h4><ul>
<li>ViewPropertyAnimator setDuration(long duration)</li>
<li>ViewPropertyAnimator setInterpolator(TimeInterpolator interpolator)</li>
<li>ViewPropertyAnimator setListener(Animator.AnimatorListener listener)</li>
<li>ViewPropertyAnimator setStartDelay(long startDelay)</li>
<li>ViewPropertyAnimator setUpdateListener(ValueAnimator.AnimatorUpdateListener listener)</li>
</ul>
<h4 id="2-4-ViewPropertyAnimator基本使用，（同一个动画中改变多个属性）"><a href="#2-4-ViewPropertyAnimator基本使用，（同一个动画中改变多个属性）" class="headerlink" title="2.4 ViewPropertyAnimator基本使用，（同一个动画中改变多个属性）"></a>2.4 <code>ViewPropertyAnimator</code>基本使用，（同一个动画中改变多个属性）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">imageView.animate().translationX(<span class="number">500f</span>).</div><div class="line">		alpha(<span class="number">0.2f</span>).</div><div class="line">		scaleX(<span class="number">1.5f</span>).</div><div class="line">		scaleY(<span class="number">1.5f</span>).</div><div class="line">		rotation(<span class="number">720</span>).</div><div class="line">		setInterpolator(<span class="keyword">new</span> AnticipateOvershootInterpolator()).</div><div class="line">		setDuration(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<h1 id="三、-Animator监听器"><a href="#三、-Animator监听器" class="headerlink" title="三、 Animator监听器"></a>三、 Animator监听器</h1><p>给动画设置监听器，可以在关键时刻得到反馈，从而及时做出合适的操作，例如在动画的属性更新时同步更新其他数据，或者在动画结束后回收资源等</p>
<table>
<thead>
<tr>
<th style="text-align:center">ViewPropertyAnimator</th>
<th style="text-align:center">ObjectAnimator</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">setListener()</td>
<td style="text-align:center">addListener()</td>
</tr>
<tr>
<td style="text-align:center">setUpdateListener()</td>
<td style="text-align:center">addUpdateListener()</td>
</tr>
<tr>
<td style="text-align:center">set[Update]Listener()</td>
<td style="text-align:center">remove[Update]Listener()</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">addPauseListener()</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">removePauseListener()</td>
</tr>
<tr>
<td style="text-align:center">withStartAction()一次性动画</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">withEndAction()</td>
</tr>
</tbody>
</table>
<p><code>Animator</code>类当中提供了一个<code>addListener()</code>方法，这个方法接收一个<code>AnimatorListener</code>，我们只需要去实现这个AnimatorListener就可以监听动画的各种事件了。</p>
<h1 id="四、-其他组件"><a href="#四、-其他组件" class="headerlink" title="四、 其他组件"></a>四、 其他组件</h1><h2 id="1-插值器-Interpolator"><a href="#1-插值器-Interpolator" class="headerlink" title="1. 插值器 - Interpolator"></a>1. 插值器 - Interpolator</h2><h3 id="1-1-Interpolator的作用"><a href="#1-1-Interpolator的作用" class="headerlink" title="1.1 Interpolator的作用"></a>1.1 Interpolator的作用</h3><p>内插器定义动画的变化率。 这可以使基本的动画效果（alpha，缩放，平移，旋转）加速，减速，重复等。</p>
<h3 id="1-2-Interpolator的继承关系"><a href="#1-2-Interpolator的继承关系" class="headerlink" title="1.2 Interpolator的继承关系"></a>1.2 Interpolator的继承关系</h3><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-20%2010.49.47.png" alt=""></p>
<h3 id="1-3-系统自带效果"><a href="#1-3-系统自带效果" class="headerlink" title="1.3 系统自带效果"></a>1.3 系统自带效果</h3><table>
<thead>
<tr>
<th style="text-align:left">Interpolator class</th>
<th style="text-align:left">Resource ID</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">AccelerateDecelerateInterpolator</td>
<td style="text-align:left">@android:anim/accelerate_decelerate_interpolator</td>
</tr>
<tr>
<td style="text-align:left">AccelerateInterpolator</td>
<td style="text-align:left">@android:anim/accelerate_interpolator</td>
</tr>
<tr>
<td style="text-align:left">AnticipateInterpolator</td>
<td style="text-align:left">@android:anim/anticipate_interpolator</td>
</tr>
<tr>
<td style="text-align:left">AnticipateOvershootInterpolator</td>
<td style="text-align:left">@android:anim/anticipate_overshoot_interpolator</td>
</tr>
<tr>
<td style="text-align:left">BounceInterpolator</td>
<td style="text-align:left">@android:anim/bounce_interpolator</td>
</tr>
<tr>
<td style="text-align:left">CycleInterpolator</td>
<td style="text-align:left">@android:anim/cycle_interpolator</td>
</tr>
<tr>
<td style="text-align:left">DecelerateInterpolator</td>
<td style="text-align:left">@android:anim/decelerate_interpolator</td>
</tr>
<tr>
<td style="text-align:left">LinearInterpolator</td>
<td style="text-align:left">@android:anim/linear_interpolator</td>
</tr>
<tr>
<td style="text-align:left">OvershootInterpolator</td>
<td style="text-align:left">@android:anim/overshoot_interpolator</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:left">Interpolator class</th>
<th style="text-align:left">decription</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">AccelerateDecelerateInterpolator</td>
<td style="text-align:left">开始和结束缓慢，中间加速</td>
</tr>
<tr>
<td style="text-align:left">AccelerateInterpolator</td>
<td style="text-align:left">开始的时候缓慢，之后开始加速</td>
</tr>
<tr>
<td style="text-align:left">AnticipateInterpolator</td>
<td style="text-align:left">开始的时候向后甩一下，然后向前</td>
</tr>
<tr>
<td style="text-align:left">AnticipateOvershootInterpolator</td>
<td style="text-align:left">开始的时候向后甩一下，然后加速向前甩过终点一点后回到原点</td>
</tr>
<tr>
<td style="text-align:left">BounceInterpolator</td>
<td style="text-align:left">动画结束的时候小距离的时候在终点处弹起</td>
</tr>
<tr>
<td style="text-align:left">CycleInterpolator</td>
<td style="text-align:left">将重复周期的指定数目的动画。变化率遵循正弦模式</td>
</tr>
<tr>
<td style="text-align:left">DecelerateInterpolator</td>
<td style="text-align:left">开始的时候快，结束的时候慢</td>
</tr>
<tr>
<td style="text-align:left">FastOutLinearInInterpolator</td>
<td style="text-align:left">加速运动</td>
</tr>
<tr>
<td style="text-align:left">FastOutSlowInInterpolator</td>
<td style="text-align:left">先加速再减速</td>
</tr>
<tr>
<td style="text-align:left">LinearInterpolator</td>
<td style="text-align:left">以常量速率变化</td>
</tr>
<tr>
<td style="text-align:left">LinearOutSlowInInterpolator</td>
<td style="text-align:left">持续减速</td>
</tr>
<tr>
<td style="text-align:left">OvershootInterpolator</td>
<td style="text-align:left">运动到终点后，冲过终点后再回弹</td>
</tr>
<tr>
<td style="text-align:left">PathInterpolator</td>
<td style="text-align:left">自定义动画完成度 / 时间完成度曲线</td>
</tr>
</tbody>
</table>
<h2 id="2-计算器-TypeEvaluator"><a href="#2-计算器-TypeEvaluator" class="headerlink" title="2. 计算器 - TypeEvaluator"></a>2. 计算器 - TypeEvaluator</h2><blockquote>
<p>参考：<a href="http://hencoder.com/ui-1-7/" target="_blank" rel="external">http://hencoder.com/ui-1-7/</a></p>
</blockquote>
<p>告诉动画系统如何从初始值过度到结束值</p>
<p>用于<code>ValueAnimator.setEvaluator（TypeEvaluator）</code>函数的接口。 评估者允许开发人员通过允许他们为动画系统不能自动理解和使用的类型提供自定义评估器来为任意属性类型创建动画。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TypeEvaluator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">      * 该函数返回对开始和结束值进行线性插值的结果</span></div><div class="line"><span class="comment">      * 表示开始和结束值之间的比例的“分数”。 计算是一个简单的参数计算：result = x0 + t *（x1 - x0）</span></div><div class="line"><span class="comment">      * 其中 x0  是 startValue ，x1  是 endValue ， t  是 分数 。</span></div><div class="line"><span class="comment">      * </span></div><div class="line"><span class="comment">      * @参数分数从开始到结束值的分数</span></div><div class="line"><span class="comment">      * <span class="doctag">@param</span> startValue起始值。</span></div><div class="line"><span class="comment">      * <span class="doctag">@param</span> endValue最终值。</span></div><div class="line"><span class="comment">      * <span class="doctag">@return</span>给定的开始值和结束值之间的线性插值</span></div><div class="line"><span class="comment">      *  fraction ：参数fraction非常重要，这个参数用于表示动画的完成度的，我们应该根据它来计算当前动画的值应该是多少。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">evaluate</span><span class="params">(<span class="keyword">float</span> fraction, T startValue, T endValue)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-1-一个IntEvaluator类代码："><a href="#2-1-一个IntEvaluator类代码：" class="headerlink" title="2.1 一个IntEvaluator类代码："></a>2.1 一个<code>IntEvaluator类</code>代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 此评估程序可用于在  int  值之间执行类型插值。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntEvaluator</span> <span class="keyword">implements</span> <span class="title">TypeEvaluator</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">evaluate</span><span class="params">(<span class="keyword">float</span> fraction, Integer startValue, Integer endValue)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> startInt = startValue;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)(startInt + fraction * (endValue - startInt));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-20%2011.47.00.png" alt=""></p>
<h3 id="2-2-使用"><a href="#2-2-使用" class="headerlink" title="2.2 使用"></a>2.2 使用</h3><p><strong>自定义一个Evaluator</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AZEvaluator</span> <span class="keyword">implements</span> <span class="title">TypeEvaluator</span>&lt;<span class="title">Character</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Character <span class="title">evaluate</span><span class="params">(<span class="keyword">float</span> fraction, Character startValue, Character endValue)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> startInt  = (<span class="keyword">int</span>)startValue;</div><div class="line">        <span class="keyword">int</span> endInt = (<span class="keyword">int</span>)endValue;</div><div class="line">        <span class="keyword">int</span> curInt = (<span class="keyword">int</span>)(startInt + (fraction *(endInt - startInt)));</div><div class="line">        <span class="keyword">char</span> result = (<span class="keyword">char</span>)curInt;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">ValueAnimator valueAnimator = ValueAnimator.ofObject(<span class="keyword">new</span> AZEvaluator(),Character.valueOf(<span class="string">'A'</span>),Character.valueOf(<span class="string">'Z'</span>));</div><div class="line">valueAnimator.setDuration(<span class="number">3000</span>);</div><div class="line">valueAnimator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</div><div class="line">        <span class="keyword">char</span> currentChar = (<span class="keyword">char</span>) animation.getAnimatedValue();</div><div class="line">        Log.e(TAG, <span class="string">"onAnimationUpdate: "</span> + currentChar );</div><div class="line">        showChar.setText(String.valueOf(currentChar));</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//valueAnimator.setInterpolator(new LinearInterpolator());</span></div><div class="line">valueAnimator.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">valueAnimator.setRepeatMode(ValueAnimator.REVERSE);</div><div class="line">valueAnimator.start();</div></pre></td></tr></table></figure>
<h1 id="硬件加速"><a href="#硬件加速" class="headerlink" title="硬件加速"></a>硬件加速</h1><blockquote>
<p>参考：<a href="http://hencoder.com/ui-1-8/" target="_blank" rel="external">http://hencoder.com/ui-1-8/</a></p>
</blockquote>
<h2 id="硬件加速能够让绘制变快，主要有三个原因"><a href="#硬件加速能够让绘制变快，主要有三个原因" class="headerlink" title="硬件加速能够让绘制变快，主要有三个原因"></a>硬件加速能够让绘制变快，主要有三个原因</h2><ul>
<li>本来由 CPU 自己来做的事，分摊给了 GPU 一部分，自然可以提高效率；</li>
<li>相对于 CPU 来说，GPU 自身的设计本来就对于很多常见类型内容的计算（例如简单的圆形、简单的方形）具有优势；</li>
<li>由于绘制流程的不同，硬件加速在界面内容发生重绘的时候绘制流程可以得到优化，避免了一些重复操作，从而大幅提升绘制效率。</li>
</ul>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在硬件加速关闭的时候，Canvas 绘制的工作方式是：把要绘制的内容写进一个 Bitmap，然后在之后的渲染过程中，这个 Bitmap 的像素内容被直接用于渲染到屏幕。这种绘制方式的主要计算工作在于把绘制操作转换为像素的过程（例如由一句 Canvas.drawCircle() 来获得一个具体的圆的像素信息），这个过程的计算是由 CPU 来完成的。大致就像这样：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/006tKfTcly1fjmybsw31fj30nb0iywfq.jpg" alt=""></p>
<p>而在硬件加速开启时，Canvas 的工作方式改变了：它只是把绘制的内容转换为 GPU 的操作保存了下来，然后就把它交给 GPU，最终由 GPU 来完成实际的显示工作。大致是这样：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/006tKfTcly1fjmygtwiutj30nb0o2ta8.jpg" alt=""></p>
<h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-21%2014.07.30.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 动画 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自定义View-5 View的绘制顺序]]></title>
      <url>/%E8%87%AA%E5%AE%9A%E4%B9%89View-5%20View%E7%9A%84%E7%BB%98%E5%88%B6%E9%A1%BA%E5%BA%8F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考：<a href="http://hencoder.com/ui-1-5/" target="_blank" rel="external">http://hencoder.com/ui-1-5/</a></p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="在各个重写方法中的-前-or-后？"><a href="#在各个重写方法中的-前-or-后？" class="headerlink" title="在各个重写方法中的 前 or 后？"></a>在各个重写方法中的 前 or 后？</h1><p>绘制在<code>super.XXX()</code>之前，覆盖之后绘制的内容；绘制在<code>super.XXX()</code>之后，则覆盖之前绘制的内容。</p>
<!-- more -->
<h1 id="小招数"><a href="#小招数" class="headerlink" title="小招数"></a>小招数</h1><p>Debug 模式下绘制出额外的信息：<br>如：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/52eb2279ly1fih2ihfxpxj207306q40e.jpg" alt=""></p>
<h1 id="绘制过程"><a href="#绘制过程" class="headerlink" title="绘制过程"></a>绘制过程</h1><p><img src="http://oy991qm3u.bkt.clouddn.com/006tKfTcly1fiix28rb6mj30ru0c8jsb.jpg" alt=""></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/006tKfTcly1fii5jk7l19j30q70e0di5.jpg" alt=""></p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul>
<li>处于效率问题，ViewGroup默认绕过<code>draw()</code>方法，直接执行<code>dispatchDraw()</code>，以此来简化流程。若继承了ViewGroup要在除<code>dispatchDraw()</code>以外的方法进行内容的绘制，调用<code>View.setWillNotDraw(false)</code>方法可能会有用，因为有些方法已经使用此方法。</li>
<li>如果绘制代码既可以写在<code>onDraw()</code>亦可以写在其他方法里时，写在<code>onDraw()</code>中最合适，因为Android本身对<code>onDraw()</code>有优化，在不需要重绘时自动跳过<code>onDraw()</code>。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自定义View-4 Canvas的辅助绘制]]></title>
      <url>/%E8%87%AA%E5%AE%9A%E4%B9%89View-4%20Canvas%E7%9A%84%E8%BE%85%E5%8A%A9%E7%BB%98%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>总结</p>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="1-Canvas与Camera中不可忽略的两个方法："><a href="#1-Canvas与Camera中不可忽略的两个方法：" class="headerlink" title="1. Canvas与Camera中不可忽略的两个方法："></a>1. Canvas与Camera中不可忽略的两个方法：</h1><p>对同一个图片对象进行处理时，需要时时注意的两个方法。</p>
<ul>
<li>save() : 保存处理之前的状态</li>
<li>restore() ：恢复 “保存处理之前的状态”</li>
</ul>
<h1 id="2-处理的顺序问题："><a href="#2-处理的顺序问题：" class="headerlink" title="2. 处理的顺序问题："></a>2. 处理的顺序问题：</h1><p>对于一个图片进行多项操作处理时候，实际处理代码的顺序是从下向上的。<br>Canvas的顺序是反着的。</p>
<h1 id="3-裁剪-Clip"><a href="#3-裁剪-Clip" class="headerlink" title="3. 裁剪 Clip"></a>3. 裁剪 Clip</h1><p><code>Canvas</code>中与<code>Clip</code>有关的方法：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-15%2019.20.34.png" alt=""></p>
<p>共有2类：<code>Path</code>和<code>Rect</code></p>
<h2 id="3-1-Rect裁剪"><a href="#3-1-Rect裁剪" class="headerlink" title="3.1 Rect裁剪"></a>3.1 Rect裁剪</h2><pre><code>canvas.clipRect(left,top,left + 130,top + 150);
canvas.drawBitmap(bitmap, left, top, paint);
</code></pre><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-15%2019.16.15.png" alt=""></p>
<h2 id="3-2-Path裁剪"><a href="#3-2-Path裁剪" class="headerlink" title="3.2 Path裁剪"></a>3.2 Path裁剪</h2><pre><code>//圆形抠图
canvas.save();
canvas.translate(250,500);
Path path = new Path();
path.addCircle(100,200,100, Path.Direction.CW);
canvas.clipPath(path);
canvas.drawBitmap(bitmap,0,0,paint);
canvas.restore();

//心形挖空
canvas.save();
canvas.translate(600,500);
Path path1 = new Path();
path1.setFillType(Path.FillType.INVERSE_WINDING);
path1.arcTo(50,100,150,200,135,225,false);
path1.arcTo(150,100,250,200,180,225,false);
path1.lineTo(150,300);
path1.close();
canvas.clipPath(path1);
canvas.drawBitmap(bitmap,0,0,paint);
canvas.restore();

//心形抠图
canvas.save();
canvas.translate(1000,500);
Path path2 = new Path();
path2.setFillType(Path.FillType.EVEN_ODD);
path2.arcTo(50,100,150,200,135,225,false);
path2.arcTo(150,100,250,200,180,225,false);
path2.lineTo(150,300);
path2.close();
canvas.clipPath(path2);
canvas.drawBitmap(bitmap,0,0,paint);
canvas.restore();
</code></pre><p>  <img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-15%2019.16.25.png" alt=""></p>
<h1 id="4-变换-Canvas，Matrix，Camera"><a href="#4-变换-Canvas，Matrix，Camera" class="headerlink" title="4. 变换 Canvas，Matrix，Camera"></a>4. 变换 Canvas，Matrix，Camera</h1><h2 id="4-1-Canvas变换"><a href="#4-1-Canvas变换" class="headerlink" title="4.1  Canvas变换"></a>4.1  Canvas变换</h2><p>共有4类：</p>
<ul>
<li>scale</li>
<li>translate</li>
<li>skew</li>
<li><p>rotate</p>
<p>他们的使用方式相同，唯一就是参数类型不同。</p>
<p><strong>skew的使用</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">   * 斜切</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  canvas.save();</div><div class="line">  canvas.translate(<span class="number">0</span>,<span class="number">200</span>);</div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * <span class="doctag">@param</span> sx在X中歪斜的数量</span></div><div class="line"><span class="comment">   * <span class="doctag">@param</span> sy在Y中倾斜的数量</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  canvas.skew(<span class="number">0f</span>,<span class="number">0.5f</span>);</div><div class="line">  canvas.drawBitmap(bitmap, point1.x, point1.y, paint);</div><div class="line">  canvas.restore();</div><div class="line">  canvas.save();</div><div class="line">  canvas.translate(<span class="number">700</span>,<span class="number">400</span>);</div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * <span class="doctag">@param</span> sx在X中歪斜的数量</span></div><div class="line"><span class="comment">   * <span class="doctag">@param</span> sy在Y中倾斜的数量</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  canvas.skew(-<span class="number">0.5f</span>,<span class="number">0f</span>);</div><div class="line">  canvas.drawBitmap(bitmap, point1.x, point1.y, paint);</div><div class="line">  canvas.restore();</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-15%2019.16.36.png" alt=""></p>
<h2 id="4-2-Matrix变换"><a href="#4-2-Matrix变换" class="headerlink" title="4.2 Matrix变换"></a>4.2 Matrix变换</h2><p><strong>大致使用</strong></p>
<pre><code>Matrix matrix = new Matrix();
canvas.drawBitmap(bitmap, point1.x, point1.y, paint);

canvas.save();
matrix.postTranslate(0,300);
canvas.concat(matrix);
canvas.drawBitmap(bitmap, point1.x, point1.y, paint);
canvas.restore();

canvas.translate(0,-300);
canvas.save();
matrix.preTranslate(0,-300);
canvas.concat(matrix);
canvas.drawBitmap(bitmap, point1.x, point1.y, paint);
canvas.restore();
</code></pre><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-15%2019.16.49.png" alt=""></p>
<h2 id="4-3-Camera变换中的使用"><a href="#4-3-Camera变换中的使用" class="headerlink" title="4.3 Camera变换中的使用"></a>4.3 Camera变换中的使用</h2><p><code>Canvas</code>和<code>Matrix</code>仅能对图像实现二维效果的是实现，而<code>Camera</code>所在的是空间三维坐标系，能够实现空间变换效果。</p>
<h3 id="4-3-1-初次实现变换"><a href="#4-3-1-初次实现变换" class="headerlink" title="4.3.1 初次实现变换"></a>4.3.1 初次实现变换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Camera camera = <span class="keyword">new</span> Camera();</div><div class="line">canvas.translate(<span class="number">100</span>,<span class="number">200</span>);</div><div class="line">canvas.save();</div><div class="line">camera.save();</div><div class="line">camera.rotateX(<span class="number">30</span>);</div><div class="line">camera.applyToCanvas(canvas);</div><div class="line">camera.restore();</div><div class="line">canvas.drawBitmap(bitmap, point1.x, point1.y, paint);</div><div class="line">canvas.restore();</div><div class="line"></div><div class="line">canvas.translate(<span class="number">100</span>,-<span class="number">200</span>);</div><div class="line">canvas.save();</div><div class="line">camera.save();</div><div class="line">camera.rotateY(<span class="number">30</span>);</div><div class="line">camera.applyToCanvas(canvas);</div><div class="line">camera.restore();</div><div class="line">canvas.drawBitmap(bitmap, point1.x, point1.y, paint);</div><div class="line">canvas.restore();</div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-15%2019.12.52.png" alt=""></p>
<p>很明显可以看到，在空间坐标系中进行<code>camera</code>变换后，得到的效果已经失真。</p>
<pre><code>* Android的Camera中的轴是一个控件三维轴：X、Y、Z，3个轴，camera所对应的原点并不是图像的原点，而是三维坐标轴的原点。
*
* 所以图像如果想在camera下沿各个轴做&quot;平面（不失真）&quot;的旋转，就要以图像的中心为轴心进行旋转，但是camera不支持设置轴心，所以要通过Canvas进行轴心的再设置。
*
* 通过Canvas将图像的中心移动到轴的中心。待旋转结束之后再将图形的轴心移动回之前的位置。
*
* 所以，在camera下将图像进行旋转实际的操作步骤是：
*
* 1）将图像中心移动至空间坐标系的轴心
* 2）执行图像的选装
* 3）恢复图像原来的轴心位置。
*
* 通过移动图像的坐标原点后，对图像的X、Y、Z轴分别旋转30度后，三个图像是重合在一起的。即：
*      他们的轴心是同一个点。
</code></pre><h3 id="4-3-2-Camera的空间坐标轴"><a href="#4-3-2-Camera的空间坐标轴" class="headerlink" title="4.3.2 Camera的空间坐标轴"></a>4.3.2 Camera的空间坐标轴</h3><p><strong>注意：和Camera坐标有关的图片均来自“扔物线”的个人视频截图，此处特此声明。</strong></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-16%2011.53.05.png" alt=""></p>
<p>Camera的空间坐标系的旋转方向：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-16%2011.56.37.png" alt=""></p>
<h3 id="4-3-3-修正之后"><a href="#4-3-3-修正之后" class="headerlink" title="4.3.3 修正之后"></a>4.3.3 修正之后</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//对X轴进行30度旋转</span></div><div class="line"><span class="comment">//保存变更前的状态</span></div><div class="line">camera.save();</div><div class="line">canvas.save();</div><div class="line"><span class="comment">//通过canva将三维坐标系的轴心移动至图像的原点，恢复到之前的空间状态。</span></div><div class="line">canvas.translate(center1X, center1Y);</div><div class="line"><span class="comment">//在camera下将图像沿着x轴旋转30度</span></div><div class="line">camera.rotateX(<span class="number">30</span>);</div><div class="line"><span class="comment">//获得在camera下图像的旋转结果，并将结果应用到canvas中.</span></div><div class="line">camera.applyToCanvas(canvas);</div><div class="line"><span class="comment">//通过canva将图像的原点移动至三维坐标系的轴心</span></div><div class="line">canvas.translate(-center1X, -center1Y);</div><div class="line"><span class="comment">//camera处理结束后，恢复到之前的sava状态</span></div><div class="line">camera.restore();</div><div class="line"><span class="comment">//将得到的图像的结果进行绘制。</span></div><div class="line">canvas.drawBitmap(bitmap, point1.x, point1.y, paint);</div><div class="line"><span class="comment">//canvas处理结束后，恢复到之前的sava状态</span></div><div class="line">canvas.restore();</div><div class="line"></div><div class="line"><span class="comment">//对Y轴进行30度旋转</span></div><div class="line">canvas.translate(<span class="number">400</span>, <span class="number">0</span>);</div><div class="line">camera.save();</div><div class="line">canvas.save();</div><div class="line">canvas.translate(center1X, center1Y);</div><div class="line">camera.rotateY(<span class="number">30</span>);</div><div class="line">camera.applyToCanvas(canvas);</div><div class="line">canvas.translate(-center1X, -center1Y);</div><div class="line">camera.restore();</div><div class="line">canvas.drawBitmap(bitmap, point1.x, point1.y, paint);</div><div class="line">canvas.restore();</div><div class="line"></div><div class="line"><span class="comment">//对Z轴进行30度旋转</span></div><div class="line">canvas.translate(<span class="number">400</span>, <span class="number">0</span>);</div><div class="line">camera.save();</div><div class="line">canvas.save();</div><div class="line">canvas.translate(center1X, center1Y);</div><div class="line">camera.rotateZ(<span class="number">30</span>);</div><div class="line">camera.applyToCanvas(canvas);</div><div class="line">canvas.translate(-center1X, -center1Y);</div><div class="line">camera.restore();</div><div class="line">canvas.drawBitmap(bitmap, point1.x, point1.y, paint);</div><div class="line">canvas.restore();</div></pre></td></tr></table></figure>
<p><strong>实际执行过程</strong></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-16%2009.04.16.png" alt=""></p>
<p><strong>在空间坐标轴中的移动过程大致为：</strong></p>
<p>先将图的原点移动到空间坐标系的原点。即代码： <code>canvas.translate(-center1X, -center1Y);</code></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-16%2011.55.01.png" alt=""></p>
<p>然后执行具体的变换操作，代码：<code>camera.rotateZ(30);</code></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-16%2011.55.35.png" alt=""></p>
<p>获取变换后的投影</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-16%2011.56.15.png" alt=""></p>
<p>得到投影结果后，再将图像的原点移动到之前的位置。</p>
<p><strong>运行结果</strong></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-15%2019.13.11.png" alt=""></p>
<p><strong>设置虚拟Camera的位置</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DisplayMetrics displayMetrics = getResources().getDisplayMetrics();</div><div class="line"><span class="keyword">float</span> newZ = - displayMetrics.density * <span class="number">6</span>;</div><div class="line">camera.setLocation(<span class="number">0</span>, <span class="number">0</span>, newZ);</div></pre></td></tr></table></figure>
<h2 id="5-为自定义中的图像添加-动画"><a href="#5-为自定义中的图像添加-动画" class="headerlink" title="5. 为自定义中的图像添加 动画"></a>5. 为自定义中的图像添加 动画</h2><h3 id="5-1-步骤"><a href="#5-1-步骤" class="headerlink" title="5.1 步骤"></a>5.1 步骤</h3><h4 id="（1）声明ObjectAnimator对象并进行初始化。"><a href="#（1）声明ObjectAnimator对象并进行初始化。" class="headerlink" title="（1）声明ObjectAnimator对象并进行初始化。"></a>（1）声明<code>ObjectAnimator</code>对象并进行初始化。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> degree;</div><div class="line">ObjectAnimator mAnimator = ObjectAnimator.ofInt(<span class="keyword">this</span>,<span class="string">"degree"</span>,<span class="number">180</span>,<span class="number">0</span>);</div></pre></td></tr></table></figure>
<h4 id="（2）对ObjectAnimator对象进行具体设置"><a href="#（2）对ObjectAnimator对象进行具体设置" class="headerlink" title="（2）对ObjectAnimator对象进行具体设置"></a>（2）对<code>ObjectAnimator</code>对象进行具体设置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置时长</span></div><div class="line">mAnimator.setDuration(<span class="number">2000</span>);</div><div class="line"><span class="comment">//设置插值器</span></div><div class="line">mAnimator.setInterpolator(<span class="keyword">new</span> FastOutLinearInInterpolator());</div><div class="line"><span class="comment">//无限重复</span></div><div class="line">mAnimator.setRepeatCount(ValueAnimator.INFINITE);</div></pre></td></tr></table></figure>
<h4 id="（3）重写相应的方法设置动画的开始和结束"><a href="#（3）重写相应的方法设置动画的开始和结束" class="headerlink" title="（3）重写相应的方法设置动画的开始和结束"></a>（3）重写相应的方法设置动画的开始和结束</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onAttachedToWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onAttachedToWindow();</div><div class="line">    mAnimator.start();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDetachedFromWindow();</div><div class="line">    mAnimator.end();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="（4）设置含有degree属性的方法"><a href="#（4）设置含有degree属性的方法" class="headerlink" title="（4）设置含有degree属性的方法"></a>（4）设置含有degree属性的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//unused这个参数是屏蔽：定义的变量在代码中并未使用且无法访问</span></div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDegree</span><span class="params">(<span class="keyword">int</span> degree)</span></span>&#123;</div><div class="line">	<span class="keyword">this</span>.degree = degree;</div><div class="line">	<span class="comment">//执行重绘</span></div><div class="line">	invalidate();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="（5）使用参数"><a href="#（5）使用参数" class="headerlink" title="（5）使用参数"></a>（5）使用参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mCamera.rotateX(degree);</div></pre></td></tr></table></figure>
<h3 id="5-2-一个完整的例子"><a href="#5-2-一个完整的例子" class="headerlink" title="5.2 一个完整的例子"></a>5.2 一个完整的例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CameraFlipBoard</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    Paint mPaint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</div><div class="line">    Camera mCamera = <span class="keyword">new</span> Camera();</div><div class="line">    Bitmap mBitmap;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> degree;</div><div class="line">    ObjectAnimator mAnimator = ObjectAnimator.ofInt(<span class="keyword">this</span>,<span class="string">"degree"</span>,<span class="number">180</span>,<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CameraFlipBoard</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CameraFlipBoard</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CameraFlipBoard</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//设置自定义动画</span></div><div class="line">    &#123;</div><div class="line">        mBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.maps);</div><div class="line"></div><div class="line">        mAnimator.setDuration(<span class="number">2000</span>);</div><div class="line">        mAnimator.setInterpolator(<span class="keyword">new</span> FastOutLinearInInterpolator());</div><div class="line"></div><div class="line">        <span class="comment">//无限重复</span></div><div class="line">        mAnimator.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onAttachedToWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onAttachedToWindow();</div><div class="line">        mAnimator.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDetachedFromWindow();</div><div class="line">        mAnimator.end();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//unused这个参数是屏蔽：定义的变量在代码中并未使用且无法访问</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDegree</span><span class="params">(<span class="keyword">int</span> degree)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.degree = degree;</div><div class="line">        <span class="comment">//执行重绘</span></div><div class="line">        invalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">        <span class="keyword">float</span> centerX = getWidth() / <span class="number">2</span>;</div><div class="line">        <span class="keyword">float</span> centerY = getHeight() / <span class="number">2</span>;</div><div class="line"></div><div class="line">        <span class="keyword">float</span> cbx = centerX - mBitmap.getWidth() / <span class="number">2</span>;</div><div class="line">        <span class="keyword">float</span> cby = centerY - mBitmap.getHeight() / <span class="number">2</span>;</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">            本次要实现的是由图片的中间开始，上半部分不动，下半部分由上往下翻180度。</span></div><div class="line"><span class="comment">            所以，一张图片要被分成2部分：</span></div><div class="line"><span class="comment">                上半部分绘制完成之后不动</span></div><div class="line"><span class="comment">                下半部分则是反向转动180度</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="comment">//上半部分</span></div><div class="line">        canvas.save();</div><div class="line">        canvas.clipRect(<span class="number">0</span>,<span class="number">0</span>,getWidth(),centerY);</div><div class="line">        canvas.drawBitmap(mBitmap, cbx,cby, mPaint);</div><div class="line">        canvas.restore();</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">            未经移动的canvas坐标原点即为camera的坐标原点。</span></div><div class="line"><span class="comment">            移动的距离要看 具体的bitmap所在的具体位置：</span></div><div class="line"><span class="comment">                若bitmap在view的坐标原点，则移动bitmap的width/2和height/2即可。</span></div><div class="line"><span class="comment">                若bitmap不在view的坐标原点，则要根据他们的相对位置进行计算后移动。</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="comment">//下半部分</span></div><div class="line">        canvas.save();</div><div class="line">        <span class="keyword">if</span> (degree &lt; <span class="number">90</span>) &#123;</div><div class="line">            canvas.clipRect(<span class="number">0</span>,centerY,getWidth(),getHeight());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            canvas.clipRect(<span class="number">0</span>,<span class="number">0</span>,getWidth(),centerY);</div><div class="line">        &#125;</div><div class="line">        mCamera.save();</div><div class="line"></div><div class="line">        canvas.translate(centerX,centerY);</div><div class="line">        mCamera.rotateX(degree);</div><div class="line">        mCamera.applyToCanvas(canvas);</div><div class="line">        canvas.translate(-centerX,-centerY);</div><div class="line">        mCamera.restore();</div><div class="line">        canvas.drawBitmap(mBitmap,cbx,cby,mPaint);</div><div class="line">        canvas.restore();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android7.0新特性-Shortcuts]]></title>
      <url>/Android7-0%E6%96%B0%E7%89%B9%E6%80%A7-Shortcuts/</url>
      <content type="html"><![CDATA[<p>总结</p>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>如果你的<code>App targets android7.1（API level25）</code>或者更高，你就可以在你的app中定义快捷方式来支持<code>特殊的actions</code>。这些快捷方式可以显示在启动图标上，快捷方式可以在你的app内让用户快速开始使用命令或者推荐任务。<br><code>Shortcuts</code>是Android7.0的新特性，它的功能就像是类似iphone的<code>3D Touch</code>，选中其中的一条<code>Shortcut</code>后，点击是打开对应的app界面，长按则是将此条<code>Shortcut</code>添加至桌面。</p>
<p>以<code>网易云音乐</code>为例进行展示。</p>
<!-- more -->
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-14%2022.41.49.png" alt=""></p>
<p>长按带有<code>shorcuts</code>功能的app时，该有的样式。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-14%2022.43.35.png" alt=""></p>
<p>单个<code>shortcut</code>固定到桌面时的样式。其中<code>大的背景icon</code>是在<code>shortcuts</code>中自己设置的，<code>右下角小的背景icon</code>是app的icon。 </p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>你也可以在你的app中发布两个不同类型的快捷方式</p>
<ul>
<li><code>静态快捷方式</code>被定义在一个<code>资源文件</code>中。因此，你必须等到直到你的app更新后，才能改变“静态快捷方式”中的详情。</li>
<li><code>动态快捷方式</code>是通过在运行时使用<code>ShortcutManager API</code>来发布的，在运行时，你的app可以<code>发布</code>、<code>更新</code>、和<code>移除</code>。<br>  在你的app中同一时间至多可以发布<code>5个快捷方式（静态和动态结合）</code>。然而不必显示你所创建的每一个。</li>
</ul>
<h2 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h2><p>使用到的类 <code>ShortcutManager</code>，<code>ShortcutInfo</code>。其中，<code>ShortcutManager</code>用于管理<code>ShortcutInfo</code>，而<code>ShortcutInfo</code>则是执行具体的创建。</p>
<h3 id="简单的初级实现："><a href="#简单的初级实现：" class="headerlink" title="简单的初级实现："></a>简单的初级实现：</h3><pre><code>manager = getSystemService(ShortcutManager.class);

//第一步：ShortcutInfo 对象
ShortcutInfo info = new ShortcutInfo.Builder(this,&quot;id1&quot;)
        //此条shortcut的icon
        .setIcon(Icon.createWithResource(MainActivity.this,R.mipmap.ic_launcher_round)).
        //固定到桌面时显示的文字
        setShortLabel(&quot;Trinea&quot;).
        //按住app的icon后此条shortcut在显示时的位置
        setRank(1).
        //按住app的icon后此条shortcut显示的文字
        setLongLabel(&quot;打开Trinea主页&quot;).
        //此条shortcut执行的功能
        setIntents(intents).
        build();

//ShortcutInfo 对象
ShortcutInfo info2 = new ShortcutInfo.Builder(this,&quot;id2&quot;).
                setIcon(Icon.createWithResource(MainActivity.this,R.mipmap.ic_launcher_round)).
                setShortLabel(&quot;百度&quot;).
                setRank(2).
                setLongLabel(&quot;百度一下&quot;).
                setIntent(new Intent(Intent.ACTION_VIEW, Uri.parse(&quot;https://www.baidu.com/&quot;))).
                build();

//ShortcutInfo 对象
ShortcutInfo info3 = new ShortcutInfo.Builder(this,&quot;id0&quot;).
                setIcon(Icon.createWithResource(MainActivity.this,R.mipmap.ic_launcher_round)).
                setShortLabel(&quot;SecondActivity&quot;).
                setDisabledMessage(&quot;此快捷方式已经被禁用&quot;).
                setRank(3).
                setLongLabel(&quot;打开 SecondActivity&quot;).
                setIntents(intents2).
                build();

//第二步：整理shortcut对象
dynamicShortcuts.add(info);
dynamicShortcuts.add(info2);
dynamicShortcuts.add(info3);

//第三步：通过manager设置shortcut
//manager.addDynamicShortcuts(Arrays.asList(info));
manager.setDynamicShortcuts(dynamicShortcuts);
</code></pre><h2 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h2><p>需要的文件<code>AndroidManifest.xml</code>。</p>
<ol>
<li><p>在触发<code>Shortcuts</code>的<code>Activity</code>的<code>activity</code>标签配置中，添加<code>meta-data</code>标签。具体为：</p>
<pre><code>&lt;activity android:name=&quot;.MainActivity&quot;&gt;
        &lt;intent-filter&gt;
            &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;
            &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
        &lt;/intent-filter&gt;
        &lt;meta-data 
            android:name=&quot;android.app.shortcuts&quot;
             android:resource=&quot;@xml/my_shortcut&quot;/&gt;
   &lt;/activity&gt;
</code></pre><p>其中android:resource指向定义了 shortcuts 的资源文件。</p>
</li>
<li><p>创建一个资源文件，在<code>res/xml/</code>目录下，文件的名字同<code>meta-data</code>自己编写的<code>my_shortcut</code>：</p>
<p>   <img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-14%2023.03.07.png" alt=""></p>
</li>
<li><p>在这个资源文件中使用<code>shortcuts</code>作为根元素，它包含多个<code>shortcut</code>标签列表，每一个<code>shortcut</code></p>
<pre><code>就是一个`静态快捷方式`。
</code></pre><p>一个<code>shortcut</code>的具体为：</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;shortcuts xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
    &lt;shortcut
        android:enabled=&quot;true&quot;
        android:icon=&quot;@mipmap/ic_launcher&quot;
        android:shortcutDisabledMessage=&quot;@string/message&quot;
        android:shortcutId=&quot;static&quot;
        android:shortcutLongLabel=&quot;@string/longlaber&quot;
        android:shortcutShortLabel=&quot;@string/shortlaber&quot;&gt;
        &lt;intent
            android:action=&quot;android.intent.action.VIEW&quot;
            android:targetClass=&quot;com.example.shortcutsmy.SecondActivity&quot;
            android:targetPackage=&quot;com.example.shortcutsmy&quot; /&gt;
    &lt;/shortcut&gt;
&lt;/shortcuts&gt;
</code></pre><p><strong>说明</strong></p>
<ul>
<li><code>shortcutId</code>表示 shortcut 唯一标识符，相同的 shortcutId 会被覆盖。必须字段。</li>
<li><code>shortcutShortLabel</code>为将 shortcut 拖动到桌面时显示的名字，官方建议不超过 10 个字符，必须字段。</li>
<li><code>shortcutLongLabel</code>为 shortcut 列表中每个 shortcut 的名字，不宜过长，如果过长或未设置默认会显示 ShortLabel，官方建议不超过 25 个字符。可选字段。</li>
<li><code>icon</code>为 shortcut 的 icon，在列表展示和拖动到桌面时显示需要，可选字段。</li>
<li><code>enabled</code>表示 shortcut 是否可用，false 表示禁用。xml 中这个属性几乎没有被设置为 false 的实际场景，具体原因可见6.7 如何更好的删除(废弃)老的 Shortcut中介绍。</li>
<li><code>shortcutDisabledMessage</code>为已固定在桌面的 shortcut 被 Disabled 后点击时的 Toast 提示内容。可选字段。</li>
<li><p><code>intent</code>为点击 shortcut 时响应的 intent，必须字段。<br>可以添加多个 intent，但点击时不会启动所有 intent，而是<strong>启动最后一个 intent</strong>，在这个 intent 回退时会启动它前面一个 intent，相当于自动将所有 intent 添加到了堆栈。</p>
<p>intent可设置属性包括：<br><code>android:action</code>、<code>android:data</code>、<code>android:mimeType</code>、<code>android:targetClass</code>、<code>android:targetPackage</code>，其中<code>android:action</code>为必须属性。<br>至此，一个静态的<code>Shortcut</code>创建结束了。</p>
</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android版本新特性 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自定义View-3 Paint详细]]></title>
      <url>/%E8%87%AA%E5%AE%9A%E4%B9%89View-3%20Paint%E8%AF%A6%E7%BB%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考：<a href="http://hencoder.com/ui-1-2/" target="_blank" rel="external">http://hencoder.com/ui-1-2/</a></p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="Paint类的4个enum"><a href="#Paint类的4个enum" class="headerlink" title="Paint类的4个enum"></a>Paint类的4个enum</h1><h2 id="画笔填充样式-Style"><a href="#画笔填充样式-Style" class="headerlink" title="画笔填充样式 Style"></a>画笔填充样式 Style</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> Style</div><div class="line">&#123;</div><div class="line">	FILL(),</div><div class="line">	FILL_AND_STROKE(),</div><div class="line">	STROKE();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="画笔线头样式-Cap"><a href="#画笔线头样式-Cap" class="headerlink" title="画笔线头样式 Cap"></a>画笔线头样式 Cap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> Cap</div><div class="line">&#123;</div><div class="line">	BUTT(),</div><div class="line">	ROUND(),</div><div class="line">	SQUARE();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="两条直线相交后的样式-Join"><a href="#两条直线相交后的样式-Join" class="headerlink" title="两条直线相交后的样式 Join"></a>两条直线相交后的样式 Join</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> Join</div><div class="line">&#123;</div><div class="line">	BEVEL(),</div><div class="line">	MITER(),</div><div class="line">	ROUND();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="文字对齐方式-Align"><a href="#文字对齐方式-Align" class="headerlink" title="文字对齐方式 Align"></a>文字对齐方式 Align</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> Align</div><div class="line">&#123;</div><div class="line">	CENTER(),</div><div class="line">	LEFT(),</div><div class="line">	RIGHT();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Paint的功能"><a href="#Paint的功能" class="headerlink" title="Paint的功能"></a>Paint的功能</h1><ul>
<li><strong>颜色</strong></li>
<li><strong>效果</strong></li>
<li><strong>绘制文本</strong></li>
<li><strong>初始化</strong></li>
</ul>
<h1 id="1-颜色"><a href="#1-颜色" class="headerlink" title="1. 颜色"></a>1. 颜色</h1><h2 id="1-1-基本颜色绘制"><a href="#1-1-基本颜色绘制" class="headerlink" title="1.1 基本颜色绘制"></a>1.1 基本颜色绘制</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/52eb2279ly1fig6gxcusnj20iw04xmzr.jpg" alt=""></p>
<p>基本颜色绘制表示：基础颜色的设置，分类的标准就是根据不同颜色设置方式。</p>
<h3 id="Paint-设置颜色的方法："><a href="#Paint-设置颜色的方法：" class="headerlink" title="Paint 设置颜色的方法："></a>Paint 设置颜色的方法：</h3><h4 id="Paint-setColor-ARGB-来设置颜色"><a href="#Paint-setColor-ARGB-来设置颜色" class="headerlink" title="Paint.setColor/ARGB 来设置颜色"></a><code>Paint.setColor/ARGB</code> 来设置颜色</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">paint.setColor(Color.parseColor(<span class="string">"#009688"</span>)); </div><div class="line">paint.setColor(Color.BLACK);</div><div class="line">paint.setARGB(<span class="number">100</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</div></pre></td></tr></table></figure>
<h4 id="Shader-来指定着色方案"><a href="#Shader-来指定着色方案" class="headerlink" title="Shader 来指定着色方案"></a>Shader 来指定着色方案</h4><p>Shader 中文名是“着色器”。</p>
<blockquote>
<p>注意：在设置了 Shader 的情况下， <code>Paint.setColor/ARGB</code> 所设置的颜色就不再起作用。</p>
</blockquote>
<p>在Android中并不是直接使用“Shader类”，而是使用它的子类：</p>
<ul>
<li><strong>LinearGradient（线性渐变）</strong></li>
<li><strong>RadialGradient（辐射渐变）</strong></li>
<li><strong>SweepGradient（扫描渐变）</strong></li>
<li><strong>BitmapShader（Bitmap着色）</strong></li>
<li><strong>ComposeShader（组合着色）</strong></li>
</ul>
<p>其中前三者：LinearGradient（线性渐变）, RadialGradient（辐射渐变）, SweepGradient（扫描渐变）同xml绘制图形中有形同的样式。<br>Shader作为一个基类，包含有一个enum类：</p>
<pre><code>public enum TileMode {
        /**
         * 如果着色器在其原始边界之外绘制，则复制边缘颜色
         */
        CLAMP   (0),
        /**
         * 重复着色器的图像水平和垂直
         */
        REPEAT  (1),
        /**
         * 复着色器的图像水平和垂直，交替镜像
         */
        MIRROR  (2);

        TileMode(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        final int nativeInt;
    }    
</code></pre><h5 id="1-LinearGradient-线性渐变"><a href="#1-LinearGradient-线性渐变" class="headerlink" title="1  LinearGradient 线性渐变"></a>1  LinearGradient 线性渐变</h5><p><strong>使用</strong>：</p>
<pre><code>Shader shader = new LinearGradient(100, 100, 500, 500, Color.parseColor(&quot;#E91E63&quot;),  
    Color.parseColor(&quot;#2196F3&quot;), Shader.TileMode.CLAMP);
paint.setShader(shader);
</code></pre><p><img src="http://oy991qm3u.bkt.clouddn.com/52eb2279ly1fig6dq7wudj206l06875e.jpg" alt=""><br><strong>此类的构造器</strong></p>
<pre><code> /**
 * Create a shader that draws a linear gradient along a line.
 *
 * @param x0           The x-coordinate for the start of the gradient line
 * @param y0           The y-coordinate for the start of the gradient line
 * @param x1           The x-coordinate for the end of the gradient line
 * @param y1           The y-coordinate for the end of the gradient line
 * @param colors       The colors to be distributed along the gradient line
 * @param positions    May be null. The relative positions [0..1] of
 *                     each corresponding color in the colors array. If this is null,
 *                     the the colors are distributed evenly along the gradient line.
 * @param tile         The Shader tiling mode
*/    
LinearGradient(float x0, float y0, float x1, float y1, @NonNull @ColorInt int colors[],
        @Nullable float positions[], @NonNull TileMode tile)
</code></pre><p><strong>参数：</strong> </p>
<pre><code>x0 y0 x1 y1：渐变的两个端点的位置 
color0 color1“ 是端点的颜色 
tile：端点范围之外的着色规则，类型是 TileMode
</code></pre><h5 id="2-RadialGradient-辐射渐变"><a href="#2-RadialGradient-辐射渐变" class="headerlink" title="2 RadialGradient 辐射渐变"></a>2 RadialGradient 辐射渐变</h5><p><strong>使用</strong>：</p>
<pre><code>Shader shader = new RadialGradient(300, 300, 200, Color.parseColor(&quot;#E91E63&quot;),  
    Color.parseColor(&quot;#2196F3&quot;), Shader.TileMode.CLAMP);
paint.setShader(shader);
</code></pre><p><img src="http://oy991qm3u.bkt.clouddn.com/52eb2279ly1fig6ewf1o5j206d066q4a.jpg" alt=""></p>
<p><strong>构造方法</strong>： </p>
<pre><code>RadialGradient(float centerX, float centerY, float radius, int centerColor, int edgeColor, TileMode tileMode)。
</code></pre><p><strong>参数</strong>： </p>
<pre><code>centerX centerY：辐射中心的坐标 
radius：辐射半径 
centerColor：辐射中心的颜色 
edgeColor：辐射边缘的颜色 
tileMode：辐射范围之外的着色模式。
</code></pre><h5 id="3-SweepGradient-扫描渐变"><a href="#3-SweepGradient-扫描渐变" class="headerlink" title="3 SweepGradient 扫描渐变"></a>3 SweepGradient 扫描渐变</h5><p><strong>使用</strong>：</p>
<pre><code>Shader shader = new SweepGradient(300, 300, Color.parseColor(&quot;#E91E63&quot;),  
    Color.parseColor(&quot;#2196F3&quot;));
paint.setShader(shader);
</code></pre><p><img src="http://oy991qm3u.bkt.clouddn.com/52eb2279ly1fig6fmbemdj206u061my4.jpg" alt=""></p>
<p><strong>构造方法</strong>：</p>
<pre><code>SweepGradient(float cx, float cy, int color0, int color1)
</code></pre><p><strong>参数</strong>： </p>
<pre><code>cx cy ：扫描的中心 
color0：扫描的起始颜色 
color1：扫描的终止颜色
</code></pre><h5 id="4-BitmapShader-Bitmap-来着色"><a href="#4-BitmapShader-Bitmap-来着色" class="headerlink" title="4 BitmapShader Bitmap 来着色"></a>4 BitmapShader Bitmap 来着色</h5><p><strong>使用</strong>：</p>
<pre><code>Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.batman);  
Shader shader = new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);  
paint.setShader(shader);
</code></pre><p><img src="http://oy991qm3u.bkt.clouddn.com/52eb2279ly1fig6fragq2j20lc089djv.jpg" alt=""></p>
<p>通过使用：<code>drawCircle() + BitmapShader</code>就可以绘制圆形的  Bitmap，不用 <code>drawBitmap()</code> 了（其他形状同理）。</p>
<p><strong>构造方法</strong>： </p>
<pre><code>BitmapShader(Bitmap bitmap, Shader.TileMode tileX, Shader.TileMode tileY)
</code></pre><p><strong>参数</strong>： </p>
<pre><code>bitmap：用来做模板的 Bitmap 对象 
tileX：横向的 TileMode 
tileY：纵向的 TileMode。
</code></pre><h5 id="5-ComposeShader-混合着色器（两个-Shader-一起使用）"><a href="#5-ComposeShader-混合着色器（两个-Shader-一起使用）" class="headerlink" title="5 ComposeShader 混合着色器（两个 Shader 一起使用）"></a>5 ComposeShader 混合着色器（两个 Shader 一起使用）</h5><p><strong>使用</strong></p>
<pre><code>// 第一个 Shader：头像的 Bitmap
Bitmap bitmap1 = BitmapFactory.decodeResource(getResources(), R.drawable.batman);  
Shader shader1 = new BitmapShader(bitmap1, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);

// 第二个 Shader：从上到下的线性渐变（由透明到黑色）
Bitmap bitmap2 = BitmapFactory.decodeResource(getResources(), R.drawable.batman_logo);  
Shader shader2 = new BitmapShader(bitmap2, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);

// ComposeShader：结合两个 Shader
Shader shader = new ComposeShader(shader1, shader2, PorterDuff.Mode.SRC_OVER);  
paint.setShader(shader);
</code></pre><blockquote>
<p><code>ComposeShader()</code> 在硬件加速下是不支持两个相同类型的 Shader 的，所以这里也需要关闭硬件加速才能看到效果。<br><strong>如何 关闭硬件加速 ?</strong></p>
</blockquote>
<p><strong>构造方法</strong>：</p>
<pre><code>ComposeShader(Shader shaderA, Shader shaderB, PorterDuff.Mode mode)
</code></pre><p><strong>参数</strong>： </p>
<pre><code>shaderA, shaderB：两个相继使用的 Shader 
mode: 两个 Shader 的叠加模式，即 shaderA 和 shaderB 应该怎样共同绘制。它的类型是  PorterDuff.Mode 。
</code></pre><p>PorterDuff.Mode 一共有 17 个，可以分为：</p>
<ul>
<li>Alpha 合成 (Alpha Compositing)</li>
<li>混合 (Blending)</li>
</ul>
<p>具体使用参考：<a href="http://hencoder.com/ui-1-2/" target="_blank" rel="external">http://hencoder.com/ui-1-2/</a></p>
<h2 id="1-2-setColorFilter-ColorFilter-colorFilter-颜色过滤"><a href="#1-2-setColorFilter-ColorFilter-colorFilter-颜色过滤" class="headerlink" title="1.2 setColorFilter(ColorFilter colorFilter) 颜色过滤"></a>1.2 <code>setColorFilter(ColorFilter colorFilter)</code> 颜色过滤</h2><pre><code>对每个像素的颜色进行过滤
</code></pre><p>在设置了对象的基础颜色之后，再对颜色进行设置就是针对“基础颜色”进行设置，不再是停留在对“对象颜色的填充”方面。<br>Paint通过<code>setColorFilter(ColorFilter filter)</code> 方法设置 ColorFilter。 但是 ColorFilter 并不直接使用，而是使用它的子类：</p>
<ul>
<li><strong>LightingColorFilter</strong>：模拟简单的光照效果</li>
</ul>
<p><strong>使用</strong></p>
<pre><code>ColorFilter lightingColorFilter = new LightingColorFilter(0x00ffff, 0x000000);  
paint.setColorFilter(lightingColorFilter);  
</code></pre><ul>
<li><strong>PorterDuffColorFilter</strong></li>
<li><strong>ColorMatrixColorFilter</strong></li>
</ul>
<h2 id="1-3-setXfermode-Xfermode-xfermode"><a href="#1-3-setXfermode-Xfermode-xfermode" class="headerlink" title="1.3 setXfermode(Xfermode xfermode)"></a>1.3 <code>setXfermode(Xfermode xfermode)</code></h2><p>指的是你要绘制的内容和 Canvas 的目标位置的内容应该怎样结合计算出最终的颜色，就是要你以绘制的内容作为源图像，以 View 中已有的内容作为目标图像，选取一个  PorterDuff.Mode 作为绘制内容的颜色处理方案。</p>
<p><strong>注意事项</strong></p>
<ol>
<li>使用离屏缓冲（Off-screen Buffer）</li>
</ol>
<p>在绘制之前保存，绘制之后恢复：</p>
<pre><code>int saved = canvas.saveLayer(null, null, Canvas.ALL_SAVE_FLAG);
canvas.drawBitmap(rectBitmap, 0, 0, paint); // 画方
paint.setXfermode(xfermode); // 设置 Xfermode
canvas.drawBitmap(circleBitmap, 0, 0, paint); // 画圆
paint.setXfermode(null); // 用完及时清除 Xfermode
canvas.restoreToCount(saved);
</code></pre><ol>
<li>控制好透明区域</li>
</ol>
<h1 id="2-效果"><a href="#2-效果" class="headerlink" title="2. 效果"></a>2. 效果</h1><h2 id="2-1-setAntiAlias-boolean-aa-抗锯齿效果"><a href="#2-1-setAntiAlias-boolean-aa-抗锯齿效果" class="headerlink" title="2.1 setAntiAlias (boolean aa) 抗锯齿效果"></a>2.1 <code>setAntiAlias (boolean aa)</code> 抗锯齿效果</h2><p>抗锯齿默认是关闭的，如果需要抗锯齿，需要显式地打开。<br>打开抗锯齿还有一个更方便的方式，可以在初始化的时候就开启抗锯齿：</p>
<pre><code>Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);  
</code></pre><h2 id="2-2-setStyle-Paint-Style-style-线条填充效果"><a href="#2-2-setStyle-Paint-Style-style-线条填充效果" class="headerlink" title="2.2 setStyle(Paint.Style style) 线条填充效果"></a>2.2 <code>setStyle(Paint.Style style)</code> 线条填充效果</h2><p>设置图形是线条风格还是填充风格的，也可以二者并用。</p>
<h2 id="2-3-线条样式效果"><a href="#2-3-线条样式效果" class="headerlink" title="2.3 线条样式效果"></a>2.3 线条样式效果</h2><p>线条形状的一共有 4 个方法：</p>
<ul>
<li><strong>setStrokeWidth(float width)</strong> ：设置线条宽度</li>
<li><p><strong>setStrokeCap(Paint.Cap cap)</strong> ：设置线头的形状。</p>
<ul>
<li>BUTT 平头</li>
<li>ROUND 圆头</li>
<li>SQUARE 方头</li>
</ul>
</li>
</ul>
<p>默认为 BUTT。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/006tNc79ly1fig74qv8rij30ct05rglp.jpg" alt=""></p>
<ul>
<li><p><strong>setStrokeJoin(Paint.Join join)</strong> : 设置拐角的形状。</p>
<ul>
<li>MITER 尖角</li>
<li>BEVEL 平角</li>
<li>ROUND 圆角</li>
</ul>
</li>
</ul>
<p>默认为 MITER</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/006tNc79ly1fig75e27w6j30cp05ewem.jpg" alt=""></p>
<ul>
<li><strong>setStrokeMiter(float miter)</strong> : 是对于 setStrokeJoin() 的补充，设置 MITER 型拐角的延长线的最大值.</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/006tNc79ly1fig7ak3kqgj30cs0cq74j.jpg" alt=""></p>
<h2 id="2-4-色彩优化效果"><a href="#2-4-色彩优化效果" class="headerlink" title="2.4 色彩优化效果"></a>2.4 色彩优化效果</h2><ul>
<li><strong>setDither(boolean dither)</strong> ：设置图像的抖动。</li>
</ul>
<p>抖动更多的作用是在图像降低色彩深度绘制时，避免出现大片的色带与色块</p>
<pre><code>paint.setDither(true);  
</code></pre><p><img src="http://oy991qm3u.bkt.clouddn.com/006tNc79ly1fig7d34s0jj30lf07t75x.jpg" alt=""></p>
<ul>
<li><p><strong>setFilterBitmap(boolean filter)</strong> ：双线性过滤来绘制 Bitmap。<br>图像在放大绘制的时候会出现马赛克现象，如果开启了双线性过滤，就可以让结果图像显得更加平滑</p>
<pre><code>paint.setFilterBitmap(true); 
</code></pre></li>
</ul>
<h2 id="2-5-setPathEffect-PathEffect-effect-设置轮廓效果"><a href="#2-5-setPathEffect-PathEffect-effect-设置轮廓效果" class="headerlink" title="2.5 setPathEffect(PathEffect effect) 设置轮廓效果"></a>2.5 <code>setPathEffect(PathEffect effect)</code> 设置轮廓效果</h2><p><strong>使用</strong></p>
<pre><code>PathEffect pathEffect = new DashPathEffect(new float[]{10, 5}, 10);  
paint.setPathEffect(pathEffect);
</code></pre><p>共有6 种 PathEffect：</p>
<pre><code>(1) CornerPathEffect -- 圆角
(2) DashPathEffect -- 虚线效果
(3) DiscretePathEffect -- 离散路径效果
(4) PathDashPathEffect -- 印章路径效果
(5) ComposePathEffect合并两个特效是有先后顺序的，它会先将第二个参数的PathEffect innerpe的特效作用于路径上，然后再在此加了特效的路径上作用第二个特效。
(6) SumPathEffect是分别对原始路径分别作用第一个特效和第二个特效。然后再将这两条路径合并，做为最终结果。
</code></pre><p>分为两类：</p>
<ul>
<li><p><strong>单一效果的</strong>  </p>
<ul>
<li><p><strong>1. CornerPathEffect</strong> ：把所有拐角变成圆角</p>
<pre><code>PathEffect pathEffect = new CornerPathEffect(20);  
paint.setPathEffect(pathEffect);
</code></pre><p>构造方法 </p>
<p>  CornerPathEffect(float radius) </p>
<p>的参数 radius 是圆角的半径。<br>使用</p>
<p>   //第1组  拐角弧度</p>
<pre><code>Path path = new Path();
path.moveTo(100,200);
path.lineTo(400,50);
path.lineTo(700,200);
path.lineTo(1000,70);
canvas.drawPath(path,paintStyle(Color.GREEN,0,null,0));
//画布下移
canvas.translate(0,50);
canvas.drawPath(path,paintStyle(Color.WHITE,50,null,0));
canvas.translate(0,50);
canvas.drawPath(path,paintStyle(Color.YELLOW,100,null,0));
canvas.translate(0,200);

private Paint paintStyle(int color, int corner, float[] floats, int phase) {
    Paint paint = new Paint();
    paint.setAntiAlias(true);
    paint.setStrokeWidth(5);
    paint.setColor(color);
    //设置拐角度数
    paint.setPathEffect(new CornerPathEffect(corner));
    //设置间断线
    if (floats != null) {
        paint.setPathEffect(new DashPathEffect(floats,phase));
    }
    paint.setStyle(Paint.Style.STROKE);
    return paint;
}
</code></pre><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-15%2010.44.21.png" alt=""></p>
</li>
</ul>
</li>
</ul>
<pre><code>- **2. DiscretePathEffect** ：离散路径效果

        PathEffect pathEffect = new DiscretePathEffect(20, 5);  
        paint.setPathEffect(pathEffect);

构造方法 

    DiscretePathEffect(float segmentLength, float deviation) 

的两个参数中， segmentLength 是用来拼接的每个线段的长度， deviation 是偏离量。

使用

    //第3组 离散
        canvas.translate(0,50);
        canvas.drawPath(path,paintStyle(Color.GREEN,2,14));
        canvas.translate(0,50);
        canvas.drawPath(path,paintStyle(Color.WHITE,4,8));
        canvas.translate(0,50);
        canvas.drawPath(path,paintStyle(Color.YELLOW,8,4));

        private Paint paintStyle(int color,float someLength, float deviation) {
            Paint paint = new Paint();
            paint.setAntiAlias(true);
            paint.setStrokeWidth(5);
            paint.setColor(color);
            /**
             * segmentLength：表示将原来的路径切成多长的线段。如果值为2，那么这个路径就会被切成一段段由长度为2的小线段。所以这个值越小，所切成的小线段越多；这个值越大，所切成的小线段越少。
             deviation：表示被切成的每个小线段的可偏移距离。值越大，就表示每个线段的可偏移距离就越大，就显得越凌乱，值越小，每个线段的可偏移原位置的距离就越小。
             */
            paint.setPathEffect(new DiscretePathEffect(someLength,deviation));
            paint.setStyle(Paint.Style.STROKE);
            return paint;
        }
</code></pre><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-15%2010.44.39.png" alt=""></p>
<ul>
<li><p><strong>3. DashPathEffect</strong> ：虚线效果</p>
<pre><code>PathEffect pathEffect = new DiscretePathEffect(20, 5);  
paint.setPathEffect(pathEffect);
</code></pre><p>  使用</p>
<pre><code>//第2组  间隔线
    float[] floats = new float[]{30,10};
    float[] floats2 = new float[]{100,30};
    float[] floats3 = new float[]{10,30,90,20};
    /**
     * 对于intervals[]数组的有两个限定：
     长度必须大于等于2；因为必须有一个实线段和一个空线段来组成虚线。
     个数必须为偶数，如果是基数，最后一个数字将被忽略；这个很好理解，因为一组虚线的组成必然是一个实线和一个空线成对组成的。
     对于phase：开始绘制的偏移值
     */
    canvas.translate(0,50);
    canvas.drawPath(path,paintStyle(Color.GREEN,0,floats,0));
    canvas.translate(0,50);
    canvas.drawPath(path,paintStyle(Color.WHITE,50,floats2,50));
    canvas.translate(0,50);
    canvas.drawPath(path,paintStyle(Color.YELLOW,100,floats3,100));
    canvas.translate(0,200);

    private Paint paintStyle(int color, int corner, float[] floats, int phase) {
        Paint paint = new Paint();
        paint.setAntiAlias(true);
        paint.setStrokeWidth(5);
        paint.setColor(color);
        //设置拐角度数
        paint.setPathEffect(new CornerPathEffect(corner));
        //设置间断线
        if (floats != null) {
            paint.setPathEffect(new DashPathEffect(floats,phase));
        }
        paint.setStyle(Paint.Style.STROKE);
        return paint;
    }
</code></pre><p>  <img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-15%2010.44.33.png" alt=""></p>
</li>
</ul>
<pre><code>- **4. PathDashPathEffect** ：印章路径效果

        Path dashPath = ...; // 使用一个三角形来做 dash  
        PathEffect pathEffect = new PathDashPathEffect(dashPath, 40, 0,  
                PathDashPathEffectStyle.TRANSLATE);
        paint.setPathEffect(pathEffect);

构造方法  

    PathDashPathEffect(Path shape, float advance, float phase, PathDashPathEffect.Style style) 

shape ： 参数是用来绘制的 Path ； 
advance ：是两个相邻的 shape 段之间的间隔，不过注意，这个间隔是两个 shape 段的起点的间隔，而不是前一个的终点和后一个的起点的距离； 
phase “和  DashPathEffect 中一样，是虚线的偏移；
style ：是用来指定拐弯改变的时候 shape 的转换方式。style 的类型为 PathDashPathEffect.Style ，是一个 enum ，具体有三个值：

    TRANSLATE：位移
    ROTATE：旋转
    MORPH：变体

使用

    Path mPath = new Path();
    mPath.moveTo(0,20);
    mPath.lineTo(10,0);
    mPath.lineTo(20,20);
    mPath.close();
    /**
    *向路径添加一个闭圆轮廓
    * Direction:方向 cw:顺时针, ccw:逆时针旋转
    * @param x要添加到路径的圆的中心的x坐标
    * @param y要添加到路径的圆的中心的y坐标
    * @param radius要添加到路径的圆的半径
    * @param dir滚动圆圈轮廓的方向
    */
    mPath.addCircle(0,0,3, Path.Direction.CCW);
    mPath.addCircle(20,0,3, Path.Direction.CW);

    canvas.translate(0,80);//通过变形印章来过渡转角
    canvas.drawPath(path,paintStylePashDush(Color.GREEN,mPath,30,12,PathDashPathEffect.Style.MORPH));
    canvas.translate(0,80);//通过旋转印章来过渡转角
    canvas.drawPath(path,paintStylePashDush(Color.GREEN,mPath,40,12,PathDashPathEffect.Style.ROTATE));
    canvas.translate(0,80);//通过位移来过渡转角
    canvas.drawPath(path,paintStylePashDush(Color.GREEN,mPath,80,12,PathDashPathEffect.Style.TRANSLATE));

    private Paint paintStylePashDush(int color, Path shape, float advance, float phase, PathDashPathEffect.Style style) {
        Paint paint = new Paint();
        paint.setAntiAlias(true);
        paint.setStrokeWidth(5);
        paint.setColor(color);
        /**
         Path shape:表示印章路径，比如我们下面示例中的三角形加右上角一个点；
         float advance：表示两个印章路径间的距离,很容易理解，印章间距离越大，间距就越大。
         float phase：路径绘制偏移距离，与上面DashPathEffect中的float phase参数意义相同
         Style style：表示在遇到转角时，如何操作印章以使转角平滑过渡，取值有：Style.ROTATE，Style.MORPH，Style.TRANSLATE;
             Style.ROTATE表示通过旋转印章来过渡转角；
             Style.MORPH表示通过变形印章来过渡转角；
             Style.TRANSLATE表示通过位移来过渡转角。
         */
        paint.setPathEffect(new PathDashPathEffect(shape,advance,phase,style));
        paint.setStyle(Paint.Style.STROKE);
        return paint;
    }

   ![](http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-15%2010.44.45.png)
</code></pre><ul>
<li><p><strong>组合效果</strong>  </p>
<ul>
<li><p><strong>5. SumPathEffect</strong> ：分别按照两种 PathEffect 分别对目标进行绘制。</p>
<pre><code>PathEffect dashEffect = new DashPathEffect(new float[]{20, 10}, 0);  
PathEffect discreteEffect = new DiscretePathEffect(20, 5);  
pathEffect = new SumPathEffect(dashEffect, discreteEffect);
</code></pre></li>
<li><p><strong>6. ComposePathEffect</strong> ：也是一个组合效果类的 PathEffect</p>
</li>
</ul>
</li>
</ul>
<p>先对目标 Path 使用一个 PathEffect，然后再对这个改变后的 Path 使用另一个 PathEffect。</p>
<pre><code>PathEffect dashEffect = new DashPathEffect(new float[]{20, 10}, 0);  
PathEffect discreteEffect = new DiscretePathEffect(20, 5);  
pathEffect = new ComposePathEffect(dashEffect, discreteEffect);
</code></pre><p><strong>两者曲别：</strong></p>
<p>第 5 种效果是分别将2种效果都绘制出来，2者都可见。<br>第 6 种效果是县绘制第一种效果，然后在第一种效果上再绘制第二种效果，最终呈现的是：在第一种效果上的第二种效果</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/006tNc79ly1fig7ekjh7lj30dw05jq2z.jpg" alt=""></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/006tNc79ly1fig7epf94aj30dr05eq2x.jpg" alt=""></p>
<p>使用</p>
<pre><code>canvas.translate(0,250);
    //通过变形印章来过渡转角
    PathDashPathEffect dashPathEffect = new PathDashPathEffect(mPath,40,0,PathDashPathEffect.Style.TRANSLATE);
    DiscretePathEffect discretePathEffect = new DiscretePathEffect(20,2);
    canvas.drawPath(path,paintStyleEffectCompose(Color.GREEN,discretePathEffect,dashPathEffect));
    canvas.translate(0,140);
    //通过旋转印章来过渡转角
    canvas.drawPath(path,paintStyleEffectSum(Color.GREEN,dashPathEffect,discretePathEffect));

    //设置合并两个路径特效效果
private Paint paintStyleEffectCompose(int color, PathEffect effect1, PathEffect effect2) {
    Paint paint = new Paint();
    paint.setAntiAlias(true);
    paint.setStrokeWidth(5);
    paint.setColor(color);
    paint.setPathEffect(new ComposePathEffect(effect1,effect2));
    paint.setStyle(Paint.Style.STROKE);
    return paint;
}

//设置合并两个路径特效效果
private Paint paintStyleEffectSum(int color, PathEffect effect1, PathEffect effect2) {
    Paint paint = new Paint();
    paint.setAntiAlias(true);
    paint.setStrokeWidth(5);
    paint.setColor(color);
    paint.setPathEffect(new SumPathEffect(effect1,effect2));
    paint.setStyle(Paint.Style.STROKE);
    return paint;
}
</code></pre><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-15%2010.44.50.png" alt=""></p>
<p><strong>注意</strong>：<br>PathEffect 在有些情况下不支持硬件加速，需要关闭硬件加速才能正常使用：</p>
<ul>
<li><code>Canvas.drawLine()</code> 和 <code>Canvas.drawLines()</code> 方法画直线时，<code>setPathEffect()</code> 是不支持硬件加速的；</li>
<li>PathDashPathEffect 对硬件加速的支持也有问题，所以当使用 PathDashPathEffect 的时候，最好也把硬件加速关了。</li>
</ul>
<h2 id="2-6-setShadowLayer-float-radius-float-dx-float-dy-int-shadowColor-在之后的绘制内容下面加一层阴影"><a href="#2-6-setShadowLayer-float-radius-float-dx-float-dy-int-shadowColor-在之后的绘制内容下面加一层阴影" class="headerlink" title="2.6 setShadowLayer(float radius, float dx, float dy, int shadowColor)  在之后的绘制内容下面加一层阴影"></a>2.6 <code>setShadowLayer(float radius, float dx, float dy, int shadowColor)</code>  在之后的绘制内容下面加一层阴影</h2><p>如果要清除阴影层，使用 clearShadowLayer() 。</p>
<p><strong>注意</strong>：<br>在硬件加速开启的情况下， <code>setShadowLayer()</code> 只支持文字的绘制，文字之外的绘制必须关闭硬件加速才能正常绘制阴影。<br>如果 shadowColor 是半透明的，阴影的透明度就使用 shadowColor 自己的透明度；而如果  shadowColor 是不透明的，阴影的透明度就使用 paint 的透明度。</p>
<h2 id="2-7-setMaskFilter-MaskFilter-maskfilter-基于整个画面来进行过滤"><a href="#2-7-setMaskFilter-MaskFilter-maskfilter-基于整个画面来进行过滤" class="headerlink" title="2.7 setMaskFilter(MaskFilter maskfilter)基于整个画面来进行过滤"></a>2.7 <code>setMaskFilter(MaskFilter maskfilter)</code>基于整个画面来进行过滤</h2><ul>
<li><p><strong>BlurMaskFilter</strong> ：模糊效果</p>
<pre><code>paint.setMaskFilter(new BlurMaskFilter(50, BlurMaskFilter.Blur.NORMAL));
</code></pre><p>  构造方法 </p>
<pre><code>BlurMaskFilter(float radius, BlurMaskFilter.Blur style) 
</code></pre><p>  radius： 参数是模糊的范围<br>  style： 是模糊的类型，共有四种：</p>
<pre><code>NORMAL: 内外都模糊绘制
SOLID: 内部正常绘制，外部模糊
INNER: 内部模糊，外部不绘制
OUTER: 内部不绘制，外部模糊
</code></pre><ul>
<li><strong>EmbossMaskFilter</strong> ：浮雕效果</li>
</ul>
</li>
</ul>
<h2 id="2-8-获取绘制的-Path"><a href="#2-8-获取绘制的-Path" class="headerlink" title="2.8 获取绘制的 Path"></a>2.8 获取绘制的 Path</h2><p>根据 paint 的设置，计算出绘制 Path 或文字时的 <strong>实际 Path</strong>。<br>实际 Path ，指的就是 drawPath() 的绘制内容的轮廓，要算上线条宽度和设置的 PathEffect。</p>
<pre><code>getFillPath(src, dst) 
</code></pre><p>会计算出实际 Path，然后把结果保存在 dst 里。</p>
<pre><code>getTextPath(String text, int start, int end, float x, float y, Path path)
getTextPath(char[] text, int index, int count, float x, float y, Path path)
</code></pre><p>文字的绘制虽然使用 <code>Canvas.drawText()</code> 方法，但其实在下层，文字信息全是被转化成图形，对图形进行绘制的。 <code>getTextPath()</code> 方法，获取的就是目标文字所对应的 Path 。<br>这两个方法， <code>getFillPath()</code> 和 <code>getTextPath()</code> ，就是获取绘制的 Path 的方法。之所以把它们归类到「效果」类方法，是因为它们主要是用于图形和文字的装饰效果的位置计算。</p>
<h1 id="3-绘制文本"><a href="#3-绘制文本" class="headerlink" title="3 绘制文本"></a>3 绘制文本</h1><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="公共方法"><a href="#公共方法" class="headerlink" title="公共方法"></a>公共方法</h3><pre><code>private Paint paintStyle(int color, Paint.Style style){
    Paint paint = new Paint();
    paint.setAntiAlias(true);
    paint.setStrokeWidth(2);
    paint.setStyle(style);
    paint.setColor(color);
    paint.setTextSize(60);
    //设置文字对齐方式，取值：align.CENTER、align.LEFT或align.RIGHT
    paint.setTextAlign(Paint.Align.LEFT);
    //设置是否为粗体文字
    paint.setFakeBoldText(false);
    //设置下划线
    paint.setUnderlineText(false);
    //设置字体水平倾斜度，普通斜体字是-0.25
    paint.setTextSkewX(/*(float) -0.25*/0f);
    //设置带有删除线效果
    paint.setStrikeThruText(false);
    //只会将水平方向拉伸，高度不会变
    paint.setTextScaleX(0);
    return paint;
}

private Paint paintStyleType(int color, Paint.Style style, Typeface typeface){
    Paint paint = new Paint();
    paint.setAntiAlias(true);
    paint.setStrokeWidth(2);
    paint.setStyle(style);
    paint.setColor(color);
    paint.setTextSize(60);
    paint.setTypeface(typeface);
    return paint;
}


private Paint paintStyleAlign(int color, Paint.Style style, Paint.Align align){
    Paint paint = new Paint();
    paint.setAntiAlias(true);
    paint.setStrokeWidth(2);
    paint.setStyle(style);
    paint.setColor(color);
    paint.setTextSize(60);
    paint.setTextAlign(align);
    return paint;
}
</code></pre><h3 id="基础的文字绘制"><a href="#基础的文字绘制" class="headerlink" title="基础的文字绘制"></a>基础的文字绘制</h3><pre><code>//基线坐标(100,100)
//第1个 基线坐标(100,100)
canvas.drawText(strs,100,100,paintStyleAlign(Color.BLACK,Paint.Style.FILL, Paint.Align.LEFT));
//绘制基线Y轴
canvas.drawLine(100,100,1080,100,paintStyle(Color.RED,Paint.Style.STROKE));
//绘制基线X轴
canvas.drawLine(100,0,100,100,paintStyle(Color.RED,Paint.Style.STROKE));

//第2个
canvas.translate(0,150);
canvas.drawText(strs,600,100,paintStyleAlign(Color.BLACK,Paint.Style.FILL, Paint.Align.CENTER));
canvas.drawLine(600,100,1080,100,paintStyle(Color.RED,Paint.Style.STROKE));
canvas.drawLine(600,0,600,100,paintStyle(Color.RED,Paint.Style.STROKE));

//第3个
canvas.translate(0,100);
canvas.drawText(strs,100,100,paintStyleAlign(Color.BLACK,Paint.Style.STROKE, Paint.Align.LEFT));
canvas.drawLine(100,100,1080,100,paintStyle(Color.RED,Paint.Style.STROKE));
canvas.drawLine(100,0,100,100,paintStyle(Color.RED,Paint.Style.STROKE));

//第4个
canvas.translate(0,100);
canvas.drawText(strs,600,100,paintStyleAlign(Color.BLACK,Paint.Style.STROKE, Paint.Align.RIGHT));
canvas.drawLine(600,100,1080,100,paintStyle(Color.RED,Paint.Style.STROKE));
canvas.drawLine(600,0,600,100,paintStyle(Color.RED,Paint.Style.STROKE));
</code></pre><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-15%2011.17.10.png" alt=""></p>
<h3 id="FontMetrics-字体的各种度量的类"><a href="#FontMetrics-字体的各种度量的类" class="headerlink" title="FontMetrics 字体的各种度量的类"></a>FontMetrics 字体的各种度量的类</h3><pre><code>/**
 * 描述给定文本大小字体的各种度量的类。
   请记住，Y值增加下降，所以这些值将是正的，测量距离上升的值将是负的
 * 注意:在使用FontMetrics时必须为同一个Paint对象,否则,无法获取文字正确的位置关系
 */
Paint paint12 = new Paint();
paint12.setAntiAlias(true);
paint12.setStrokeWidth(2);
paint12.setStyle(Paint.Style.STROKE);
paint12.setColor(Color.BLACK);
paint12.setTextSize(180);
Paint.FontMetrics fontMetrics = paint12.getFontMetrics();
//可绘制的最高高度所在线
float top;
//可绘制的最低高度所在线
float bottom;
//系统建议的，绘制单个字符时，字符应当的最高高度所在线
float ascent;
//系统建议的，绘制单个字符时，字符应当的最低高度所在线
float descent;
/**
 * 建议在文本行之间添加的额外空格。
 */
//fontMetrics.leading;
top = 100 + fontMetrics.top;
bottom = 100 + fontMetrics.bottom;
ascent = 100 + fontMetrics.ascent;
descent = 100 + fontMetrics.descent;

canvas.translate(-90,300);
canvas.drawText(strs,100,100,paint12);

//绘制的文字基线
paint12.setStrokeWidth(2);
canvas.drawLine(100,100,1080,100,paintStyle(Color.RED,Paint.Style.STROKE));

//可绘制的最高高度所在线
paint12.setColor(Color.RED);
paint12.setStrokeWidth(4);
canvas.drawLine(100,top,1080,top,paint12);

//可绘制的最低高度所在线
paint12.setColor(Color.GREEN);
paint12.setStrokeWidth(4);
canvas.drawLine(100,bottom,1080,bottom,paint12);

//系统建议的，绘制单个字符时，字符应当的最高高度所在线
paint12.setColor(Color.YELLOW);
paint12.setStrokeWidth(2);
canvas.drawLine(100,ascent,1080,ascent,paint12);

//系统建议的，绘制单个字符时，字符应当的最低高度所在线
paint12.setColor(Color.BLACK);
paint12.setStrokeWidth(2);
canvas.drawLine(100,descent,1080,descent,paint12);

//文字所占宽度
float width = paint12.measureText(strs);
//文字所占高度
float height = bottom - top;
Log.e(TAG, &quot;onDraw width: &quot; + width + &quot;, height : &quot; + height);

//绘制文字所占区域的边框
Path pathRect = new Path();
RectF rectF2 = new RectF(100,top,width+100,bottom);
paint12.setColor(Color.BLUE);
paint12.setStrokeWidth(1);
pathRect.addRect(rectF2, Path.Direction.CW);
canvas.drawRect(rectF2,paint12);
</code></pre><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-15%2011.50.33.png" alt=""></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-21%2014.37.15.png" alt=""></p>
<h3 id="根据路径绘制文字"><a href="#根据路径绘制文字" class="headerlink" title="根据路径绘制文字"></a>根据路径绘制文字</h3><pre><code>PathMeasure measure = new PathMeasure(pathRect,false);
    int length = (int) measure.getLength();
    paint12.setTextSize(40);
    paint12.setColor(Color.RED);
    canvas.drawText(String.valueOf(length),width,bottom,paint12);

    //根据路径绘制文字
    paint12.setColor(Color.BLACK);
    paint12.setTextSize(90);
    canvas.translate(0,200);
    Path rectPath = new Path();
    RectF rectF = new RectF(400,200,1000,800);

    //顺时针
    rectPath.addRect(rectF, Path.Direction.CW);
    canvas.drawPath(rectPath,paintStyle(Color.RED,Paint.Style.STROKE));
    /**
     * @param hOffset 要添加到文本开始位置的路径上的距离
     * @param vOffset（ - ）或以下的距离（+）定位文本的路径
     */
    paint12.setStyle(Paint.Style.FILL_AND_STROKE);
    canvas.drawTextOnPath(strs,rectPath,0,0,paint12);
    paint12.setStyle(Paint.Style.STROKE);
    canvas.drawTextOnPath(strs,rectPath,20,20,paint12);
    paint12.setStyle(Paint.Style.STROKE);
    paint12.setColor(Color.BLUE);
    canvas.drawTextOnPath(strs,rectPath,-20,-20,paint12);
</code></pre><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-15%2013.58.12.png" alt=""></p>
<p>顺时针</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-15%2013.58.29.png" alt=""></p>
<p>逆时针</p>
<h1 id="4-初始化类"><a href="#4-初始化类" class="headerlink" title="4 初始化类"></a>4 初始化类</h1><p>这一类方法是用来初始化 Paint 对象，或者是批量设置 Paint 的多个属性的方法。</p>
<h2 id="4-1-reset"><a href="#4-1-reset" class="headerlink" title="4.1 reset()"></a>4.1 reset()</h2><p>重置 Paint 的所有属性为默认值。相当于重新 new 一个，不过性能当然高一些啦。</p>
<h2 id="4-2-set-Paint-src"><a href="#4-2-set-Paint-src" class="headerlink" title="4.2 set(Paint src)"></a>4.2 set(Paint src)</h2><p>把 src 的所有属性全部复制过来。相当于调用 src 所有的 get 方法，然后调用这个 Paint 的对应的  set 方法来设置它们。</p>
<h2 id="4-3-setFlags-int-flags"><a href="#4-3-setFlags-int-flags" class="headerlink" title="4.3 setFlags(int flags)"></a>4.3 setFlags(int flags)</h2><p>批量设置 flags。相当于依次调用它们的 set 方法。例如： </p>
<pre><code>paint.setFlags(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG);  
</code></pre><p>这行代码，和下面这两行是等价的：</p>
<pre><code>paint.setAntiAlias(true);  
paint.setDither(true);
</code></pre>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自定义View-2 绘制图表：直角坐标系+饼状图]]></title>
      <url>/%E8%87%AA%E5%AE%9A%E4%B9%89View-2%20%E7%BB%98%E5%88%B6%E5%9B%BE%E8%A1%A8%EF%BC%9A%E7%9B%B4%E8%A7%92%E5%9D%90%E6%A0%87%E7%B3%BB+%E9%A5%BC%E7%8A%B6%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p>总结</p>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="分析数据的表现形式"><a href="#分析数据的表现形式" class="headerlink" title="分析数据的表现形式"></a>分析数据的表现形式</h2><ul>
<li>坐标系</li>
<li>饼状图</li>
</ul>
<h2 id="数据准备，获取图表的："><a href="#数据准备，获取图表的：" class="headerlink" title="数据准备，获取图表的："></a>数据准备，获取图表的：</h2><ul>
<li>标题</li>
<li>各个数据项的名称</li>
<li>各个数据项的数值</li>
</ul>
<p>将数据进行封装</p>
<h2 id="在设定item尺寸范围时，需要设定："><a href="#在设定item尺寸范围时，需要设定：" class="headerlink" title="在设定item尺寸范围时，需要设定："></a>在设定item尺寸范围时，需要设定：</h2><ul>
<li><p>规定好起始位置（X轴或Y轴的startValue）</p>
<ul>
<li>坐标系确定好原点（0，0）</li>
<li>饼状图确定好圆心</li>
</ul>
</li>
<li><p>各个item之间的间隔（space）</p>
</li>
<li><p>单个item的宽度或高度（比值）</p>
<ul>
<li>直方图、折线图时平均分配item的高度、宽度；</li>
<li>饼状图时各个数据所占的扇形面积的大小（当前数据所占比例*360）。 </li>
</ul>
</li>
</ul>
<h2 id="有无特殊要求？"><a href="#有无特殊要求？" class="headerlink" title="有无特殊要求？"></a>有无特殊要求？</h2><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p>标记重点：在自定义图表的实现过程中，尽量使用“对象获取”、“比例化”的数据。</p>
<h2 id="两个图使用的同一个数据类：PhoneData"><a href="#两个图使用的同一个数据类：PhoneData" class="headerlink" title="两个图使用的同一个数据类：PhoneData"></a>两个图使用的同一个数据类：PhoneData</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> wenjia.Cheng  cwj1714@163.com</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/11/13</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneData</span> </span>&#123;</div><div class="line"></div><div class="line">    String phoneName;</div><div class="line">    <span class="keyword">float</span> phoneValue;</div><div class="line">    <span class="keyword">int</span> phoneColor;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PhoneData</span><span class="params">(String phoneName, <span class="keyword">float</span> phoneValue, <span class="keyword">int</span> phoneColor)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.phoneName = phoneName;</div><div class="line">        <span class="keyword">this</span>.phoneValue = phoneValue;</div><div class="line">        <span class="keyword">this</span>.phoneColor = phoneColor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPhoneName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> phoneName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhoneName</span><span class="params">(String phoneName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.phoneName = phoneName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPhoneValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> phoneValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhoneValue</span><span class="params">(<span class="keyword">float</span> phoneValue)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.phoneValue = phoneValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPhoneColor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> phoneColor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhoneColor</span><span class="params">(<span class="keyword">int</span> phoneColor)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.phoneColor = phoneColor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"PhoneData&#123;"</span> +</div><div class="line">                <span class="string">"phoneName='"</span> + phoneName + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", phoneValue="</span> + phoneValue +</div><div class="line">                <span class="string">", phoneColor="</span> + phoneColor +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="坐标系的实现："><a href="#坐标系的实现：" class="headerlink" title="坐标系的实现："></a>坐标系的实现：</h2><p>一个完整的类，包括注释：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 直角坐标系</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> wenjia.Cheng  cwj1714@163.com</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/11/13</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Histogram</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"Histogram"</span>;</div><div class="line">    <span class="keyword">private</span> String titleName = <span class="string">"直角坐标系"</span>;</div><div class="line">    <span class="keyword">private</span> List&lt;PhoneData&gt; mPhoneData = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> maxVal = <span class="number">0f</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> totalVal = <span class="number">0f</span>;</div><div class="line">    <span class="keyword">private</span> Paint mPaint = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DecimalFormat mDecimalFormat;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Histogram</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Histogram</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Histogram</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">        mPhoneData = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        mPhoneData.add(<span class="keyword">new</span> PhoneData(<span class="string">"HuaWei"</span>, <span class="number">38f</span>, Color.RED));</div><div class="line">        mPhoneData.add(<span class="keyword">new</span> PhoneData(<span class="string">"Vivo"</span>, <span class="number">23f</span>, Color.BLUE));</div><div class="line">        mPhoneData.add(<span class="keyword">new</span> PhoneData(<span class="string">"Samsung"</span>, <span class="number">33f</span>, Color.GREEN));</div><div class="line">        mPhoneData.add(<span class="keyword">new</span> PhoneData(<span class="string">"Oppo"</span>, <span class="number">12f</span>, Color.YELLOW));</div><div class="line">        mPhoneData.add(<span class="keyword">new</span> PhoneData(<span class="string">"Apple"</span>, <span class="number">41f</span>, Color.MAGENTA));</div><div class="line">        mPhoneData.add(<span class="keyword">new</span> PhoneData(<span class="string">"XiaoMi"</span>, <span class="number">17f</span>, Color.LTGRAY));</div><div class="line">        mPhoneData.add(<span class="keyword">new</span> PhoneData(<span class="string">"Pixel2"</span>, <span class="number">6f</span>, Color.DKGRAY));</div><div class="line">        mPhoneData.add(<span class="keyword">new</span> PhoneData(<span class="string">"HTC"</span>, <span class="number">11f</span>, Color.MAGENTA));</div><div class="line">        mPhoneData.add(<span class="keyword">new</span> PhoneData(<span class="string">"MOTO"</span>, <span class="number">9f</span>, Color.CYAN));</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">for</span> (PhoneData item : mPhoneData) &#123;</div><div class="line">            maxVal = Math.max(maxVal, item.getPhoneValue());</div><div class="line">            totalVal = totalVal + item.getPhoneValue();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        dealMaxVal(maxVal);</div><div class="line"></div><div class="line">        Log.d(TAG, <span class="string">"(&gt;^ω^&lt;) -&gt; initData maxVal is : "</span> + maxVal + <span class="string">", totalVal is : "</span> + totalVal);</div><div class="line"></div><div class="line">        mPaint = <span class="keyword">new</span> Paint();</div><div class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line">        mPaint.setStyle(Paint.Style.FILL_AND_STROKE);</div><div class="line">        mPaint.setColor(Color.BLACK);</div><div class="line"></div><div class="line">        mDecimalFormat = <span class="keyword">new</span> DecimalFormat(<span class="string">".00"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dealMaxVal</span><span class="params">(<span class="keyword">float</span> maxVal)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">        initData();</div><div class="line"></div><div class="line">        mPaint.setStrokeWidth(<span class="number">1</span>);</div><div class="line">        mPaint.setTextSize(<span class="number">56</span>);</div><div class="line">        canvas.drawText(titleName, canvas.getWidth() / <span class="number">2</span> - mPaint.measureText(titleName) / <span class="number">2</span>, canvas.getHeight() * <span class="number">0.07f</span>, mPaint);</div><div class="line"></div><div class="line">        mPaint.setColor(Color.BLACK);</div><div class="line">        canvas.translate(canvas.getWidth() * <span class="number">0.1f</span>, canvas.getHeight() * <span class="number">0.9f</span>);</div><div class="line"></div><div class="line">        mPaint.setStrokeWidth(<span class="number">5</span>);</div><div class="line">        <span class="comment">//方式：2,两者均可实现绘制</span></div><div class="line">        canvas.drawLine(<span class="number">0f</span>, <span class="number">0f</span>, canvas.getWidth() * <span class="number">0.8f</span>, <span class="number">0f</span>, mPaint);</div><div class="line">        canvas.drawLine(<span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, -canvas.getHeight() * <span class="number">0.8f</span>, mPaint);</div><div class="line"></div><div class="line">        <span class="comment">//item的宽度和间隔</span></div><div class="line">        <span class="keyword">float</span> itemWidth = canvas.getWidth() * <span class="number">0.8f</span> / mPhoneData.size() * <span class="number">0.8f</span>;</div><div class="line">        <span class="keyword">float</span> itemSpace = canvas.getWidth() * <span class="number">0.8f</span> / mPhoneData.size() * <span class="number">0.2f</span>;</div><div class="line"></div><div class="line">        <span class="comment">//绘制直方图</span></div><div class="line">        drawRect(canvas, itemSpace, itemWidth, maxVal);</div><div class="line"></div><div class="line">        <span class="comment">//绘制数值文字</span></div><div class="line">        drawTextValue(canvas, itemSpace, itemWidth, maxVal);</div><div class="line"></div><div class="line">        <span class="comment">//绘制折线</span></div><div class="line">        drawLines(canvas, itemSpace, itemWidth, maxVal);</div><div class="line"></div><div class="line">        <span class="comment">//绘制点</span></div><div class="line">        drawPoint(canvas, itemSpace, itemWidth, maxVal);</div><div class="line"></div><div class="line">        <span class="comment">//绘制最高数值参考线</span></div><div class="line">        drawKindOfValLine(canvas, itemSpace, itemWidth);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawKindOfValLine</span><span class="params">(Canvas canvas, <span class="keyword">float</span> itemSpace, <span class="keyword">float</span> itemWidth)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> maxValIndex = <span class="number">0</span>;</div><div class="line">        mPaint.setColor(Color.BLUE);</div><div class="line">        mPaint.setStrokeCap(Paint.Cap.ROUND);</div><div class="line">        mPaint.setStrokeWidth(<span class="number">2</span>);</div><div class="line"></div><div class="line">        <span class="keyword">float</span> aveVal = totalVal / mPhoneData.size();</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mPhoneData.size(); i++) &#123;</div><div class="line">            <span class="keyword">if</span> (maxVal == mPhoneData.get(i).getPhoneValue()) &#123;</div><div class="line">                maxValIndex = i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//最大值的表示</span></div><div class="line">        <span class="keyword">float</span> valueYMax = -maxVal / maxVal * canvas.getHeight() * <span class="number">0.7f</span>;</div><div class="line">        String maxStr = mDecimalFormat.format(mPhoneData.get(maxValIndex).getPhoneValue());</div><div class="line">        canvas.drawLine(<span class="number">0f</span>, valueYMax, maxValIndex * (itemSpace + itemWidth) + (itemSpace + itemWidth / <span class="number">2</span>), valueYMax, mPaint);</div><div class="line">        canvas.drawText(maxStr, -mPaint.measureText(maxStr) - <span class="number">10f</span>, valueYMax, mPaint);</div><div class="line"></div><div class="line">        <span class="comment">//平均值的表示</span></div><div class="line">        <span class="keyword">float</span> valueYAve = -aveVal / maxVal * canvas.getHeight() * <span class="number">0.7f</span>;</div><div class="line">        String aveStr = mDecimalFormat.format(aveVal);</div><div class="line">        canvas.drawLine(<span class="number">0f</span>, valueYAve, canvas.getWidth() * <span class="number">0.8f</span>, valueYAve, mPaint);</div><div class="line">        canvas.drawText(aveStr, -mPaint.measureText(aveStr) - <span class="number">10f</span>, valueYAve, mPaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawRect</span><span class="params">(Canvas canvas, <span class="keyword">float</span> itemSpace, <span class="keyword">float</span> itemWidth, <span class="keyword">float</span> maxVal)</span> </span>&#123;</div><div class="line">        <span class="keyword">float</span> startXY = <span class="number">0f</span>;</div><div class="line">        mPaint.setTextSize(<span class="number">36</span>);</div><div class="line">        mPaint.setStrokeWidth(<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> (PhoneData item : mPhoneData) &#123;</div><div class="line">            mPaint.setColor(item.getPhoneColor());</div><div class="line"></div><div class="line">            <span class="comment">//绘制X轴文字 - 横向</span></div><div class="line">            canvas.drawText(item.getPhoneName(), startXY + itemSpace + (itemWidth - mPaint.measureText(item.getPhoneName())) / <span class="number">2</span>, <span class="number">60</span>, mPaint);</div><div class="line"></div><div class="line"></div><div class="line">            <span class="comment">//绘制X轴文字 - 有一定角度</span></div><div class="line">           <span class="comment">/* Path path = new Path();</span></div><div class="line"><span class="comment">            path.moveTo(startXY + itemSpace + (itemWidth - mPaint.measureText(item.getPhoneName())) / 2, 30);</span></div><div class="line"><span class="comment">            path.lineTo(startXY + itemSpace + (itemWidth - mPaint.measureText(item.getPhoneName())) / 2 + 30, 30 + mPaint.measureText(item.getPhoneName()));</span></div><div class="line"><span class="comment">            canvas.drawTextOnPath(item.getPhoneName(),path,0,0,mPaint);*/</span></div><div class="line"></div><div class="line">            <span class="comment">//绘制直方图</span></div><div class="line">            canvas.drawRect(startXY + itemSpace, -item.getPhoneValue() / maxVal * canvas.getHeight() * <span class="number">0.7f</span>, startXY + itemSpace + itemWidth, <span class="number">0</span>, mPaint);</div><div class="line"></div><div class="line">            <span class="comment">//重新绘制item的起始点</span></div><div class="line">            startXY += itemSpace + itemWidth;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawTextValue</span><span class="params">(Canvas canvas, <span class="keyword">float</span> itemSpace, <span class="keyword">float</span> itemWidth, <span class="keyword">float</span> maxVal)</span> </span>&#123;</div><div class="line">        <span class="keyword">float</span> startXY = <span class="number">0f</span>;</div><div class="line">        mPaint.setTextSize(<span class="number">36</span>);</div><div class="line">        mPaint.setStrokeWidth(<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> (PhoneData item : mPhoneData) &#123;</div><div class="line">            mPaint.setColor(item.getPhoneColor());</div><div class="line"></div><div class="line">            <span class="comment">//绘制直方图上方的数值文字</span></div><div class="line">            canvas.drawText(String.valueOf(item.getPhoneValue()), startXY + itemSpace + (itemWidth - mPaint.measureText(String.valueOf(item.getPhoneValue()))) / <span class="number">2</span>, -item.getPhoneValue() / maxVal * canvas.getHeight() * <span class="number">0.7f</span> - <span class="number">20f</span>, mPaint);</div><div class="line"></div><div class="line">            <span class="comment">//重新绘制item的起始点</span></div><div class="line">            startXY += itemSpace + itemWidth;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawPoint</span><span class="params">(Canvas canvas, <span class="keyword">float</span> itemSpace, <span class="keyword">float</span> itemWidth, <span class="keyword">float</span> maxVal)</span> </span>&#123;</div><div class="line">        mPaint.setColor(Color.BLACK);</div><div class="line">        mPaint.setStrokeWidth(<span class="number">20</span>);</div><div class="line">        mPaint.setStrokeCap(Paint.Cap.ROUND);</div><div class="line">        <span class="keyword">float</span> startX = itemSpace + itemWidth / <span class="number">2</span>;</div><div class="line">        <span class="keyword">float</span> startY = <span class="number">0f</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mPhoneData.size(); i++) &#123;</div><div class="line">            startY = -mPhoneData.get(i).getPhoneValue() / maxVal * canvas.getHeight() * <span class="number">0.7f</span>;</div><div class="line">            canvas.drawPoint(startX, startY, mPaint);</div><div class="line">            startX = startX + itemSpace + itemWidth;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawLines</span><span class="params">(Canvas canvas, <span class="keyword">float</span> itemSpace, <span class="keyword">float</span> itemWidth, <span class="keyword">float</span> maxVal)</span> </span>&#123;</div><div class="line"></div><div class="line">        mPaint.setColor(Color.BLACK);</div><div class="line">        mPaint.setStrokeWidth(<span class="number">5</span>);</div><div class="line">        <span class="keyword">float</span> startX = itemSpace + itemWidth / <span class="number">2</span>;</div><div class="line">        <span class="keyword">float</span> startY = <span class="number">0f</span>;</div><div class="line">        <span class="keyword">float</span> endX = <span class="number">0f</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mPhoneData.size(); i++) &#123;</div><div class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</div><div class="line">                startY = -mPhoneData.get(i).getPhoneValue() / maxVal * canvas.getHeight() * <span class="number">0.7f</span>;</div><div class="line">                canvas.drawPoint(startX, startY, mPaint);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                endX = startX + itemSpace + itemWidth;</div><div class="line">                canvas.drawLine(startX, startY, endX, -mPhoneData.get(i).getPhoneValue() / maxVal * canvas.getHeight() * <span class="number">0.7f</span>, mPaint);</div><div class="line">                startY = -mPhoneData.get(i).getPhoneValue() / maxVal * canvas.getHeight() * <span class="number">0.7f</span>;</div><div class="line">                startX = endX;</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">    <span class="comment">/*  绘制x，y轴</span></div><div class="line"><span class="comment">        方式：1</span></div><div class="line"><span class="comment">        canvas.drawLine(canvas.getWidth() * 0.1f, canvas.getHeight() * 0.9f,canvas.getWidth() * 0.9f,canvas.getHeight() * 0.9f,mPaint);</span></div><div class="line"><span class="comment">        canvas.drawLine(canvas.getWidth() * 0.1f,canvas.getHeight() * 0.9f,canvas.getWidth() * 0.1f,canvas.getHeight() * 0.1f,mPaint);</span></div><div class="line"><span class="comment">        */</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-14%2014.26.39.png" alt=""></p>
<h2 id="饼状图的实现："><a href="#饼状图的实现：" class="headerlink" title="饼状图的实现："></a>饼状图的实现：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * PieChart 饼状图</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> wenjia.Cheng  cwj1714@163.com</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/11/13</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PieChart</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"PieChart"</span>;</div><div class="line">    <span class="keyword">private</span> String titleName = <span class="string">"饼状图"</span>;</div><div class="line">    <span class="keyword">private</span> List&lt;PhoneData&gt; mPhoneData = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> maxVal = <span class="number">0f</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> totalVal = <span class="number">0f</span>;</div><div class="line">    <span class="keyword">private</span> Paint mPaint = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 起始角度</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> startAngle;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 划过角度</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> swepAngle;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 划过角度的一半</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> halfSwepAngle;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 指示文字的标线 X 轴起始点。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> lineStartX;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> lineStartY;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> lineEndX;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> lineEndY;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> radius = <span class="number">0f</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> divideStart = <span class="number">90</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> divideEnd = <span class="number">270</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DecimalFormat decimalFormat;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PieChart</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PieChart</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PieChart</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span></span>&#123;</div><div class="line">        mPhoneData = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        mPhoneData.add(<span class="keyword">new</span> PhoneData(<span class="string">"HuaWei"</span>,<span class="number">38f</span>, Color.RED));</div><div class="line">        mPhoneData.add(<span class="keyword">new</span> PhoneData(<span class="string">"Vivo"</span>,<span class="number">23f</span>,Color.BLUE));</div><div class="line">        mPhoneData.add(<span class="keyword">new</span> PhoneData(<span class="string">"Samsung"</span>,<span class="number">33f</span>,Color.GREEN));</div><div class="line">        mPhoneData.add(<span class="keyword">new</span> PhoneData(<span class="string">"Oppo"</span>,<span class="number">12f</span>,Color.YELLOW));</div><div class="line">        mPhoneData.add(<span class="keyword">new</span> PhoneData(<span class="string">"Apple"</span>,<span class="number">41f</span>,Color.MAGENTA));</div><div class="line">        mPhoneData.add(<span class="keyword">new</span> PhoneData(<span class="string">"XiaoMi"</span>,<span class="number">17f</span>,Color.LTGRAY));</div><div class="line">        mPhoneData.add(<span class="keyword">new</span> PhoneData(<span class="string">"Pixel2"</span>,<span class="number">6f</span>,Color.DKGRAY));</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (PhoneData item : mPhoneData) &#123;</div><div class="line">            maxVal = Math.max(maxVal,item.getPhoneValue());</div><div class="line">            totalVal = totalVal + item.getPhoneValue();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mPaint = <span class="keyword">new</span> Paint();</div><div class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line">        mPaint.setStyle(Paint.Style.FILL_AND_STROKE);</div><div class="line">        mPaint.setStrokeWidth(<span class="number">1</span>);</div><div class="line">        mPaint.setColor(Color.BLACK);</div><div class="line"></div><div class="line">        <span class="comment">//构造方法的字符格式这里如果小数不足2位,会以0补足.</span></div><div class="line">        decimalFormat=<span class="keyword">new</span> DecimalFormat(<span class="string">"######0.00"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         圆点坐标：(x0,y0)</span></div><div class="line"><span class="comment">         半径：r</span></div><div class="line"><span class="comment">         角度：a0</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">         则圆上任一点为：（x1,y1）</span></div><div class="line"><span class="comment">         x1   =   x0   +   r   *   cos(ao   *   3.14   /180   )</span></div><div class="line"><span class="comment">         y1   =   y0   +   r   *   sin(ao   *   3.14   /180   )</span></div><div class="line"><span class="comment">         */</span></div><div class="line"></div><div class="line">        initData();</div><div class="line"></div><div class="line">        mPaint.setTextSize(<span class="number">56</span>);</div><div class="line">        canvas.drawText(titleName,canvas.getWidth()/<span class="number">2</span> - mPaint.measureText(titleName)/<span class="number">2</span>, canvas.getHeight() * <span class="number">0.07f</span>,mPaint);</div><div class="line"></div><div class="line">        <span class="comment">//移动画布的原点</span></div><div class="line">        canvas.translate(canvas.getWidth() / <span class="number">2</span>,canvas.getWidth() / <span class="number">2</span> - <span class="number">100f</span>);</div><div class="line"></div><div class="line">        <span class="keyword">float</span> length = canvas.getWidth() * <span class="number">0.25f</span>;</div><div class="line">        RectF rectF = <span class="keyword">new</span> RectF(-length, -length,length,length);</div><div class="line">        mPaint.setStrokeWidth(<span class="number">5</span>);</div><div class="line">        mPaint.setStrokeCap(Paint.Cap.ROUND);</div><div class="line">        mPaint.setStyle(Paint.Style.FILL);</div><div class="line">        mPaint.setTextSize(<span class="number">36</span>);</div><div class="line">        radius = length;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">for</span> (PhoneData item : mPhoneData) &#123;</div><div class="line">            mPaint.setColor(item.getPhoneColor());</div><div class="line">            swepAngle = item.getPhoneValue() / totalVal * <span class="number">360f</span>;</div><div class="line">            halfSwepAngle = startAngle + swepAngle / <span class="number">2</span>;</div><div class="line"></div><div class="line">            <span class="comment">/*</span></div><div class="line"><span class="comment">             *</span></div><div class="line"><span class="comment">             角度=弧度*180/Math.PI</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">             圆点坐标：(x0,y0)</span></div><div class="line"><span class="comment">             半径：r</span></div><div class="line"><span class="comment">             角度：a0</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">             则圆上任一点为：（x1,y1）</span></div><div class="line"><span class="comment">             x1   =   x0   +   r   *   cos(ao   *   3.14   /180   )</span></div><div class="line"><span class="comment">             y1   =   y0   +   r   *   sin(ao   *   3.14   /180   )</span></div><div class="line"><span class="comment">             */</span></div><div class="line">            lineStartX = (<span class="keyword">float</span>) (radius * Math.cos(halfSwepAngle * Math.PI / <span class="number">180</span>));</div><div class="line">            lineStartY = (<span class="keyword">float</span>) (radius * Math.sin(halfSwepAngle * Math.PI / <span class="number">180</span>));</div><div class="line">            lineEndX = (<span class="keyword">float</span>) ((radius + <span class="number">50</span>) * Math.cos(halfSwepAngle * Math.PI / <span class="number">180</span>));</div><div class="line">            lineEndY = (<span class="keyword">float</span>) ((radius + <span class="number">50</span>) * Math.sin(halfSwepAngle * Math.PI / <span class="number">180</span>));</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (maxVal == item.getPhoneValue()) &#123;</div><div class="line">            	<span class="comment">//注意先保存当前canvas</span></div><div class="line">                canvas.save();</div><div class="line">                canvas.translate(lineStartX * <span class="number">0.1f</span>, lineStartY * <span class="number">0.1f</span>);</div><div class="line">                canvas.drawArc(rectF, startAngle, swepAngle - <span class="number">2f</span>, <span class="keyword">true</span>, mPaint);</div><div class="line">                canvas.drawLine(lineStartX,lineStartY,lineEndX,lineEndY,mPaint);</div><div class="line">                <span class="comment">//绘制各个区域的文字</span></div><div class="line">                diffLineLength(canvas, item);</div><div class="line">                <span class="comment">//绘制各个区域的数值</span></div><div class="line">                diffLineVal(canvas, item);</div><div class="line">                <span class="comment">//绘制百分比</span></div><div class="line">                <span class="comment">//diffPercentage(canvas,item);</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                canvas.drawArc(rectF,startAngle,swepAngle - <span class="number">2f</span>,<span class="keyword">true</span>,mPaint);</div><div class="line">                canvas.drawLine(lineStartX,lineStartY,lineEndX,lineEndY,mPaint);</div><div class="line">                diffLineLength(canvas, item);</div><div class="line">                diffLineVal(canvas, item);</div><div class="line">                <span class="comment">//diffPercentage(canvas,item);</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (maxVal == item.getPhoneValue()) &#123;</div><div class="line">                <span class="comment">// 特殊工作做完之后，再回复之前保存的canvas</span></div><div class="line">                canvas.restore();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            startAngle += swepAngle;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">diffLineLength</span><span class="params">(Canvas canvas, PhoneData item)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (halfSwepAngle &gt; divideStart &amp;&amp; halfSwepAngle &lt;= divideEnd) &#123;</div><div class="line">            canvas.drawLine(lineEndX, lineEndY, lineEndX - <span class="number">100</span>, lineEndY, mPaint);</div><div class="line">            canvas.drawText(item.getPhoneName(), lineEndX - <span class="number">120</span> - mPaint.measureText(item.getPhoneName()), lineEndY, mPaint);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            canvas.drawLine(lineEndX,lineEndY,lineEndX + <span class="number">100</span>,lineEndY,mPaint);</div><div class="line">            canvas.drawText(item.getPhoneName(),lineEndX + <span class="number">120</span>,lineEndY,mPaint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">diffLineVal</span><span class="params">(Canvas canvas, PhoneData item)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (halfSwepAngle &gt; divideStart &amp;&amp; halfSwepAngle &lt;= divideEnd) &#123;</div><div class="line">            mPaint.setColor(Color.WHITE);</div><div class="line">            canvas.drawText(String.valueOf(item.getPhoneValue()),(lineEndX - (mPaint.measureText(String.valueOf(item.getPhoneValue()))) / <span class="number">2</span>) * <span class="number">0.5f</span>,(lineEndY) * <span class="number">0.5f</span>, mPaint);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mPaint.setColor(Color.WHITE);</div><div class="line">            canvas.drawText(String.valueOf(item.getPhoneValue()),(lineEndX + (mPaint.measureText(String.valueOf(item.getPhoneValue()))) / <span class="number">2</span>) * <span class="number">0.5f</span>,(lineEndY) * <span class="number">0.5f</span>, mPaint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">diffPercentage</span><span class="params">(Canvas canvas, PhoneData item)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (halfSwepAngle &gt; divideStart &amp;&amp; halfSwepAngle &lt;= divideEnd) &#123;</div><div class="line">            mPaint.setColor(Color.WHITE);</div><div class="line">            canvas.drawText(decimalFormat.format(item.getPhoneValue() / totalVal *<span class="number">100</span>) + <span class="string">"%"</span>,(lineEndX - mPaint.measureText(decimalFormat.format(item.getPhoneValue()))) / <span class="number">2</span>,(lineEndY) * <span class="number">0.5f</span>, mPaint);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mPaint.setColor(Color.WHITE);</div><div class="line">            canvas.drawText(decimalFormat.format(item.getPhoneValue() / totalVal *<span class="number">100</span>) + <span class="string">"%"</span> ,(lineEndX - mPaint.measureText(decimalFormat.format(item.getPhoneValue()))) / <span class="number">2</span>,(lineEndY) * <span class="number">0.5f</span>, mPaint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-14%2014.23.05.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[抽象工厂模式]]></title>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>《head First 设计模式》</p>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="设计原则：依赖倒置原则"><a href="#设计原则：依赖倒置原则" class="headerlink" title="设计原则：依赖倒置原则"></a>设计原则：依赖倒置原则</h1><pre><code>要依赖抽象，不要依赖具体类。
</code></pre><p><strong>这个原则比起“针对接口编程，不针对实现编程”更加强调的是“抽象”。不让高层组件依赖底层组件，而且不论“高层”还是“底层”，两者都依赖“抽象”。</strong></p>
<p>这个模式的学习，首先通过一个自己以前最常见的编码开始（自己在学校编写小项目时曾经真的这么写过 ，好囧啊 ﾍ(;´Д｀ﾍ) ）。</p>
<h2 id="引出问题"><a href="#引出问题" class="headerlink" title="引出问题"></a>引出问题</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-08%2011.28.55.png" alt=""></p>
<p>这样看可能并不会特别直观，但是只要转换为图形……</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-08%2011.45.34.png" alt=""></p>
<p>通过这个图形的，我们已经很直观的能看到问题的所在：有点“牵一发而动全身”的意思。这样的编写违背了面向接口编程的原则，而且耦合程度高：一个类与众多的类之间保持着依赖关系。</p>
<h2 id="进行倒置"><a href="#进行倒置" class="headerlink" title="进行倒置"></a>进行倒置</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-08%2013.53.23.png" alt=""></p>
<h1 id="依赖倒置原则中的“倒置”究竟“倒”在哪里？"><a href="#依赖倒置原则中的“倒置”究竟“倒”在哪里？" class="headerlink" title="依赖倒置原则中的“倒置”究竟“倒”在哪里？"></a>依赖倒置原则中的“倒置”究竟“倒”在哪里？</h1><p>“倒置”指的是和一般的OO设计思想方式相反，倒置你针对问题进行设计时的思维方式。</p>
<h1 id="如何避免违反依赖倒置原则："><a href="#如何避免违反依赖倒置原则：" class="headerlink" title="如何避免违反依赖倒置原则："></a>如何避免违反依赖倒置原则：</h1><ul>
<li>变量不可以持有具体类的引用。 在此例中，使用工厂方法来避免new</li>
<li>不要让类派生自具体的类。</li>
<li>不要覆盖基类中已实现的方法 </li>
</ul>
<h1 id="抽象工厂模式的定义："><a href="#抽象工厂模式的定义：" class="headerlink" title="抽象工厂模式的定义："></a>抽象工厂模式的定义：</h1><p>提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。<br>抽象工厂的任务是定义创建一组产品的接口，接口内的每个方法负责创建一个具体的产品，同时我们利用实现抽象工厂子类来实现这个创建方法。抽象工厂中利用工厂方法实现生产方法是相当自然的做法。</p>
<hr>
<p>停止于： 2017-11-08 15:10:25  专向：Android高级进阶</p>
<hr>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[StarUML的使用]]></title>
      <url>/StarUML%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>StarUML使用参考：<a href="http://blog.csdn.net/eyckwu/article/details/53871841" target="_blank" rel="external">http://blog.csdn.net/eyckwu/article/details/53871841</a><br>UML学 : <a href="http://www.uml.org.cn/oobject/201104212.asp" target="_blank" rel="external">http://www.uml.org.cn/oobject/201104212.asp</a><br>各种图（流程图，思维导图，UML，拓扑图，ER图）简介 ：<a href="http://www.cnblogs.com/jiqing9006/p/3344221.html" target="_blank" rel="external">http://www.cnblogs.com/jiqing9006/p/3344221.html</a></p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="码云拾遗"><a href="#码云拾遗" class="headerlink" title="码云拾遗"></a>码云拾遗</h1><ul>
<li><p><strong>明星效应。很简单，在一个领域保持顶尖水平，比在一两个领域保持领先水平和五六个领域保持一般水准都要更有价值、并且收益更好。</strong> </p>
</li>
<li><p><strong>有悖常识的真相：让未来更开放的方式，正是专注的去做好一件事情。这个世界上最成功的人，他们在某一领域获得成功之后，可通过经营杠杆进入任何他们想要涉足的领域。而这都得依赖于他们曾极致的专注在做好一件事情上。</strong></p>
</li>
</ul>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p><strong>StarUML</strong>是一个韩国人用DELPHI写的UML工具，支持UML2.0。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-06-04%2020.56.08.png" alt=""></p>
<h2 id="UML："><a href="#UML：" class="headerlink" title="UML："></a>UML：</h2><ul>
<li>静态建模：系统基础和系统固定框架结构，这些图形往往是“静态”的。</li>
<li>类图(Class Diagram)：常用来分析业务概念</li>
<li><p>用例图(Use Case Diagram)：由参与者、用例以及它们之间的关系构成的</p>
<p>使用参考：<a href="https://www.2cto.com/os/201502/377091.html" target="_blank" rel="external">https://www.2cto.com/os/201502/377091.html</a><br>　　<strong>参与者</strong>：是指存在于系统外部并直接与系统交互的人、系统或设备等。<br>　　<strong>用例</strong>：是系统为参与者提供的功能。<br>　　<strong>用例命名</strong>：取一个简单、概括性的名称，一般是带有动作性的名称。<br>　　<strong>用例表示</strong>：用椭圆表示，椭圆下面附有用例的名称、实线箭头，在用例图中用于连接参与者与用例，用例方向指向用例。<br>　　<strong>用例与用例之间的三种关系</strong>：<br>　　<br>  　　1. 泛化（generalization）代表一般与特殊的关系<br>  　　2. 包含（include）关系<br>  　　3. 扩展（extend）关系
　　</p>
</li>
<li>对象图(Object Diagram)</li>
<li>构件图(Component Diagram)：表示组件之间的关系</li>
<li>部署图(Deployment Diagram)：部署软件应用的物理设备信息</li>
</ul>
<h2 id="2-动态建模：描述的是某种行为，是“动态”的。"><a href="#2-动态建模：描述的是某种行为，是“动态”的。" class="headerlink" title="2. 动态建模：描述的是某种行为，是“动态”的。"></a>2. 动态建模：描述的是某种行为，是“动态”的。</h2><ul>
<li>活动图(Activity Diagram)：类似流程图</li>
<li>状态机图(State Machine Diagram)</li>
<li>时序图(Sequence Diagram)：捕捉一段时间范围内多个对象之间的交互信息， 强调信息交互的时间顺序。</li>
<li>通讯图(Communication Diagram)</li>
<li>时间图(Timing Diagram)</li>
</ul>
<h1 id="StarUML使用"><a href="#StarUML使用" class="headerlink" title="StarUML使用"></a>StarUML使用</h1><h2 id="Mode的选择"><a href="#Mode的选择" class="headerlink" title="Mode的选择"></a>Mode的选择</h2><h3 id="选择更为具体的图"><a href="#选择更为具体的图" class="headerlink" title="选择更为具体的图"></a>选择更为具体的图</h3><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-06%2014.56.00.png" alt=""></p>
<h3 id="添加更为丰富的元素"><a href="#添加更为丰富的元素" class="headerlink" title="添加更为丰富的元素"></a>添加更为丰富的元素</h3><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-06%2014.58.17.png" alt=""></p>
<h2 id="类图的画法"><a href="#类图的画法" class="headerlink" title="类图的画法"></a>类图的画法</h2><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-06%2014.00.35.png" alt=""></p>
<p>如上图是一个类图，下面对每一个图标的内容进行解释（从左到右，从从上到下）。<br><strong>左侧</strong>： </p>
<ul>
<li>标识Class的可见性（默认public） </li>
<li>添加note，进行对类的说明 </li>
</ul>
<p><strong>右侧</strong>： </p>
<ul>
<li>增加类的属性 </li>
<li>增加类的行为 </li>
<li>添加reception </li>
<li>添加子类 </li>
<li>添加父类 </li>
<li>添加已有的接口 </li>
<li>添加需要的接口 </li>
<li>添加关联 </li>
<li>添加聚合 </li>
<li>添加组合 </li>
<li>添加端口 </li>
<li>添加组件 </li>
</ul>
<h3 id="具体"><a href="#具体" class="headerlink" title="具体"></a>具体</h3><h4 id="1-类图"><a href="#1-类图" class="headerlink" title="1. 类图"></a>1. 类图</h4><p>包括：类名 + 属性 + 方法</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-06%2015.25.50.png" alt=""></p>
<h4 id="2-类图之间的关系"><a href="#2-类图之间的关系" class="headerlink" title="2. 类图之间的关系"></a>2. 类图之间的关系</h4><h5 id="1-泛化（Generalization）："><a href="#1-泛化（Generalization）：" class="headerlink" title="1. 泛化（Generalization）："></a>1. 泛化（Generalization）：</h5><ul>
<li>就是面向对象中的<code>继承</code>，奔驰、宝马、奥迪都继承自<code>汽车类</code></li>
<li>表示<code>is-a</code>的关系，是对象之间<code>耦合度最大</code>的一种关系，子类继承父类的所有细节，直接使用语言中的继承表达。在类图中使用<code>带三角箭头</code>的<code>实线</code>表示，箭头从子类指向父类。</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-06%2015.35.17.png" alt=""></p>
<h5 id="2-实现（interface-Realization）："><a href="#2-实现（interface-Realization）：" class="headerlink" title="2. 实现（interface Realization）："></a>2. 实现（interface Realization）：</h5><p>圆圈代表接口</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-06%2015.49.39.png" alt=""></p>
<p>一般接口实现的画法及表示：在类图中使用<code>带三角箭头的虚线</code>表示，箭头从<code>实现类</code>指向<code>接口</code>。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/0c834dc1.jpg" alt=""></p>
<h5 id="3-依赖（Dependency）："><a href="#3-依赖（Dependency）：" class="headerlink" title="3. 依赖（Dependency）："></a>3. 依赖（Dependency）：</h5><ul>
<li>对象之间最弱的一种关联方式，是临时性的关联，代码中一般指由局部变量、函数参数、返回值建立的对于其他<code>对象的调用关系</code>。</li>
<li>一个类调用被依赖类中的某些方法而得以完成这个类的一些职责。</li>
<li>在类图使用<code>带箭头的虚线</code>表示，箭头从<code>使用类</code>指向<code>被依赖的类</code>。</li>
</ul>
<p>StarUML的使用同下图<br><img src="http://oy991qm3u.bkt.clouddn.com/3c13e1c1.jpg" alt=""></p>
<h5 id="4-关联"><a href="#4-关联" class="headerlink" title="4. 关联"></a>4. 关联</h5><h6 id="4-1-一般关联-Association"><a href="#4-1-一般关联-Association" class="headerlink" title="4.1 一般关联(Association) :"></a>4.1 一般关联(Association) :</h6><ul>
<li><code>对象之间</code>一种<code>引用关系</code>，比如客户类与订单类之间的关系。这种关系通常使用<code>类的属性</code>表达。</li>
<li>在类图使用<code>带箭头的实线</code>表示，箭头从<code>使用类</code>指向<code>被关联的类</code>。可以是<code>单向</code>和<code>双向</code>。</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/940065f4.jpg" alt=""></p>
<h6 id="4-2-聚合关联-Aggregation"><a href="#4-2-聚合关联-Aggregation" class="headerlink" title="4.2 聚合关联(Aggregation) :"></a>4.2 聚合关联(Aggregation) :</h6><ul>
<li>表示<code>has-a</code>的关系，是一种<code>不稳定</code>的<code>包含关系</code>。</li>
<li>较强于一般关联,有<code>整体</code>与<code>局部</code>的关系,并且没有了整体,局部也可单独存在。如公司和员工的关系，公司包含员工，但如果公司倒闭，员工依然可以换公司。</li>
<li>在类图使用<code>空心的菱形</code>表示，菱形从<code>局部</code>指向<code>整体</code>。</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/aafc5bec.jpg" alt=""></p>
<h5 id="4-3-组合-Composition"><a href="#4-3-组合-Composition" class="headerlink" title="4.3 组合(Composition) :"></a>4.3 组合(Composition) :</h5><ul>
<li>表示<code>contains-a</code>的关系，是一种<code>强烈</code>的<code>包含关系</code>。</li>
<li><code>组合类</code>负责<code>被组合类</code>的<code>生命周期</code>，是一种更强的<code>聚合关系</code>。部分不能脱离整体存在。如公司和部门的关系，没有了公司，部门也不能存在了；调查问卷中问题和选项的关系；订单和订单选项的关系。</li>
<li>在类图使用<code>实心的菱形</code>表示，菱形从<code>局部</code>指向<code>整体</code>。</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/660db5e8.jpg" alt=""></p>
<h5 id="5-多重性-Multiplicity"><a href="#5-多重性-Multiplicity" class="headerlink" title="5. 多重性(Multiplicity) :"></a>5. 多重性(Multiplicity) :</h5><p>通常在关联、聚合、组合中使用。就是代表有多少个关联对象存在。使用数字..星号（数字）表示。</p>
<p> </p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> UML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Scrapy爬虫框架使用]]></title>
      <url>/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Scrapy框架使用指南：<a href="http://scrapy-chs.readthedocs.io/zh_CN/1.0/intro/overview.html" target="_blank" rel="external">http://scrapy-chs.readthedocs.io/zh_CN/1.0/intro/overview.html</a><br>Scrapy零基础使用：<a href="http://www.jb51.net/article/57183.htm" target="_blank" rel="external">http://www.jb51.net/article/57183.htm</a></p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="开题"><a href="#开题" class="headerlink" title="开题"></a>开题</h1><p><strong>问：把网站装进爬虫需要几步？</strong><br><strong>答：四步。</strong></p>
<p><strong>1. 新建项目</strong><br><strong>2. 明确目标</strong><br><strong>3. 制作爬虫</strong><br><strong>4. 存储内容</strong></p>
<p><strong>注意：<code># coding=utf-8</code> 使用Scrapy爬虫框架时应该添加此条语句表明注释是<code>中文注释</code></strong></p>
<h1 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1. 新建项目"></a>1. 新建项目</h1><p><strong>使用命令新建一个<code>scrapy</code>项目</strong></p>
<pre><code>scrapy startproject projectName
</code></pre><p><strong>建立项目的文件目录</strong></p>
<pre><code>scrapyproject
├── scrapy.cfg
└── scrapyproject
    ├── __init__.py
    ├── items.py
    ├── middlewares.py
    ├── pipelines.py
    ├── settings.py
    └── spiders
        └── __init__.py

2 directories, 7 files
</code></pre><p><strong>各个文件的作用：</strong></p>
<ul>
<li><strong>scrapy.cfg</strong> ：项目的配置文件</li>
<li><strong>scrapyproject</strong>/ ：项目的Python模块，将会从这里引用代码</li>
<li><strong>scrapyproject/items.py</strong> ：项目的items文件</li>
<li><strong>scrapyproject/pipelines.py</strong> ：项目的pipelines文件</li>
<li><strong>scrapyproject/settings.py</strong> ：项目的设置文件</li>
<li><strong>scrapyproject/spiders</strong>/ ：具体执行爬虫的目录</li>
</ul>
<h1 id="2-明确目标"><a href="#2-明确目标" class="headerlink" title="2. 明确目标"></a>2. 明确目标</h1><p>在<code>Scrapy</code>中，<code>items</code>是用来管理抓取内容的容器，有点像<code>Python</code>中的<code>Dict</code>，但是提供了一些额外的保护减少错误。</p>
<p>一般来说，<code>item</code>可以用<code>scrapy.item.Item</code>类来创建，并且用<code>scrapy.item.Field</code>对象来定义属性（可以理解成类似于<code>ORM映射关系</code>，类似于<code>java bean</code>）。</p>
<p><strong>编写Item：</strong>修改<code>scrapyproject</code>目录下的<code>items.py</code>4文件，在原本的class后面添加我们自己的class。</p>
<pre><code>import scrapy

class PyScrapy1601Item(scrapy.Item):
    # define the fields for your item here like:
    # name = scrapy.Field()
    pass

class DmozItem(scrapy.Item):
    node = scrapy.Field()
</code></pre><h1 id="3-爬虫实现"><a href="#3-爬虫实现" class="headerlink" title="3. 爬虫实现"></a>3. 爬虫实现</h1><p><strong>先爬后取</strong></p>
<h2 id="3-1-爬"><a href="#3-1-爬" class="headerlink" title="3.1 爬"></a>3.1 爬</h2><p>要建立一个<code>Spider</code>，你必须用<code>scrapy.spider.BaseSpider</code>创建一个子类，并确定<strong>三个强制属性</strong>：</p>
<ol>
<li><strong>name</strong> ：爬虫的识别名称，必须是唯一的。</li>
<li><strong>start_urls</strong> ：爬取的URL列表。爬虫从这里开始抓取数据。</li>
<li><strong>parse()</strong> ：解析的方法，调用的时候传入从每一个URL传回的<code>Response对象</code>作为唯一参数，负责解析并匹配抓取的数据(解析为<code>item</code>)。</li>
</ol>
<p>allow_domains ：allow_domains是搜索的域名范围，也就是爬虫的约束区域，规定爬虫只爬取这个域名下的网页。<br>一个模板：</p>
<pre><code>from scrapy.spider import Spider
from scrapy.selector import Selector
from py_scrapy_16_01.py_scrapy_16_01.items import DmozItem

class DmozSpider(Spider):

    name = &quot;dmoz&quot;

    allowed_domains = [&quot;dmoztools.net&quot;]
    start_urls = [
        &quot;http://dmoztools.net/Computers/Programming/Languages/Python/&quot;,
    ]

    def parse(self, response):
        sel = Selector(response)
        sites = sel.xpath(&apos;//div[@class=&quot;browse-node&quot;]/text()&apos;)
        items2 = []
        for node in sites:
            item = DmozItem()
            item[&apos;href&apos;] = node.extract()
            items2.append(item)

        return items2
</code></pre><p><strong>进入到 <code>/scrapyproject/scrapyproject</code>下 运行</strong></p>
<pre><code>scrapy crawl dmoz 
</code></pre><p><strong>执行了这条命令发生了啥？</strong><br>首先，Scrapy为爬虫的 <code>start_urls</code> 属性中的每个<code>URL</code>创建了一个<code>scrapy.http.Request</code> 对象 ，并将爬虫的<code>parse()</code> 方法指定为回调函数。<br>然后，这些 <code>Request</code> 被调度并执行，之后通过<code>parse()</code>方法返回 <code>scrapy.http.Response</code> 对象，并反馈给爬虫。</p>
<h2 id="3-2-取"><a href="#3-2-取" class="headerlink" title="3.2 取"></a>3.2 取</h2><p>爬取整个网页完毕，接下来的就是的取过程了。在基础的爬虫里，这一步可以用<code>正则表达式</code>来抓。在<code>Scrapy</code>里，<strong>使用一种叫做 <code>XPath selectors</code>的机制，它基于 <code>XPath</code>表达式</strong>。</p>
<p><strong>例子：</strong><br><strong>/html/head/title</strong> : 选择HTML文档<head>元素下面的<code>&lt;title&gt;</code>标签。<br><strong>/html/head/title/text()</strong> : 选择前面提到的<code>&lt;title&gt;</code> 元素下面的文本内容<br><strong>//td</strong>: 选择所有 <code>&lt;td&gt;</code> 元素<br><strong>//div[@class=”mine”]</strong> : 选择所有包含 <code>class=&quot;mine&quot;</code> 属性的<code>div</code>标签元素</head></p>
<p>xpath路径表达式：</p>
<table>
<thead>
<tr>
<th style="text-align:center">表达式</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>/</strong></td>
<td style="text-align:left">从根节点选取</td>
</tr>
<tr>
<td style="text-align:center"><strong>//</strong></td>
<td style="text-align:left">从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置</td>
</tr>
<tr>
<td style="text-align:center"><strong>.</strong></td>
<td style="text-align:left">选取当前节点</td>
</tr>
<tr>
<td style="text-align:center"><strong>..</strong></td>
<td style="text-align:left">选取当前节点的父节点</td>
</tr>
<tr>
<td style="text-align:center"><strong>@</strong></td>
<td style="text-align:left">选取属性</td>
</tr>
</tbody>
</table>
<p>更多使用参考 <code>W3C-XPath</code> ：<a href="http://www.w3school.com.cn/xpath/index.asp" target="_blank" rel="external">http://www.w3school.com.cn/xpath/index.asp</a></p>
<p><strong>为了方便使用<code>XPaths</code>，<code>Scrapy</code>提供<code>XPathSelector</code> 类，有2种可以选择</strong>:</p>
<ol>
<li><strong>HtmlXPathSelector (HTML数据解析)</strong></li>
<li><strong>XmlXPathSelector (XML数据解析)</strong></li>
</ol>
<p>必须通过一个 <code>Response</code> 对象对他们进行实例化操作，如：</p>
<pre><code>sel = Selector(response)
</code></pre><p><code>Selector对象</code>展示了文档的<code>节点结构</code>。因此，第一个实例化的<code>selector</code>必与<code>根节点</code>或者是<code>整个目录</code>有关 。<br><strong>在<code>Scrapy</code>里面，<code>Selectors</code> 有4种基础的方法</strong>：</p>
<ol>
<li><strong>xpath()</strong> ：返回一系列的selectors，每一个select表示一个xpath参数表达式选择的节点。</li>
<li><strong>css()</strong> ：返回一系列的selectors，每一个select表示一个css参数表达式选择的节点。</li>
<li><strong>extract()</strong> ：返回一个unicode字符串，即选中的数据。</li>
<li><strong>re()</strong> ：返回一串一个unicode字符串，即使用正则表达式抓取出来的内容。</li>
</ol>
<h2 id="3-3-xpath-测试"><a href="#3-3-xpath-测试" class="headerlink" title="3.3 xpath()测试"></a>3.3 xpath()测试</h2><p>在终端输入：</p>
<pre><code>scrapy shell http://dmoztools.net/Computers/Programming/Languages/Python/ 
</code></pre><p>在没有报错的情况下，输入 <code>response.headers</code> 得到：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-03%2010.32.34.png" alt=""></p>
<p>在没有报错的情况下，输入 <code>response.body</code> 得到：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-03%2010.35.02.png" alt=""></p>
<h1 id="4-存储内容"><a href="#4-存储内容" class="headerlink" title="4. 存储内容"></a>4. 存储内容</h1><p>保存信息的最简单的方法是通过Feed exports，主要有4种：<code>JSON</code>，<code>JSON lines</code>，<code>CSV</code>，<code>XML</code>。<br>我们将结果用最常用的JSON导出，命令如下：</p>
<pre><code>scrapy crawl dmoz -o items.json -t json
</code></pre><p>其中，<code>-o</code> 后面是<code>导出文件名</code>，<code>-t</code> 后面是<code>导出类型</code>。</p>
<h1 id="5-Pycharm中运行爬虫程序错误"><a href="#5-Pycharm中运行爬虫程序错误" class="headerlink" title="5. Pycharm中运行爬虫程序错误"></a>5. Pycharm中运行爬虫程序错误</h1><h2 id="1-NameError-global-name-‘DmozItem’-is-not-defined"><a href="#1-NameError-global-name-‘DmozItem’-is-not-defined" class="headerlink" title="1. NameError: global name ‘DmozItem’ is not defined"></a>1. NameError: global name ‘DmozItem’ is not defined</h2><pre><code>File &quot;/Users/yannischeng/PycharmProjects/First_Python_Project/spiderone/spiderone/spiders/dmoe_spider.py&quot;, line 20, in parse
item = DmozItem()
NameError: global name &apos;DmozItem&apos; is not defined
</code></pre><p><strong>解决方案：使用相对导入</strong></p>
<pre><code>from ..items import DmozItem
</code></pre><p>第一个点(.) 表示当前目录，第二个点表示上一级父目录。这样做还有一个额外的好处就是你可以随意修改你的包的名称，松耦合。</p>
<h2 id="2-Scrapy爬取中文，显示ascii码，如何转变成utf-8正常编码？"><a href="#2-Scrapy爬取中文，显示ascii码，如何转变成utf-8正常编码？" class="headerlink" title="2. Scrapy爬取中文，显示ascii码，如何转变成utf-8正常编码？"></a>2. Scrapy爬取中文，显示ascii码，如何转变成utf-8正常编码？</h2><blockquote>
<p>参考：<a href="http://www.jianshu.com/p/c03d968ef68b" target="_blank" rel="external">http://www.jianshu.com/p/c03d968ef68b</a></p>
</blockquote>
<p>将爬取到的中文信息存储为<code>json</code>格式的文件时，文字显示就会出现问题，存储为<code>xml</code>时就不会有问题。本要求应该显示的是：<code>摘要</code>，而实际显示的内容为：<code>\&quot;\u6458\u8981</code></p>
<p><strong>解决方案：使用<code>json包</code>中的<code>json.dumps(dictname,ensure_ascii=False)</code></strong><br>具体案例使用：</p>
<pre><code>item[&apos;node&apos;] = json.dumps(node.extract(), ensure_ascii=False)
print(item[&apos;node&apos;])
摘要: 把系统换到了fedora,记录几个相关的配置
</code></pre><h2 id="3-scrapy-的-parse-return-值必须是Request-BaseItem-dict-or-None，如果返回str报错"><a href="#3-scrapy-的-parse-return-值必须是Request-BaseItem-dict-or-None，如果返回str报错" class="headerlink" title="3. scrapy` 的 parse() return 值必须是Request, BaseItem, dict or None，如果返回str报错"></a>3. scrapy` 的 parse() return 值必须是Request, BaseItem, dict or None，如果返回str报错</h2><pre><code>[scrapy.core.scraper] ERROR: Spider must return Request, BaseItem, dict or None, got &apos;str&apos; in &lt;GET http://www.cnblogs.com/aLittleBitCool/&gt;
</code></pre><h2 id="4-scrapy爬虫得到的json文件是ascii码问题"><a href="#4-scrapy爬虫得到的json文件是ascii码问题" class="headerlink" title="4. scrapy爬虫得到的json文件是ascii码问题"></a>4. scrapy爬虫得到的json文件是ascii码问题</h2><blockquote>
<p>参考：<a href="http://bbs.fishc.com/thread-85672-1-1.html" target="_blank" rel="external">http://bbs.fishc.com/thread-85672-1-1.html</a></p>
</blockquote>
<pre><code>import json        #记得添加这两个库
import codecs

class XXXPipeline(object):                 #XXX就是你建立scrapy工程的名称
        def __init__(self):                #添加一下初始化方法
                self.file = codecs.open(&apos;item.json&apos;, &apos;wb&apos;, encoding=&apos;utf-8&apos;)        #item.json指的是你要保存的json格式文件的名称，编码格式一般都是&apos;utf-8&apos;
        def process_item(self, item, spider):
                line = json.dumps(dict(item),ensure_ascii=False) + &apos;\n&apos;        #这一句会将你每次返回的字典抓取出来,“ensure_ascii=False”这一句话很重要，如果是True的话就是我们保存的\u4e2d\u56fd这种格式了
                self.file.write(line)        #写入到文件中
                return item
</code></pre><p>将以上内容插入<code>pipelines.py</code>,同时在<code>settings.py</code>中加入</p>
<pre><code>ITEM_PIPELINES = {
    &apos;panda.pipelines.PandaPipeline&apos;: 300
}
</code></pre>]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[来自他人的编程技巧总结]]></title>
      <url>/%E6%9D%A5%E8%87%AA%E4%BB%96%E4%BA%BA%E7%9A%84%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<ol>
<li>函数不要超过 50 行。</li>
<li>不要一次性写太多来不及测的代码，而是要写一段调试一段。</li>
</ol>
<hr>
<a id="more"></a>
<ol>
<li>UT 和编码要同步做。</li>
<li>多写注释方便的往往是自己。</li>
<li>碰到一堆问题时，一次只尝试解决一个问题。</li>
<li>没把握一眼看出问题症结的时候，老老实实单步调试。</li>
<li>设计模式是个好东西，但不要强行使用。</li>
<li>没造成可观的损失前不要尝试做性能优化。</li>
<li>没事别重复造轮子。</li>
</ol>
<hr>
<ol>
<li>大多数情况下 Boss 不关心技术含量，而且往往简单的解决方案更快更有效果。</li>
<li>不要害怕接触新知识，因为害怕也没用，不管你愿意不愿意，你现在会的东西 5 年后就会过时。</li>
<li>重构是程序员的主力技能。</li>
<li>工作日志能提升脑容量。</li>
</ol>
<hr>
<ol>
<li>先用 profiler 调查，才有脸谈优化。</li>
<li>漫山遍野的注释实际背景噪音。</li>
<li>普通程序员 + google = 超级程序员。</li>
<li>写单元测试总是合算的。</li>
<li>不要先写框架再写实现。最好反过来，从原型中提炼框架。</li>
<li>代码结构清晰，其它问题都不算事儿。</li>
<li>管理行不行，就看工作流。</li>
<li>编码不要畏惧变化，要拥抱变化。</li>
<li>常充电。程序员只有一种死法：土死的。</li>
</ol>
<hr>
<ol>
<li>相信你的同事的能力，你不能解决的问题，他们说不能就能神奇的解决</li>
<li>不要相信的你的同事，他们能神奇地解决的方式，往往都是新问题的原因</li>
<li>相信你的同事，他能解决这个问题。</li>
<li>不能相信你的同事，他把问题变得更糟糕了。</li>
<li>但是你还是必须相信你的同事，因为有他在，这些问题还是可以解决的</li>
<li>不能相信你的同事，当问题无法解决的时候，他可能就辞职不干了。</li>
<li>要相信自己，一定可以解决同事或者前任遗留下来的任何问题。</li>
<li>要相信新进来了员工，如果有任何自己无法解决的技术问题，相信新员工可以用非常神奇的方法解决</li>
</ol>
<hr>
<ol>
<li>编程之事，隔离是方向，起名是关键，测试是主角，调试是补充，版本控制是后悔药。</li>
<li>一行代码一个兵。形成建制才能有战斗力。单位规模不宜过大，千人班，万人排易成万人坑。</li>
<li>重构 / 优化 / 修复 Bug，同时只能作一件。</li>
<li>简单模块注意封装，复杂模块注意分层。</li>
<li>人脑性能有限，整洁胜于杂乱。读不懂的代码，尝试整理下格式;  不好用的接口，尝试重新封装下。</li>
<li>迭代速度决定工作强度。想多快好省，就从简化开发流程，加快迭代速度开始。</li>
<li>忘掉优化写代码。过早优化等同恶意破坏；忘掉代码作优化。优化要基于性能测试，而不是纠结于字里行间。</li>
<li>最好的工具是纸笔; 其次好的是 markdown。</li>
<li>leader 问任务时间，若答不上来，可能是任务拆分还不够细。</li>
<li>宁可多算一周，不可少估一天。过于 “乐观” 容易让 boss 受惊吓。</li>
<li>最有用的语言是 English。其次的可能是 Python。</li>
<li>百闻不如一见。画出结果，一目了然。调试耗时将大大缩短。</li>
<li>资源、代码应一道受版本管理。资源匹配错误远比代码匹配错误更难排查。</li>
<li>不要基于想象开发， 要基于原型开发。原型的价值是快速验证想法，帮大家节省时间。</li>
<li>序列化首选明文文本 。诸如二进制、混淆、加密、压缩等等有需要时再加。</li>
<li>编译器永远比你懂微观优化。只能向它不擅长的方向努力。</li>
<li>不要定过大、过远、过细的计划。即使定了也没有用。</li>
</ol>
<hr>
<ol>
<li>至少半数时间将花在集成上。时间，时间，时间总是不够。</li>
<li>与主流意见 / 方法 / 风格 / 习惯相悖时，先检讨自己最可靠。</li>
<li>出现 bug 主动查，不管是不是你的。这能让你业务能力猛涨、个人形象飙升; 如果你的 bug 被别人揪出来….. 呵呵，那你会很被动～≧﹏≦</li>
<li>不知怎么选技术书时就挑薄的。起码不会太贵，且你能看完。</li>
<li>git 是最棒的。简单，可靠，免费。</li>
<li>仅对 “可预测的非理性” 抛断言。</li>
<li>Log 要写时间与分类。并且要能重定向输出。</li>
<li>注释是稍差的文档。更好的是清晰的命名。让代码讲自己的故事。</li>
<li>造轮子是很好的锻炼方法。前提是你见过别的轮子。</li>
<li>code review 最好以小组 / 结对的形式。对业务有一定了解，建议会更有价值（但不绝对）。而且不会成为负担。管理员个人 review 则很容易成 team 的瓶颈。</li>
<li>提问前先做调研。问不到点上既被鄙视，又浪费自己的时间。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 阅读 </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac环境下MySQL的安装与使用]]></title>
      <url>/Mac%E7%8E%AF%E5%A2%83%E4%B8%8BMySQL%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><strong>平台：Mac环境</strong></p>
<blockquote>
<p>mysql操作命令参考：<a href="http://www.runoob.com/mysql/mysql-tutorial.html" target="_blank" rel="external">http://www.runoob.com/mysql/mysql-tutorial.html</a></p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul>
<li><p>官网下载地址  <a href="https://dev.mysql.com/downloads/file/?id=473576" target="_blank" rel="external">https://dev.mysql.com/downloads/file/?id=473576</a></p>
</li>
<li><p>默认安装目录 <code>/usr/local/</code></p>
</li>
<li><p>安装时弹出的默认密码，在第一次登录时需要用到：</p>
<pre><code>A temporary password is generated for root@localhost: gkct&gt;2Wajv5W
</code></pre></li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-01%2009.38.31.png" alt=""></p>
<ul>
<li>安装完成</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-01%2009.39.41.png" alt=""></p>
<ul>
<li><p>登录mysql （连接远程数据库，默认端口号：3306）</p>
<ul>
<li><p>远程连接</p>
<pre><code>mysql -h主机地址 -u用户名 －p用户密码
</code></pre></li>
<li><p>登录mysql （连接本地数据库）</p>
<pre><code>mysql -u root -p
输入密码
</code></pre></li>
</ul>
</li>
<li><p>登录后，修改密码</p>
<pre><code>SET PASSWORD FOR &apos;root&apos;@&apos;localhost&apos; = PASSWORD(&apos;新密码&apos;);
</code></pre></li>
<li><p>开启/关闭 - 手动</p>
<pre><code>`系统偏好设置` -&gt; `mysql`
</code></pre></li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-01%2009.54.09.png" alt=""></p>
<ul>
<li><p>修改mysql编码</p>
<p>查看编码 默认设置：</p>
<pre><code>mysql&gt; show variables like &apos;%char%&apos;;
+--------------------------+-----------------------------------------------------------+
| Variable_name            | Value                                                     |
+--------------------------+-----------------------------------------------------------+
| character_set_client     | utf8                                                      |
| character_set_connection | utf8                                                      |
| character_set_database   | latin1                                                    |
| character_set_filesystem | binary                                                    |
| character_set_results    | utf8                                                      |
| character_set_server     | latin1                                                    |
| character_set_system     | utf8                                                      |
| character_sets_dir       | /usr/local/mysql-5.7.20-macos10.12-x86_64/share/charsets/ |
+--------------------------+-----------------------------------------------------------+
8 rows in set (0.01 sec)
</code></pre></li>
<li><p>修改</p>
</li>
</ul>
<p>在目录：<code>/usr/local/mysql/support-files</code>下找里面有没有<code>my-default.cnf</code>或<code>my.cnf</code>文件.</p>
<ul>
<li><p>如果有则直接打开添加:</p>
<p> 在<code>[client]</code>在下面添加</p>
<pre><code>default-character-set=utf8 默认字符集为utf8 
</code></pre><p> 在<code>[mysqld]</code> 添加 </p>
<pre><code>default-character-set=utf8 默认字符集为utf8 
</code></pre><p> 设定连接mysql数据库时使用utf8编码，以让mysql数据库为<code>utf8</code>运行</p>
<pre><code>init_connect=&apos;SET NAMES utf8&apos;     
</code></pre></li>
</ul>
<ul>
<li><p>若是没有在<code>/etc</code>下新建<code>my.cnf</code>。执行命令：</p>
<pre><code>$ cd /etc
$ sudo vim my.cnf 
</code></pre></li>
</ul>
<p>将 本文 <code>附录</code>内容粘贴到文件中后，保存退出即可。<br><strong>注意：修改完编码后要 退出之后再次进入 才能生效</strong><br>修改之后的编码设置</p>
<pre><code>mysql&gt; show variables like &apos;%char%&apos;;
+--------------------------+-----------------------------------------------------------+
| Variable_name            | Value                                                     |
+--------------------------+-----------------------------------------------------------+
| character_set_client     | utf8                                                      |
| character_set_connection | utf8                                                      |
| character_set_database   | utf8                                                      |
| character_set_filesystem | binary                                                    |
| character_set_results    | utf8                                                      |
| character_set_server     | utf8                                                      |
| character_set_system     | utf8                                                      |
| character_sets_dir       | /usr/local/mysql-5.7.20-macos10.12-x86_64/share/charsets/ |
+--------------------------+-----------------------------------------------------------+
8 rows in set (0.00 sec)
</code></pre><h1 id="卸载MySQL"><a href="#卸载MySQL" class="headerlink" title="卸载MySQL"></a>卸载MySQL</h1><pre><code>sudo rm /usr/local/mysql
sudo rm -rf /usr/local/mysql*
sudo rm -rf /Library/StartupItems/MySQLCOM
sudo rm -rf /Library/PreferencePanes/My*
vim /etc/hostconfig  (and removed the line MYSQLCOM=-YES-)
rm -rf ~/Library/PreferencePanes/My*
sudo rm -rf /Library/Receipts/mysql*
sudo rm -rf /Library/Receipts/MySQL*
sudo rm -rf /var/db/receipts/com.mysql.*
</code></pre><h1 id="MySQL操作命令"><a href="#MySQL操作命令" class="headerlink" title="MySQL操作命令"></a>MySQL操作命令</h1><blockquote>
<p>命令操作参考：<a href="http://www.cnblogs.com/zhangzhu/archive/2013/07/04/3172486.html" target="_blank" rel="external">http://www.cnblogs.com/zhangzhu/archive/2013/07/04/3172486.html</a><br>命令操作参考：<a href="http://blog.csdn.net/qi49125/article/details/77887100" target="_blank" rel="external">http://blog.csdn.net/qi49125/article/details/77887100</a></p>
</blockquote>
<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><ul>
<li><p>查看版本号</p>
<pre><code>select version();
</code></pre></li>
<li><p>查询所有数据库</p>
<pre><code>show database;
</code></pre></li>
<li><p>使用数据库</p>
<pre><code>use 数据库名称
</code></pre></li>
<li><p>创建数据库</p>
<pre><code>create database 数据库名
</code></pre></li>
<li><p>删除数据库</p>
<pre><code>drop database 数据库名
</code></pre></li>
</ul>
<h2 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h2><h3 id="外部数据库-导入"><a href="#外部数据库-导入" class="headerlink" title="外部数据库 导入"></a>外部数据库 导入</h3><ul>
<li><p>登录</p>
<pre><code>mysql -u root -p;
</code></pre></li>
<li><p>选择数据库</p>
<pre><code>use databaseName;
</code></pre></li>
<li><p>将外部的<code>.sql</code>文件拖入终端中 <code>source</code> 命令后面，然后回车</p>
<pre><code>source 拖如.sql文件;
</code></pre></li>
</ul>
<h3 id="内部数据库-导出"><a href="#内部数据库-导出" class="headerlink" title="内部数据库 导出"></a>内部数据库 导出</h3><ul>
<li><p>在终端中，要进入存储文件的目录，然后再执行导出操作</p>
<pre><code>cd 待存文件的目录
</code></pre></li>
<li><p>导出MySQL中的所有数据库（结构+数据）</p>
<pre><code>mysqldump -u root -p --all-databases &gt; dafadf00.sql;
</code></pre></li>
<li><p>导出MySQL中的单个数据库（结构+数据）</p>
<pre><code>mysqldump -u root -p database_name &gt; sql_name.sql
</code></pre></li>
<li><p>导出单个数据库中的单张表，导出命令中加了一个表名（结构+数据）</p>
<pre><code>mysqldump -u root -p database_name table_name &gt; sql_name.sql
</code></pre></li>
<li><p>导出数据库的结构 （仅结构）</p>
<pre><code>mysqldump -u root -p --add-drop-table temp &gt; /Users/yannischeng/Desktop/outfile_name.sql    
</code></pre></li>
<li><p>导出查询数据结果到指定文件</p>
<blockquote>
<p>参考：<a href="http://blog.csdn.net/u011677147/article/details/64129606" target="_blank" rel="external">http://blog.csdn.net/u011677147/article/details/64129606</a></p>
</blockquote>
</li>
</ul>
<p>在做mysql导出数据的时候，遇到的问题如下：</p>
<pre><code>ERROR 1290 (HY000): The MySQL server is running with the --secure-file-priv option so it cannot execute this statement
</code></pre><p>mysql 默认对导出的目录有权限限制，也就是说使用命令行进行导出的时候，需要指定目录进行操作。解决方法：</p>
<ul>
<li><p>查询mysql 的<code>secure_file_priv</code>配置，使用命令行： </p>
<pre><code>show global variables like &apos;%secure%&apos;;  
</code></pre><p>  查询结果</p>
<pre><code>secure_file_prive=null   -- 限制mysqld 不允许导入导出
secure_file_priv=/tmp/   -- 限制mysqld的导入导出只能发生在/tmp/目录下
secure_file_priv=&apos; &apos;         -- 不对mysqld 的导入 导出做限制
</code></pre></li>
<li><p>更改secure_file_pri的值：</p>
<pre><code>/usr/local/mysql/support-files中的my-default.cnf配置文件，就把它复制到/private/etc中，重命名为“my.cnf”，并加入secure_file_priv=&apos;&apos;，重启mysql服务器即可。        
</code></pre></li>
<li><p>使用 into outfile 开始导出：</p>
<pre><code>select * from table_name into outfile &apos;/Users/yannischeng/Desktop/NewFile.txt&apos;  FIELDS TERMINATED BY &apos;,&apos; OPTIONALLY ENCLOSED BY &apos;&quot;&apos; LINES TERMINATED BY &apos;\n&apos;;
</code></pre><p>  因为导出的数据会出现一些乱码或者特殊字符，所以使用以上关键字进行转义。</p>
</li>
<li><p>出现问题</p>
<pre><code>ERROR 1 (HY000): Can&apos;t create/write to file &apos;/Users/yannischeng/Desktop/NewFile.txt&apos; (Errcode: 13 - Permission denied
</code></pre></li>
<li><p>表操作</p>
<pre><code>use 数据库名;
</code></pre></li>
<li><p>删除表</p>
<pre><code>drop table 表名;
</code></pre></li>
<li><p>删除表中数据</p>
<pre><code>delete from 表名,……，…… where 表达式;
</code></pre></li>
<li><p>显示当前数据库的表</p>
<pre><code>show tables;
</code></pre></li>
<li><p>显示表的数据结构</p>
<pre><code>describe 表名;
</code></pre></li>
</ul>
<p>或者</p>
<pre><code>desc 表名;
</code></pre><p>或者</p>
<pre><code>show columns from 表名;    
</code></pre><ul>
<li><p>创建表    </p>
<pre><code>mysql&gt; create table student(
-&gt; id int(4) not null primary key auto_increment,
-&gt; name char(20) not null,
-&gt; age int(4) not null,
-&gt; address char(100),
-&gt; other varchar(100) default &quot;null&quot;);
</code></pre></li>
<li><p>rename 修改表名</p>
<pre><code>alter table 旧表名 rename 新表名;
</code></pre></li>
</ul>
<p>或者</p>
<pre><code>rename table 原表名  新表名;
</code></pre><ul>
<li><p>修改表结构：增（add）、删（drop）、改（modify）、重命名（change）: 可通过<code>after 字段名、first</code>精确控制添加的位置。</p>
</li>
<li><p>add 增加字段 </p>
<pre><code>alter table 表名 add 字段名 字段设置 字段位置;
</code></pre></li>
<li><p>modify 修改字段</p>
<pre><code>alter table 表名 modify 字段名 字段设置 字段位置;
</code></pre></li>
<li><p>change 重命名字段</p>
<pre><code>alter table 表名 change 旧字段名 新字段名 字段设置;
</code></pre></li>
<li><p>drop 删除字段</p>
<pre><code>alter table 表名 drop 字段名;
</code></pre></li>
</ul>
<h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><p> <strong>增</strong></p>
<ul>
<li><p>单条数据</p>
<pre><code>insert into student (,&apos;yannis&apos;, 25, &apos;tianjin&apos;, &apos;good&apos;);
</code></pre></li>
<li><p>多条数据</p>
<pre><code>insert into student values (13,&apos;tom&apos;, 25, &apos;tianjin&apos;, &apos;good&apos;),(21,&apos;jack&apos;, 25, &apos;tianjin&apos;, &apos;good&apos;);
</code></pre></li>
<li><p>指定字段插入数据</p>
<pre><code>insert into 表名 (字段名) values (&apos;数值&apos;);
</code></pre></li>
<li><p>删</p>
<pre><code>delete from 表名 where 条件;
</code></pre></li>
<li><p>改</p>
<pre><code>update 表名 set name=&apos;marry&apos; where id=13;
</code></pre></li>
<li><p>查</p>
<pre><code>查询数据完整语法

select [distinct][统计函数] 字段名/*
from  数据源
[where 条件子句]
[group by 子句]
[having 子句]
[order by 子句]
[limit 子句];
</code></pre></li>
<li><p><code>distinct</code> ：去重复    </p>
</li>
<li><p><code>统计函数</code> ：</p>
<pre><code>Count()： 统计分组后的记录数，每一相同的组有多少行记录
Max()：   统计每组最大的值
Min()：   统计每组最小的值
Avg()：   统计每组的平均值
Sum()：   统计每组的和
</code></pre></li>
<li><p><code>where</code> ：条件</p>
</li>
<li><code>group by 字段</code> ：分组。根据某个字段进行分组，相同的放一组，不同的分到不同的组。统计的是数据，不是记录。</li>
<li><p><code>having 子句</code> ：与where子句一样进行条件判断，<strong>为什么是group by……having…… 而不是group by……where?</strong></p>
<p>  因为：<strong>进行数据统计时，是数据进入内存之后，会进行分组 -&gt; 统计 -&gt; having条件判断。而where是针对从磁盘读取数据时进行判断，此刻还没分组，进行统计就判断了。所以错误！</strong></p>
</li>
<li><p><code>order by 子句</code> ：order by根据某个字段进行<code>升序</code>或<code>降序</code>排序，基本语法： </p>
</li>
<li><p><code>order by</code> 字段名 [asc/desc];  </p>
<p>  asc升序 可不写   desc降序</p>
</li>
<li><p><code>limit 子句</code> ：是一种限制结果的语句。</p>
<p>  1）用来限制数量<br>  2) 限制起始位置  limit 起始位置，长度。分页常用。</p>
</li>
<li><p><code>内连接</code>，<code>外连接</code>，<code>自然连接</code>，<code>交叉连接</code></p>
<p>  内连接：从左表中取出每一条记录，和右表中所有的记录进行匹配，匹配必须是左表中与右表中某个条件相同，最终会保留结果，否则不保留。<br>基本语法：  左表 [inner] join 右表  on 左表.字段 = 右表.字段;</p>
<pre><code>select * from my_student inner join my_class on my_student.C_id = mu_class.id;
</code></pre><p>  左外连接：左表为主，然后每条记录与右表进行连接，不管能不能匹配的上，左表都会保留。能匹配，右表某条记录保留，不能匹配，某条记录置为NULL，最终记录数至少不少于左表已有的记录。<br>基本语法：  左表  left join  右表  on  左表.字段 = 右表.字段;</p>
</li>
<li><p>当前时间：</p>
<pre><code>select now();    
</code></pre></li>
</ul>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><pre><code># Example MySQL config file for medium systems. 
# 
# This is for a system with little memory (32M - 64M) where MySQL plays 
# an important part, or systems up to 128M where MySQL is used together with 
# other programs (such as a web server) 
# 
# MySQL programs look for option files in a set of 
# locations which depend on the deployment platform. 
# You can copy this option file to one of those 
# locations. For information about these locations, see: 
# http://dev.mysql.com/doc/mysql/en/option-files.html 
# 
# In this file, you can use all long options that a program supports. 
# If you want to know which options a program supports, run the program 
# with the &quot;--help&quot; option. 
# The following options will be passed to all MySQL clients 
[client]
default-character-set=utf8
#password = your_password 
port = 3306 
socket = /tmp/mysql.sock 
# Here follows entries for some specific programs 
# The MySQL server 
[mysqld]
character-set-server=utf8
init_connect=&apos;SET NAMES utf8
port = 3306 
socket = /tmp/mysql.sock 
skip-external-locking 
key_buffer_size = 16M 
max_allowed_packet = 1M 
table_open_cache = 64 
sort_buffer_size = 512K 
net_buffer_length = 8K 
read_buffer_size = 256K 
read_rnd_buffer_size = 512K 
myisam_sort_buffer_size = 8M 
character-set-server=utf8 
init_connect=&apos;SET NAMES utf8&apos; 
# Don&apos;t listen on a TCP/IP port at all. This can be a security enhancement, 
# if all processes that need to connect to mysqld run on the same host. 
# All interaction with mysqld must be made via Unix sockets or named pipes. 
# Note that using this option without enabling named pipes on Windows 
# (via the &quot;enable-named-pipe&quot; option) will render mysqld useless! 
# 
#skip-networking

# Replication Master Server (default) 
# binary logging is required for replication 
log-bin=mysql-bin

# binary logging format - mixed recommended 
binlog_format=mixed

# required unique id between 1 and 2^32 - 1 
# defaults to 1 if master-host is not set 
# but will not function as a master if omitted 
server-id = 1

# Replication Slave (comment out master section to use this) 
# 
# To configure this host as a replication slave, you can choose between 
# two methods : 
# 
# 1) Use the CHANGE MASTER TO command (fully described in our manual) - 
# the syntax is: 
# 
# CHANGE MASTER TO MASTER_HOST=&lt;host&gt;, MASTER_PORT=&lt;port&gt;, 
# MASTER_USER=&lt;user&gt;, MASTER_PASSWORD=&lt;password&gt; ; 
# 
# where you replace &lt;host&gt;, &lt;user&gt;, &lt;password&gt; by quoted strings and 
# &lt;port&gt; by the master&apos;s port number (3306 by default). 
# 
# Example: 
# 
# CHANGE MASTER TO MASTER_HOST=&apos;125.564.12.1&apos;, MASTER_PORT=3306, 
# MASTER_USER=&apos;joe&apos;, MASTER_PASSWORD=&apos;secret&apos;; 
# 
# OR 
# 
# 2) Set the variables below. However, in case you choose this method, then 
# start replication for the first time (even unsuccessfully, for example 
# if you mistyped the password in master-password and the slave fails to 
# connect), the slave will create a master.info file, and any later 
# change in this file to the variables&apos; values below will be ignored and 
# overridden by the content of the master.info file, unless you shutdown 
# the slave server, delete master.info and restart the slaver server. 
# For that reason, you may want to leave the lines below untouched 
# (commented) and instead use CHANGE MASTER TO (see above) 
# 
# required unique id between 2 and 2^32 - 1 
# (and different from the master) 
# defaults to 2 if master-host is set 
# but will not function as a slave if omitted 
#server-id = 2 
# 
# The replication master for this slave - required 
#master-host = &lt;hostname&gt; 
# 
# The username the slave will use for authentication when connecting 
# to the master - required 
#master-user = &lt;username&gt; 
# 
# The password the slave will authenticate with when connecting to 
# the master - required 
#master-password = &lt;password&gt; 
# 
# The port the master is listening on. 
# optional - defaults to 3306 
#master-port = &lt;port&gt; 
# 
# binary logging - not required for slaves, but recommended 
#log-bin=mysql-bin

# Uncomment the following if you are using InnoDB tables 
#innodb_data_home_dir = /usr/local/mysql/data 
#innodb_data_file_path = ibdata1:10M:autoextend 
#innodb_log_group_home_dir = /usr/local/mysql/data 
# You can set .._buffer_pool_size up to 50 - 80 % 
# of RAM but beware of setting memory usage too high 
#innodb_buffer_pool_size = 16M 
#innodb_additional_mem_pool_size = 2M 
# Set .._log_file_size to 25 % of buffer pool size 
#innodb_log_file_size = 5M 
#innodb_log_buffer_size = 8M 
#innodb_flush_log_at_trx_commit = 1 
#innodb_lock_wait_timeout = 50

[mysqldump] 
quick 
max_allowed_packet = 16M

[mysql] 
no-auto-rehash 
# Remove the next comment character if you are not familiar with SQL 
#safe-updates 
default-character-set=utf8

[myisamchk] 
key_buffer_size = 20M 
sort_buffer_size = 20M 
read_buffer = 2M 
write_buffer = 2M

[mysqlhotcopy] 
interactive-timeout
</code></pre>]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3 16-安装爬虫工具Scrapy]]></title>
      <url>/Python3%20%2016-%E5%AE%89%E8%A3%85%E7%88%AC%E8%99%AB%E5%B7%A5%E5%85%B7Scrapy/</url>
      <content type="html"><![CDATA[<p><strong>人生苦短，我用python。</strong></p>
<a id="more"></a>
<p>[TOC]</p>
<p>安装Scrapy需要使用到：pip（python2）、pip3（python3），由于之前已经安装，此处忽略。</p>
<p><strong>平台：Mac</strong><br><strong>python2 pip</strong><br><strong>python3 pip3</strong></p>
<h1 id="使用pip进行安装"><a href="#使用pip进行安装" class="headerlink" title="使用pip进行安装"></a>使用pip进行安装</h1><p><strong>注意：安装过程还是比较曲折的 (〒︿〒)</strong></p>
<pre><code>sudo pip install scrapy
</code></pre><p><strong>错误 - 1 ：</strong></p>
<pre><code>Found existing installation: six 1.4.1
DEPRECATION: Uninstalling a distutils installed project (six) has been deprecated and will be removed in a future version. This is due to the fact that uninstalling a distutils project will only partially uninstall the project.
Uninstalling six-1.4.1:
...
OSError: [Errno 1] Operation not permitted: &apos;/tmp/pip-89wTP6-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/six-1.4.1-py2.7.egg-info&apos;
</code></pre><p>根据网上得出的解决方案：</p>
<p>重启电脑，按住 <code>option</code> 键，–&gt; 再按 <code>command + r</code> 进入 <code>Recovery</code>模式 –&gt; <code>工具</code>选择<code>终端</code><br>输入：</p>
<pre><code>csrutil disable
</code></pre><p>然后</p>
<pre><code>reboot
</code></pre><p>再次执行</p>
<pre><code>sudo pip install Scrapy
</code></pre><p>进行安装，结果依然出错。<br><strong>错误 - 2 ：</strong></p>
<pre><code> Found existing installation: six 1.4.1
DEPRECATION: Uninstalling a distutils installed project (six) has been deprecated and will be     removed in a future version. This is due to the fact that uninstalling a distutils project will only     partially uninstall the project.
Uninstalling six-1.4.1:
  Successfully uninstalled six-1.4.1

  Running setup.py install for PyDispatcher ... done
  Running setup.py install for Twisted ... done
</code></pre><p>  <strong>注意：</strong></p>
<pre><code>Running setup.py install for PyDispatcher ... done
Running setup.py install for Twisted ... done
</code></pre><p>因为未安装 以上两个，导致 Scrapy未能安装成功。<strong>错误描述为：</strong></p>
<pre><code>AttributeError: &apos;module&apos; object has no attribute &apos;OP_NO_TLSv1_1&apos;
</code></pre><p>安装 <code>twisted</code></p>
<pre><code>$ pip install twisted==15.4.0
</code></pre><p><strong>仍然报错 - 3 ：</strong></p>
<pre><code>AttributeError: &apos;module&apos; object has no attribute &apos;OP_NO_TLSv1_1&apos;
</code></pre><p>更新<code>pyOpenSSl</code></p>
<pre><code>sudo pip install --upgrade pyOpenSSl
</code></pre><p>最终出现：</p>
<pre><code>Successfully uninstalled pyOpenSSL-0.13.1
Successfully installed asn1crypto-0.23.0 cffi-1.11.2 cryptography-2.1.2 enum34-1.1.6 idna-2.6 ipaddress-1.0.18 pyOpenSSl-17.3.0 pycparser-2.18
</code></pre><p>然后输入：</p>
<pre><code>scrapy version
</code></pre><p>出现结果：</p>
<pre><code>Scrapy 1.4.0
</code></pre><p><strong>安装成功！</strong></p>
<h1 id="使用pip3进行安装"><a href="#使用pip3进行安装" class="headerlink" title="使用pip3进行安装"></a>使用pip3进行安装</h1><blockquote>
<p>参考：<a href="http://www.jianshu.com/p/d00a19f6c4ed" target="_blank" rel="external">http://www.jianshu.com/p/d00a19f6c4ed</a></p>
</blockquote>
<p><strong>提示：在使用 pip3 进行安装时，首先应该执行以下步骤：</strong></p>
<pre><code>sudo -s pip3 install --ignore-installed six
</code></pre><p>否则报错：</p>
<pre><code>PermissionError: [Errno 13] Permission denied: &apos;/usr/local/Cellar/python3/3.6.1/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/six.py&apos;
</code></pre><p>然后执行：</p>
<pre><code>sudo -s pip3 install scrapy
</code></pre><p>结果：</p>
<pre><code>Installing collected packages: cssselect, queuelib, w3lib, PyDispatcher, lxml, parsel, idna, pycparser, cffi, asn1crypto, cryptography, pyOpenSSL, pyasn1, attrs, pyasn1-modules, service-identity, hyperlink, incremental, zope.interface, Automat, constantly, Twisted, scrapy
Successfully installed Automat-0.6.0 PyDispatcher-2.0.5 Twisted-17.9.0 asn1crypto-0.23.0 attrs-17.2.0 cffi-1.11.2 constantly-15.1.0 cryptography-2.1.2 cssselect-1.0.1 hyperlink-17.3.1 idna-2.6 incremental-17.5.0 lxml-4.1.0 parsel-1.2.0 pyOpenSSL-17.3.0 pyasn1-0.3.7 pyasn1-modules-0.1.5 pycparser-2.18 queuelib-1.4.2 scrapy-1.4.0 service-identity-17.0.0 w3lib-1.18.0 zope.interface-4.4.3
</code></pre><p><strong>验证：</strong></p>
<pre><code>YannisCheng:source yannischeng$ python3
Python 3.6.1 (default, Apr  4 2017, 09:40:21) 
[GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.38)] on darwin
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; import scrapy
&gt;&gt;&gt; 
</code></pre><p><strong>安装成功</strong></p>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio 使用快人一步2 快捷键]]></title>
      <url>/Android-Studio%E4%BD%BF%E7%94%A8%E5%BF%AB%E4%BA%BA%E4%B8%80%E6%AD%A52%20%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<p>键盘快捷键</p>
<a id="more"></a>
<blockquote>
<p>快捷键参考：<a href="https://developer.android.google.cn/studio/intro/keyboard-shortcuts.html" target="_blank" rel="external">https://developer.android.google.cn/studio/intro/keyboard-shortcuts.html</a><br><strong>Android Studio使用指南</strong>：<a href="https://developer.android.google.cn/studio/projects/android-library.html" target="_blank" rel="external">https://developer.android.google.cn/studio/projects/android-library.html</a></p>
</blockquote>
<p>[TOC]</p>
<h1 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h1><table>
<thead>
<tr>
<th style="text-align:left">说明</th>
<th style="text-align:left">Windows/Linux</th>
<th style="text-align:left">Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">全部保存</td>
<td style="text-align:left">Control + S</td>
<td style="text-align:left">Command + S</td>
</tr>
<tr>
<td style="text-align:left">同步</td>
<td style="text-align:left">Control + Alt + Y</td>
<td style="text-align:left">Command + Option + Y</td>
</tr>
<tr>
<td style="text-align:left">最大化/最小化编辑器</td>
<td style="text-align:left">Control + Shift + F12</td>
<td style="text-align:left">Control + Command + F12</td>
</tr>
<tr>
<td style="text-align:left">添加到收藏夹</td>
<td style="text-align:left">Alt + Shift + F</td>
<td style="text-align:left">Option + Shift + F</td>
</tr>
<tr>
<td style="text-align:left">使用当前配置文件检查当前文件</td>
<td style="text-align:left">Alt + Shift + I</td>
<td style="text-align:left">Option + Shift + I</td>
</tr>
<tr>
<td style="text-align:left">快速切换模式</td>
<td style="text-align:left">Control +  （反引号）</td>
<td style="text-align:left">Control + `（反引号）</td>
</tr>
<tr>
<td style="text-align:left">打开设置对话框</td>
<td style="text-align:left">Control + Alt + S</td>
<td style="text-align:left">Command + ,（英文逗号）</td>
</tr>
<tr>
<td style="text-align:left">打开项目结构对话框</td>
<td style="text-align:left">Control + Alt + Shift + S</td>
<td style="text-align:left">Command + ;（英文分号）</td>
</tr>
<tr>
<td style="text-align:left">在标签和工具窗口之间切换</td>
<td style="text-align:left">Control + Tab</td>
<td style="text-align:left">Control + Tab</td>
</tr>
</tbody>
</table>
<h1 id="在-Studio-内导航和搜索"><a href="#在-Studio-内导航和搜索" class="headerlink" title="在 Studio 内导航和搜索"></a>在 Studio 内导航和搜索</h1><table>
<thead>
<tr>
<th style="text-align:left">说明</th>
<th style="text-align:left">Windows/Linux</th>
<th style="text-align:left">Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">搜索全部内容（包括代码和菜单）</td>
<td style="text-align:left">按两次 Shift</td>
<td style="text-align:left">按两次 Shift</td>
</tr>
<tr>
<td style="text-align:left">查找</td>
<td style="text-align:left">Control + F</td>
<td style="text-align:left">Command + F</td>
</tr>
<tr>
<td style="text-align:left">查找下一个</td>
<td style="text-align:left">F3</td>
<td style="text-align:left">Command + G</td>
</tr>
<tr>
<td style="text-align:left">查找上一个</td>
<td style="text-align:left">Shift + F3</td>
<td style="text-align:left">Command + Shift + G</td>
</tr>
<tr>
<td style="text-align:left">替换</td>
<td style="text-align:left">Control + R</td>
<td style="text-align:left">Command + R</td>
</tr>
<tr>
<td style="text-align:left">查找操作</td>
<td style="text-align:left">Control + Shift + A</td>
<td style="text-align:left">Command + Shift + A</td>
</tr>
<tr>
<td style="text-align:left">按符号名称搜索</td>
<td style="text-align:left">Control + Alt + Shift + N</td>
<td style="text-align:left">Command + Option + O</td>
</tr>
<tr>
<td style="text-align:left">查找类</td>
<td style="text-align:left">Control + N</td>
<td style="text-align:left">Command + O</td>
</tr>
<tr>
<td style="text-align:left">查找文件（而不是类）</td>
<td style="text-align:left">Control + Shift + N</td>
<td style="text-align:left">Command + Shift + O</td>
</tr>
<tr>
<td style="text-align:left">在路径中查找</td>
<td style="text-align:left">Control + Shift + F</td>
<td style="text-align:left">Command + Shift + F</td>
</tr>
<tr>
<td style="text-align:left">打开文件结构弹出式菜单</td>
<td style="text-align:left">Control + F12</td>
<td style="text-align:left">Command + F12</td>
</tr>
<tr>
<td style="text-align:left">在打开的编辑器标签之前导航</td>
<td style="text-align:left">Alt + 向右/向左箭头</td>
<td style="text-align:left">Control + 向右/向左箭头</td>
</tr>
<tr>
<td style="text-align:left">跳到源代码</td>
<td style="text-align:left">F4 / Control + Enter</td>
<td style="text-align:left">F4 / Command + 向下箭头</td>
</tr>
<tr>
<td style="text-align:left">在新窗口中打开当前编辑器标签</td>
<td style="text-align:left">Shift + F4</td>
<td style="text-align:left">Shift + F4</td>
</tr>
<tr>
<td style="text-align:left">最近打开的文件弹出式菜单</td>
<td style="text-align:left">Control + E</td>
<td style="text-align:left">Command + E</td>
</tr>
<tr>
<td style="text-align:left">最近编辑的文件弹出式菜单</td>
<td style="text-align:left">Control + Shift + E</td>
<td style="text-align:left">Command + Shift + E</td>
</tr>
<tr>
<td style="text-align:left">转到上一个编辑位置</td>
<td style="text-align:left">Control + Shift + 退格键</td>
<td style="text-align:left">Command + Shift + 退格键</td>
</tr>
<tr>
<td style="text-align:left">关闭活动编辑器标签</td>
<td style="text-align:left">Control + F4</td>
<td style="text-align:left">Command + W</td>
</tr>
<tr>
<td style="text-align:left">从工具窗口返回到编辑器窗口</td>
<td style="text-align:left">Esc</td>
<td style="text-align:left">Esc</td>
</tr>
<tr>
<td style="text-align:left">隐藏活动或上一个活动工具窗口</td>
<td style="text-align:left">Shift + Esc</td>
<td style="text-align:left">Shift + Esc</td>
</tr>
<tr>
<td style="text-align:left">转到行</td>
<td style="text-align:left">Control + G</td>
<td style="text-align:left">Command + L</td>
</tr>
<tr>
<td style="text-align:left">打开类型层次结构</td>
<td style="text-align:left">Control + H</td>
<td style="text-align:left">Control + H</td>
</tr>
<tr>
<td style="text-align:left">打开方法层次结构</td>
<td style="text-align:left">Control + Shift + H</td>
<td style="text-align:left">Command + Shift + H</td>
</tr>
<tr>
<td style="text-align:left">打开调用层次结构</td>
<td style="text-align:left">Control + Alt + H</td>
<td style="text-align:left">Control + Option + H</td>
<td>s</td>
</tr>
</tbody>
</table>
<h1 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h1><table>
<thead>
<tr>
<th style="text-align:left">说明</th>
<th style="text-align:left">Windows/Linux</th>
<th style="text-align:left">Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">生成代码（getter、setter、构造函数、hashCode/equals、toString、新文件、新类）</td>
<td style="text-align:left">Alt + Insert</td>
<td style="text-align:left">Command + N</td>
</tr>
<tr>
<td style="text-align:left">替换方法</td>
<td style="text-align:left">Control + O</td>
<td style="text-align:left">Control + O</td>
</tr>
<tr>
<td style="text-align:left">实现方法</td>
<td style="text-align:left">Control + I</td>
<td style="text-align:left">Control + I</td>
</tr>
<tr>
<td style="text-align:left">控制语句 (if…else / try…catch / etc.)</td>
<td style="text-align:left">Control + Alt + T</td>
<td style="text-align:left">Command + Option + T</td>
</tr>
<tr>
<td style="text-align:left">删除插入符处的行</td>
<td style="text-align:left">Control + Y</td>
<td style="text-align:left">Command + 退格键</td>
</tr>
<tr>
<td style="text-align:left">折叠/展开当前代码块</td>
<td style="text-align:left">Control + 减号/加号</td>
<td style="text-align:left">Command + 减号/加号</td>
</tr>
<tr>
<td style="text-align:left">折叠/展开所有代码块</td>
<td style="text-align:left">Control + Shift + 减号/加号</td>
<td style="text-align:left">Command + Shift + 减号/加号</td>
</tr>
<tr>
<td style="text-align:left">复制当前行或选择</td>
<td style="text-align:left">Control + D</td>
<td style="text-align:left">Command + D</td>
</tr>
<tr>
<td style="text-align:left">基本代码自动完成</td>
<td style="text-align:left">Control + 空格键</td>
<td style="text-align:left">Control + 空格键</td>
</tr>
<tr>
<td style="text-align:left">智能代码自动完成（按预期类型过滤方法和变量列表）</td>
<td style="text-align:left">Control + Shift + 空格键</td>
<td style="text-align:left">Control + Shift + 空格键</td>
</tr>
<tr>
<td style="text-align:left">完成语句</td>
<td style="text-align:left">Control + Shift + Enter</td>
<td style="text-align:left">Command + Shift + Enter</td>
</tr>
<tr>
<td style="text-align:left">快速文档查找</td>
<td style="text-align:left">Control + Q</td>
<td style="text-align:left">Control + J</td>
</tr>
<tr>
<td style="text-align:left">显示选定方法的参数</td>
<td style="text-align:left">Control + P</td>
<td style="text-align:left">Command + P</td>
</tr>
<tr>
<td style="text-align:left">转到声明（直接）</td>
<td style="text-align:left">Control + B 或 Control + 点击</td>
<td style="text-align:left">Command + B 或 Command + 点击</td>
</tr>
<tr>
<td style="text-align:left">转到实现</td>
<td style="text-align:left">Control + Alt + B</td>
<td style="text-align:left">Command + Alt + B</td>
</tr>
<tr>
<td style="text-align:left">转到超类方法/超类</td>
<td style="text-align:left">Control + U</td>
<td style="text-align:left">Command + U</td>
</tr>
<tr>
<td style="text-align:left">打开快速定义查找</td>
<td style="text-align:left">Control + Shift + I</td>
<td style="text-align:left">Command + Y</td>
</tr>
<tr>
<td style="text-align:left">切换项目工具窗口的可见性</td>
<td style="text-align:left">Alt + 1</td>
<td style="text-align:left">Command + 1</td>
</tr>
<tr>
<td style="text-align:left">切换书签</td>
<td style="text-align:left">F11</td>
<td style="text-align:left">F3</td>
</tr>
<tr>
<td style="text-align:left">通过助记切换书签</td>
<td style="text-align:left">Control + F11</td>
<td style="text-align:left">Option + F3</td>
</tr>
<tr>
<td style="text-align:left">通过行注释添加注释/取消注释</td>
<td style="text-align:left">Control + /</td>
<td style="text-align:left">Command + /</td>
</tr>
<tr>
<td style="text-align:left">通过块注释添加注释/取消注释</td>
<td style="text-align:left">Control + Shift + /</td>
<td style="text-align:left">Command + Shift + /</td>
</tr>
<tr>
<td style="text-align:left">选择连续增加的代码块</td>
<td style="text-align:left">Control + W</td>
<td style="text-align:left">Option + Up</td>
</tr>
<tr>
<td style="text-align:left">将当前选择退回到上一个状态</td>
<td style="text-align:left">Control + Shift + W</td>
<td style="text-align:left">Option + Down</td>
</tr>
<tr>
<td style="text-align:left">移动到代码块起始位置</td>
<td style="text-align:left">Control + [</td>
<td style="text-align:left">Option + Command + [</td>
</tr>
<tr>
<td style="text-align:left">移动到代码块结束位置</td>
<td style="text-align:left">Control + ]</td>
<td style="text-align:left">Option + Command + ]</td>
</tr>
<tr>
<td style="text-align:left">从当前位置选择到代码块起始位置</td>
<td style="text-align:left">Control + Shift + [</td>
<td style="text-align:left">Option + Command + Shift + [</td>
</tr>
<tr>
<td style="text-align:left">从当前位置选择到代码块结束位置</td>
<td style="text-align:left">Control + Shift + ]</td>
<td style="text-align:left">Option + Command + Shift + ]</td>
</tr>
<tr>
<td style="text-align:left">从当前位置删除到单词结尾</td>
<td style="text-align:left">Control + Delete</td>
<td style="text-align:left">Option + Delete</td>
</tr>
<tr>
<td style="text-align:left">从当前位置删除到单词开头</td>
<td style="text-align:left">Control + 退格键</td>
<td style="text-align:left">Option + 退格键</td>
</tr>
<tr>
<td style="text-align:left">优化导入</td>
<td style="text-align:left">Control + Alt + O</td>
<td style="text-align:left">Control + Option + O</td>
</tr>
<tr>
<td style="text-align:left">项目快速修复（显示意图操作和快速修复）</td>
<td style="text-align:left">Alt + Enter</td>
<td style="text-align:left">Option + Enter</td>
</tr>
<tr>
<td style="text-align:left">重新格式化代码</td>
<td style="text-align:left">Control + Alt + L</td>
<td style="text-align:left">Command + Option + L</td>
</tr>
<tr>
<td style="text-align:left">自动缩进行</td>
<td style="text-align:left">Control + Alt + I</td>
<td style="text-align:left">Control + Option + I</td>
</tr>
<tr>
<td style="text-align:left">缩进/取消缩进行</td>
<td style="text-align:left">Tab/Shift + Tab</td>
<td style="text-align:left">Tab/Shift + Tab</td>
</tr>
<tr>
<td style="text-align:left">智能行合并</td>
<td style="text-align:left">Control + Shift + J</td>
<td style="text-align:left">Control + Shift + J</td>
</tr>
<tr>
<td style="text-align:left">智能行拆分</td>
<td style="text-align:left">Control + Enter</td>
<td style="text-align:left">Command + Enter</td>
</tr>
<tr>
<td style="text-align:left">开始新行</td>
<td style="text-align:left">Shift + Enter</td>
<td style="text-align:left">Shift + Enter</td>
</tr>
<tr>
<td style="text-align:left">下一个/上一个突出显示的错误</td>
<td style="text-align:left">F2 / Shift + F2</td>
<td style="text-align:left">F2 / Shift + F2</td>
</tr>
</tbody>
</table>
<h1 id="构建并运行"><a href="#构建并运行" class="headerlink" title="构建并运行"></a>构建并运行</h1><table>
<thead>
<tr>
<th style="text-align:left">说明</th>
<th style="text-align:left">Windows/Linux</th>
<th style="text-align:left">Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">构建</td>
<td style="text-align:left">Control + F9</td>
<td style="text-align:left">Command + F9</td>
</tr>
<tr>
<td style="text-align:left">构建并运行</td>
<td style="text-align:left">Shift + F10</td>
<td style="text-align:left">Control + R</td>
</tr>
</tbody>
</table>
<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><table>
<thead>
<tr>
<th style="text-align:left">说明</th>
<th style="text-align:left">Windows/Linux</th>
<th style="text-align:left">Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">调试</td>
<td style="text-align:left">Shift + F9</td>
<td style="text-align:left">Control + D</td>
</tr>
<tr>
<td style="text-align:left">跳过</td>
<td style="text-align:left">F8</td>
<td style="text-align:left">F8</td>
</tr>
<tr>
<td style="text-align:left">逐步执行</td>
<td style="text-align:left">F7</td>
<td style="text-align:left">F7</td>
</tr>
<tr>
<td style="text-align:left">智能逐步执行</td>
<td style="text-align:left">Shift + F7</td>
<td style="text-align:left">Shift + F7</td>
</tr>
<tr>
<td style="text-align:left">跳出</td>
<td style="text-align:left">Shift + F8</td>
<td style="text-align:left">Shift + F8</td>
</tr>
<tr>
<td style="text-align:left">运行到光标位置</td>
<td style="text-align:left">Alt + F9</td>
<td style="text-align:left">Option + F9</td>
</tr>
<tr>
<td style="text-align:left">评估表达式</td>
<td style="text-align:left">Alt + F8</td>
<td style="text-align:left">Option + F8</td>
</tr>
<tr>
<td style="text-align:left">继续运行程序</td>
<td style="text-align:left">F9</td>
<td style="text-align:left">Command + Option + R</td>
</tr>
<tr>
<td style="text-align:left">切换断点</td>
<td style="text-align:left">Control + F8</td>
<td style="text-align:left">Command + F8</td>
</tr>
<tr>
<td style="text-align:left">查看断点</td>
<td style="text-align:left">Control + Shift + F8</td>
<td style="text-align:left">Command + Shift + F8</td>
</tr>
</tbody>
</table>
<h1 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h1><table>
<thead>
<tr>
<th style="text-align:left">说明</th>
<th style="text-align:left">Windows/Linux</th>
<th style="text-align:left">Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">复制</td>
<td style="text-align:left">F5</td>
<td style="text-align:left">F5</td>
</tr>
<tr>
<td style="text-align:left">移动</td>
<td style="text-align:left">F6</td>
<td style="text-align:left">F6</td>
</tr>
<tr>
<td style="text-align:left">安全删除</td>
<td style="text-align:left">Alt + Delete</td>
<td style="text-align:left">Command + Delete</td>
</tr>
<tr>
<td style="text-align:left">重命名</td>
<td style="text-align:left">Shift + F6</td>
<td style="text-align:left">Shift + F6</td>
</tr>
<tr>
<td style="text-align:left">更改签名</td>
<td style="text-align:left">Control + F6</td>
<td style="text-align:left">Command + F6</td>
</tr>
<tr>
<td style="text-align:left">内联</td>
<td style="text-align:left">Control + Alt + N</td>
<td style="text-align:left">Command + Option + N</td>
</tr>
<tr>
<td style="text-align:left">提取方法</td>
<td style="text-align:left">Control + Alt + M</td>
<td style="text-align:left">Command + Option + M</td>
</tr>
<tr>
<td style="text-align:left">提取变量</td>
<td style="text-align:left">Control + Alt + V</td>
<td style="text-align:left">Command + Option + V</td>
</tr>
<tr>
<td style="text-align:left">提取字段</td>
<td style="text-align:left">Control + Alt + F</td>
<td style="text-align:left">Command + Option + F</td>
</tr>
<tr>
<td style="text-align:left">提取常量</td>
<td style="text-align:left">Control + Alt + C</td>
<td style="text-align:left">Command + Option + C</td>
</tr>
<tr>
<td style="text-align:left">提取参数</td>
<td style="text-align:left">Control + Alt + P</td>
<td style="text-align:left">Command + Option + P</td>
</tr>
</tbody>
</table>
<h1 id="版本控制-本地历史记录"><a href="#版本控制-本地历史记录" class="headerlink" title="版本控制/本地历史记录"></a>版本控制/本地历史记录</h1><table>
<thead>
<tr>
<th style="text-align:left">说明</th>
<th style="text-align:left">Windows/Linux</th>
<th style="text-align:left">MacOS</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">将项目提交到 VCS</td>
<td style="text-align:left">Control + K</td>
<td style="text-align:left">Command + K</td>
</tr>
<tr>
<td style="text-align:left">从 VCS 更新项目</td>
<td style="text-align:left">Control + T</td>
<td style="text-align:left">Command + T</td>
</tr>
<tr>
<td style="text-align:left">查看最近变更</td>
<td style="text-align:left">Alt + Shift + C</td>
<td style="text-align:left">Option + Shift + C</td>
</tr>
<tr>
<td style="text-align:left">打开 VCS 弹出式菜单</td>
<td style="text-align:left">Alt + `（反引号）</td>
<td style="text-align:left">Control + V</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android Studio </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android资源文件-color]]></title>
      <url>/Android%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6-color/</url>
      <content type="html"><![CDATA[<blockquote>
<p>官方参考：<a href="https://material.io/guidelines/style/color.html#color-color-palette" target="_blank" rel="external">https://material.io/guidelines/style/color.html#color-color-palette</a></p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="16进制透明度-100-0"><a href="#16进制透明度-100-0" class="headerlink" title="16进制透明度 100%-0%"></a>16进制透明度 100%-0%</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line">100% — FF</div><div class="line">99% — FC</div><div class="line">98% — FA</div><div class="line">97% — F7</div><div class="line">96% — F5</div><div class="line">95% — F2</div><div class="line">94% — F0</div><div class="line">93% — ED</div><div class="line">92% — EB</div><div class="line">91% — E8</div><div class="line">90% — E6</div><div class="line">89% — E3</div><div class="line">88% — E0</div><div class="line">87% — DE</div><div class="line">86% — DB</div><div class="line">85% — D9</div><div class="line">84% — D6</div><div class="line">83% — D4</div><div class="line">82% — D1</div><div class="line">81% — CF</div><div class="line">80% — CC</div><div class="line">79% — C9</div><div class="line">78% — C7</div><div class="line">77% — C4</div><div class="line">76% — C2</div><div class="line">75% — BF</div><div class="line">74% — BD</div><div class="line">73% — BA</div><div class="line">72% — B8</div><div class="line">71% — B5</div><div class="line">70% — B3</div><div class="line">69% — B0</div><div class="line">68% — AD</div><div class="line">67% — AB</div><div class="line">66% — A8</div><div class="line">65% — A6</div><div class="line">64% — A3</div><div class="line">63% — A1</div><div class="line">62% — 9E</div><div class="line">61% — 9C</div><div class="line">60% — 99</div><div class="line">59% — 96</div><div class="line">58% — 94</div><div class="line">57% — 91</div><div class="line">56% — 8F</div><div class="line">55% — 8C</div><div class="line">54% — 8A</div><div class="line">53% — 87</div><div class="line">52% — 85</div><div class="line">51% — 82</div><div class="line">50% — 80</div><div class="line">49% — 7D</div><div class="line">48% — 7A</div><div class="line">47% — 78</div><div class="line">46% — 75</div><div class="line">45% — 73</div><div class="line">44% — 70</div><div class="line">43% — 6E</div><div class="line">42% — 6B</div><div class="line">41% — 69</div><div class="line">40% — 66</div><div class="line">39% — 63</div><div class="line">38% — 61</div><div class="line">37% — 5E</div><div class="line">36% — 5C</div><div class="line">35% — 59</div><div class="line">34% — 57</div><div class="line">33% — 54</div><div class="line">32% — 52</div><div class="line">31% — 4F</div><div class="line">30% — 4D</div><div class="line">29% — 4A</div><div class="line">28% — 47</div><div class="line">27% — 45</div><div class="line">26% — 42</div><div class="line">25% — 40</div><div class="line">24% — 3D</div><div class="line">23% — 3B</div><div class="line">22% — 38</div><div class="line">21% — 36</div><div class="line">20% — 33</div><div class="line">19% — 30</div><div class="line">18% — 2E</div><div class="line">17% — 2B</div><div class="line">16% — 29</div><div class="line">15% — 26</div><div class="line">14% — 24</div><div class="line">13% — 21</div><div class="line">12% — 1F</div><div class="line">11% — 1C</div><div class="line">10% — 1A</div><div class="line">9% — 17</div><div class="line">8% — 14</div><div class="line">7% — 12</div><div class="line">6% — 0F</div><div class="line">5% — 0D</div><div class="line">4% — 0A</div><div class="line">3% — 08</div><div class="line">2% — 05</div><div class="line">1% — 03</div><div class="line">0% — 00</div></pre></td></tr></table></figure>
<h1 id="部分16进制透明度"><a href="#部分16进制透明度" class="headerlink" title="部分16进制透明度"></a>部分16进制透明度</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">不透明度	16进制值</div><div class="line">100%	FF</div><div class="line">95%		F2</div><div class="line">90%		E6</div><div class="line">85%		D9</div><div class="line">80%		CC</div><div class="line">75%		BF</div><div class="line">70%		B3</div><div class="line">65%		A6</div><div class="line">60%		99</div><div class="line">55%		8C</div><div class="line">50%		80</div><div class="line">45%		73</div><div class="line">40%		66</div><div class="line">35%		59</div><div class="line">30%		4D</div><div class="line">25%		40</div><div class="line">20%		33</div><div class="line">15%		26</div><div class="line">10%		1A</div><div class="line">5%		0D</div><div class="line">0%		00</div></pre></td></tr></table></figure>
<h1 id="Android-Material-Design-字体颜色透明度"><a href="#Android-Material-Design-字体颜色透明度" class="headerlink" title="Android Material Design 字体颜色透明度"></a>Android Material Design 字体颜色透明度</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">100%: 	FF</div><div class="line">87%: 	DE</div><div class="line">70%: 	B3</div><div class="line">54%: 	8A</div><div class="line">50%: 	80</div><div class="line">38%: 	61</div><div class="line">12%: 	1F</div></pre></td></tr></table></figure>
<h1 id="各个颜色数值"><a href="#各个颜色数值" class="headerlink" title="各个颜色数值"></a>各个颜色数值</h1><h2 id="黑白"><a href="#黑白" class="headerlink" title="黑白"></a>黑白</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 0 Black 黑色 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Black"</span>&gt;</span>#000000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 0 White 白色 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"White"</span>&gt;</span>#FFFFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.39.52.png" alt="Github set up-w300"></p>
<h2 id="灰色"><a href="#灰色" class="headerlink" title="灰色"></a>灰色</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 1 Grey 灰色 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Grey_50"</span>&gt;</span>#FAFAFA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Grey_100"</span>&gt;</span>#F5F5F5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Grey_200"</span>&gt;</span>#EEEEEE<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Grey_300"</span>&gt;</span>#E0E0E0<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Grey_400"</span>&gt;</span>#BDBDBD<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Grey_500_bar"</span>&gt;</span>#9E9E9E<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Grey_600"</span>&gt;</span>#757575<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Grey_700"</span>&gt;</span>#616161<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Grey_800"</span>&gt;</span>#424242<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Grey_900"</span>&gt;</span>#212121<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.40.32.png" alt="Github set up-w300"></p>
<h2 id="蓝灰色"><a href="#蓝灰色" class="headerlink" title="蓝灰色"></a>蓝灰色</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 2 Blue Grey 蓝灰色--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_Grey_50"</span>&gt;</span>#FAFAFA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_Grey_100"</span>&gt;</span>#CFD8DC<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_Grey_200"</span>&gt;</span>#B0BEC5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_Grey_300"</span>&gt;</span>#90A4AE<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_Grey_400"</span>&gt;</span>#78909C<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_Grey_500_bar"</span>&gt;</span>#607D8B<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_Grey_600"</span>&gt;</span>#546E7A<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_Grey_700"</span>&gt;</span>#455A64<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_Grey_800"</span>&gt;</span>#37474F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_Grey_900"</span>&gt;</span>#263238<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.40.10.png" alt="Github set up-w300"></p>
<h2 id="红色"><a href="#红色" class="headerlink" title="红色"></a>红色</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 3 Red 红色--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_50"</span>&gt;</span>#FFEBEE<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_100"</span>&gt;</span>#FFCDD2<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_200"</span>&gt;</span>#EF9A9A<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_300"</span>&gt;</span>#E57373<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_400"</span>&gt;</span>#EF5350<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_500_bar"</span>&gt;</span>#F44336<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_600"</span>&gt;</span>#E53935<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_700"</span>&gt;</span>#D32F2F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_800"</span>&gt;</span>#C62828<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_900"</span>&gt;</span>#B71C1C<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_a100"</span>&gt;</span>#FF8A80<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_a200"</span>&gt;</span>#FF5252<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_a400"</span>&gt;</span>#FF1744<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_a700"</span>&gt;</span>#D50000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.43.43.png" alt="Github set up-w300"></p>
<h2 id="粉色"><a href="#粉色" class="headerlink" title="粉色"></a>粉色</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 4 Pink 粉色--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_50"</span>&gt;</span>#FCE4EC<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_100"</span>&gt;</span>#F8BBD0<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_200"</span>&gt;</span>#F48FB1<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_300"</span>&gt;</span>#F06292<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_400"</span>&gt;</span>#EC407A<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_500_bar"</span>&gt;</span>#E91E63<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_600"</span>&gt;</span>#D81B60<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_700"</span>&gt;</span>#C2185B<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_800"</span>&gt;</span>#AD1457<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_900"</span>&gt;</span>#880E4F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_a100"</span>&gt;</span>#FF80AB<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_a200"</span>&gt;</span>#FF4081<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_a400"</span>&gt;</span>#F50057<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_a700"</span>&gt;</span>#C51162<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.43.53.png" alt="Github set up-w300"></p>
<h2 id="紫色"><a href="#紫色" class="headerlink" title="紫色"></a>紫色</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 5 Purple 紫色--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_50"</span>&gt;</span>#F3E5F5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_100"</span>&gt;</span>#E1BEE7<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_200"</span>&gt;</span>#CE93D8<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_300"</span>&gt;</span>#BA68C8<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_400"</span>&gt;</span>#AB47BC<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_500_bar"</span>&gt;</span>#9C27B0<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_600"</span>&gt;</span>#8E24AA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_700"</span>&gt;</span>#7B1FA2<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_800"</span>&gt;</span>#6A1B9A<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_900"</span>&gt;</span>#4A148C<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_a100"</span>&gt;</span>#EA80FC<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_a200"</span>&gt;</span>#E040FB<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_a400"</span>&gt;</span>#D500F9<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_a700"</span>&gt;</span>#AA00FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.43.33.png" alt="Github set up-w300"></p>
<h2 id="深紫色"><a href="#深紫色" class="headerlink" title="深紫色"></a>深紫色</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 6 Deep Purple 深紫色--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_50"</span>&gt;</span>#EDE7F6<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_100"</span>&gt;</span>#D1C4E9<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_200"</span>&gt;</span>#B39DDB<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_300"</span>&gt;</span>#9575CD<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_400"</span>&gt;</span>#7E57C2<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_500_bar"</span>&gt;</span>#673AB7<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_600"</span>&gt;</span>#5E35B1<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_700"</span>&gt;</span>#512DA8<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_800"</span>&gt;</span>#4527A0<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_900"</span>&gt;</span>#311B92<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_a100"</span>&gt;</span>#B388FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_a200"</span>&gt;</span>#7C4DFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_a400"</span>&gt;</span>#651FFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_a700"</span>&gt;</span>#6200EA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.43.13.png" alt="Github set up-w300"></p>
<h2 id="靛蓝色"><a href="#靛蓝色" class="headerlink" title="靛蓝色"></a>靛蓝色</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 7 Indigo  靛蓝色 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_50"</span>&gt;</span>#E8EAF6<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_100"</span>&gt;</span>#C5CAE9<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_200"</span>&gt;</span>#9FA8DA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_300"</span>&gt;</span>#7986CB<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_400"</span>&gt;</span>#5C6BC0<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_500_bar"</span>&gt;</span>#3F51B5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_600"</span>&gt;</span>#3949AB<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_700"</span>&gt;</span>#303F9F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_800"</span>&gt;</span>#283593<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_900"</span>&gt;</span>#1A237E<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_a100"</span>&gt;</span>#8C9EFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_a200"</span>&gt;</span>#536DFE<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_a400"</span>&gt;</span>#3D5AFE<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_a700"</span>&gt;</span>#304FFE<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.43.21.png" alt="Github set up-w300"></p>
<h2 id="蓝色"><a href="#蓝色" class="headerlink" title="蓝色"></a>蓝色</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 8 Blue 蓝色 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_50"</span>&gt;</span>#E3F2FD<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_100"</span>&gt;</span>#BBDEFB<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_200"</span>&gt;</span>#90CAF9<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_300"</span>&gt;</span>#64B5F6<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_400"</span>&gt;</span>#42A5F5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_500_bar"</span>&gt;</span>#2196F3<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_600"</span>&gt;</span>#1E88E5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_700"</span>&gt;</span>#1976D2<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_800"</span>&gt;</span>#1565C0<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_900"</span>&gt;</span>#0D47A1<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_a100"</span>&gt;</span>#82B1FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_a200"</span>&gt;</span>#448AFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_a400"</span>&gt;</span>#2979FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_a700"</span>&gt;</span>#2962FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.43.03.png" alt="Github set up-w300"></p>
<h2 id="亮蓝色"><a href="#亮蓝色" class="headerlink" title="亮蓝色"></a>亮蓝色</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 9 Light Blue 亮蓝色--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_50"</span>&gt;</span>#E1F5FE<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_100"</span>&gt;</span>#B3E5FC<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_200"</span>&gt;</span>#81D4FA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_300"</span>&gt;</span>#4FC3F7<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_400"</span>&gt;</span>#29B6F6<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_500_bar"</span>&gt;</span>#03A9F4<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_600"</span>&gt;</span>#039BE5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_700"</span>&gt;</span>#0288D1<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_800"</span>&gt;</span>#0277BD<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_900"</span>&gt;</span>#01579B<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_a100"</span>&gt;</span>#80D8FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_a200"</span>&gt;</span>#40C4FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_a400"</span>&gt;</span>#00B0FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_a700"</span>&gt;</span>#0091EA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.42.43.png" alt="Github set up-w300"></p>
<h2 id="青色"><a href="#青色" class="headerlink" title="青色"></a>青色</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 10 Cyan 青色 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_50"</span>&gt;</span>#E0F7FA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_100"</span>&gt;</span>#B2EBF2<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_200"</span>&gt;</span>#80DEEA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_300"</span>&gt;</span>#4DD0E1<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_400"</span>&gt;</span>#26C6DA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_500_bar"</span>&gt;</span>#00BCD4<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_600"</span>&gt;</span>#00ACC1<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_700"</span>&gt;</span>#0097A7<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_800"</span>&gt;</span>#00838F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_900"</span>&gt;</span>#006064<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_a100"</span>&gt;</span>#84FFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_a200"</span>&gt;</span>#18FFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_a400"</span>&gt;</span>#00E5FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_a700"</span>&gt;</span>#00B8D4<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.42.51.png" alt="Github set up-w300"></p>
<h2 id="蓝绿色"><a href="#蓝绿色" class="headerlink" title="蓝绿色"></a>蓝绿色</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 11 Teal 蓝绿色 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_50"</span>&gt;</span>#E0F2F1<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_100"</span>&gt;</span>#B2DFDB<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_200"</span>&gt;</span>#80CBC4<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_300"</span>&gt;</span>#4DB6AC<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_400"</span>&gt;</span>#26A69A<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_500_bar"</span>&gt;</span>#009688<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_600"</span>&gt;</span>#00897B<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_700"</span>&gt;</span>#00796B<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_800"</span>&gt;</span>#00695C<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_900"</span>&gt;</span>#004D40<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_a100"</span>&gt;</span>#A7FFEB<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_a200"</span>&gt;</span>#64FFDA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_a400"</span>&gt;</span>#1DE9B6<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_a700"</span>&gt;</span>#00BFA5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.42.26.png" alt="Github set up-w300"></p>
<h2 id="绿色"><a href="#绿色" class="headerlink" title="绿色"></a>绿色</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 12 Green 绿色 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_50"</span>&gt;</span>#E8F5E9<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_100"</span>&gt;</span>#C8E6C9<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_200"</span>&gt;</span>#A5D6A7<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_300"</span>&gt;</span>#81C784<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_400"</span>&gt;</span>#66BB6A<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_500_bar"</span>&gt;</span>#4CAF50<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_600"</span>&gt;</span>#43A047<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_700"</span>&gt;</span>#388E3C<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_800"</span>&gt;</span>#2E7D32<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_900"</span>&gt;</span>#1B5E20<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_a100"</span>&gt;</span>#B9F6CA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_a200"</span>&gt;</span>#69F0AE<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_a400"</span>&gt;</span>#00E676<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_a700"</span>&gt;</span>#00C853<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.42.02.png" alt="Github set up-w300"></p>
<h2 id="亮绿色"><a href="#亮绿色" class="headerlink" title="亮绿色"></a>亮绿色</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 13 Light Green 亮绿色--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_50"</span>&gt;</span>#F1F8E9<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_100"</span>&gt;</span>#DCEDC8<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_200"</span>&gt;</span>#C5E1A5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_300"</span>&gt;</span>#AED581<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_400"</span>&gt;</span>#9CCC65<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_500_bar"</span>&gt;</span>#8BC34A<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_600"</span>&gt;</span>#7CB342<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_700"</span>&gt;</span>#689F38<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_800"</span>&gt;</span>#558B2F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_900"</span>&gt;</span>#33691E<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_a100"</span>&gt;</span>#CCFF90<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_a200"</span>&gt;</span>#B2FF59<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_a400"</span>&gt;</span>#76FF03<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_a700"</span>&gt;</span>#64DD17<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.42.14.png" alt="Github set up-w300"></p>
<h2 id="酸橙汁饮料"><a href="#酸橙汁饮料" class="headerlink" title="酸橙汁饮料"></a>酸橙汁饮料</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 14 Lime 酸橙汁饮料 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_50"</span>&gt;</span>#F9FBE7<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_100"</span>&gt;</span>#F0F4C3<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_200"</span>&gt;</span>#E6EE9C<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_300"</span>&gt;</span>#DCE775<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_400"</span>&gt;</span>#D4E157<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_500_bar"</span>&gt;</span>#CDDC39<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_600"</span>&gt;</span>#C0CA33<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_700"</span>&gt;</span>#AFB42B<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_800"</span>&gt;</span>#9E9D24<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_900"</span>&gt;</span>#827717<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_a100"</span>&gt;</span>#F4FF81<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_a200"</span>&gt;</span>#EEFF41<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_a400"</span>&gt;</span>#C6FF00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_a700"</span>&gt;</span>#AEEA00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.41.51.png" alt="Github set up-w300"></p>
<h2 id="黄色"><a href="#黄色" class="headerlink" title="黄色"></a>黄色</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">&lt;!-- 15 Yellow 黄色 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_50"</span>&gt;</span>#FFFDE7<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_100"</span>&gt;</span>#FFF9C4<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_200"</span>&gt;</span>#FFF59D<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_300"</span>&gt;</span>#FFF176<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_400"</span>&gt;</span>#FFEE58<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_500_bar"</span>&gt;</span>#FFEB3B<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_600"</span>&gt;</span>#FDD835<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_700"</span>&gt;</span>#FBC02D<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_800"</span>&gt;</span>#F9A825<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_900"</span>&gt;</span>#F57F17<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_a100"</span>&gt;</span>#FFFF8D<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_a200"</span>&gt;</span>#FFFF00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_a400"</span>&gt;</span>#FFEA00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_a700"</span>&gt;</span>#FFD600<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.41.28.png" alt="Github set up-w300"></p>
<h2 id="琥珀色"><a href="#琥珀色" class="headerlink" title="琥珀色"></a>琥珀色</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 16 Amber 琥珀色--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_50"</span>&gt;</span>#FFF8E1<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_100"</span>&gt;</span>#FFECB3<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_200"</span>&gt;</span>#FFE082<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_300"</span>&gt;</span>#FFD54F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_400"</span>&gt;</span>#FFCA28<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber500_bar"</span>&gt;</span>#FFC107<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_600"</span>&gt;</span>#FFB300<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_700"</span>&gt;</span>#FFA000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_800"</span>&gt;</span>#FF8F00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_900"</span>&gt;</span>#FF6F00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_a100"</span>&gt;</span>#FFE57F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_a200"</span>&gt;</span>#FFD740<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_a400"</span>&gt;</span>#FFC400<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_a700"</span>&gt;</span>#FFAB00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.41.39.png" alt="Github set up-w300"></p>
<h2 id="橘黄色"><a href="#橘黄色" class="headerlink" title="橘黄色"></a>橘黄色</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 17 Orange 橘黄色--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_50"</span>&gt;</span>#FFF3E0<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_100"</span>&gt;</span>#FFE0B2<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_200"</span>&gt;</span>#FFCC80<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_300"</span>&gt;</span>#FFB74D<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_400"</span>&gt;</span>#FFA726<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_500_bar"</span>&gt;</span>#FF9800<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_600"</span>&gt;</span>#FB8C00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_700"</span>&gt;</span>#F57C00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_800"</span>&gt;</span>#EF6C00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_900"</span>&gt;</span>#E65100<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_a100"</span>&gt;</span>#FFD180<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_a200"</span>&gt;</span>#FFAB40<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_a400"</span>&gt;</span>#FF9100<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_a700"</span>&gt;</span>#FF6D00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.41.11.png" alt="Github set up-w300"></p>
<h2 id="深橘黄色"><a href="#深橘黄色" class="headerlink" title="深橘黄色"></a>深橘黄色</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 18 Deep Orange 深橘黄色--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_50"</span>&gt;</span>#FBE9E7<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_100"</span>&gt;</span>#FFCCBC<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_200"</span>&gt;</span>#FFAB91<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_300"</span>&gt;</span>#FF8A65<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_400"</span>&gt;</span>#FF7043<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_500_bar"</span>&gt;</span>#FF5722<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_600"</span>&gt;</span>#F4511E<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_700"</span>&gt;</span>#E64A19<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_800"</span>&gt;</span>#D84315<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_900"</span>&gt;</span>#BF360C<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_a100"</span>&gt;</span>#FF9E80<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_a200"</span>&gt;</span>#FF6E40<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_a400"</span>&gt;</span>#FF3D00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_a700"</span>&gt;</span>#DD2C00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.40.42.png" alt="Github set up-w300"></p>
<h2 id="棕色"><a href="#棕色" class="headerlink" title="棕色"></a>棕色</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 19 Brown 棕色--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Brown_50"</span>&gt;</span>#EFEBE9<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Brown_100"</span>&gt;</span>#D7CCC8<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Brown_200"</span>&gt;</span>#BCAAA4<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Brown_300"</span>&gt;</span>#A1887F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Brown_400"</span>&gt;</span>#8D6E63<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Brown_500_bar"</span>&gt;</span>#795548<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Brown_600"</span>&gt;</span>#6D4C41<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Brown_700"</span>&gt;</span>#5D4037<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Brown_800"</span>&gt;</span>#4E342E<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Brown_900"</span>&gt;</span>#3E2723<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.41.00.png" alt="Github set up-w300"></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 资源文件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Sutdio 使用快人一步1 插件配置]]></title>
      <url>/Android%20Studio%E4%BD%BF%E7%94%A8%E5%BF%AB%E4%BA%BA%E4%B8%80%E6%AD%A51%20%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p><strong>今日感悟，写在前面：</strong></p>
<pre><code>放手无关紧要，精于攻坚克难。
</code></pre><a id="more"></a>
<p>[TOC]</p>
<h1 id="一、Android-Studio-3-0-Android-Profiler分析器"><a href="#一、Android-Studio-3-0-Android-Profiler分析器" class="headerlink" title="一、Android Studio 3.0  - Android Profiler分析器"></a>一、Android Studio 3.0  - Android Profiler分析器</h1><blockquote>
<p>参考：<a href="http://blog.csdn.net/niubitianping/article/details/72617864" target="_blank" rel="external">http://blog.csdn.net/niubitianping/article/details/72617864</a><br>Android Studio 3.0 新特性：<a href="http://blog.csdn.net/niubitianping/article/details/72600923" target="_blank" rel="external">http://blog.csdn.net/niubitianping/article/details/72600923</a></p>
</blockquote>
<h1 id="二、Android-Studio-官方用户指南"><a href="#二、Android-Studio-官方用户指南" class="headerlink" title="二、Android Studio 官方用户指南"></a>二、Android Studio 官方用户指南</h1><blockquote>
<p><a href="https://developer.android.google.cn/studio/intro/index.html" target="_blank" rel="external">https://developer.android.google.cn/studio/intro/index.html</a></p>
</blockquote>
<h1 id="三、使用频率最高的3个快捷键："><a href="#三、使用频率最高的3个快捷键：" class="headerlink" title="三、使用频率最高的3个快捷键："></a>三、使用频率最高的3个快捷键：</h1><ul>
<li><strong><code>⌘ + n</code>：各种自动生成。</strong></li>
<li><p><strong><code>（control）⌃ + t</code> 各位看官自己瞧瞧：</strong></p>
<p>  <img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-25%2021.23.39.png" alt="Github set up-w200"></p>
</li>
<li><p><strong><code>（shift）⇧ + （control）⌃ + （enter） ⏎</code>  补充快捷键</strong></p>
</li>
</ul>
<h1 id="四、插件"><a href="#四、插件" class="headerlink" title="四、插件"></a>四、插件</h1><p>插件安装位置：<code>Android Studio -&gt; Preferences -&gt; Plugins</code>。<strong>快捷键：<code>⌘ + ,</code></strong><br>敲出<code>⌘</code>：<code>⌃ + ⌘ + space</code>，之后进行选择</p>
<h2 id="1-代码规范-Alibaba-Java-Coding-Guidelines"><a href="#1-代码规范-Alibaba-Java-Coding-Guidelines" class="headerlink" title="1. 代码规范 - Alibaba Java Coding Guidelines"></a>1. 代码规范 - Alibaba Java Coding Guidelines</h2><p>阿里巴巴Java开发规约的插件。安装后在Android Studio显示为：<img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-25%2020.20.15.png" alt="GitHub set up-w100"><br>可选择实时监测，也可以关闭检测。</p>
<h2 id="2-真机无线调试-Android-WiFi-ADB"><a href="#2-真机无线调试-Android-WiFi-ADB" class="headerlink" title="2. 真机无线调试 - Android WiFi ADB"></a>2. 真机无线调试 - Android WiFi ADB</h2><p>通过WIFI连接手机和电脑。<br>数据线插入你的手机，然后点击Connect，显示State = Connect后拔掉数据线即可。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-25%2020.23.33.png" alt="GitHub set up-w200"></p>
<h2 id="3-布局文件分组的插件-folding-plugin"><a href="#3-布局文件分组的插件-folding-plugin" class="headerlink" title="3. 布局文件分组的插件 - folding-plugin"></a>3. 布局文件分组的插件 - folding-plugin</h2><p>图片来自网络</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/Preview.png" alt=""></p>
<h2 id="4-View注解绑定-Android-ButterKnife-Zelezny"><a href="#4-View注解绑定-Android-ButterKnife-Zelezny" class="headerlink" title="4. View注解绑定 - Android ButterKnife Zelezny"></a>4. View注解绑定 - Android ButterKnife Zelezny</h2><p>ButterKnife是一个专注于Android系统的View注入框架,可以减少大量的findViewById以及setOnClickListener代码，可视化一键生成。<br><strong>快捷键：<code>⌘ + n</code></strong><br>使用时必须要将<code>光标</code>悬浮于 <img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-25%2020.37.08.png" alt="Github set up-w300"> <code>activity_main</code>之上才能有效。</p>
<h3 id="4-1-控件的点击事件异常时"><a href="#4-1-控件的点击事件异常时" class="headerlink" title="4.1 控件的点击事件异常时"></a>4.1 控件的点击事件异常时</h3><ol>
<li>只是在Java代码中写明了方法，但是并没有在XML代码中使用<code>onClick=&quot;&quot;</code>来描述此方法</li>
<li>在Java代码中只是声明了方法，当时并没有在方法中声明参数：<code>(View view)</code>。如果不写此参数，将会导致在调用方法时，找不到<code>View中的 指定id</code> 值。</li>
</ol>
<h3 id="4-2-空指针异常："><a href="#4-2-空指针异常：" class="headerlink" title="4.2 空指针异常："></a>4.2 空指针异常：</h3><blockquote>
<p>Android Studio3.0之前 </p>
</blockquote>
<ol>
<li><p>在 <code>app模块</code> 的 <code>gradle</code> 编译文件 <code>build.gradle</code> 加入下列代码：</p>
<pre><code>apply plugin: &apos;com.neenbedankt.android-apt&apos; 
</code></pre></li>
</ol>
<ol>
<li><p>在 <code>app模块</code> 的 <code>gradle</code> 编译文件 <code>build.gradle</code> 中的 <code>dependencies</code>中加入</p>
<pre><code>apt &apos;com.jakewharton:butterknife-compiler:8.0.1&apos;
compile &apos;com.jakewharton:butfe:8.0.1&apos;
</code></pre></li>
<li><p>在 <code>项目</code> 的 <code>gradle</code> 编译文件 <code>build.gradle</code> 文件，在 <code>dependencies</code> 中加入</p>
<pre><code>classpath &apos;com.neenbedankt.gradle.plugins:android-apt:1.8&apos;
</code></pre></li>
</ol>
<blockquote>
<p>Android Studio3.0 </p>
</blockquote>
<ol>
<li><p>在 <code>app模块</code> 的 <code>gradle</code> 中的 <code>dependencies</code>中加入</p>
<pre><code>compile &apos;com.jakewharton:butterknife:8.8.1&apos;
    annotationProcessor &apos;com.jakewharton:butterknife-compiler:8.8.1&apos;
</code></pre></li>
</ol>
<h2 id="5-资源文件状态生成-SelectorChapek-for-Android"><a href="#5-资源文件状态生成-SelectorChapek-for-Android" class="headerlink" title="5. 资源文件状态生成 - SelectorChapek for Android"></a>5. 资源文件状态生成 - SelectorChapek for Android</h2><p>通过资源文件命名自动生成Selector文件。</p>
<h2 id="6-ViewHolder代码自动生成-AndroidCodeGenerator"><a href="#6-ViewHolder代码自动生成-AndroidCodeGenerator" class="headerlink" title="6. ViewHolder代码自动生成 - AndroidCodeGenerator"></a>6. ViewHolder代码自动生成 - AndroidCodeGenerator</h2><p>在 <code>res/layout/文件夹</code>下选择你适配器的<code>item layout</code>的布局文件，然后右键，如图所示：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-27%2016.12.20.png" alt=""></p>
<p>选择其中一项之后，会弹出一个窗口，在这个窗口已经根据<code>item布局文件</code>默认生成了一个<code>适配器类</code>，你所要做的就是根据自己的实际需求进行<code>修改</code>。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-27%2016.16.29.png" alt=""></p>
<h2 id="7-自动findViewById-Prettify"><a href="#7-自动findViewById-Prettify" class="headerlink" title="7. 自动findViewById() - Prettify"></a>7. 自动findViewById() - Prettify</h2><p>据Layout自动生成findViewById。<br>使用方式同<code>ButterKnife</code><br><strong>快捷键：<code>⌘ + n</code> 后选择 <code>View Variables</code> 或者 <code>View Fields</code></strong><br><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-25%2021.11.59.png" alt="Github set up-w200"><br><strong>区别：</strong></p>
<ul>
<li>前者<code>View Variables</code>生成的是<code>私有变量</code></li>
<li>后者 <code>View Fields</code>生成的是<code>成员变量</code></li>
</ul>
<h2 id="8-自动生成style代码-Android-Styler"><a href="#8-自动生成style代码-Android-Styler" class="headerlink" title="8. 自动生成style代码 - Android Styler"></a>8. 自动生成style代码 - Android Styler</h2><p><strong>快捷键：⇧ + ⌘ + d</strong><br>效果如图：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-27%2016.36.50.png" alt=""></p>
<h2 id="9-生命周期方法位置排序-Lifecycle-Sorter"><a href="#9-生命周期方法位置排序-Lifecycle-Sorter" class="headerlink" title="9. 生命周期方法位置排序 - Lifecycle Sorter"></a>9. 生命周期方法位置排序 - Lifecycle Sorter</h2><p>根据Activity或者fragment的生命周期对其生命周期方法位置进行先后排序。<br><strong>快捷键 <code>⌘ + ⌥ + K</code></strong></p>
<h2 id="10-关于Json数据"><a href="#10-关于Json数据" class="headerlink" title="10. 关于Json数据"></a>10. 关于Json数据</h2><h3 id="10-1-Json数据-gt-java对象-：GsonFormat"><a href="#10-1-Json数据-gt-java对象-：GsonFormat" class="headerlink" title="10.1 Json数据 -&gt; java对象 ：GsonFormat"></a>10.1 Json数据 -&gt; java对象 ：GsonFormat</h3><p>GsonFormat是一个快速格式化json数据，自动生成实体类参数的插件。<br><strong>快捷键：<code>⌘ + n</code> 后选择 <code>GsonFormat</code></strong>。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-25%2020.44.23.png" alt="Github set up-w500"></p>
<h3 id="10-2-Java对象-gt-json格式数据-：Java库：Gson"><a href="#10-2-Java对象-gt-json格式数据-：Java库：Gson" class="headerlink" title="10.2 Java对象 -&gt; json格式数据 ：Java库：Gson"></a>10.2 Java对象 -&gt; json格式数据 ：Java库：Gson</h3><blockquote>
<p>参考：<a href="http://blog.csdn.net/oQiHaoGongYuan/article/details/50944755" target="_blank" rel="external">http://blog.csdn.net/oQiHaoGongYuan/article/details/50944755</a></p>
</blockquote>
<h4 id="添加gson库："><a href="#添加gson库：" class="headerlink" title="添加gson库："></a>添加gson库：</h4><ul>
<li><p>首先，在自己的android studio的项目中把gson库添加进来，右键 app 选择 open module settings</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/20160321112419027.png" alt=""></p>
</li>
<li><p>选择当前 Module，然后点击 Dependencies,在点击3步中的Library dependency（依赖的库）</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/20160321112424883.png" alt=""></p>
</li>
<li><p>在1所指的弹出的收索框中收索gson，然后点击2 所指的收索，然后下面就会出现最新的gson库，点击OK</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/20160321112428855.png" alt=""></p>
</li>
<li><p>点击上图OK后，gson库就出现在了dependency中了，这个时候还得点击 2所指的OK（确认）按钮。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/20160321112433039.png" alt=""></p>
</li>
<li><p>最后查看build.gradle中看看gson库有没有添加成功，如下图2所指的地方，现在可以看到google官方的gson库就添加到了项目中来。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/20160321112439918.png" alt=""></p>
</li>
</ul>
<h4 id="使用gson"><a href="#使用gson" class="headerlink" title="使用gson"></a>使用gson</h4><p><strong>把Java对象转化为Json格式</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Gson gson = <span class="keyword">new</span> Gson();</div><div class="line">gson.toJson(对象);</div></pre></td></tr></table></figure>
<h2 id="11-Parcelable自动生成-ParcelableGenerator"><a href="#11-Parcelable自动生成-ParcelableGenerator" class="headerlink" title="11. Parcelable自动生成 - ParcelableGenerator"></a>11. Parcelable自动生成 - ParcelableGenerator</h2><p>自动生成Parcelable接口所需的代码。</p>
<ul>
<li><code>Serializable</code>的作用是为了<code>保存对象的属性</code>到本地文件、数据库、网络流、rmi以方便数据传输，当然这种传输可以是程序内的也可以是两个程序间的。</li>
<li><p>而Serializable可将<code>数据持久化</code>方便保存，所以在需要保存或网络传输数据时选择Serializable，因为android不同版本Parcelable可能不同，所以不推荐使用Parcelable进行数据持久化。</p>
</li>
<li><p>Android的<code>Parcelable</code>的设计初衷是因为Serializable效率过慢，为了在程序内不同组件间以及不同Android程序间(AIDL)高效的传输数据而设计，这些<code>数据仅在内存中存在</code>，Parcelable是通过IBinder通信的消息的载体。</p>
</li>
<li>Parcelable的性能比Serializable好，在内存开销方面较小，所以在内存间数据传输时推荐使用Parcelable，如activity间传输数据。</li>
</ul>
<p><strong>快捷键：<code>⌘ + n</code></strong><br><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-25%2020.52.54.png" alt="Github set up-w200"></p>
<h2 id="12-Android-Material-Design-风格图标全集-Android-Material-Design-Icon-Generator"><a href="#12-Android-Material-Design-风格图标全集-Android-Material-Design-Icon-Generator" class="headerlink" title="12. Android Material Design 风格图标全集 - Android Material Design Icon Generator"></a>12. Android Material Design 风格图标全集 - Android Material Design Icon Generator</h2><p>通过此库可以获取<code>MD风格</code>的所有图标，更让人惊喜的是：选中的图标会自动生成各种 <code>drawable 文件夹</code>的图标，而且可以<code>自定义颜色</code>，绝对让人惊喜。<br><strong>快捷键：<code>⌥ + ⌘ + m</code></strong><br><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-25%2021.33.19.png" alt="Github set up-w200"></p>
<p>选择指定图标以及自定义颜色。<br><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-25%2021.31.25.png" alt="Github set up-w500"></p>
<h2 id="13-Android本地数据-数据库浏览器查询、修改第三方库"><a href="#13-Android本地数据-数据库浏览器查询、修改第三方库" class="headerlink" title="13. Android本地数据/数据库浏览器查询、修改第三方库"></a>13. Android本地数据/数据库浏览器查询、修改第三方库</h2><p><strong>引入：</strong>在<code>module</code>的<code>gradle</code>中</p>
<pre><code>debugCompile &apos;com.amitshekhar.android:debug-db:1.0.0&apos;
</code></pre><p><strong>使用：</strong> mac下按住<code>⌘</code> + <code>单击</code>即可在浏览器中看到当前App的数据。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-29%2010.25.13.png" alt=""></p>
<h2 id="14-色彩管理器-color-manager"><a href="#14-色彩管理器-color-manager" class="headerlink" title="14. 色彩管理器 - color-manager"></a>14. 色彩管理器 - color-manager</h2><p>这个管理器是一个<strong>插件</strong>，只要在 Android Studio 安装此插件即可。<br>使用参考：<a href="https://github.com/shiraji/color-manager" target="_blank" rel="external">https://github.com/shiraji/color-manager</a></p>
<h3 id="安装之后的样式："><a href="#安装之后的样式：" class="headerlink" title="安装之后的样式："></a>安装之后的样式：</h3><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-26%2015.48.23.png" alt=""></p>
<h3 id="过滤-功能："><a href="#过滤-功能：" class="headerlink" title="过滤 功能："></a>过滤 功能：</h3><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-26%2015.56.50.png" alt=""></p>
<ul>
<li><strong>选中</strong>此功能后：<strong>不显示系统提供的颜色</strong>；</li>
<li><strong>未选中</strong>时：<strong>显示 系统+自定义 颜色</strong>。</li>
</ul>
<h2 id="15-Builder生成器-innerbuilder"><a href="#15-Builder生成器-innerbuilder" class="headerlink" title="15. Builder生成器 - innerbuilder"></a>15. Builder生成器 - innerbuilder</h2><p>这个管理器是一个<strong>插件</strong>，只要在 Android Studio 安装此插件即可。<br>使用参考：<a href="https://github.com/analytically/innerbuilder" target="_blank" rel="external">https://github.com/analytically/innerbuilder</a></p>
<p>官网截图：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/screenshot.png" alt=""></p>
<h1 id="五、组合指令"><a href="#五、组合指令" class="headerlink" title="五、组合指令"></a>五、组合指令</h1><h2 id="1-自定义组指令"><a href="#1-自定义组指令" class="headerlink" title="1. 自定义组指令"></a>1. 自定义组指令</h2><p><strong>快捷键：<code>⌘ + ,</code></strong> 后选择 <code>Live TemPlates</code>，如下所示：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-26%2015.23.55.png" alt=""></p>
<p>单击上图中的<code>+</code>可以添加自定义的组合键<br>选择其中的<code>AndroidLog</code>即可进行自定义设置：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-26%2015.26.31.png" alt=""></p>
<h2 id="2-已存在组合指令"><a href="#2-已存在组合指令" class="headerlink" title="2. 已存在组合指令"></a>2. 已存在组合指令</h2><h3 id="2-1-Log输出自定义"><a href="#2-1-Log输出自定义" class="headerlink" title="2.1 Log输出自定义"></a>2.1 Log输出自定义</h3><ul>
<li><p>logt</p>
<pre><code>private static final String TAG = &quot;MainActivity  &quot;;
</code></pre></li>
<li>loge</li>
<li>logi</li>
<li>logd</li>
</ul>
<h3 id="2-2-循环"><a href="#2-2-循环" class="headerlink" title="2.2 循环"></a>2.2 循环</h3><ul>
<li><p>foreach </p>
<pre><code>for (:) {}
</code></pre></li>
<li><p>fori</p>
<pre><code>for (int i = 0; i &lt; ; i++) {}
</code></pre></li>
<li><p>itar (array)</p>
<pre><code>for (int i = 0; i &lt; array.length; i++) {
         = array[i];
    }
</code></pre></li>
<li><p>iten (enum)</p>
<pre><code>while (enumeration.hasMoreElements()) {
        Object nextElement = enumeration.nextElement();
    }
</code></pre></li>
<li><p>itit (iterator)</p>
<pre><code>while (iterator.hasNext()) {
        Object next = iterator.next();
    }
</code></pre></li>
<li><p>itli (List)</p>
<pre><code>for (int i = 0; i &lt; list.size(); i++) {
        Object o = list.get(i);
    }
</code></pre></li>
</ul>
<h3 id="2-3-判定"><a href="#2-3-判定" class="headerlink" title="2.3 判定"></a>2.3 判定</h3><ul>
<li><p>ifn</p>
<pre><code>if (savedInstanceState == null) {}
</code></pre></li>
<li><p>inn</p>
<pre><code>if (savedInstanceState != null) {}
</code></pre></li>
<li><p>lazy</p>
<pre><code>if (savedInstanceState == null) {
        savedInstanceState = new Bundle();
    }
</code></pre></li>
<li><p>lnst</p>
<pre><code>if (savedInstanceState instanceof Object) {
        Object instanceState = (Object) savedInstanceState;
    }
</code></pre></li>
</ul>
<h3 id="2-4-View相关"><a href="#2-4-View相关" class="headerlink" title="2.4 View相关"></a>2.4 View相关</h3><ul>
<li><p>gone</p>
<pre><code>.setVisibility(View.GONE);
</code></pre></li>
<li><p>visible</p>
</li>
<li><p>Toast</p>
<pre><code>Toast.makeText(this, &quot;&quot;, Toast.LENGTH_SHORT).show();
</code></pre></li>
<li><p>fbc</p>
<pre><code>() findViewById(R.id.);
</code></pre></li>
<li><p>fixme</p>
<pre><code>// FIXME: 2017/10/26 
</code></pre></li>
<li><p>todo</p>
</li>
<li>lhm</li>
<li>lhw</li>
</ul>
<h3 id="2-5-全局-static-final-变量"><a href="#2-5-全局-static-final-变量" class="headerlink" title="2.5 全局 static final 变量"></a>2.5 全局 static final 变量</h3><ul>
<li><p>psf</p>
<pre><code>public static final 
</code></pre></li>
<li><p>psfi</p>
<pre><code>public static final int 
</code></pre></li>
<li><p>psfs    </p>
</li>
<li>St</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android Studio </tag>
            
            <tag> 插件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac环境下Hexo-GitHub-MWeb搭建个人博客]]></title>
      <url>/Mac%E7%8E%AF%E5%A2%83%E4%B8%8BHexo-GitHub-MWeb%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p><strong>需要的工具：Node.js、Git、Hexo、Coding（自选）、MWeb（自选）</strong></p>
<a id="more"></a>
<p>[TOC]</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>非重点，自行安装</p>
<h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>非重点，自行安装</p>
<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><h4 id="按照此命令进行安装Hexo"><a href="#按照此命令进行安装Hexo" class="headerlink" title="按照此命令进行安装Hexo"></a>按照此命令进行安装Hexo</h4><pre><code>$ sudo npm install -g hexo
</code></pre><h4 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h4><p>其中<code>Blog_Hexo</code>为自己建立的目标文件夹。只要是建立自己的任意一个博客，都可使用一下步骤。</p>
<pre><code>$ hexo init Blog_Hexo
</code></pre><p>在“blog”文件夹中安装npm</p>
<pre><code>$ npm install
</code></pre><p>执行一下命令，查看是否安装成功</p>
<pre><code>$ hexo s
</code></pre><p>在浏览器中打开：<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 能看到“Hexo”页面表示安装成功：</p>
<h4 id="关联GitHub"><a href="#关联GitHub" class="headerlink" title="关联GitHub"></a>关联GitHub</h4><p>登录你的Github帐号，新建仓库，名为：<code>用户名.github.io</code> ，此为固定写法。<br>创建之后为：</p>
<p>创建的Hexo文件夹为：</p>
<p><code>cd</code>到<code>Blog_Hexo</code>文件夹下，编辑<code>_config.yml</code>。</p>
<p><strong>注意：<code>_config.yml</code> 文件中的 <code>：</code>后面要加一个空格</strong></p>
<p>1）若是只将博客上传至GItHub中，编写</p>
<pre><code>deploy:
    type: git
    repository: https://github.com/gonghonglou/gonghonglou.github.io.git
    branch: master
</code></pre><p>2）若是将博客同时上传至GItHub和Coding中，编写：</p>
<pre><code>deploy:
type: git
repo:
     github: git@github.com:YannisCheng/YannisCheng.github.io.git,master
     coding: git@git.coding.net:yannischeng/blog.git,master
</code></pre><p>在<code>Blog_Hexo</code>文件夹目录下执行生成静态页面命令：</p>
<pre><code>$ hexo g
</code></pre><p>此时若出现如下报错：</p>
<pre><code>ERROR Local hexo not found in ~/blog
ERROR Try runing: &apos;npm install hexo --save&apos;
</code></pre><p>则执行命令：</p>
<pre><code>npm install hexo --save
</code></pre><p>若无报错，自行忽略此步骤。<br>再执行配置命令：</p>
<pre><code>$ hexo d
</code></pre><blockquote>
<p>执行命令<code>hexo deploy</code>仍然报错：无法连接git或找不到git，则执行如下命：</p>
</blockquote>
<pre><code>$ npm install hexo-deployer-git --save
</code></pre><p>若你未关联Github，则执行<code>hexo deploy</code>命令时终端会提示你输入Github的用户名和密码，即</p>
<pre><code>Username for &apos;https:// .github.com&apos;:
Password for &apos;https:// .github.com&apos;:
</code></pre><p><code>hexo deploy</code>命令执行成功后，浏览器中打开网址<code>http:// .github.io</code> 能看到和打开 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 时一样的页面。</p>
<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p><code>cd</code>到<code>Blog_Hexo</code>中，执行如下命令新建文章</p>
<pre><code>hexo new &quot;hello-world&quot;
</code></pre><p>新的文件建立之后的位置为</p>
<p>编辑之后，在 <code>Blog_Hexo</code> 文件夹中执行如下命令</p>
<pre><code>hexo generate             //生成静态页面
hexo deploy             //将文章部署到Github
</code></pre><p><strong><em>至此，安装环节结束，可以进行基本的使用了。</em></strong></p>
<hr>
<h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p><strong>NexT主题</strong><br>在<code>Blog_Hexo</code>目录下执行：</p>
<pre><code>git clone https://github.com/iissnan/hexo-theme-next themes/next
</code></pre><p>安装之后的文件位置为：</p>
<h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>与所有 <code>Hexo</code> 主题启用的模式一样。 当 <code>克隆/下载</code> 完成后，打开 <code>站点配置文件</code>， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code>。</p>
<pre><code>theme: next
</code></pre><h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><h4 id="为主题增加标签："><a href="#为主题增加标签：" class="headerlink" title="为主题增加标签："></a>为主题增加标签：</h4><pre><code>hexo new  page  tags
</code></pre><h4 id="为主题修改背景："><a href="#为主题修改背景：" class="headerlink" title="为主题修改背景："></a>为主题修改背景：</h4><p>在 <code>\themes\next\layout\_layout.swig</code>文件的<code>&lt;/body&gt;</code>上面添加</p>
<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/ca
</code></pre><p>具体详细设置参考：<a href="https://github.com/hustcc/canvas-nest.js/blob/master/README-zh.md" target="_blank" rel="external">https://github.com/hustcc/canvas-nest.js/blob/master/README-zh.md</a></p>
<hr>
<h2 id="问题杂集"><a href="#问题杂集" class="headerlink" title="问题杂集"></a>问题杂集</h2><h3 id="主题相关"><a href="#主题相关" class="headerlink" title="主题相关"></a>主题相关</h3><h4 id="hexo-next5-0主题不显示副标题"><a href="#hexo-next5-0主题不显示副标题" class="headerlink" title="hexo next5.0主题不显示副标题"></a>hexo next5.0主题不显示副标题</h4><p>打开<code>themes/next/source/css/_schemes/Mist/_logo.styl</code> 你会看见<br><code>.site-subtitle { display: none; }</code>删去或改成你想要的即可</p>
<h4 id="为主题-添加字数统计、阅读时长、友情链接"><a href="#为主题-添加字数统计、阅读时长、友情链接" class="headerlink" title="为主题 添加字数统计、阅读时长、友情链接"></a>为主题 添加字数统计、阅读时长、友情链接</h4><h5 id="开启设置"><a href="#开启设置" class="headerlink" title="开启设置"></a>开启设置</h5><p>NexT主题默认已经集成了文章【字数统计】、【阅读时长】统计功能，如果我们需要使用，只需要在主题配置文件<code>Blog\themes\next_config.yml</code>中打开<code>wordcount</code>统计功能即可</p>
<pre><code># Post wordcount display settings
# Dependencies: https://github.com/willin/hexo-wordcount
post_wordcount:
    item_text: true
    wordcount: true
    min2read: true
</code></pre><p>若只是打开开关，部署之后会发现文章的【字数统计】和【阅读时长】后面没有对应的xxx字，xx分钟等字样。</p>
<blockquote>
<p>参考：<a href="http://blog.csdn.net/wangxw725/article/details/71602256?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="external">http://blog.csdn.net/wangxw725/article/details/71602256?utm_source=itdadao&amp;utm_medium=referral</a></p>
</blockquote>
<p>找到<code>Blog\themes\next\layout\_macro\post.swig</code> 文件<br><strong>注意：</strong></p>
<pre><code>在此文中出现 字数统计的配置英文字样时会报错！
</code></pre><h4 id="安装统计插件"><a href="#安装统计插件" class="headerlink" title="安装统计插件"></a>安装统计插件</h4><p>如果没有安装 hexo-wordcount 插件，先安装该插件：</p>
<pre><code>npm i --save hexo-wordcount
</code></pre><p><strong>Node 版本 7.6.0 之前,请安装 2.x 版本 (Node.js v7.6.0 and previous) ，安装命令如下：</strong></p>
<pre><code>npm install hexo-wordcount@2 --save
</code></pre><p>安装完成后，重新执行启动服务预览就可以了。</p>
<h3 id="Hexo相关"><a href="#Hexo相关" class="headerlink" title="Hexo相关"></a>Hexo相关</h3><h4 id="添加分类、标签云、关于等页面"><a href="#添加分类、标签云、关于等页面" class="headerlink" title="添加分类、标签云、关于等页面"></a>添加分类、标签云、关于等页面</h4><p>以添加分类页面为例，<br>在站点目录下，打开<code>git bash</code>，输入</p>
<pre><code>hexo new page &quot;categories&quot;
</code></pre><p>之后在站点目录下的<code>source</code>文件夹下，会新增一个<code>categories</code>的文件夹，里面有一个<code>index.md</code>文件，打开如下</p>
<pre><code>---
title: categories
date: 2015-12-04 15:37:22
type: &quot;categories&quot;
comments: false
---
</code></pre><p>其中，<code>comments</code>可以设置为<code>false</code>，含义是打开分类页面、评论插件不显示；如要显示则改为<code>true</code>。<br><code>tags</code>, <code>about</code>页面的创建类似，输入</p>
<pre><code>hexo new page &quot;tags&quot;
hexo new page &quot;about&quot;
</code></pre><h4 id="标签的使用-文章模板"><a href="#标签的使用-文章模板" class="headerlink" title="标签的使用 + 文章模板"></a>标签的使用 + 文章模板</h4><pre><code>---
title: Mac环境下Hexo-GitHub-MWeb搭建个人博客
date: 2017-10-22 23:48:37
tags: [Mac,博客]
categories: 博客
---
</code></pre><h4 id="hexo草稿模式"><a href="#hexo草稿模式" class="headerlink" title="hexo草稿模式"></a>hexo草稿模式</h4><blockquote>
<p>参考：<a href="http://blog.csdn.net/wizardforcel/article/details/40684575" target="_blank" rel="external">http://blog.csdn.net/wizardforcel/article/details/40684575</a></p>
</blockquote>
<p><code>草稿模式</code>中的文件不会公开显示，适用于：有些文档非常重要但是又不想公开、又不想删除，此时使用hexo模式最合适。<br><strong>使用</strong></p>
<pre><code>hexo new  draft &quot;Android热修复&quot;
</code></pre><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-26%2011.18.27.png" alt="Github set up-w400"><br>执行此命令之后，会在相应目录下生成相关文件：<code>~/HexoBLog/source/_drafts/Android热修复.md</code>。图示：<br><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-26%2011.21.17.png" alt="Github set up-w400"></p>
<p><strong>强行预览草稿</strong><br>更爱配置文件：</p>
<pre><code>render _drafts: true
</code></pre><p>通过服务预览：</p>
<pre><code>hexo server --drafts
</code></pre><p>将草稿转变为正式文章：</p>
<pre><code>hexo publish [layout] &lt;filename&gt;
</code></pre>]]></content>
      
        <categories>
            
            <category> 博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac </tag>
            
            <tag> 博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《代码整洁之道 clean code》笔记 - 1]]></title>
      <url>/%E3%80%8A%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%20clean%20code%E3%80%8B%E7%AC%94%E8%AE%B0%20-%201/</url>
      <content type="html"><![CDATA[<p>关于代码</p>
<a id="more"></a>
<hr>
<p>[TOC]</p>
<hr>
<h2 id="第1章-整洁代码"><a href="#第1章-整洁代码" class="headerlink" title="第1章  整洁代码"></a>第1章  整洁代码</h2><h3 id="读此书有两种原因："><a href="#读此书有两种原因：" class="headerlink" title="读此书有两种原因："></a>读此书有两种原因：</h3><pre><code>1.你是个程序员
2.你想成为更好的程序员
</code></pre><h3 id="基础价值谜题："><a href="#基础价值谜题：" class="headerlink" title="基础价值谜题："></a>基础价值谜题：</h3><pre><code>开发期限压力的来源——混乱的代码。
</code></pre><h3 id="谜题的答案就是："><a href="#谜题的答案就是：" class="headerlink" title="谜题的答案就是："></a>谜题的答案就是：</h3><pre><code>始终尽可能保持代码的整洁。
</code></pre><h3 id="如何写出整洁的代码："><a href="#如何写出整洁的代码：" class="headerlink" title="如何写出整洁的代码："></a>如何写出整洁的代码：</h3><pre><code>遵循“小技巧” + “代码感”
</code></pre><h3 id="编程的时间花费："><a href="#编程的时间花费：" class="headerlink" title="编程的时间花费："></a>编程的时间花费：</h3><pre><code>读：写 = 10：1
通过读旧代码 -&gt; 写出新代码
</code></pre><h3 id="修改代码的原则："><a href="#修改代码的原则：" class="headerlink" title="修改代码的原则："></a>修改代码的原则：</h3><pre><code>“让营地比你来的时候更干净” —— 童子军军规
</code></pre><h3 id="“整洁代码”的各种定义："><a href="#“整洁代码”的各种定义：" class="headerlink" title="“整洁代码”的各种定义："></a>“整洁代码”的各种定义：</h3><pre><code>（1）C++发明者：优雅+高效
     代码逻辑直接了当，使得缺陷难以隐藏；
     尽量减少依赖关系，使之便于维护；
     依据某种分层战略完善错误处理代码；
     性能调制最优，使得他人无法修改；
     整洁的代码只做好一件事。

（2）《面向对象分析与设计》作者：
     从不隐藏设计者的意图，干净利落的抽象+直截了当的控制语句

（3）Eclipse教父，OTI公司创始人：
     小代码块，越小越好 —— “单一职能原则”；
     便于他人进行增补和修改；
     单元+验收测试；
     有意义的命名，见字知意 —— “字面编程”；
     只提供一种做一件事的途径+尽量减少依赖关系，明确的定义+提供清晰、尽量少的API

（4）《修改代码的艺术》作者：
      整洁的代码总是看起来像是某位特别在意他的人写的，几乎没有改进的余地。代码的作者什么都想到了，若是企图改进它，只能是回到原点。

（5）《极限编程实施》作者：
     能通过所有测试；
     没有重复代码；
     体现系统中的全部设计理念；
     包括尽量少的实体、比如：类、方法、函数等。
     对象功能太多，就要将对象进行细分；方法功能太多，就要进行“方法抽取”

（6）WiKi发明者，在意代码者的教父：
     若每个代码块都能让你感到深合己意，那就是简洁的代码；
     如果代码让编程语言看起来就像是专门为解决那个问题而存在的，那么就可以称之为漂亮的代码。

 减少重复的代码 + 提高表达力 + 提早构建简单抽象 
</code></pre>]]></content>
      
        <categories>
            
            <category> 阅读笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 阅读 </tag>
            
            <tag> 代码整洁之道 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android的menu文件]]></title>
      <url>/Android%E7%9A%84menu%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>总结</p>
<a id="more"></a>
<p>[TOC]</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-12%2011.28.03.png" alt=""></p>
<h1 id="在Activity中使用menu"><a href="#在Activity中使用menu" class="headerlink" title="在Activity中使用menu"></a>在Activity中使用menu</h1><pre><code>/**
* toolbar menu 的图标点初始化
* @param menu
* @return
*/
@Override
public boolean onCreateOptionsMenu(Menu menu) {
    super.onCreateOptionsMenu(menu);
    getMenuInflater().inflate(R.menu.tool_bar, menu);
    return true;
}    
</code></pre><h1 id="一个menu文件示例"><a href="#一个menu文件示例" class="headerlink" title="一个menu文件示例"></a>一个menu文件示例</h1><p>包括：单个item menu，组item menu</p>
<pre><code>&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;
    xmlns:tools=&quot;http://schemas.android.com/tools&quot;
    tools:context=&quot;.MainActivity&quot;
&gt;
    &lt;item
        android:id=&quot;@+id/choose_day&quot;
        android:icon=&quot;@drawable/date_choose_bg&quot;
        android:orderInCategory=&quot;80&quot;
        android:title=&quot;选择时间范围&quot;
        app:showAsAction=&quot;always&quot;&gt;
        &lt;!-- item包含menu表示该menu是item下的子菜单 --&gt;
        &lt;!--&lt;menu&gt;
        &amp;lt;!&amp;ndash; 将group中的菜单项放于一个组里面 &amp;ndash;&amp;gt;
        &lt;group
            android:id=&quot;@+id/group&quot;
            android:menuCategory=&quot;secondary&quot;
            android:visible=&quot;true&quot;&gt;
        &lt;item
            android:id=&quot;@+id/today&quot;
            android:icon=&quot;@drawable/menu_bg&quot;
            android:orderInCategory=&quot;80&quot;
            android:title=&quot;今天&quot;
            app:showAsAction=&quot;never&quot;/&gt;
        &lt;item
            android:id=&quot;@+id/week&quot;
            android:icon=&quot;@drawable/menu_bg&quot;
            android:orderInCategory=&quot;80&quot;
            android:title=&quot;本周&quot;
            app:showAsAction=&quot;never&quot;/&gt;
        &lt;/group&gt;
        &lt;/menu&gt;--&gt;
    &lt;/item&gt;
    &lt;item
        android:id=&quot;@+id/recorder_voice&quot;
        android:icon=&quot;@drawable/recoder_selector&quot;
        android:orderInCategory=&quot;80&quot;
        android:title=&quot;点击录音&quot;
        app:showAsAction=&quot;always&quot;&gt;
    &lt;/item&gt;
&lt;/menu&gt;
</code></pre><h1 id="方法的使用"><a href="#方法的使用" class="headerlink" title="方法的使用"></a>方法的使用</h1><p>在建立actionbar或是toolbar的时候，都会默认的实现两个方法：</p>
<ul>
<li><p>onCreateOptionsMenu ：</p>
<p>  建立菜单，只在页面加载的时候，运行一次，其后就不在运行了，想改变Menu在这里是不可能的。</p>
</li>
<li><p>onOptionsItemSelected ：对选中的菜单进行操作</p>
</li>
</ul>
<p>Android提供了一个方法叫onPrepareOptionsMenu，它的功能是在每次点击一个Menu的时候，它就改变一次，所以你想要改变Menu的值，就得在这里运行。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> menu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[XML绘制]]></title>
      <url>/XML%E7%BB%98%E5%88%B6/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Android动画参考 ：<a href="http://blog.csdn.net/harvic880925/article/details/39996643/" target="_blank" rel="external">http://blog.csdn.net/harvic880925/article/details/39996643/</a><br>各个形状介绍 ：<a href="http://blog.csdn.net/yangyahuiguo/article/details/52131658" target="_blank" rel="external">http://blog.csdn.net/yangyahuiguo/article/details/52131658</a></p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="shape绘制"><a href="#shape绘制" class="headerlink" title="shape绘制"></a>shape绘制</h1><h2 id="1-oval：椭圆"><a href="#1-oval：椭圆" class="headerlink" title="1. oval：椭圆"></a>1. oval：椭圆</h2><p>gradient:表示渐变属性 type 表示渐变的样式 </p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-11%2020.56.22.png" alt=""></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 绘制圆形 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">	<span class="attr">android:shape</span>=<span class="string">"oval"</span></span></div><div class="line"><span class="tag">	<span class="attr">android:useLevel</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 当只使用此属性时，此圆的背景色为此属性的颜色 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 默认过度颜色：从右 -》 左--&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 默认过度效果为：linear --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">gradient</span></span></div><div class="line"><span class="tag">	<span class="attr">android:angle</span>=<span class="string">"180"</span></span></div><div class="line"><span class="tag">	<span class="attr">android:endColor</span>=<span class="string">"@color/Amber_900"</span></span></div><div class="line"><span class="tag">	<span class="attr">android:startColor</span>=<span class="string">"@color/Orange_100"</span>/&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 当使用此属性时，过度颜色的背景将被遮盖，只显示当前属性的颜色 --&gt;</span></div><div class="line">	<span class="comment">&lt;!--&lt;solid android:color="@color/Deep_Orange_a700"/&gt;--&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 此颜色总是显示 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">stroke</span></span></div><div class="line"><span class="tag">	<span class="attr">android:width</span>=<span class="string">"5px"</span></span></div><div class="line"><span class="tag">	<span class="attr">android:color</span>=<span class="string">"@color/Blue_600"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-11%2020.57.28.png" alt=""></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/20160808151448620.png" alt=""></p>
<p>gradientRadius:和镜像属性结合使用，也是必须要设定的属性。<br>表示镜像半径的大小</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 绘制圆形 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">	<span class="attr">android:shape</span>=<span class="string">"oval"</span></span></div><div class="line"><span class="tag">	<span class="attr">android:useLevel</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 当只使用此属性时，此圆的背景色为此属性的颜色 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- sweep 属性正常使用，无需其他条件--&gt;</span></div><div class="line">	<span class="comment">&lt;!-- radial 属性使用需要搭配：gradientRadius属性 ： 效果： 由内而外的扩散--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">gradient</span></span></div><div class="line"><span class="tag">		<span class="attr">android:endColor</span>=<span class="string">"@color/Amber_900"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:gradientRadius</span>=<span class="string">"100px"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:startColor</span>=<span class="string">"@color/Orange_100"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:type</span>=<span class="string">"radial"</span>/&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 此颜色总是显示 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">stroke</span></span></div><div class="line"><span class="tag">		<span class="attr">android:width</span>=<span class="string">"5px"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:color</span>=<span class="string">"@color/Blue_600"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-11%2020.58.18.png" alt=""></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 绘制圆形 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:shape</span>=<span class="string">"oval"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:useLevel</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 当只使用此属性时，此圆的背景色为此属性的颜色 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 默认过度颜色：从右 -》 左--&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 默认过度效果为：linear --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">gradient</span></span></div><div class="line"><span class="tag">		<span class="attr">android:angle</span>=<span class="string">"180"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:centerColor</span>=<span class="string">"@color/white"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:endColor</span>=<span class="string">"@color/Amber_900"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:gradientRadius</span>=<span class="string">"200px"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:startColor</span>=<span class="string">"@color/Orange_100"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:type</span>=<span class="string">"radial"</span>/&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 此颜色总是显示 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">stroke</span></span></div><div class="line"><span class="tag">		<span class="attr">android:width</span>=<span class="string">"5px"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:color</span>=<span class="string">"@color/Blue_600"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-11%2021.00.03.png" alt=""></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/20160808152318725.png" alt=""></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 绘制圆形 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">	<span class="attr">android:shape</span>=<span class="string">"oval"</span></span></div><div class="line"><span class="tag">	<span class="attr">android:useLevel</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 当只使用此属性时，此圆的背景色为此属性的颜色 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 默认过度颜色：从右 -&gt; 左--&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 默认过度效果为：linear --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- android:centerY float。渐变中心的相对Y坐标，在0到1.0之间。 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- x,y 表示开始颜色 开始的位置--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">gradient</span></span></div><div class="line"><span class="tag">		<span class="attr">android:type</span>=<span class="string">"radial"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:gradientRadius</span>=<span class="string">"100px"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:centerX</span>=<span class="string">"0.3"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:centerY</span>=<span class="string">"0.3"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:endColor</span>=<span class="string">"@color/Amber_900"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:startColor</span>=<span class="string">"@color/Orange_100"</span>/&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 此颜色总是显示 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">stroke</span> <span class="attr">android:width</span>=<span class="string">"5px"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:color</span>=<span class="string">"@color/Blue_600"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="圆环"><a href="#圆环" class="headerlink" title="圆环"></a>圆环</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-11%2021.17.47.png" alt=""></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 绘制圆环 --&gt;</span></div><div class="line"><span class="comment">&lt;!--innerRadius : 内环的半径。一个尺寸值（dip等等）或者一个尺寸资源 --&gt;</span></div><div class="line"><span class="comment">&lt;!--innerRadiusRatio : Float类型。这个值表示内部环的比例，例如,如果android:innerRadiusRatio = " 5 ",那么内部的半径等</span></div><div class="line"><span class="comment">于环的宽度除以5。这个值会被android:innerRadius重写。 默认值是9。( innerRaiusRatio=view的宽度/半径) --&gt;</span></div><div class="line"><span class="comment">&lt;!-- thickness : 环的厚度，是一个尺寸值或尺寸的资源。--&gt;</span></div><div class="line"><span class="comment">&lt;!-- thicknessRatio : Float类型。厚度的比例。例如,如果android:thicknessRatio= " 2 ",然后厚度等于环的宽度除以2。这个值</span></div><div class="line"><span class="comment">是被android:innerRadius重写， 默认值是3。(thickenessRatio=View的宽度/环厚度）--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:innerRadius</span>=<span class="string">"120px"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:innerRadiusRatio</span>=<span class="string">"9"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:shape</span>=<span class="string">"ring"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:thickness</span>=<span class="string">"20px"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:thicknessRatio</span>=<span class="string">"3"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:useLevel</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">gradient</span></span></div><div class="line"><span class="tag">		<span class="attr">android:endColor</span>=<span class="string">"#00000000"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:startColor</span>=<span class="string">"#ff0000"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:type</span>=<span class="string">"sweep"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="shape中各个属性的介绍"><a href="#shape中各个属性的介绍" class="headerlink" title="shape中各个属性的介绍"></a>shape中各个属性的介绍</h1><h2 id="1-形状分类"><a href="#1-形状分类" class="headerlink" title="1. 形状分类"></a>1. 形状分类</h2><ul>
<li>矩形<code>rectangle</code></li>
<li>椭圆形<code>oval</code></li>
<li>线性形状<code>line</code></li>
<li>环形<code>ring</code></li>
<li>水波纹<code>ripple</code></li>
</ul>
<h2 id="2-ring专有属性"><a href="#2-ring专有属性" class="headerlink" title="2. ring专有属性"></a>2. <code>ring</code>专有属性</h2><p>android:innerRadius         尺寸，内环的半径。<br>android:innerRadiusRatio    浮点型，以环的宽度比率来表示内环的半径，<br>例如，如果:android:innerRadiusRatio=”5”，表示内环半径等于环的宽度除以5，这个值是可以被覆盖的，默认为9.</p>
<p>android:thickness           尺寸，环的厚度<br>android:thicknessRatio<br>浮点型，以环的宽度比率来表示环的厚度，例如，如果android:thicknessRatio=”2”，<br>那么环的厚度就等于环的宽度除以2。这个值是可以被android:thickness覆盖的，默认值是3.<br>android:useLevel            boolean值，如果当做是LevelListDrawable使用时值为true，否则为false.</p>
<h2 id="3-一个xml文件-6个元素"><a href="#3-一个xml文件-6个元素" class="headerlink" title="3. 一个xml文件 6个元素"></a>3. 一个xml文件 6个元素</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">shape</span></span></div><div class="line"><span class="tag">  <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">  <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line"><span class="comment">      1-  圆角</span></div><div class="line"><span class="comment">      android:radius              整型 半径</span></div><div class="line"><span class="comment">      android:topLeftRadius       整型 左上角半径</span></div><div class="line"><span class="comment">      android:topRightRadius      整型 右上角半径</span></div><div class="line"><span class="comment">      android:bottomLeftRadius    整型 左下角半径</span></div><div class="line"><span class="comment">      android:bottomRightRadius   整型 右下角半径</span></div><div class="line"><span class="comment">   --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">corners</span></span></div><div class="line"><span class="tag">      <span class="attr">android:radius</span>=<span class="string">"8dp"</span></span></div><div class="line"><span class="tag">      <span class="attr">android:topLeftRadius</span>=<span class="string">"5dp"</span></span></div><div class="line"><span class="tag">      <span class="attr">android:topRightRadius</span>=<span class="string">"15dp"</span></span></div><div class="line"><span class="tag">      <span class="attr">android:bottomLeftRadius</span>=<span class="string">"20dp"</span></span></div><div class="line"><span class="tag">      <span class="attr">android:bottomRightRadius</span>=<span class="string">"25dp"</span></span></div><div class="line"><span class="tag">      /&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line"><span class="comment">     2- 渐变色</span></div><div class="line"><span class="comment">      android:startColor  颜色值                             起始颜色</span></div><div class="line"><span class="comment">      android:endColor    颜色值                             结束颜色</span></div><div class="line"><span class="comment">      android:centerColor 整型                              渐变中间颜色，即开始颜色与结束颜色之间的颜色</span></div><div class="line"><span class="comment">      android:angle       整型                              渐变角度(PS：当angle=0时，渐变色是从左向右。 然后逆时针方向转，当angle=90时为从下往上。angle必须为45的整数倍)</span></div><div class="line"><span class="comment">      android:type        ["linear" | "radial" | "sweep"] 渐变类型(取值：linear、radial、sweep)</span></div><div class="line"><span class="comment">                          linear 线性渐变，这是默认设置</span></div><div class="line"><span class="comment">                          radial 放射性渐变，以开始色为中心。</span></div><div class="line"><span class="comment">                          sweep 扫描线式的渐变。</span></div><div class="line"><span class="comment">     android:useLevel     ["true" | "false"]              如果要使用LevelListDrawable对象，就要设置为true。设置为true无渐变。false有渐变色</span></div><div class="line"><span class="comment">     android:gradientRadius 整型                            渐变色半径.当 android:type="radial" 时才使用。单独使用 android:type="radial"会报错。</span></div><div class="line"><span class="comment">     android:centerX      整型                              渐变中心X点坐标的相对位置</span></div><div class="line"><span class="comment">     android:centerY      整型                              渐变中心Y点坐标的相对位置</span></div><div class="line"><span class="comment">  --&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">gradient</span> </span></div><div class="line"><span class="tag">      <span class="attr">android:startColor</span>=<span class="string">"#FFFF0000"</span></span></div><div class="line"><span class="tag">      <span class="attr">android:endColor</span>=<span class="string">"#80FF00FF"</span></span></div><div class="line"><span class="tag">      <span class="attr">android:angle</span>=<span class="string">"45"</span></span></div><div class="line"><span class="tag">      /&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line"><span class="comment">      3- 内”边距"，即内容与边的距离</span></div><div class="line"><span class="comment">      android:left    整型 左内边距</span></div><div class="line"><span class="comment">      android:top     整型 上内边距</span></div><div class="line"><span class="comment">      android:right   整型 右内边距</span></div><div class="line"><span class="comment">      android:bottom  整型 下内边距</span></div><div class="line"><span class="comment">    --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">padding</span></span></div><div class="line"><span class="tag">       <span class="attr">android:left</span>=<span class="string">"10dp"</span></span></div><div class="line"><span class="tag">       <span class="attr">android:top</span>=<span class="string">"10dp"</span></span></div><div class="line"><span class="tag">       <span class="attr">android:right</span>=<span class="string">"10dp"</span></span></div><div class="line"><span class="tag">       <span class="attr">android:bottom</span>=<span class="string">"10dp"</span></span></div><div class="line"><span class="tag">       /&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line"><span class="comment">      4- ”大小"</span></div><div class="line"><span class="comment">      android:width   整型 宽度</span></div><div class="line"><span class="comment">      android:height  整型 高度</span></div><div class="line"><span class="comment">  --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">size</span></span></div><div class="line"><span class="tag">      <span class="attr">android:width</span>=<span class="string">"600dp"</span></span></div><div class="line"><span class="tag">      /&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line"><span class="comment">      5- ”内部填充"</span></div><div class="line"><span class="comment">      android:color   颜色值 填充颜色</span></div><div class="line"><span class="comment">  --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">solid</span></span></div><div class="line"><span class="tag">      <span class="attr">android:color</span>=<span class="string">"#ffff9d77"</span></span></div><div class="line"><span class="tag">      /&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">   <span class="comment">&lt;!--</span></div><div class="line"><span class="comment">      6- ”描边"</span></div><div class="line"><span class="comment">      android:width       整型  描边的宽度</span></div><div class="line"><span class="comment">      android:color       颜色值     描边的颜色</span></div><div class="line"><span class="comment">      android:dashWidth   整型  表示描边的样式是虚线的宽度， 值为0时，表示为实线。值大于0则为虚线。</span></div><div class="line"><span class="comment">      android:dashGap     整型  表示描边为虚线时，虚线之间的间隔 即“ - - - - ”</span></div><div class="line"><span class="comment">   --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">stroke</span></span></div><div class="line"><span class="tag">      <span class="attr">android:width</span>=<span class="string">"2dp"</span></span></div><div class="line"><span class="tag">      <span class="attr">android:color</span>=<span class="string">"#dcdcdc"</span></span></div><div class="line"><span class="tag">      /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="阴影绘制"><a href="#阴影绘制" class="headerlink" title="阴影绘制"></a>阴影绘制</h1><blockquote>
<p>参考：<a href="http://blog.csdn.net/lihenair/article/details/50111231" target="_blank" rel="external">http://blog.csdn.net/lihenair/article/details/50111231</a></p>
</blockquote>
<h2 id="绘制原理"><a href="#绘制原理" class="headerlink" title="绘制原理"></a>绘制原理</h2><p><code>&lt;layer_list&gt;</code> : 将多个“图片”或 多种效果的shape 按照顺序层叠起来</p>
<p><strong>原理图解</strong><br><img src="http://oy991qm3u.bkt.clouddn.com/20151130133320292.png" alt=""></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-11%2021.41.15.png" alt=""></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 底层--&gt;</span></div><div class="line"><span class="comment">&lt;!-- 此处的位置数值表示：相对于顶层的位置偏移--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">android:top</span>=<span class="string">"10px"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:left</span>=<span class="string">"10px"</span>&gt;</span></div><div class="line">	 	<span class="tag">&lt;<span class="name">shape</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#bbb"</span> /&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 描边 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">stroke</span></span></div><div class="line"><span class="tag">				<span class="attr">android:width</span>=<span class="string">"1px"</span></span></div><div class="line"><span class="tag">				<span class="attr">android:color</span>=<span class="string">"#ccc"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 顶层--&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 此处的位置数值表示：相对于底层的位置偏移--&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">android:bottom</span>=<span class="string">"10px"</span></span></div><div class="line"><span class="tag">		<span class="attr">android:right</span>=<span class="string">"10px"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">shape</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#ffffff"</span> /&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 描边 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">stroke</span> <span class="attr">android:width</span>=<span class="string">"0.3px"</span> <span class="attr">android:color</span>=<span class="string">"#ddd"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="实际应用的例子："><a href="#实际应用的例子：" class="headerlink" title="实际应用的例子："></a>实际应用的例子：</h2><p>在我们的例子中，当按钮被按下时，我们取消了阴影来产生反馈效果。 </p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/20151130133411656.png" alt=""></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">layer-list</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:left</span>=<span class="string">"4dp"</span> <span class="attr">android:top</span>=<span class="string">"4dp"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">shape</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#ff58bb52"</span> /&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"30dip"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">layer-list</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- SHADOW LAYER --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:left</span>=<span class="string">"4dp"</span> <span class="attr">android:top</span>=<span class="string">"4dp"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">shape</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#66000000"</span> /&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"30dip"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- CONTENT LAYER --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:bottom</span>=<span class="string">"4dp"</span> <span class="attr">android:right</span>=<span class="string">"4dp"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">shape</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#ff58bb52"</span> /&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"30dip"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-11%2021.50.50.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  15-I/O]]></title>
      <url>/Python3%20%2015-I:O/</url>
      <content type="html"><![CDATA[<p><strong>人生苦短，我用Python</strong></p>
<a id="more"></a>
<p>[TOC]</p>
<h2 id="关于Open-源码文档"><a href="#关于Open-源码文档" class="headerlink" title="关于Open()源码文档"></a>关于<code>Open()</code>源码文档</h2><p>打开文件并返回流。失败时提高IOError。</p>
<pre><code>文件是一个文本或字节串，给出要打开的文件的名称（如果文件不在当前工作目录中的路径）或要包装的文件的整数文件描述符。 （如果给出了一个文件描述符，则当返回的I / O对象关闭时，它将被关闭，除非closefd设置为False。）mode是一个可选字符串，用于指定文件打开的方式。它默认为&apos;r&apos;，这意味着在文本模式下打开阅读。其他常见的值是“w”用于写入（截断文件已存在），“x”用于创建和写入新文件，“a”用于附加（在某些Unix系统上，这意味着所有写入都附加到无论当前查找位置如何，文件的结尾）。在文本模式下，如果未指定编码，则使用的编码与平台相关：调用locale.getpreferredencoding（False）以获取当前语言环境编码。 （用于读取和写入原始字节使用二进制模式并保留编码未指定。）可用的模式有：

    &apos;r&apos;开放阅读（默认）
    &apos;w&apos;打开写入，首先截断文件
    &apos;x&apos;创建一个新文件并将其打开以进行写入
    &apos;a&apos;开放写作，如果文件存在，则附加到文件末尾
    &apos;b&apos;二进制模式
    &apos;t&apos;文字模式（默认）
    &apos;+&apos;打开一个磁盘文件进行更新（读写）
    &apos;U&apos;通用换行模式（弃用）

默认模式为“rt”（打开阅读文本）。对于二进制随机访问，模式&apos;w + b&apos;打开并将文件截断为0字节，而&apos;r + b&apos;打开文件而不截断。如果文件已经存在，&apos;x&apos;模式意味着&apos;w&apos;并引发一个`FileExistsError`。

Python区分以二进制和文本模式打开的文件，即使底层操作系统没有。文件以二进制模式打开（将&apos;b&apos;追加到模式参数）返回内容作为字节对象而不进行任何解码。在文本模式（默认情况下，或在模式参数附加了&apos;t&apos;）时，文件的内容将返回为字符串，首先使用平台相关编码对字节进行了解码，如果给出，则使用指定的编码。

&apos;U&apos;模式已被弃用，并会在将来的Python版本中引发异常。它对Python 3没有影响。使用换行来控制通用换行符模式。缓冲是用于设置缓冲策略的可选整数。通过0以切换缓冲（仅允许在二进制模式下），1选择行缓冲（仅在文本模式下可用），整数&gt; 1表示固定大小的块缓冲区的大小。当没有给出缓冲参数时，默认缓冲策略的工作原理如下：

*二进制文件以固定大小的块进行缓冲;使用启发式方法来选择缓冲区的大小，试图确定底层设备的“块大小”并落回到“io.DEFAULT_BUFFER_SIZE”上。在许多系统上，缓冲区通常为4096或8192字节长。

*“交互式”文本文件（其中isatty（）返回True的文件）使用行缓冲。其他文本文件使用上述针对二进制文件的策略。

encoding是用于对文件进行解码或编码的编码名称。这只能在文本模式下使用。默认编码是平台依赖的，但是Python可以支持任何编码。有关支持的编码列表，请参阅编解码器模块。

errors是一个可选的字符串，指定如何处理编码错误 - 此参数不应在二进制模式下使用。如果存在编码错误（默认值为None）具有相同的效果，则通过&apos;strict&apos;来引发ValueError异常，或者通过&apos;ignore&apos;忽略错误。 （请注意，忽略编码错误可能导致数据丢失。）有关编码错误字符串的列表，请参阅codecs.register的文档或运行&apos;help（codecs.Codec）&apos;。

换行符控制通用换行符的工作原理（仅适用于文本模式）。它可以是无，&apos;&apos;，&apos;\ n&apos;，&apos;\ r&apos;和&apos;\ r \ n&apos;。它的工作原理如下：

*输入时，如果换行符为None，则启用通用换行符模式。输入中的行可以&apos;\ n&apos;，&apos;\ r&apos;或&apos;\ r \ n&apos;结尾，并将它们转换为&apos;\ n&apos;，然后返回给调用者。如果是&apos;&apos;，则启用通用换行模式，但是行结束将返回给未经翻译的调用者。如果它具有任何其他合法值，则输入行仅由给定终止
</code></pre><hr>
<p>2017年07月21日09:44:52 暂停 </p>
<hr>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  14-调试]]></title>
      <url>/Python3%20%2014-%E8%B0%83%E8%AF%95/</url>
      <content type="html"><![CDATA[<p><strong>人生苦短，我用Python</strong></p>
<p><strong>几个方法说明</strong></p>
<a id="more"></a>
<p>[TOC]</p>
<h3 id="print-打印"><a href="#print-打印" class="headerlink" title=".print()打印"></a>.<code>print()</code>打印</h3><p>用print()最大的坏处是将来还得删掉它，想想程序里到处都是print()，运行结果也会包含很多垃圾信息。</p>
<h3 id="assert断言"><a href="#assert断言" class="headerlink" title="assert断言"></a><code>assert</code>断言</h3><p>凡是用<code>print()</code>来辅助查看的地方，都可以用断言<code>assert</code>来替代。<br>代码示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></div><div class="line">    n = int(s)</div><div class="line">    <span class="keyword">assert</span> n != <span class="number">0</span>, <span class="string">'n is zero!'</span></div><div class="line">    <span class="keyword">return</span> <span class="number">10</span> / n</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    foo(<span class="string">'0'</span>)</div></pre></td></tr></table></figure>
<p>在程序中使用<code>assert</code>和<code>print()</code>相比也好不到哪去。<br><strong>但是：启动Python解释器时可以用-O参数来关闭assert</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python3 -O err.py</div></pre></td></tr></table></figure>
<p><strong>关闭后，你可以把所有的assert语句当成pass来看。</strong></p>
<h3 id="logging日志"><a href="#logging日志" class="headerlink" title="logging日志"></a><code>logging</code>日志</h3><p>把<code>print()</code>替换为<code>logging</code>是第3种方式，和<code>assert</code>比，<code>logging</code>不但会抛出错误，而且可以输出到文件。<br><strong>注意：导入logging包之后，应在添加配置语句<code>logging.basicConfig(level=logging.INFO)</code></strong><br>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="comment"># logging.basicConfig(level=logging.INFO)</span></div><div class="line"><span class="comment"># 配置日志信息</span></div><div class="line">logging.basicConfig(level=logging.DEBUG,</div><div class="line">          format=<span class="string">'%(asctime)-8s %(name)-8s %(levelname)-8s %(message)s  - [%(filename)s:%(lineno)s]'</span>,</div><div class="line">          datefmt=<span class="string">'%Y-%m-%d %H:%M:%S'</span>,</div><div class="line">          filename=<span class="string">'myapp.log'</span>,</div><div class="line">          filemode=<span class="string">'w'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 定义一个Handler打印INFO及以上级别的日志到sys.stderr</span></div><div class="line">console = logging.StreamHandler()</div><div class="line">console.setLevel(logging.DEBUG)</div><div class="line"></div><div class="line"><span class="comment"># 设置控制台日志打印格式</span></div><div class="line">formatter = logging.Formatter(<span class="string">'%(name)-12s: %(levelname)-8s %(message)s'</span>)</div><div class="line">console.setFormatter(formatter)</div><div class="line"></div><div class="line"><span class="comment"># 将定义好的console日志handler添加到root logger</span></div><div class="line">logging.getLogger(<span class="string">''</span>).addHandler(console)</div><div class="line"></div><div class="line"><span class="string">"""测试logging"""</span></div><div class="line">s = <span class="string">'0'</span></div><div class="line">n = int(s)</div><div class="line">logging.info(<span class="string">'n = %d'</span> % n)</div><div class="line">print(<span class="number">10</span> / n)</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">结果输出</span></div><div class="line"><span class="string">INFO:root:n = 0</span></div><div class="line"><span class="string">Traceback (most recent call last):</span></div><div class="line"><span class="string">  File "/Users/yannischeng/PycharmProjects/First_Python_Project/py_obj_end_12/TestObj.py", line 69, in &lt;module&gt;</span></div><div class="line"><span class="string">    print(10 / n)</span></div><div class="line"><span class="string">ZeroDivisionError: division by zero</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">输出到文件中的信息：</span></div><div class="line"><span class="string">2017-07-20 09:57:51 root     INFO     n = 0  - [LogSet.py:27]</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<p><strong>优点</strong></p>
<ul>
<li>允许你指定记录信息的级别，有<code>debug</code>，<code>info</code>，<code>warning</code>，<code>error</code>等几个级别。</li>
<li>通过简单的配置，一条语句可以同时输出到不同的地方，比如<code>console</code>和<code>文件</code>。</li>
</ul>
<p><strong>参考</strong></p>
<blockquote>
<p>logging的配置参考：<a href="http://blog.csdn.net/naiveloafer/article/details/7630903" target="_blank" rel="external">http://blog.csdn.net/naiveloafer/article/details/7630903</a></p>
</blockquote>
<p><strong>Format编写</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">Format</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">%(name)s</td>
<td style="text-align:center">Name of the logger (logging channel).</td>
</tr>
</tbody>
</table>
<p>%(levelno)s |Numeric logging level for the message (DEBUG, INFO, WARNING, ERROR, CRITICAL).<br>%(levelname)s |Text logging level for the message (‘DEBUG’, ‘INFO’, ‘WARNING’, ‘ERROR’, ‘CRITICAL’).<br>%(pathname)s |Full pathname of the source file where the logging call was issued (if available).<br>%(filename)s |   Filename portion of pathname.<br>%(module)s | Module (name portion of filename).<br>%(funcName)s |   Name of function containing the logging call.<br>%(lineno)d | Source line number where the logging call was issued (if available).<br>%(created)f | Time when the LogRecord was created (as returned by time.time()).<br>%(relativeCreated)d   | Time in milliseconds when the LogRecord was created, relative to the time the logging module was loaded.<br>%(asctime)s |Human-readable time when the LogRecord was created. By default this is of the form “2003-07-08 16:49:45,896” (the numbers after the comma are millisecond portion of the time).<br>%(msecs)d |  Millisecond portion of the time when the LogRecord was created.<br>%(thread)d | Thread ID (if available).<br>%(threadName)s | Thread name (if available).<br>%(process)d | Process ID (if available).<br>%(message)s | The logged message, computed as msg % args.</p>
<p><strong>basicConfig()编写</strong></p>
<p>对日志记录系统进行基本配置：</p>
<ul>
<li>如果根记录器已经具有处理程序，则此函数不起作用配置。这是一个方便的方法，供简单的脚本使用做一次性配置的日志记录包。</li>
<li>默认行为是创建一个写入的StreamHandler sys.stderr，使用BASIC_FORMAT格式字符串设置格式化程序，和将处理程序添加到根记录器。</li>
<li>可以指定一些可选的关键字参数，这可以改变默认行为。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">Optional Keyword</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">filename</td>
<td style="text-align:center">指定使用指定的FileHandler进行创建文件名，而不是一个StreamHandler。</td>
</tr>
</tbody>
</table>
<pre><code>filemode | 指定打开文件的方式，如果指定了filename（如果filemode未指定，则默认为&apos;a&apos;）。
format | 为处理程序使用指定的格式字符串。
datefmt | 使用指定的日期/时间格式。
style | 如果指定了格式字符串，请使用此字符串指定格式字符串的类型（可能的值&apos;％&apos;，&apos;{&apos;，&apos;$&apos;，for ％-formatting，：meth：`str.format`和：class：`string.Template` - 默认为&apos;％&apos;）。
level | 将根记录器级别设置为指定级别。
stream | 使用指定的流来初始化StreamHandler。注意该参数与“filename”不兼容 - 如果同时使用存在，“流”被忽略。
handlers | 如果指定，这应该是已经创建的迭代处理程序，将被添加到根处理程序。任何处理程序在没有格式化程序分配的列表中分配在此函数中创建的格式化程序。
</code></pre><p><strong><em>请注意：</em></strong></p>
<p>可以指定使用open（filename，mode）创建的流而不是传递文件名和模式。但是应该记住StreamHandler并不关闭它的流（因为它可能使用sys.stdout或sys.stderr），而FileHandler关闭其流当处理程序关闭时。</p>
<h3 id="调试器pdb-–-有了PyCharm目前不考虑此种方式"><a href="#调试器pdb-–-有了PyCharm目前不考虑此种方式" class="headerlink" title=".调试器pdb – 有了PyCharm目前不考虑此种方式"></a>.调试器<code>pdb</code> – 有了PyCharm目前不考虑此种方式</h3><p>启动Python的调试器pdb，让程序以单步方式运行，可以随时查看运行状态。</p>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  14-单元测试]]></title>
      <url>/Python3%20%2014-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<p><strong>人生苦短，我用Python</strong></p>
<a id="more"></a>
<hr>
<p>[TOC]</p>
<hr>
<ul>
<li>“测试驱动开发”（TDD：Test-Driven Development）– 单元测试</li>
<li>是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作。</li>
</ul>
<h2 id="在pycharm中创建单元测试"><a href="#在pycharm中创建单元测试" class="headerlink" title="在pycharm中创建单元测试"></a>在pycharm中创建单元测试</h2><blockquote>
<p>创建参考：<a href="http://blog.csdn.net/u013088062/article/details/50183789" target="_blank" rel="external">http://blog.csdn.net/u013088062/article/details/50183789</a><br>一个案例：<a href="http://www.cnblogs.com/iamjqy/p/7155315.html" target="_blank" rel="external">http://www.cnblogs.com/iamjqy/p/7155315.html</a></p>
</blockquote>
<p>具体创建过程参考python文件夹的<code>.png</code>图片。</p>
<ul>
<li>选中待要编写测试代码的类名 –&gt; 右键 选择 <code>Go To</code> –&gt; <code>Test Object</code></li>
</ul>
<h2 id="单元测试实现"><a href="#单元测试实现" class="headerlink" title="单元测试实现"></a>单元测试实现</h2><h3 id="待测试类代码"><a href="#待测试类代码" class="headerlink" title="待测试类代码"></a>待测试类代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDict</span><span class="params">(dict)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kwargs)</span>:</span></div><div class="line">        super().__init__(**kwargs)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> self[item]</div><div class="line">        <span class="keyword">except</span> KeyError:</div><div class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">r"'MyDict' object has no attribute '%s'"</span> % item)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></div><div class="line">        self[key]  = value</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, m, n)</span>:</span></div><div class="line">        print(<span class="string">"%d + %d = %d"</span> % (m, n, (m+n)))</div></pre></td></tr></table></figure>
<h3 id="单元测试类代码"><a href="#单元测试类代码" class="headerlink" title="单元测试类代码"></a>单元测试类代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> unittest <span class="keyword">import</span> TestCase</div><div class="line"></div><div class="line"><span class="keyword">from</span> py_unittext_14.MyDict <span class="keyword">import</span> MyDict</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMyDict</span><span class="params">(TestCase)</span>:</span></div><div class="line"></div><div class="line">    <span class="comment"># setUp与tearDown</span></div><div class="line">    <span class="comment"># 这两个方法会分别在每调用一个测试方法的前后分别被执行。</span></div><div class="line">    <span class="comment"># setUp()和tearDown()方法有什么用呢？设想你的测试需要启动一个数据库，这时，就可以在setUp()方法中连接数据库，在tearDown()方法中关闭数据库，这样，不必在每个测试方法中重复相同的代码</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'setUp...'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'tearDown...'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_add</span><span class="params">(self)</span>:</span></div><div class="line">        d = MyDict(name=<span class="string">'程文佳'</span>, age=<span class="string">'24'</span>, city=<span class="string">'Tianjin'</span>)</div><div class="line">        self.assertEqual(d.name, <span class="string">'程文佳'</span>)</div><div class="line">        self.assertEqual(d[<span class="string">'name'</span>], <span class="string">'程文佳'</span>)</div><div class="line">        print(d.name)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_add2</span><span class="params">(self)</span>:</span></div><div class="line">        d = MyDict(name=<span class="string">'程文佳'</span>, age=<span class="string">'24'</span>, city=<span class="string">'Tianjin'</span>)</div><div class="line">        d.add(<span class="number">3</span>, <span class="number">4</span>)</div></pre></td></tr></table></figure>
<h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">setUp...</div><div class="line">程文佳</div><div class="line">tearDown...</div><div class="line"></div><div class="line">setUp...</div><div class="line"><span class="number">3</span> + <span class="number">4</span> = <span class="number">7</span></div><div class="line">tearDown...</div><div class="line"></div><div class="line">Ran <span class="number">2</span> tests <span class="keyword">in</span> <span class="number">0.002</span>s</div><div class="line"></div><div class="line">OK</div></pre></td></tr></table></figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li>单元测试可以有效地测试某个程序模块的行为，是未来重构代码的信心保证。</li>
<li>单元测试的测试用例要覆盖常用的输入组合、边界条件和异常。</li>
<li>单元测试代码要非常简单，如果测试代码太复杂，那么测试代码本身就可能有bug。</li>
<li>单元测试通过了并不意味着程序就没有bug了，但是不通过程序肯定有bug。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  12-面向对象+元类]]></title>
      <url>/Python3%20%2012-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1+%E5%85%83%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p><strong>人生苦短，我用Python</strong></p>
<a id="more"></a>
<hr>
<p>[TOC]</p>
<hr>
<p>静态语言和动态语言最大的不同，就是<code>函数</code>和<code>类</code>的定义。不是编译时定义的，而是运行时动态编译的。</p>
<p>关键字：<strong><em>type()</em></strong>, <strong><em>metaclass</em></strong></p>
<h2 id="一般的class创建"><a href="#一般的class创建" class="headerlink" title="一般的class创建"></a>一般的class创建</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'Hello World !'</span>)</div><div class="line"></div><div class="line"><span class="keyword">from</span> py_obj_end_12.Hello <span class="keyword">import</span> Hello</div><div class="line"></div><div class="line"><span class="string">"""导入Hello类后的测试"""</span></div><div class="line">h = Hello()</div><div class="line">print(h.hello())  <span class="comment"># Hello World !</span></div><div class="line"></div><div class="line"><span class="comment"># 查看实例h所属的类型，是class Hello</span></div><div class="line">print(type(h))  <span class="comment"># &lt;class 'py_obj_end_12.Hello.Hello'&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># 查看Hello所属的类型，是 type 类型</span></div><div class="line">print(type(Hello))  <span class="comment"># &lt;class 'type'&gt;</span></div></pre></td></tr></table></figure>
<h2 id="使用type-来动态创建类"><a href="#使用type-来动态创建类" class="headerlink" title="使用type()来动态创建类"></a>使用<code>type()</code>来动态创建类</h2><h3 id="type-是什么？为什么-Hello-会是-type-类型的？"><a href="#type-是什么？为什么-Hello-会是-type-类型的？" class="headerlink" title="type 是什么？为什么 Hello 会是 type 类型的？"></a><code>type</code> 是什么？为什么 <code>Hello</code> 会是 <code>type</code> 类型的？</h3><ul>
<li>因为<code>Python</code>是<code>动态语言</code>，所以<code>class</code>的定义是运行时动态创建的，而创建<code>class</code>使用的就是<code>type()</code>函数</li>
<li><code>type()</code>函数既可以返回一个<code>对象的类型</code>，又可以创建出<code>新的类型</code>。</li>
</ul>
<h3 id="通过type-创建class和直接写class是完全一样的。"><a href="#通过type-创建class和直接写class是完全一样的。" class="headerlink" title="通过type()创建class和直接写class是完全一样的。"></a>通过type()创建class和直接写class是完全一样的。</h3><ul>
<li>因为<code>python</code>解释器遇到<code>class</code>定义时，仅仅是扫描一下<code>class</code>定义的语法，然后调用<code>type()</code>函数创建出<code>class</code>。</li>
<li>正常情况下，我们使用<code>class Xxx</code>创建一个类。但是，因为<code>type()</code>函数允许我们动态的将类创建出来。</li>
<li><code>动态语言</code>本身支持处于运行期的程序动态创建一个类。这和<code>Java</code>的<code>静态语言</code>不同。</li>
</ul>
<blockquote>
<p><code>type()</code>使用：<a href="http://www.cnblogs.com/ccorz/p/6120783.html" target="_blank" rel="external">http://www.cnblogs.com/ccorz/p/6120783.html</a></p>
</blockquote>
<pre><code>type(name, bases, dict)
       返回一个新的type对象. 基本上是 class 语句的动态形式. 参数:
      name  , 字符串, 制定要构造类的名字, 赋给新对象的 __name__ 属性;
      bases，一个tuple，指定新类型的所有基类，赋给新对象的__bases__ 属性; 
      dict， 字典类型，作为新类的名字空间，赋给新对象的__dict__ 属性
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 用type()函数创建Hello类</span></div><div class="line"></div><div class="line"><span class="comment"># 1.定义一个函数。即：类的方法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></div><div class="line">    print(<span class="string">'Hello, World 2!'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 2.创建一个class Hello2。type()函数中传入的参数：</span></div><div class="line"><span class="comment"># 1）class类名，2）继承的父类集合，3）class的方法名与函数的绑定，此处即：将函数say()绑定至方法名hello上</span></div><div class="line"><span class="comment"># 其实class定义一个类主要也是这3个主要组成部分：类名、继承类、方法</span></div><div class="line"><span class="comment"># Hello2是一个以名为"Hello22"的类的引用。这个名为"Hello22"的类以object为基类,类中有一个say()函数</span></div><div class="line">Hello2 = type(<span class="string">'Hello22'</span>, (object,), dict(say=say))</div><div class="line"></div><div class="line"><span class="comment"># 3.为类绑定一个变量</span></div><div class="line">Hello2.name = <span class="string">'cwj'</span></div><div class="line"></div><div class="line"><span class="comment"># 测试</span></div><div class="line">h2 = Hello2()</div><div class="line">print(h2.say())  <span class="comment"># Hello, World 2!</span></div><div class="line">print(h2.name)  <span class="comment"># cwj</span></div></pre></td></tr></table></figure>
<h3 id="metaclass"><a href="#metaclass" class="headerlink" title="metaclass"></a><code>metaclass</code></h3><p>使用metaclass来控制类的创建行为</p>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  11-面向对象+枚举]]></title>
      <url>/Python3%20%2011-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1+%E6%9E%9A%E4%B8%BE/</url>
      <content type="html"><![CDATA[<p><strong>人生苦短，我用Python</strong></p>
<a id="more"></a>
<hr>
<p>[TOC]</p>
<hr>
<blockquote>
<p><code>Python</code>中<code>Enum</code>枚举的实现：<a href="http://www.cnblogs.com/codingmylife/archive/2013/05/31/3110656.html" target="_blank" rel="external">http://www.cnblogs.com/codingmylife/archive/2013/05/31/3110656.html</a></p>
</blockquote>
<p>定义常量的一般方法：定义变量<br>推荐的方法为：将枚举类型定义一个<code>class</code>类型。每个常量都是<code>class</code>的唯一实例<br>python提供了Enum来实现枚举功能</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 实现方式1</span></div><div class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</div><div class="line"></div><div class="line">Week = Enum(<span class="string">'WeekInfo'</span>, (<span class="string">'Mon'</span>, <span class="string">'Tue'</span>, <span class="string">'Wed'</span>, <span class="string">'Thu'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>, <span class="string">'Sun'</span>))</div><div class="line"></div><div class="line"><span class="comment"># 实现方式2</span></div><div class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum, unique</div><div class="line"></div><div class="line"><span class="comment"># @unique装饰器检查保证没有重复值</span></div><div class="line"><span class="meta">@unique</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEnum02</span><span class="params">(Enum)</span>:</span></div><div class="line">    Sun = <span class="number">0</span></div><div class="line">    Mon = <span class="number">1</span></div><div class="line">    Tue = <span class="number">2</span></div><div class="line">    Wed = <span class="number">3</span></div><div class="line">    Thu = <span class="number">4</span></div><div class="line">    Fri = <span class="number">5</span></div><div class="line">    Sta = <span class="number">6</span></div><div class="line"></div><div class="line"><span class="comment"># 遍历Enum</span></div><div class="line"><span class="keyword">for</span> name, value <span class="keyword">in</span> Week.__members__.items():</div><div class="line">    print(name, value, m.value)</div><div class="line"></div><div class="line">print(Week.Mon.value)  <span class="comment"># 1</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">Mon WeekInfo.Mon 1</span></div><div class="line"><span class="string">Tue WeekInfo.Tue 2</span></div><div class="line"><span class="string">Wed WeekInfo.Wed 3</span></div><div class="line"><span class="string">Thu WeekInfo.Thu 4</span></div><div class="line"><span class="string">Fri WeekInfo.Fri 5</span></div><div class="line"><span class="string">Sat WeekInfo.Sat 6</span></div><div class="line"><span class="string">Sun WeekInfo.Sun 7</span></div><div class="line"><span class="string">"""</span></div><div class="line"></div><div class="line"><span class="comment"># 使用MyEnum02</span></div><div class="line">print(MyEnum02(<span class="number">1</span>))  <span class="comment"># MyEnum02.Mon</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  13-错误+测试+调试]]></title>
      <url>/Python3%20%2013-%E9%94%99%E8%AF%AF+%E6%B5%8B%E8%AF%95+%E8%B0%83%E8%AF%95/</url>
      <content type="html"><![CDATA[<p><strong>人生苦短，我用Python</strong></p>
<a id="more"></a>
<hr>
<p>[TOC]</p>
<hr>
<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    可能出错的代码块</span></div><div class="line"><span class="string">    """</span></div><div class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</div><div class="line">    print(<span class="string">'except:'</span>, e)</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    print(<span class="string">'finally...'</span>)</div></pre></td></tr></table></figure>
<h2 id="错误特点"><a href="#错误特点" class="headerlink" title="错误特点"></a>错误特点</h2><ol>
<li><em><code>Python</code>的错误其实也是<code>class</code>，所有的错误类型都继承自<code>BaseException</code>，所以在使用<code>except</code>时需要注意的是，它不但捕获该类型的错误，还把其子类也“一网打尽”。</em></li>
<li><em>使用<code>try...except</code>捕获错误还有一个巨大的好处，就是可以跨越多层调用，即：不需要在每个可能出错的地方去捕获错误，只要在合适的层次去捕获错误就可以了。比如函数<code>main()</code>调用<code>foo()</code>，<code>foo()</code>调用<code>bar()</code>，结果<code>bar()</code>出错了。这时，只要<code>main()</code>捕获到了就可以处理<code>bar()</code>中的错误。</em></li>
</ol>
<h2 id="记录错误"><a href="#记录错误" class="headerlink" title="记录错误"></a>记录错误</h2><ul>
<li>捕获错误，把错误堆栈打印出来，分析错误原因，同时，让程序继续执行下去而不是使得程序被结束。</li>
</ul>
<p><strong>使用方法</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="comment"># 同样是出错，但程序打印完错误信息后会继续执行，并正常退出.</span></div><div class="line"><span class="comment"># 通过配置，logging还可以把错误记录到日志文件里，方便事后排查。</span></div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    bar(<span class="string">'0'</span>)</div><div class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">    logging.exception(e)</div></pre></td></tr></table></figure>
<h2 id="抛出错误"><a href="#抛出错误" class="headerlink" title="抛出错误"></a>抛出错误</h2><ul>
<li>因为错误是class。捕获一个错误就是捕获到该class的一个实例。</li>
<li>既可以使用python的内置函数抛出错误，也可以自己编写函数抛出错误。</li>
</ul>
<p><strong>使用关键字<code>raise</code>抛出一个错误实例</strong> </p>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 编写自定义异常类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooError</span><span class="params">(ValueError)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></div><div class="line">    n = int(s)</div><div class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</div><div class="line">        <span class="keyword">raise</span> FooError(<span class="string">'invalid value: %s'</span> % s)</div><div class="line">    <span class="keyword">return</span> <span class="number">10</span> / n</div><div class="line"></div><div class="line"><span class="comment"># 调用自定义的异常类</span></div><div class="line">foo(<span class="string">'0'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 报的错误</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"err_throw.py"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    foo(<span class="string">'0'</span>)</div><div class="line">  File <span class="string">"err_throw.py"</span>, line <span class="number">8</span>, <span class="keyword">in</span> foo</div><div class="line">    <span class="keyword">raise</span> FooError(<span class="string">'invalid value: %s'</span> % s)</div><div class="line">__main__.FooError: invalid value: <span class="number">0</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  10-面向对象+定制对象]]></title>
      <url>/Python3%20%2010-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1+%E5%AE%9A%E5%88%B6%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p><strong>人生苦短，我用Python</strong></p>
<a id="more"></a>
<hr>
<p>[TOC]</p>
<hr>
<pre><code>在编写一个基础类的基础上，为其重写某些魔法方法。
</code></pre><blockquote>
<p>python其他内置魔法方法： <a href="https://docs.python.org/3/reference/datamodel.html#special-method-names" target="_blank" rel="external">https://docs.python.org/3/reference/datamodel.html#special-method-names</a><br><a href="http://www.cnblogs.com/simayixin/archive/2011/05/04/2036295.html" target="_blank" rel="external">http://www.cnblogs.com/simayixin/archive/2011/05/04/2036295.html</a><br>python常用魔法方法的实现：<a href="http://www.cnblogs.com/scolia/p/5690210.html" target="_blank" rel="external">http://www.cnblogs.com/scolia/p/5690210.html</a></p>
</blockquote>
<h2 id="魔法方法有："><a href="#魔法方法有：" class="headerlink" title="魔法方法有："></a>魔法方法有：</h2><p>-1.<code>__new__()</code>：对象的创建，是一个静态方法，第一个参数是<code>cls</code>。(不可能是<code>self</code>，因为对象还没创建，哪来的<code>self</code>)—提示<code>单例模式</code>与此有关。<br>0.<code>__init__()</code>：对象的初始化， 是一个实例方法，第一个参数是<code>self</code>。<br>1.<code>__slots__()</code>：约束要绑定的临时变量<br>2.<code>__len__()</code>：让类作用于len()<br>3.<code>__str__()</code>：类似于<code>java</code>中的toString()，返回用户看到的字符串<br>4.<code>__repe__()</code>：返回开发者看到的字符串<br>5.<code>__iter__()</code>：将一个类被用于<code>for...in</code>循环中，返回一个迭代对象<br>6.<code>__getitem__()</code>：像<code>list</code>那样按照下标取出元素，要在其中处理<code>slice切片</code>、<code>step步长</code><br>7.<code>__getattr__()</code>：当调用不存在的属性时，<code>Python</code>解释器会试图调用<code>__getattr__(self, &#39;attr&#39;)</code>来尝试获得属性。只有在没有找到属性的情况下，才调用<code>__getattr__</code>，已有的属性将不会在<code>__getattr__</code>中查找。而且，实际上可以把一个类的所有属性和方法调用全部动态化处理了，不需要任何特殊手段。<br>8.<code>__call__()</code></p>
<h2 id="iter-配合-next-使用"><a href="#iter-配合-next-使用" class="headerlink" title="__iter__() 配合 __next__()使用"></a><code>__iter__()</code> 配合 <code>__next__()</code>使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="comment"># 构造方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self._name = name</div><div class="line">        self.a, self.sum = <span class="number">1</span>, <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="comment"># 使本类可以迭代</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self</div><div class="line"></div><div class="line">    <span class="comment"># 具体的迭代方法，此方法的实现是关键</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></div><div class="line">        self.sum = self.sum + self.a</div><div class="line">        <span class="keyword">if</span> self.sum &gt; <span class="number">10</span>:</div><div class="line">            <span class="keyword">raise</span> StopIteration</div><div class="line">        <span class="keyword">return</span> self.sum</div><div class="line"></div><div class="line">    <span class="comment"># 重写 toString()方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Person name is '</span> + self._name</div><div class="line"></div><div class="line">    __repr__ = __str__</div><div class="line"></div><div class="line">    <span class="string">'''测试'''</span></div><div class="line">person = Person(<span class="string">"cwj"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 重写 __str__() 之后的效果</span></div><div class="line">print(Person(<span class="string">"cwj"</span>))  <span class="comment"># Person name is cwj</span></div><div class="line">print(person)  <span class="comment"># Person name is cwj</span></div><div class="line"></div><div class="line">print(isinstance(person, Iterator))  <span class="comment"># True</span></div><div class="line">print(isinstance(person, Iterable))  <span class="comment"># True</span></div><div class="line">l = []</div><div class="line"></div><div class="line"><span class="comment"># 遍历Person序列，此时Person是一个Iterator</span></div><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> person:</div><div class="line">    l.append(n)</div><div class="line">    print(n)</div><div class="line"></div><div class="line"><span class="comment"># 将一个类遍历后得到的结果赋值给l序列</span></div><div class="line">print(l)  <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">1</span></div><div class="line"><span class="string">2</span></div><div class="line"><span class="string">3</span></div><div class="line"><span class="string">4</span></div><div class="line"><span class="string">5</span></div><div class="line"><span class="string">6</span></div><div class="line"><span class="string">7</span></div><div class="line"><span class="string">8</span></div><div class="line"><span class="string">9</span></div><div class="line"><span class="string">10</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<h2 id="getitme-配合-setitme-使用"><a href="#getitme-配合-setitme-使用" class="headerlink" title="__getitme__()配合__setitme__()使用"></a><code>__getitme__()</code>配合<code>__setitme__()</code>使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DictDemo</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.dict = &#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="keyword">if</span> item <span class="keyword">in</span> self.dict:</div><div class="line">            <span class="keyword">return</span> self.dict[item]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">'不存在'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></div><div class="line">        self.dict[key] = value</div><div class="line"></div><div class="line">    <span class="string">'''测试'''</span></div><div class="line">dictD = DictDemo()</div><div class="line">dictD[<span class="string">'1'</span>] = <span class="string">'cwj'</span></div><div class="line">dictD.__setitem__(<span class="string">'1'</span>,<span class="string">'234'</span>)</div><div class="line">print(dictD.__getitem__(<span class="string">'1'</span>))  <span class="comment"># 234</span></div><div class="line">print(dictD[<span class="string">'2'</span>])  <span class="comment"># 不存在</span></div></pre></td></tr></table></figure>
<p><strong><em>一个实现<code>迭代</code>、<code>容器</code>的例子</em></strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''Animal类 自定义魔法函数'''</span></div><div class="line"><span class="keyword">from</span> pip._vendor.requests.packages.urllib3.connectionpool <span class="keyword">import</span> xrange</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">创建一个模拟字典的类，这个类的内部维护了两个列表，</span></div><div class="line"><span class="string">key 负责储存键，value 负责储存值，两个列表通过索引的一一对应，从而达到模拟字典的目的</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key, value)</span>:</span></div><div class="line">        self.key = []</div><div class="line">        self.value = []</div><div class="line">        self.key.append(key)</div><div class="line">        self.value.append(value)</div><div class="line">        self.__index = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="comment"># __len__方法，按照协议，这个方法应该返回容器的长度</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> len(self.key)</div><div class="line"></div><div class="line">    <span class="comment"># __getitem__方法。这个方法会在a['scolia']时，调用a.__getitem__('scolia')。</span></div><div class="line">    <span class="comment"># 也就是说这个方法定义了元素的获取.</span></div><div class="line">    <span class="comment"># 先找到 key 列表中建的索引，然后用索引去 value 列表中找对应的元素，然后将其返回</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="keyword">if</span> item <span class="keyword">in</span> self.key:</div><div class="line">            <span class="keyword">return</span> self.value[self.key.index(item)]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">'不存在'</span></div><div class="line"></div><div class="line">    <span class="comment"># __setitem__(self, key, value)方法定义了 a['scolia'] = 'good' 这种操作时的行为，</span></div><div class="line">    <span class="comment"># 此时将会调用a.__setitem__('scolia', 'good') 因为是绑定方法，所以self是自动传递的</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self.key:</div><div class="line">            self.key.append(key)</div><div class="line">            self.value.append(value)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            __index = self.key.index(key)</div><div class="line">            self.value[__index] = value</div><div class="line"></div><div class="line">    <span class="comment"># __delitem__(self, key)方法定义了del a['scolia'] 这类操作时候的行为，</span></div><div class="line">    <span class="comment"># 里面的‘scolia’就作为参数传进去</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, key)</span>:</span></div><div class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.key:</div><div class="line">            __index = self.key.index(key)</div><div class="line">            <span class="keyword">del</span> self.key[__index]</div><div class="line">            <span class="keyword">del</span> self.value[__index]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">"key值不存在"</span></div><div class="line"></div><div class="line">    <span class="string">'''只有实现里以上四个方法，就可以当做可变容器来使用了。'''</span></div><div class="line"></div><div class="line">    <span class="comment">#  __str__ 是对应于 str() 函数，在类的表示中会继续讨论，这里是为了 print 语句好看才加进去的，</span></div><div class="line">    <span class="comment"># 因为print语句默认就是调用str()函数</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        l = []</div><div class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> xrange(len(self.key)):</div><div class="line">            __key = self.key[index]</div><div class="line">            __value = self.value[index]</div><div class="line">            result = __key,__value</div><div class="line">            l.append(result)</div><div class="line">        <span class="keyword">return</span> str(l)</div><div class="line"></div><div class="line">    <span class="comment"># 实现一个__iter__方法，这个方法负责返回一个迭代器</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self</div><div class="line"></div><div class="line">    <span class="comment"># 内部实现了next（python3.x为__next__）方法，真正负责迭代的实现。</span></div><div class="line">    <span class="comment"># 当迭代器内的元素用尽之后，任何的进一步调用都之后触发 StopIteration 异常</span></div><div class="line">    <span class="comment"># 一般会在一个类里同时实现这两种方法（即是可迭代对象又是迭代器），此时__iter__方法只要返回self就足够的了</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.__index == len(self.key):</div><div class="line">            self.__index = <span class="number">0</span></div><div class="line">            <span class="keyword">raise</span> StopIteration()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            __key = self.key[self.__index]</div><div class="line">            __value = self.value[self.__index]</div><div class="line">            result = __key, __value</div><div class="line">            self.__index += <span class="number">1</span></div><div class="line">            <span class="keyword">return</span> result</div><div class="line"></div><div class="line">    <span class="comment"># __contains__实现了成员判断，这里我们更关心value列表中的数据，所以判断的是value列表。</span></div><div class="line">    <span class="comment"># 该方法要求返回布尔值。</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="keyword">if</span> item <span class="keyword">in</span> self.value:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="comment"># __reversed__(self)方法返回一个倒序后的副本，这里体现了有序性</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reversed__</span><span class="params">(self)</span>:</span></div><div class="line">        __result = self.value</div><div class="line">        __result.reverse()</div><div class="line">        <span class="keyword">return</span> __result</div><div class="line"></div><div class="line"><span class="string">'''实际测试'''</span></div><div class="line">m = Animal(<span class="string">'1'</span>, <span class="string">'cwj'</span>)</div><div class="line">print(m)  <span class="comment"># [('1', 'cwj')]</span></div><div class="line">print(m.__len__())  <span class="comment"># 1</span></div><div class="line">m[<span class="string">'2'</span>] = <span class="string">'ddd'</span></div><div class="line">m[<span class="string">'3'</span>] = <span class="string">'qwe'</span></div><div class="line">m[<span class="string">'2'</span>] = <span class="string">'lkj'</span></div><div class="line"></div><div class="line">print(m)  <span class="comment"># [('1', 'cwj'), ('2', 'lkj'), ('3', 'qwe')]</span></div><div class="line">print(m.__len__())  <span class="comment"># 3</span></div><div class="line"></div><div class="line"><span class="keyword">del</span> m[<span class="string">'3'</span>]</div><div class="line"></div><div class="line">print(m)  <span class="comment"># [('1', 'cwj'), ('2', 'lkj')]</span></div><div class="line">print(m.__len__())  <span class="comment"># 2</span></div><div class="line"></div><div class="line">print(reversed(m))  <span class="comment"># ['lkj', 'cwj']</span></div><div class="line"></div><div class="line">print(<span class="string">'cwj'</span> <span class="keyword">in</span> m)  <span class="comment"># True</span></div></pre></td></tr></table></figure>
<h2 id="类的切片操作"><a href="#类的切片操作" class="headerlink" title="类的切片操作"></a>类的<code>切片</code>操作</h2><blockquote>
<p>参考：<a href="http://www.cnblogs.com/scolia/p/5690210.html" target="_blank" rel="external">http://www.cnblogs.com/scolia/p/5690210.html</a></p>
</blockquote>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Slices</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self._x = x</div><div class="line">        self._index = <span class="number">-1</span></div><div class="line"></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    # __getitem__()实现支持for循环</span></div><div class="line"><span class="string">    def __getitem__(self, item):</span></div><div class="line"><span class="string">        if isinstance(self._x, list):</span></div><div class="line"><span class="string">            self._index += 1</span></div><div class="line"><span class="string">            return self._x[self._index]</span></div><div class="line"><span class="string">        else:</span></div><div class="line"><span class="string">            raise '参数类型错误'</span></div><div class="line"><span class="string">     '''</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, item)</span>:</span></div><div class="line"></div><div class="line">        <span class="comment"># print(item.start, item.stop, item.step)  # 1 2 1</span></div><div class="line">        <span class="comment"># return item   # slice(1, 2, 1)</span></div><div class="line">        <span class="keyword">if</span> isinstance(item, slice):</div><div class="line">            <span class="keyword">return</span> self._x[item.start:item.stop:item.step]</div><div class="line"></div><div class="line"><span class="string">'''测试Slices类'''</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">s = Slices([1, 2, 3, 4])</span></div><div class="line"><span class="string">for n in s:</span></div><div class="line"><span class="string">    print(n)</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">s2 = Slices('1234')</span></div><div class="line"><span class="string">for n in s2:</span></div><div class="line"><span class="string">    print(n)</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line">s3 = Slices([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line"></div><div class="line"><span class="comment"># 当直接返回item参数时的结果</span></div><div class="line"><span class="comment"># print(s3[1:4:1])  # slice(1, 2, 1)</span></div><div class="line">print(s3[<span class="number">1</span>:<span class="number">4</span>:<span class="number">1</span>])  <span class="comment"># [2, 3, 4]</span></div><div class="line">print(s3[<span class="number">-4</span>:<span class="number">-2</span>])  <span class="comment"># [2, 3]</span></div><div class="line">print(s3[<span class="number">-3</span>:<span class="number">-1</span>])  <span class="comment"># [3, 4]</span></div><div class="line">print(s3[<span class="number">-5</span>:])  <span class="comment"># [1, 2, 3, 4, 5]</span></div><div class="line">print(s3[:])  <span class="comment"># [1, 2, 3, 4, 5]</span></div><div class="line">print(s3[<span class="number">-1</span>::<span class="number">-1</span>])  <span class="comment"># [5, 4, 3, 2, 1]</span></div><div class="line">print(s3[<span class="number">-1</span>:])  <span class="comment"># [5]</span></div><div class="line">``` </div><div class="line"></div><div class="line"><span class="comment">## `__getattr__()`</span></div><div class="line"></div><div class="line">正常情况下，当我们调用类的`方法`或`属性`时，如果不存在，就会报错。如：</div><div class="line"></div><div class="line">```python</div><div class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'score'</span></div></pre></td></tr></table></figure>
<p>要避免这个错误，<code>Python</code>有一个机制：写一个<code>__getattr__()</code>方法，动态返回一个属性。<br>当调用不存在的属性时，比如<code>color</code>，<code>Python</code>解释器会试图调用<code>__getattr__(self, &#39;color&#39;)</code>来尝试获得属性，这样我们就有机会返回<code>color</code>的值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 返回不存在的属性与函数</span></div><div class="line"><span class="comment"># 作用：可以针对完全动态的情况作调用</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></div><div class="line">    <span class="comment"># 返回未定义的属性</span></div><div class="line">    <span class="keyword">if</span> item == <span class="string">'color'</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'您真是 666 啊 ~ 这个属性都鞥猜到'</span></div><div class="line">    <span class="keyword">elif</span> item == <span class="string">'address'</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'哈哈哈'</span></div><div class="line">    <span class="comment"># 返回未定义的函数</span></div><div class="line">    <span class="keyword">elif</span> item == <span class="string">'add'</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">lambda</span>: <span class="number">100</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="comment"># 注意到任意调用如s.abc都会返回None，这是因为我们定义的__getattr__默认返回就是None</span></div><div class="line">        <span class="comment"># 要让class只响应特定的几个属性,要按照约定，抛出AttributeError错误</span></div><div class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">'\'Student\' object has no attribute \'%s\''</span> % item)</div></pre></td></tr></table></figure>
<h2 id="call-与-getattr-组合实现URL中的链式-chain-调用"><a href="#call-与-getattr-组合实现URL中的链式-chain-调用" class="headerlink" title="__call__()与__getattr__()组合实现URL中的链式(chain)调用"></a><code>__call__()</code>与<code>__getattr__()</code>组合实现<code>URL</code>中的链式(chain)调用</h2><p>在python中，函数其实是一个对象。如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = abs</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.__name__</div><div class="line"><span class="string">'abs'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">-123</span>)</div><div class="line"><span class="number">123</span></div></pre></td></tr></table></figure>
<p>由于 f 可以被调用，所以，f 被称为可调用对象。所有的函数都是可调用对象。<br>一个类的实例对象想要变成一个可调用的对象，只需要实现一个魔法方法<code>__call__()</code>。</p>
<p><strong><code>可调用对象</code>与<code>一般对象</code></strong></p>
<ul>
<li>可调用对象：obj.name(‘source’).age。即：既可以使用<code>.</code>调用属性或方法，也可以使用<code>obj()</code>以一种<code>函数样式</code>使用此对象。此时调用<code>obj(arg1,arg2,....)</code>就等价于<code>obj.__call__(self,arg1,arg2,...)</code></li>
<li>一般对象：obj.name。即：只能使用<code>.</code>调用属性或方法。</li>
</ul>
<p>因为<code>__call__()</code>魔法方法的加入，因此<code>python</code>的<code>函数</code>与<code>对象</code>之间的概念被模糊了</p>
<p>URL中的链式调用，这样无论API怎么变，SDK都可以根据URL实现完全动态的调用，而且，不随API的增加而改变，代码示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''URLChain类'''</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">URLChain</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, path = <span class="string">''</span>)</span>:</span></div><div class="line">        self.__path = path</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="comment"># 实现参考：https://zhidao.baidu.com/question/1865282935722979707.html</span></div><div class="line">        <span class="comment"># 返回一个 URLChain 对象，这个时候里面的path就是''+'/'+'api'='/api'，此时self = /api</span></div><div class="line">        print(<span class="string">'\'self.__path is\' :'</span> + self.__path + <span class="string">'       , \'item is\' : '</span> + item + <span class="string">' ， 之前self为：'</span>, self)</div><div class="line">        <span class="comment"># 即：上一个 '%s/%s' 的数值代替：构造函数中 path = ''中 '' 的具体数值，相当于重新构造了一个对象，</span></div><div class="line">        <span class="comment"># 在即将的调用的返回值中表示参数self.__path的值, 新传入的参数赋值给item</span></div><div class="line">        <span class="keyword">return</span> URLChain(<span class="string">'%s/%s'</span> % (self.__path, item))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__path</div><div class="line"></div><div class="line">    __repr__ = __str__</div><div class="line"></div><div class="line">    <span class="comment"># 将此类的实例对象变成一个可调用的对象</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, path)</span>:</span></div><div class="line">        print(<span class="string">'__call__  之前self is : '</span>, self)</div><div class="line">        print(<span class="string">'__call__ path is : '</span> + path)</div><div class="line">        <span class="keyword">return</span> URLChain(<span class="string">'%s/%s'</span> % (self.__path, path))</div><div class="line"></div><div class="line"><span class="string">'''调用URLChian类'''</span></div><div class="line">chain = URLChain()</div><div class="line">print(chain.api.server.user.friends)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">'self.__path is' :       , 'item is' : api ， 之前self为： </span></div><div class="line"><span class="string">'self.__path is' :/api       , 'item is' : server ， 之前self为： /api</span></div><div class="line"><span class="string">'self.__path is' :/api/server       , 'item is' : user ， 之前self为： /api/server</span></div><div class="line"><span class="string">'self.__path is' :/api/server/user       , 'item is' : friends ， 之前self为： /api/server/user</span></div><div class="line"><span class="string">/api/server/user/friends</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="comment"># 当执行 ('cwj') 这一个参数时调用的是 URLChian的 __call__()</span></div><div class="line">print(chain.api.server(<span class="string">'cwj'</span>).friends)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">'self.__path is' :       , 'item is' : api ， 之前self为： </span></div><div class="line"><span class="string">'self.__path is' :/api       , 'item is' : server ， 之前self为： /api</span></div><div class="line"><span class="string">__call__  之前self is :  /api/server</span></div><div class="line"><span class="string">__call__ path is : cwj</span></div><div class="line"><span class="string">'self.__path is' :/api/server/cwj       , 'item is' : friends ， 之前self为： /api/server/cwj</span></div><div class="line"><span class="string">/api/server/cwj/friends</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure></p>
<h2 id="callable-的使用：判断一个变量是函数还是对象"><a href="#callable-的使用：判断一个变量是函数还是对象" class="headerlink" title="callable()的使用：判断一个变量是函数还是对象"></a>callable()的使用：判断一个变量是<code>函数</code>还是<code>对象</code></h2><p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 判断一个对象是否能被调用，能被调用的对象就是一个Callable对象,函数和自定义的带有__call__()的类实例对象返回值是True：</span></div><div class="line">print(callable(chain))  <span class="comment"># True URLChian实现了__call__()魔法方法</span></div><div class="line">print(callable(dictD))  <span class="comment"># False</span></div><div class="line">print(callable(abs))  <span class="comment"># True</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  09-面向对象]]></title>
      <url>/Python3%20%2009-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p><strong>人生苦短，我用Python</strong></p>
<a id="more"></a>
<hr>
<p>[TOC]</p>
<hr>
<h2 id="类的模板"><a href="#类的模板" class="headerlink" title="类的模板"></a>类的模板</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''类模板'''</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, city)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.age = age</div><div class="line">        self.__city = city</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_info</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'self is : '</span>, self) <span class="comment"># self is :  &lt;py_class.Student.Student object at 0x10c92c400&gt;</span></div><div class="line">        <span class="comment"># print(student) 得到的结果为：&lt;py_class.Student.Student object at 0x10c92c400&gt;</span></div><div class="line">        print(<span class="string">'class is : '</span>, self.__class__)  <span class="comment"># class is :  &lt;class 'py_class.Student.Student'&gt;</span></div><div class="line">        print(<span class="string">'%s, %d, %s'</span> % (self.name, self.age, self.__city))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_age</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.age == <span class="number">20</span>:</div><div class="line">            print(<span class="string">'age is '</span>, self.age)</div><div class="line">        <span class="keyword">elif</span> self.age &gt; <span class="number">20</span>:</div><div class="line">            print(<span class="string">'too old'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">'too young'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_city</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__city</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_city</span><span class="params">(self, city)</span>:</span></div><div class="line">        self.__city = city</div></pre></td></tr></table></figure>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p> 1.类属性：像是Student类中的name就是类属性<br> 2.实例属性：像是下文中的student.__city就是实例属性</p>
<h2 id="类中变量及函数的命名规范"><a href="#类中变量及函数的命名规范" class="headerlink" title="类中变量及函数的命名规范"></a>类中变量及函数的命名规范</h2><ul>
<li>以<code>__</code>开始，并以<code>__</code> 双下划线 结束的是python中的特殊变量，特殊变量是可以直接访问的，不是<code>private</code>变量</li>
<li><code>class</code>后面紧接着是类名，即Student，类名通常是大写开头的单词，紧接着是<code>(object)</code>，表示该类是从哪个类继承下来的.通常，如果没有合适的继承类，就使用<code>object</code>类，这是所有类最终都会继承的类</li>
<li><code>__init__</code>方法的第一个参数永远是<code>self</code>，表示创建的实例本身，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到<code>self</code>，因为<code>self</code>就指向创建的实例本身。</li>
<li>有了<code>__init__</code>方法，在创建实例的时候，就不能传入空的参数了，必须传入与<code>__init__</code>方法匹配的参数，但<code>self</code>不需要传，<code>Python</code>解释器自己会把实例变量传进去</li>
<li>在类中定义的函数只有一点不同，就是第一个参数永远是实例变量<code>self</code>，并且，调用时，不用传递该参数。</li>
<li><p><code>self</code>指向的类的实力对象。由：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'self is : '</span>, self) <span class="comment"># self is :  &lt;py_class.Student.Student object at 0x10c92c400&gt;</span></div><div class="line">print(student)  <span class="comment"># &lt;py_class.Student.Student object at 0x10c92c400&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>可以看出，<code>self</code>和<code>student</code>的 <em>内存地址</em> 是一样的。<br>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''调用'''</span></div><div class="line"><span class="comment"># 创建实例对象</span></div><div class="line">student = Student(<span class="string">'cwj'</span>,<span class="number">24</span>, <span class="string">'tianjin'</span>)</div><div class="line">student.print_info()  <span class="comment"># cwj, 24, tianjin</span></div><div class="line">student.get_age()  <span class="comment"># too old</span></div><div class="line"></div><div class="line"><span class="comment"># 访问属性</span></div><div class="line">student.age = <span class="number">19</span></div><div class="line">student.name = <span class="string">'ddd'</span></div></pre></td></tr></table></figure>
<h2 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h2><pre><code>虽然有访问限制的命名方式，但是Python本身没有任何机制阻止你干坏事，一切全靠自觉。
</code></pre><ul>
<li><p>两个下划线开头的变量，声明为类内部的私有变量，不能在类的外部直接使用或访问：在变量前面添加<code>__</code>，即：<code>__name</code>。在类内部的方法中使用时 <code>self.__private_attrs</code>。</p>
</li>
<li><p>两个下划线开头的方法，声明为类内部的私有方法。不能在类地外部调用，在类的内部调用 <code>self.__private_methods</code>.</p>
</li>
<li>单下划线开头表示的<code>protected</code>类型的变量，只允许本身及其子类进行访问。</li>
<li></li>
<li>类的方法<br>在类的内部，使用 <code>def</code> 关键字可以为类定义一个方法，与一般函数定义不同，类方法必须包含参数 <code>self</code>,且为第一个参数<br>代码示例:</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">    <span class="comment"># 此行代码貌似修改了 Student 类中的 __city 属性,实际这是为student添加了一个属性。</span></div><div class="line">    student.__city = <span class="string">'beijing'</span></div><div class="line">    <span class="comment"># 而且输出结果也显示；__city 属性 的值也变成了：beijing</span></div><div class="line">    print(student.__city)  <span class="comment"># beijing</span></div><div class="line">    <span class="comment"># 但是，当我们通过类自身的get()获取属性值时，发现还是之前初始化时的属性值。即：tianjin</span></div><div class="line">    print(student.get_city())  <span class="comment"># tianjin</span></div><div class="line"></div><div class="line">    print(hasattr(student, <span class="string">'name'</span>))  <span class="comment"># True</span></div><div class="line"></div><div class="line">    <span class="comment"># 删除临时添加的 __city 属性</span></div><div class="line">    <span class="comment"># del student.__city</span></div><div class="line"><span class="comment"># print(student.__city)  # AttributeError: 'Student' object has no attribute '__city'</span></div><div class="line"></div><div class="line">    <span class="comment"># 当我们通过类自身的set()方法修改 __city 属性值时，通过get()得到的属性值是修改之后的。</span></div><div class="line">    student.set_city(<span class="string">'hk'</span>)</div><div class="line">    print(student.get_city())  <span class="comment"># hk</span></div><div class="line"></div><div class="line">    <span class="comment"># 由此可以得出：此时的 student.__city 与 student.set_city() 中的 __city 并不是同一个属性</span></div><div class="line">    <span class="comment"># student.__city 中的 __city 是student的一个新的同名属性</span></div><div class="line"></div><div class="line">    student.print_info()  <span class="comment"># ddd, 19, hk</span></div></pre></td></tr></table></figure>
<h2 id="Python内置类属性"><a href="#Python内置类属性" class="headerlink" title="Python内置类属性"></a>Python内置类属性</h2><ul>
<li><code>__dict__</code> : 类的属性（包含一个字典，由类的数据属性组成）</li>
<li><code>__doc__</code> :类的文档字符串，即：注释</li>
<li><code>__name__</code>: 类名</li>
<li><code>__module__</code>: 类定义所在的模块（类的全名是<code>__main__.className</code>，如果类位于一个导入模块mymod中，那么<code>className.__module__</code> 等于 mymod）</li>
<li><code>__bases__</code> : 类的所有父类构成元素（包含了一个由所有父类组成的元组）</li>
</ul>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 由 类 进行调用 __dict__</span></div><div class="line">print(Student.__dict__)  <span class="comment"># &#123;'__module__': 'py_class.Student', '__init__': &lt;function Student.__init__ at 0x100ccf8c8&gt;, 'print_info': &lt;function Student.print_info at 0x100ccf950&gt;, 'get_age': &lt;function Student.get_age at 0x100ccf9d8&gt;, 'get_city': &lt;function Student.get_city at 0x100ccfa60&gt;, 'set_city': &lt;function Student.set_city at 0x100ccfae8&gt;, '__dict__': &lt;attribute '__dict__' of 'Student' objects&gt;, '__weakref__': &lt;attribute '__weakref__' of 'Student' objects&gt;, '__doc__': None&#125;</span></div><div class="line"></div><div class="line"><span class="comment"># 由 对象 调用 __dict__ 方法类似于：java中的toString()</span></div><div class="line">print(student.__dict__)  <span class="comment"># &#123;'name': 'ddd', 'age': 19, '_Student__city': 'hk', '__city': 'beijing'&#125;</span></div><div class="line"></div><div class="line">print(student.__doc__)  <span class="comment"># None</span></div><div class="line"></div><div class="line"><span class="comment"># 由 类 进行调用</span></div><div class="line">print(Student.__name__)  <span class="comment"># Student</span></div><div class="line"></div><div class="line">print(student.__module__)  <span class="comment"># py_class.Student</span></div><div class="line"></div><div class="line"><span class="comment"># 由 类 进行调用</span></div><div class="line">print(Student.__bases__)  <span class="comment"># (&lt;class 'object'&gt;,)</span></div></pre></td></tr></table></figure>
<h2 id="python对象的销毁"><a href="#python对象的销毁" class="headerlink" title="python对象的销毁"></a>python对象的销毁</h2><pre><code>垃圾回收 —— 引用计数 + 循环引用
</code></pre><ul>
<li>引用计数法。当跟踪变量对象的引用计数变为0时，它将会被回收。但不是立即被回收，而是由‘解释器’在适当的时机将其回收。</li>
<li>循环引用。当两个对象相互引用，但是没有其他的变量引用他们。此时循环垃圾回收器将会工作。</li>
</ul>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">del</span> student.__city</div></pre></td></tr></table></figure>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p><strong><em>支持多继承</em></strong><br><strong><em>父类的构造器<code>（__init__(self)）</code>不会被自动调用，需要在子类中亲自专门调用</em></strong><br><strong><em>python总是先在本类中查找调用的方法，找不到才会去父类中继续寻找</em></strong></p>
<p><strong>几个基础的重载方法</strong><br> 1.<code>__init__(self,[])</code> 构造方法<br> 2.<code>__del__(self)</code> 删除一个对象，dell obj<br> 3.<code>__repr__(self)</code> 转化为供解释器读取的形式<br> 4.<code>__str__(self)</code> 将值转化为始于人阅读的形式<br> 5.<code>__cmp__(self,x)</code> 对象比较</p>
<p> 代码示例</p>
<p><em>父类</em></p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''父类 1 '''</span></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></div><div class="line">        self.__name = name</div><div class="line">        self.__age = age</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_age</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__age</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_name</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.__name = name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_age</span><span class="params">(self, age)</span>:</span></div><div class="line">        self.__age = age</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'Animal is running'</span>)</div><div class="line"></div><div class="line"> <span class="string">'''父类 2'''</span></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></div><div class="line">        print(self.__name + <span class="string">" is very good !"</span>)</div></pre></td></tr></table></figure>
<p><em>子类</em></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">from</span> py_class.Animal <span class="keyword">import</span> Animal</div><div class="line"><span class="keyword">from</span> py_class.Pet <span class="keyword">import</span> Pet</div><div class="line"></div><div class="line"><span class="comment"># 多继承</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig</span><span class="params">(Animal, Pet)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></div><div class="line">        self.__name = name</div><div class="line">        self.__age = age</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'pig is running very slowly...'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">from</span> py_class.Animal <span class="keyword">import</span> Animal</div><div class="line"></div><div class="line"><span class="comment"># 单继承</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></div><div class="line">        self.__name = name</div><div class="line">        self.__age = age</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        print(self.__name + <span class="string">' is running'</span>)</div><div class="line"></div><div class="line"><span class="keyword">from</span> py_class.Animal <span class="keyword">import</span> Animal</div><div class="line"></div><div class="line"><span class="comment"># 单继承</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></div><div class="line">        self.__name = name</div><div class="line">        self.__age = age</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        print(self.__name + <span class="string">'is running'</span>)</div></pre></td></tr></table></figure>
<p><em>测试类</em></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> py_class.Animal <span class="keyword">import</span> Animal</div><div class="line"><span class="keyword">from</span> py_class.Dog <span class="keyword">import</span> Dog</div><div class="line"><span class="keyword">from</span> py_class.Cat <span class="keyword">import</span> Cat</div><div class="line"><span class="keyword">from</span> py_class.PIg <span class="keyword">import</span> Pig</div><div class="line"></div><div class="line">dog = Dog(<span class="string">'wangwang'</span>, <span class="number">1</span>)</div><div class="line">dog.run()</div><div class="line"></div><div class="line">cat = Cat(<span class="string">'miaomiao'</span>, <span class="number">1</span>)</div><div class="line">cat.run()</div><div class="line"></div><div class="line">pig = Pig(<span class="string">'big pig'</span>, <span class="number">100</span>)</div><div class="line">pig.run()  <span class="comment"># pig is running very slowly...</span></div><div class="line"><span class="comment"># pig.play()  # big pig is very good !</span></div><div class="line"></div><div class="line">print(isinstance(cat, Animal))  <span class="comment"># True</span></div><div class="line">print(isinstance(cat, Cat))  <span class="comment"># True</span></div><div class="line"><span class="string">'''由此可见，cat变量既是Cat类型，也是Animal类型'''</span></div></pre></td></tr></table></figure>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">    多态的实现方式 1 类似于java这种静态语言的实现，必须传入Animal类型或其子类</span></div><div class="line"><span class="string">    </span></div><div class="line"><span class="string"># 多态的使用 将 父类 作为参数</span></div><div class="line"><span class="string">def run_test(animal):</span></div><div class="line"><span class="string">    animal.run()</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">    多态的实现方式 2 属于python的动态语言实现'</span></div><div class="line"><span class="string">    这种方式实现的结果与 方式 1 完全一样</span></div><div class="line"><span class="string">    原理：</span></div><div class="line"><span class="string">        不一定要传入Animal类型，只要保证传入的对象一个run()方法就可以了.</span></div><div class="line"><span class="string">    例如：传递的对象为ints，这不是Animal的任何一个子类，只要将赋予run()方法就足以。</span></div><div class="line"><span class="string">    </span></div><div class="line"><span class="string">    动态语言的'鸭子类型'：</span></div><div class="line"><span class="string">        它并不要求严格的继承体系，一个对象只要"看起来像鸭子，走起路来像鸭子"，那么它就是鸭子。</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_test</span><span class="params">(ints)</span>:</span></div><div class="line">    ints.run()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 多态的使用 实际参数为具体的子类，得到的结果为各个子类的具体表现</span></div><div class="line">run_test(Animal(<span class="string">'Animal'</span>, <span class="number">1</span>))  <span class="comment"># Animal is running</span></div><div class="line">run_test(Dog(<span class="string">'Dog'</span>, <span class="number">1</span>))  <span class="comment"># Dog is running</span></div><div class="line">run_test(Cat(<span class="string">'Cat'</span>, <span class="number">1</span>))  <span class="comment"># Catis running</span></div><div class="line">run_test(Pig(<span class="string">'Cat'</span>, <span class="number">1</span>))  <span class="comment"># pig is running very slowly...</span></div></pre></td></tr></table></figure>
<h2 id="获取对象信息"><a href="#获取对象信息" class="headerlink" title="获取对象信息"></a>获取对象信息</h2><ul>
<li><code>getattr(obj, name[, default])</code> : 访问对象的属性。</li>
<li><code>hasattr(obj,name)</code> : 检查是否存在一个属性。</li>
<li><code>setattr(obj,name,value)</code> : 设置一个属性。如果属性不存在，会创建一个新属性。</li>
<li><code>delattr(obj, name)</code> : 删除属性。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''isinstance() 查看一个变量的继承关系'''</span></div><div class="line">print(isinstance(cat, Animal))  <span class="comment"># True</span></div><div class="line">print(isinstance(cat, Cat))  <span class="comment"># True</span></div><div class="line">print(isinstance(pig, Animal))  <span class="comment"># True</span></div><div class="line">print(isinstance(pig, Pet))  <span class="comment"># True</span></div><div class="line">print(isinstance(pig, Pig))  <span class="comment"># True</span></div><div class="line"></div><div class="line"><span class="string">''' type()</span></div><div class="line"><span class="string">    当使用继承关系时，使用type()不能一直向上得到他们的父类，</span></div><div class="line"><span class="string">    因此，对于有 继承关系 的类来说不合适</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line">print(type(<span class="number">123</span>))  <span class="comment"># &lt;class 'int'&gt;</span></div><div class="line">print(type(dog))  <span class="comment"># &lt;class 'py_class.Dog.Dog'&gt;</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare</span><span class="params">(obj1, obj2)</span>:</span></div><div class="line">    <span class="keyword">if</span> type(obj1) == type(obj2):</div><div class="line">        print(type(obj1) == type(obj2))</div><div class="line">        print(str(obj1) + <span class="string">'=='</span> + str(obj2))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(type(obj1) == type(obj2))  <span class="comment"># False</span></div><div class="line">        print(str(obj1) + <span class="string">'!='</span> + str(obj2))</div><div class="line"></div><div class="line">compare(dog, cat)</div><div class="line"></div><div class="line"><span class="string">'''获取一个对象所有的属性和方法'''</span></div><div class="line">print(dir(dog))</div><div class="line"><span class="comment"># ['_Dog__age', '_Dog__name', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'get_age', 'get_name', 'run', 'set_age', 'set_name']</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  09-面向对象+临时变量、方法+@property+多继承]]></title>
      <url>/Python3%20%2009-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1+%E4%B8%B4%E6%97%B6%E5%8F%98%E9%87%8F%E3%80%81%E6%96%B9%E6%B3%95+@property+%E5%A4%9A%E7%BB%A7%E6%89%BF/</url>
      <content type="html"><![CDATA[<p><strong>人生苦短，我用Python</strong></p>
<a id="more"></a>
<hr>
<p>[TOC]</p>
<hr>
<h2 id="绑定临时变量和临时函数-–-不限定参数"><a href="#绑定临时变量和临时函数-–-不限定参数" class="headerlink" title="绑定临时变量和临时函数 – 不限定参数"></a>绑定临时变量和临时函数 – 不限定参数</h2><pre><code>使用python语言`动态语言`这一特性。
</code></pre><h3 id="绑定临时变量"><a href="#绑定临时变量" class="headerlink" title="绑定临时变量"></a>绑定临时变量</h3><ul>
<li><strong>为实例对象绑定临时变量</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 动态的将 new_name 属性绑定至 实例 中</span></div><div class="line">dog.new_name = <span class="string">'new cwj'</span></div><div class="line">print(dog.new_name)  <span class="comment"># new cwj</span></div><div class="line"></div><div class="line"><span class="comment"># 删除临时添加的 new_name 属性</span></div><div class="line"><span class="keyword">del</span> dog.new_name</div></pre></td></tr></table></figure>
<ul>
<li><strong>为类绑定临时变量</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 动态的将 new_name_2 属性绑定至 Dog类 中</span></div><div class="line">Dog.new_name_2 = <span class="string">'new cwj 2'</span></div><div class="line">print(dog.new_name_2)  <span class="comment"># new cwj 2</span></div><div class="line">dog2 = Dog(<span class="string">'wangwang'</span>, <span class="number">1</span>)</div><div class="line">print(dog2.new_name_2)  <span class="comment"># new cwj 2</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">可以看到 dog 与 dog2 两个实例都具有 new_name_2 属性，</span></div><div class="line"><span class="string">由此可见 new_name_2 属性已经动态的添加至Dog类中</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<h3 id="绑定临时函数"><a href="#绑定临时函数" class="headerlink" title="绑定临时函数"></a>绑定临时函数</h3><ul>
<li><strong>为实例对象绑定临时函数</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> types <span class="keyword">import</span> MethodType</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_color</span><span class="params">(self, color)</span>:</span></div><div class="line">    self.color = color</div><div class="line"></div><div class="line"><span class="comment"># 给实例绑定一个方法</span></div><div class="line">dog.set_color = MethodType(set_color, dog)</div><div class="line"></div><div class="line"><span class="comment"># 通过这个方法为临时的color赋值</span></div><div class="line">dog.set_color(<span class="string">'red'</span>)</div><div class="line"></div><div class="line"><span class="comment"># set_color()这个方法是临时赋给dog变量的，而不是赋给dog2的</span></div><div class="line"><span class="comment"># dog2.set_color('green')  # AttributeError: 'Dog' object has no attribute 'set_color'</span></div><div class="line"></div><div class="line"><span class="comment"># 输出临时参数color的值</span></div><div class="line">print(dog.color)  <span class="comment"># red</span></div><div class="line"></div><div class="line"><span class="comment"># 删除临时方法，删除此方法的同时，也删除了此方法内的历史变量</span></div><div class="line"><span class="keyword">del</span> dog.set_color</div><div class="line"></div><div class="line"><span class="comment"># 删除临时参数</span></div><div class="line"><span class="comment"># del dog.color</span></div><div class="line"></div><div class="line"><span class="comment"># 当删除临时方法后，此方法将不再能使用</span></div><div class="line"><span class="comment"># dog.set_color('green')  # AttributeError: 'Dog' object has no attribute 'set_color'</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>为类绑定临时函数</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义一个临时的方法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_color2</span><span class="params">(self, color)</span>:</span></div><div class="line">    self.color = color</div><div class="line"></div><div class="line"><span class="comment"># 将临时定义的方法绑定给 Dog这个类</span></div><div class="line">Dog.set_color2 = set_color2</div><div class="line"></div><div class="line"><span class="comment"># Dog类的两个变量dog和dog2分别调用set_color2()</span></div><div class="line">dog.set_color2(<span class="string">'blue'</span>)</div><div class="line">dog2.set_color2(<span class="string">'black'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 测试临时函数是否对临时变量赋值成功</span></div><div class="line">print(dog2.color)  <span class="comment"># black</span></div><div class="line">print(dog.color)  <span class="comment"># blue</span></div><div class="line"></div><div class="line"><span class="comment"># 删除临时的方法</span></div><div class="line"><span class="keyword">del</span> Dog.set_color2</div></pre></td></tr></table></figure>
<h3 id="绑定临时变量和临时函数-–-限定参数-slots-变量"><a href="#绑定临时变量和临时函数-–-限定参数-slots-变量" class="headerlink" title="绑定临时变量和临时函数 – 限定参数 __slots__变量"></a>绑定临时变量和临时函数 – 限定参数 <code>__slots__</code>变量</h3><pre><code>`__slots__`定义的属性仅对当前类实例起作用，对继承的子类是不起作用的.
除非在子类中也定义`__slots__`，这样，子类实例允许定义的属性就是自身的`__slots__`加上父类的`__slots__`
</code></pre><p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''声明Pet类'''</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">        使用一个特殊的变量 __slots__，这个变量可以限制外部为Pet类添加的属性。</span></div><div class="line"><span class="string">        例如此处，只允许外部为Pet类添加 name 和 age 两个属性</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    __slots__ = (<span class="string">'name2'</span>, <span class="string">'age'</span>)</div><div class="line"></div><div class="line"><span class="string">'''调用Pet类'''</span></div><div class="line">pet = Pet()</div><div class="line">pet.name2 = <span class="string">'big pig'</span></div><div class="line">pet.age = <span class="number">2</span></div><div class="line"></div><div class="line"><span class="comment"># 通过 __slots__ 变量的声明，color不允许被定义</span></div><div class="line"><span class="comment"># pet.color = 'yellow'  # AttributeError: 'Pet' object has no attribute 'color'</span></div><div class="line"><span class="comment"># print(Pet.__doc__)  # 输出注释</span></div><div class="line">print(pet.name2)  <span class="comment"># big pig</span></div><div class="line">print(pet.age)  <span class="comment"># 2</span></div><div class="line"></div><div class="line"><span class="comment"># pig 实例对象不能调用临时变量 name2，因为 __slots__变量定义的参数名称之能限定在它所在的类中，对子类不起作用</span></div><div class="line"><span class="comment"># print(pig.name2)  # AttributeError: name2</span></div></pre></td></tr></table></figure>
<h3 id="property的使用"><a href="#property的使用" class="headerlink" title="@property的使用"></a>@property的使用</h3><pre><code>既能检查参数，又可以`用类似属性`这样简单的方式来`访问类的变量`
</code></pre><p><strong>实现</strong></p>
<p> 关键字：<code>@property</code>,<code>@参数名.setter</code></p>
<p> 代码示例 - Pet类</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''Pet类'''</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></div><div class="line">        print(self.__name + <span class="string">" is very good !"</span>)</div><div class="line"></div><div class="line">    <span class="string">'''@property的使用'''</span></div><div class="line">    <span class="comment"># 此处的 color 为 此类对外界声明的一个变量，即：是一个变量名</span></div><div class="line">    <span class="comment"># 此方法相当于 get_color()</span></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">color</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._color</div><div class="line"></div><div class="line">    <span class="comment"># 此方法相当于 set_color(self, color)</span></div><div class="line"><span class="meta">    @color.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">color</span><span class="params">(self, color)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(color, str):</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'input a str'</span>)</div><div class="line">        self._color = color</div></pre></td></tr></table></figure>
<p>代码示例 - 调用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 错误的写法，验证对于参数的检验</span></div><div class="line"><span class="comment"># pet.color = 123  # ValueError: input a str</span></div><div class="line">pet2 = Pet()</div><div class="line"><span class="comment"># 为Pet类的color属性设置具体的参数</span></div><div class="line">pet2.color = <span class="string">'grew'</span></div><div class="line">print(pet2.color)  <span class="comment"># grew</span></div></pre></td></tr></table></figure>
<h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><pre><code>在设计类的继承关系时，通常，主线都是单一继承下来的，如果需要“混入”额外的功能，通过多重继承就可以实现，一个类在继承了一个类的基础上，再次继承另一个类。这种设计通常称之为`MixIn`。

MixIn的目的就是给一个类增加多个功能，这样，在设计类的时候，我们优先考虑通过多重继承来组合多个MixIn的功能，而不是设计多层次的复杂的继承关系。
</code></pre><p>如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Mammal, RunnableMixIn, CarnivorousMixIn)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  08-模块]]></title>
      <url>/Python3%20%2008-%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<p><strong>人生苦短，我用Python</strong></p>
<a id="more"></a>
<hr>
<p>[TOC]</p>
<hr>
<blockquote>
<p>Python所有的内置函数：<a href="https://docs.python.org/3/library/functions.html" target="_blank" rel="external">https://docs.python.org/3/library/functions.html</a></p>
</blockquote>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><pre><code>在`python`中一个`.py`文件就是一个模块(Module)
</code></pre><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>提高代码的可维护性</li>
<li>代码的复用性</li>
<li>避免函数名和变量名的冲突</li>
<li>为避免模块名命名冲突，引入了包(每一个包目录下都有一个文件：<code>__init__.py</code>。这个文件是必须存在的，否则python回将这个目录当成普通的目录，而不是一个python包。这个文件可以是空文件，也可以有代码。因为<code>__init__.py</code>本身就是一个模块(<code>mycompany</code>))</li>
</ul>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 当前模块的文档注释，任何模块代码的第一行字符串都视为该模块文档的注释</span></div><div class="line"><span class="string">'A test module'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 使用'__author__'变量将作者的名字写入此模块</span></div><div class="line">__author__ = <span class="string">'Yannis Cheng'</span></div><div class="line"></div><div class="line"><span class="string">'''以上为python模块的标准文件模板'''</span></div><div class="line"></div><div class="line"><span class="string">'''注意到这两行代码：'''</span></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    test()</div><div class="line"><span class="string">'''当我们在命令行运行hello模块文件时，Python解释器把一个特殊变量`__name__`置为`__main__`，而如果在其他地方导入该hello模块时，if判断将失败，因此，这种if测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。'''</span></div></pre></td></tr></table></figure>
<h2 id="安装第三方模块"><a href="#安装第三方模块" class="headerlink" title="安装第三方模块"></a>安装第三方模块</h2><pre><code>在Python中，安装第三方模块，是通过包管理工具`pip`完成的。
在Mac或者Linux下可能会并存`Python 3.X`和`Python 2.X`，此时的命令应该为`pip3`
</code></pre><h2 id="函数-amp-变量-作用域"><a href="#函数-amp-变量-作用域" class="headerlink" title="函数&amp;变量 作用域"></a>函数&amp;变量 作用域</h2><ul>
<li>公开public：可以被直接引用，如’abs‘等。类似<code>__name__</code>这样的变量是特殊变量可以被直接引用。自己定义的变量一般不使用这种变量名。</li>
<li>非公开：<code>_abc</code>，<code>__aabc</code></li>
</ul>
<blockquote>
<p>python中并没有一种方法可以完全限制访问private函数访问，但是从编程习惯中不应该引用private函数或变量</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  06-闭包+匿名+装饰器+偏函数]]></title>
      <url>/Python3%20%2006-%E9%97%AD%E5%8C%85+%E5%8C%BF%E5%90%8D+%E8%A3%85%E9%A5%B0%E5%99%A8+%E5%81%8F%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p><strong>人生苦短，我用Python</strong></p>
<a id="more"></a>
<hr>
<p>[TOC]</p>
<hr>
<blockquote>
<p>参考：<a href="http://www.cnblogs.com/vamei/archive/2012/12/15/2772451.html" target="_blank" rel="external">http://www.cnblogs.com/vamei/archive/2012/12/15/2772451.html</a></p>
</blockquote>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><pre><code>闭包是函数式编程的重要语法结构，python是以`函数对象`为基础的，python一切皆对象。函数这一语法结构也是一个对象。
</code></pre><p><strong>定义解释</strong></p>
<ul>
<li>在一个内部函数里，对在外部作用域的（非全局）变量进行引用，那么内部函数就认为是闭包<code>closure</code></li>
<li>‘闭包’是‘词法闭包’的简称，是指应用了自由变量的函数。这个被引用的自由变量的将和这个函数一同存在，即使已经离开了创造它的环境也不例外。</li>
<li>‘闭包’是由函数和其他相关的引用环境组合而成的实体。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。</li>
<li>‘python’中的闭包：一个闭包就是你调用了一个函数A，这个函数A返回了一个函数B给你。而这个函数B就叫做闭包，在调用函数A时传递的参数就是自由变量。</li>
</ul>
<p><em>闭包实际上就是一个简化的类，它提高了代码的复用性</em></p>
<p><strong><em>闭包函数代码示例</em></strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">闭包示例代码</span></div><div class="line"><span class="string">inner_func就是一个闭包函数，它引用自由变量name。</span></div><div class="line"><span class="string">name就是inner_func()的环境变量</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func01</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner_func</span><span class="params">(age)</span>:</span></div><div class="line">        print(<span class="string">'name: '</span>, name, <span class="string">'age: '</span>, age)</div><div class="line">    <span class="keyword">return</span> inner_func</div><div class="line"></div><div class="line">bb = func01(<span class="string">'cwj'</span>)</div><div class="line">bb(<span class="number">25</span>)  <span class="comment"># name:  cwj age:  25</span></div></pre></td></tr></table></figure>
<h2 id="关于闭包函数的使用问题"><a href="#关于闭包函数的使用问题" class="headerlink" title="关于闭包函数的使用问题"></a>关于闭包函数的使用问题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''错误的闭包函数  1 闭包函数中， 闭包中的变量m不会修改外部函数中m的值。'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    m = <span class="number">0</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fool</span><span class="params">()</span>:</span></div><div class="line">        m = <span class="number">11</span></div><div class="line">        print(m)</div><div class="line">    print(m)  <span class="comment"># 0</span></div><div class="line">    fool()  <span class="comment"># 11</span></div><div class="line">    print(m)  <span class="comment"># 0</span></div><div class="line"></div><div class="line">print(foo())</div><div class="line"></div><div class="line"></div><div class="line"><span class="string">'''错误的闭包函数  2 '''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo2</span><span class="params">()</span>:</span></div><div class="line">    a = <span class="number">1</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fool2</span><span class="params">()</span>:</span></div><div class="line">        <span class="comment"># a = a +1  # UnboundLocalError: local variable 'a' referenced before assignment</span></div><div class="line">        <span class="keyword">return</span> a  <span class="comment"># 1</span></div><div class="line">    <span class="keyword">return</span> fool2</div><div class="line">ccc = foo2()  <span class="comment"># 此时：ccc = fool2，ccc只是获得到了一个对象</span></div><div class="line">print(ccc())  <span class="comment"># 此时：ccc = fool2(), ccc获取到的是一个实例</span></div><div class="line"></div><div class="line"></div><div class="line">flist = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">    <span class="comment"># 编写 1</span></div><div class="line">    <span class="comment"># def foo3(x):</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo3</span><span class="params">(x, y = i)</span>:</span></div><div class="line">        <span class="comment"># 编写 1 的输出</span></div><div class="line">        <span class="comment"># print(x + i)</span></div><div class="line">        print(x + y)</div><div class="line">    flist.append(foo3)</div><div class="line"><span class="keyword">for</span> f <span class="keyword">in</span> flist:</div><div class="line">    f(<span class="number">2</span>)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">编写 1 的运行结果为：</span></div><div class="line"><span class="string">4</span></div><div class="line"><span class="string">4</span></div><div class="line"><span class="string">4</span></div><div class="line"><span class="string">结果是4,4,4。这是因为当把函数加入flist列表里时，python还没有给i赋值，</span></div><div class="line"><span class="string">只有当执行时，再去找i的值是什么，这时在第一个for循环结束以后，i的值是2，</span></div><div class="line"><span class="string">所以以上代码的执行结果是4,4,4.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">编写 2 的运行结果为：</span></div><div class="line"><span class="string">2</span></div><div class="line"><span class="string">3</span></div><div class="line"><span class="string">4</span></div><div class="line"><span class="string">在程序里面经常会出现这类的循环语句，Python的问题就在于，当循环结束以后，</span></div><div class="line"><span class="string">循环体中的临时变量i不会销毁，而是继续存在于执行环境中。</span></div><div class="line"><span class="string">还有一个python的现象是，python的函数只有在执行时，才会去找函数体里的变量的值</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<h2 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h2><blockquote>
<p>参考：<a href="http://www.jb51.net/article/54498.htm" target="_blank" rel="external">http://www.jb51.net/article/54498.htm</a></p>
</blockquote>
<pre><code>闭包主要在函数开发中使用
</code></pre><ul>
<li><strong>当闭包函数执行完毕后，仍然能够保持住当前的运行环境</strong></li>
<li><strong>闭包可以根据外部作用域的局部变量来得到不同的结果</strong></li>
</ul>
<h2 id="引用：闭包与并行运算"><a href="#引用：闭包与并行运算" class="headerlink" title="引用：闭包与并行运算"></a>引用：闭包与并行运算</h2><blockquote>
<p>闭包有效的减少了函数所需定义的参数数目。这对于并行运算来说有重要的意义。在并行运算的环境下，我们可以让每台电脑负责一个函数，然后将一台电脑的输出和下一台电脑的输入串联起来。最终，我们像流水线一样工作，从串联的电脑集群一端输入数据，从另一端输出数据。这样的情境最适合只有一个参数输入的函数。闭包就可以实现这一目的。</p>
<p>并行运算正称为一个热点。这也是函数式编程又热起来的一个重要原因。函数式编程早在1950年代就已经存在，但应用并不广泛。然而，我们上面描述的流水线式的工作并行集群过程，正适合函数式编程。由于函数式编程这一天然优势，越来越多的语言也开始加入对函数式编程范式的支持。</p>
</blockquote>
<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p> 匿名函数由关键字<code>lambda</code>表示。<code>:</code>前面的参数名表示函数的参数，<code>:</code>后面的表达式表示为函数执行具体操作的表达式。</p>
<p> ####特点</p>
<ul>
<li>python对匿名函数的支持有限，只能在一些简单的情况下使用匿名函数</li>
<li>匿名函数有个数限制，<em>只能有一个表达式</em>，不用写<code>return</code>，返回值就是该表达式的结果。 </li>
</ul>
<p><strong><em>代码示例</em></strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''匿名函数的使用 - 1'''</span></div><div class="line">print(list(map(<span class="keyword">lambda</span> x: x*x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])))  <span class="comment"># [1, 4, 9, 16]</span></div><div class="line"></div><div class="line"><span class="string">'''匿名函数的使用 - 2'''</span></div></pre></td></tr></table></figure>
<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><pre><code>在代码运行期间动态增加功能的方式，称之为“装饰器(decorator)”
</code></pre><p><strong><em>代码示例</em></strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''原函数</span></div><div class="line"><span class="string">def now():</span></div><div class="line"><span class="string">    print('2017-07-16')</span></div><div class="line"><span class="string">now()  # 2017-07-16</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="string">'''定义一个 now() 的 装饰器函数 log()'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func_origin)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_func</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        print(<span class="string">'call %s()'</span> % func_origin.__name__)</div><div class="line">        <span class="comment"># 因为log()是一个decorator，所以接受一个函数作为参数，并返回一个函数。</span></div><div class="line">        <span class="comment"># 返回原函数所具有的功能</span></div><div class="line">        <span class="keyword">return</span> func_origin(*args, **kwargs)</div><div class="line">    <span class="keyword">return</span> add_func</div><div class="line"></div><div class="line"><span class="string">'''使用 装饰器函数 log()'''</span></div><div class="line"><span class="meta">@log</span></div><div class="line"><span class="comment"># @log 等价于 now = log(now)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'2017-07-16'</span>)</div><div class="line"></div><div class="line"><span class="string">'''调用被装饰器装饰的函数now()'''</span></div><div class="line">now()</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">运行结果：</span></div><div class="line"><span class="string">call now()</span></div><div class="line"><span class="string">2017-07-16</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">释义：</span></div><div class="line"><span class="string">由于log()是一个decorator，返回一个函数，所以，原来的now()函数仍然存在，</span></div><div class="line"><span class="string">只是现在同名的now变量指向了新的函数，于是调用now()将执行新函数，即在log()函数中返回的wrapper()函数。</span></div><div class="line"><span class="string">wrapper()函数的参数定义是(*args, **kw)，因此，wrapper()函数可以接受任意参数的调用。</span></div><div class="line"><span class="string">在wrapper()函数内，首先打印日志，再紧接着调用原始函数。</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="string">'''需要传入参数的decorator, 即：3层嵌套'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log2</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrap</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            print(<span class="string">'%s %s()'</span> % (text, func.__name__))</div><div class="line">            <span class="comment"># return func(*args, **kwargs)</span></div><div class="line">            <span class="keyword">return</span> func()  <span class="comment"># 输出结果中有：2017-07-16</span></div><div class="line">            <span class="comment"># return func  # 输出结果中没有：2017-07-16</span></div><div class="line">        <span class="keyword">return</span> wrap</div><div class="line">    <span class="keyword">return</span> decorator</div><div class="line"></div><div class="line"><span class="string">'''3层嵌套的使用'''</span></div><div class="line"><span class="comment">#@log2('execute')</span></div><div class="line"><span class="comment"># @log2 等价于 now2 = log2('execute')(now2)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now2</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'2017-07-16'</span>)</div><div class="line">now2 = log2(<span class="string">'execute'</span>)(now2)</div><div class="line">now2()</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">运行结果：</span></div><div class="line"><span class="string">def now():</span></div><div class="line"><span class="string">print('2017-07-16')</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="string">'''函数也是对象，它有__name__等属性，但经过decorator装饰之后的函数，</span></div><div class="line"><span class="string">它们的__name__已经从原来的'now2'变成了wrap'''</span></div><div class="line">print(now2.__name__)  <span class="comment"># wrap</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log3</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator3</span><span class="params">(func3)</span>:</span></div><div class="line"><span class="meta">        @functools.wraps(func3)</span></div><div class="line">        <span class="comment"># 词条语句等价于</span></div><div class="line">        <span class="comment"># wrap3.__name__ = func3.__name__</span></div><div class="line">        <span class="comment"># 需要把原始函数的__name__等属性复制到wrap3()函数中，否则，有些依赖函数签名的代码执行就会出错。</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrap3</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            print(<span class="string">'%s %s()'</span> % (text, func3.__name__))</div><div class="line">            <span class="comment"># return func3()</span></div><div class="line">            func3()</div><div class="line">        <span class="keyword">return</span> wrap3</div><div class="line">    <span class="keyword">return</span> decorator3</div><div class="line"></div><div class="line"><span class="meta">@log3('execute')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now3</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'2017-07-16'</span>)</div><div class="line"></div><div class="line">now3()</div><div class="line">print(<span class="string">'now3 name is : '</span>, now3.__name__)</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">运行结果</span></div><div class="line"><span class="string">execute now3()</span></div><div class="line"><span class="string">2017-07-16</span></div><div class="line"><span class="string">now3 name is :  now3</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<h2 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><pre><code>当函数的参数个数太多，需要简化时，使用`functools.partial`可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。
</code></pre><p> <strong><em>代码示例</em></strong></p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">int2 = functools.partial(int, base=<span class="number">2</span>)</div><div class="line"><span class="comment">#等价于</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">int2</span><span class="params">(x, base=<span class="number">2</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> int(x, base)</div></pre></td></tr></table></figure>
<ul>
<li><code>functools.partial</code>的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个<code>新的函数</code>，调用这个新函数会更简单。</li>
<li>创建偏函数时，实际上可以接收<code>函数对象</code>、<code>*args</code>和<code>**kw</code>这3个参数</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  04-迭代器]]></title>
      <url>/Python3%20%2004-%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
      <content type="html"><![CDATA[<p><strong>人生苦短，我用Python</strong></p>
<a id="more"></a>
<hr>
<p>[TOC]</p>
<hr>
<p> <strong><em>能够使用for循环的数据类型有以下几种：</em></strong></p>
<ul>
<li>集合：<code>list</code>、<code>tuple</code>、<code>set</code>、<code>dict</code></li>
<li>构建类型<code>generator</code>，带<code>yield</code>的generator function</li>
<li>字符串类型：<code>str</code></li>
</ul>
<blockquote>
<p>复习：可以使用<code>isinstance()</code>判断一个对象是否是<code>Iterable</code>对象。<br>需要导包：<code>from collections import Iterable</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">isinstance)(x, Iterable)</div></pre></td></tr></table></figure>
<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><pre><code>可以被`next()`函数调用并不断返回下一个值的对象称为——迭代器（`Iterator`）
</code></pre><p><strong><em>判断一个对象是否为<code>迭代器</code></em></strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">isinstance(x, Iterator)</div></pre></td></tr></table></figure>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''判断是否 可迭代'''</span></div><div class="line">print(isinstance((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>)), Iterator))  <span class="comment"># 构建类型 True</span></div><div class="line">print(isinstance([<span class="number">1</span>, <span class="number">2</span>], Iterable))  <span class="comment"># list类型 True</span></div><div class="line">print(isinstance((<span class="number">1</span>, <span class="number">2</span>), Iterable))  <span class="comment"># tuple类型 True</span></div><div class="line">print(isinstance(&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, Iterable))  <span class="comment"># set类型 True</span></div><div class="line">print(isinstance(&#123;<span class="string">'1'</span>: <span class="string">'A'</span>, <span class="string">'2'</span>: <span class="string">'B'</span>&#125;, Iterable))  <span class="comment"># dict类型 True</span></div><div class="line">print(isinstance(<span class="string">'ABC'</span>, Iterable))  <span class="comment"># str类型 rue</span></div><div class="line"></div><div class="line"><span class="string">'''判断是否为 迭代器 对象'''</span></div><div class="line">print(isinstance((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>)), Iterator))  <span class="comment"># 构建类型 True</span></div><div class="line">print(isinstance([<span class="number">1</span>, <span class="number">2</span>], Iterator))  <span class="comment"># list类型 False</span></div><div class="line">print(isinstance((<span class="number">1</span>, <span class="number">2</span>), Iterator))  <span class="comment"># tuple类型 False</span></div><div class="line">print(isinstance(&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, Iterator))  <span class="comment"># set类型 False</span></div><div class="line">print(isinstance(&#123;<span class="string">'1'</span>: <span class="string">'A'</span>, <span class="string">'2'</span>: <span class="string">'B'</span>&#125;, Iterator))  <span class="comment"># dict类型 False</span></div><div class="line">print(isinstance(<span class="string">'ABC'</span>, Iterator))  <span class="comment"># str类型 False</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  05-函数式编程-函数作为返回值]]></title>
      <url>/Python3%20%2005-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E8%BF%94%E5%9B%9E%E5%80%BC/</url>
      <content type="html"><![CDATA[<p><strong>人生苦短，我用Python</strong></p>
<a id="more"></a>
<hr>
<p>[TOC]</p>
<hr>
<p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。</p>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''求和运算'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_sum</span><span class="params">(*args)</span>:</span></div><div class="line">    add = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> args:</div><div class="line">        add = add + n</div><div class="line">    <span class="keyword">return</span> add</div><div class="line"></div><div class="line">print(add_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))  <span class="comment"># 15</span></div><div class="line"></div><div class="line"><span class="string">'''将函数 -实例- 作为返回值'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_sum_func</span><span class="params">(*args)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">()</span>:</span></div><div class="line">        add = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</div><div class="line">            add = add + n</div><div class="line">        <span class="keyword">return</span> add</div><div class="line">    <span class="keyword">return</span> my_sum()</div><div class="line"></div><div class="line"><span class="string">'''将函数 -对象- 作为返回值'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_sum_func_02</span><span class="params">(*args)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">()</span>:</span></div><div class="line">        add = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</div><div class="line">            add = add + n</div><div class="line">        <span class="keyword">return</span> add</div><div class="line">    <span class="keyword">return</span> my_sum</div><div class="line"></div><div class="line"><span class="comment"># 调用 add_sum_func()时，返回的不是函数求和的结果，而是求和函数本身，就是延迟了函数结果的实现</span></div><div class="line">print(add_sum_func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))  <span class="comment"># 15</span></div><div class="line">new_f = add_sum_func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">print(new_f)  <span class="comment"># 15</span></div><div class="line"><span class="comment"># print(new_f())  # TypeError: 'int' object is not callable</span></div><div class="line"></div><div class="line">print(add_sum_func_02(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))  <span class="comment"># &lt;function add_sum_func_02.&lt;locals&gt;.my_sum at 0x1021ef8c8&gt;</span></div><div class="line">new_f = add_sum_func_02(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">print(new_f)  <span class="comment"># &lt;function add_sum_func_02.&lt;locals&gt;.my_sum at 0x1021ef8c8&gt;</span></div><div class="line">print(new_f())  <span class="comment"># 15</span></div><div class="line"></div><div class="line"><span class="string">'''释义'''</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">    函数add_sum_func()与add_sum_func_02()的区别除了函数名字上有区别，在其函数内部只有一点不同，即返回值：</span></div><div class="line"><span class="string">        一个是：return my_sum()。带()表示返回的是 函数的数值，即：结果值。</span></div><div class="line"><span class="string">        另一个是：return my_sum。不带()表示返回的是 函数本身，即：函数所在内存的地址。</span></div><div class="line"><span class="string">    通过查看输出的结果可以清晰的对比出两者的不同。</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  05-函数式编程-高阶函数]]></title>
      <url>/Python3%20%2005-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p><strong>人生苦短，我用Python</strong></p>
<a id="more"></a>
<hr>
<p>[TOC]</p>
<hr>
<pre><code>函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！
`Python`对函数式编程提供部分支持。由于`Python`允许使用变量，因此，`Python`不是纯函数式编程语言。
</code></pre><h2 id="函数与变量互指"><a href="#函数与变量互指" class="headerlink" title="函数与变量互指"></a>函数与变量互指</h2><p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">x = abs  <span class="comment"># 函数名其实也是一个变量，变量之间是可以互指。</span></div><div class="line">print(x(<span class="number">-10</span>))  <span class="comment"># 10。此时，x就是一个求'绝对值'的函数</span></div><div class="line">abs = <span class="number">10</span></div><div class="line">print(abs)  <span class="comment"># 10</span></div><div class="line">print(abs(<span class="number">10</span>))  <span class="comment"># TypeError: 'int' object is not callable。此时的abs已经不是一个函数，而是一个值为10的变量。</span></div></pre></td></tr></table></figure>
<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><pre><code>将函数作为参数传入另一个函数，这样的函数被称为高阶函数。
</code></pre><p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">high_func</span><span class="params">(z, y, f)</span>:</span></div><div class="line">    <span class="keyword">return</span> f(z) + f(y)</div><div class="line"></div><div class="line"><span class="comment"># 将函数abs作为一个参数指向变量f</span></div><div class="line">print(high_func(<span class="number">-1</span>, <span class="number">-3</span>, abs))  <span class="comment"># 4</span></div></pre></td></tr></table></figure>
<h2 id="高阶函数-map"><a href="#高阶函数-map" class="headerlink" title="高阶函数 - map()"></a>高阶函数 - map()</h2><ul>
<li>map接收两个参数：一个是函数，另一个是Iterable，</li>
<li>map函数的意义是：将传入的函数依次作用于每一个序列的每一个元素，并将结果作为新的Iterator返回</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">return</span> x * x</div><div class="line"></div><div class="line"><span class="string">'''通过一行代码实现：序列中的每一个元素进行取平方运算，将结果作为list序列输出'''</span></div><div class="line">print(list(map(func, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])))  <span class="comment"># [1, 4, 9, 16, 25]</span></div><div class="line"></div><div class="line">v = map(func, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line">print(isinstance(v, Iterator))  <span class="comment"># True</span></div><div class="line">print(isinstance(v, Iterable))  <span class="comment"># True</span></div><div class="line">print(isinstance(<span class="string">'abc'</span>, Iterator))  <span class="comment"># False</span></div><div class="line"></div><div class="line"><span class="string">'''使用 next() 输出Iterator类型的对象 修改前'''</span></div><div class="line"><span class="comment"># while True:</span></div><div class="line"><span class="comment"># print(next(v))</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">1</span></div><div class="line"><span class="string">StopIteration</span></div><div class="line"><span class="string">4</span></div><div class="line"><span class="string">9</span></div><div class="line"><span class="string">16</span></div><div class="line"><span class="string">25</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="string">'''修改后'''</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        print(next(v))</div><div class="line">    <span class="keyword">except</span> StopIteration:</div><div class="line">        <span class="keyword">break</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">1</span></div><div class="line"><span class="string">4</span></div><div class="line"><span class="string">9</span></div><div class="line"><span class="string">16</span></div><div class="line"><span class="string">25</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<h2 id="高阶函数-reduce"><a href="#高阶函数-reduce" class="headerlink" title="高阶函数 - reduce()"></a>高阶函数 - reduce()</h2><ul>
<li>参数：两个参数。函数名，序列</li>
<li><p>作用：将<code>结果</code>继续和<code>序列的下一元素</code>做<code>函数名指定的运算</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun_add</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line"></div><div class="line">print(reduce(fun_add, ls))  <span class="comment"># 15.</span></div><div class="line"></div><div class="line"><span class="comment"># 将序列 ls 中的数变成组合成一个整数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_int</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x * <span class="number">10</span> + y</div><div class="line"></div><div class="line">print(reduce(func_int, ls))  <span class="comment"># 12345</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_str</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="comment"># 将字符串转换为int类型。根据`键`取对应的`值`</span></div><div class="line">    <span class="keyword">return</span> &#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;[s]</div><div class="line"></div><div class="line"><span class="comment"># 将str类型变为int类型</span></div><div class="line">print(reduce(func_int, list(map(func_str, <span class="string">'1234567'</span>))))  <span class="comment"># 1234567</span></div><div class="line"></div><div class="line"><span class="comment"># 将以上方法编写为一个str类型转int的方法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_str_to_int</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f_int</span><span class="params">(x, y)</span>:</span></div><div class="line">        <span class="keyword">return</span> x * <span class="number">10</span> + y</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f_str</span><span class="params">(ss)</span>:</span></div><div class="line">        <span class="keyword">return</span> &#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;[ss]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> reduce(f_int, map(f_str, s))</div><div class="line"></div><div class="line"></div><div class="line">print(func_str_to_int(<span class="string">'11223344'</span>))  <span class="comment"># 11223344</span></div><div class="line"></div><div class="line"><span class="string">'''测试，将不规则的输入按照指定的要求输出。如：'AsdA' 'asdS' 输出后的结果为：'Asda', 'Asds' '''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_rule</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="comment"># if isinstance(s, str):</span></div><div class="line">    <span class="keyword">if</span> isinstance(s, list):</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">func_to_up</span><span class="params">(ss)</span>:</span></div><div class="line">            <span class="keyword">return</span> ss[<span class="number">0</span>].upper() + ss[<span class="number">1</span>::].lower()</div><div class="line">        <span class="keyword">return</span> list(map(func_to_up, s))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">'输入的参数类型有误！'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="string">'-1'</span></div><div class="line"></div><div class="line">L1 = [<span class="string">'adam'</span>, <span class="string">'LISA'</span>, <span class="string">'barT'</span>]</div><div class="line">print(func_rule(L1))  <span class="comment"># ['Adam', 'Lisa', 'Bart']</span></div><div class="line"></div><div class="line"><span class="string">'''求乘积'''</span></div><div class="line">ll = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">prod</span><span class="params">(lll)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">xx</span><span class="params">(x, y)</span>:</span></div><div class="line">        <span class="keyword">return</span> x * y</div><div class="line">    <span class="keyword">return</span> reduce(xx, lll)</div><div class="line"></div><div class="line">print(prod(ll))  <span class="comment"># 945</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="高阶函数-filter"><a href="#高阶函数-filter" class="headerlink" title="高阶函数 - filter()"></a>高阶函数 - filter()</h2><ul>
<li><p>作用：过滤函数. <code>True</code>保留序列中的元素，<code>False</code>删除序列中的元素</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">lf = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"></div><div class="line"><span class="comment"># 过滤一个序列中的偶数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_odd</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></div><div class="line"></div><div class="line">print(list(filter(func_odd, lf)))  <span class="comment"># [1, 3, 5]</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="高阶函数-sorted"><a href="#高阶函数-sorted" class="headerlink" title="高阶函数 - sorted()"></a>高阶函数 - sorted()</h2><ul>
<li>排序算法</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 对list类型的数据排序</span></div><div class="line">ls01 = [<span class="number">1</span>, <span class="number">-9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">23</span>, <span class="number">-3</span>]</div><div class="line"></div><div class="line">print(sorted(ls01))  <span class="comment"># [-9, -3, 1, 5, 10, 23]</span></div><div class="line"></div><div class="line"><span class="comment"># 高阶函数使用 按照绝对值进行排序</span></div><div class="line">print(sorted(ls01, key = abs))  <span class="comment"># [1, -3, 5, -9, 10, 23]</span></div><div class="line"></div><div class="line">ls02 = [<span class="string">'asd'</span>, <span class="string">'ffgd'</span>, <span class="string">'fhfgh'</span>, <span class="string">'werr'</span>, <span class="string">'bnbm'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 高阶函数使用 对 字符串 进行排序 根据小写字母排序</span></div><div class="line">print(sorted(ls02, key=str.lower))  <span class="comment"># ['asd', 'bnbm', 'ffgd', 'fhfgh', 'werr']</span></div><div class="line"></div><div class="line"><span class="comment"># 高阶函数使用 对 字符串 进行排序 根据大写字母排序--实现方式1</span></div><div class="line">print(sorted(ls02, key=str.lower, reverse=<span class="keyword">True</span>))  <span class="comment"># ['werr', 'fhfgh', 'ffgd', 'bnbm', 'asd']</span></div><div class="line"></div><div class="line">L = [(<span class="string">'Bob'</span>, <span class="number">75</span>), (<span class="string">'Adam'</span>, <span class="number">92</span>), (<span class="string">'Bart'</span>, <span class="number">66</span>), (<span class="string">'Lisa'</span>, <span class="number">88</span>)]</div><div class="line"></div><div class="line"><span class="string">'''根据学生的名字排序'''</span></div><div class="line">print(sorted(L))  <span class="comment"># [('Adam', 92), ('Bart', 66), ('Bob', 75), ('Lisa', 88)]</span></div><div class="line"></div><div class="line"><span class="string">'''根据学生的成绩排序'''</span></div><div class="line">print(sorted(L, key=itemgetter(<span class="number">1</span>)))  <span class="comment"># [('Bart', 66), ('Bob', 75), ('Lisa', 88), ('Adam', 92)]</span></div></pre></td></tr></table></figure>
<p><strong><em>itemgetter()的使用</em></strong></p>
<blockquote>
<p>参考：<a href="http://www.cnblogs.com/zhoufankui/p/6274172.html" target="_blank" rel="external">http://www.cnblogs.com/zhoufankui/p/6274172.html</a></p>
</blockquote>
<ul>
<li>operator.itemgetter函数用于获取对象指定的下标数据。如根据学生成绩排序的方法使用中：获取序列中tuple元素下标为1的数据</li>
<li>operator.itemgetter函数获取的不是数值，而是重新定义了一个函数，通过将该函数作用于对象上才能获取数据，如：将数值赋值给key</li>
<li><em>特点：</em><br>itmegetter()中的参数可以不按照数字大小的顺序来填入，可以使用2，1这样的顺序，表示 先获取 下标为2的数据值，再获取下标为1的数据的值。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  02-函数-返回值]]></title>
      <url>/Python3%20%2002-%E5%87%BD%E6%95%B0-%E8%BF%94%E5%9B%9E%E5%80%BC/</url>
      <content type="html"><![CDATA[<p><strong>人生苦短，我用Python</strong></p>
<a id="more"></a>
<hr>
<p>[TOC]</p>
<hr>
<h2 id="在python交互环境中，使用本地文件自己定义的函数"><a href="#在python交互环境中，使用本地文件自己定义的函数" class="headerlink" title="在python交互环境中，使用本地文件自己定义的函数"></a>在python交互环境中，使用本地文件自己定义的函数</h2><p>进入到文件所在的目录下后，将HelloWorld文件中的my_abs方法导入到交互环境中：</p>
<pre><code>from HelloWorld import my_abs
Hello World
</code></pre><blockquote>
<p>输出的是中文<br>my_abs(-12)<br>12</p>
</blockquote>
<h2 id="为系统函数建立别名"><a href="#为系统函数建立别名" class="headerlink" title="为系统函数建立别名"></a>为系统函数建立别名</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a = abs</div><div class="line">print(a(<span class="number">-90</span>))       <span class="comment">#90</span></div></pre></td></tr></table></figure>
<h2 id="空函数-pass"><a href="#空函数-pass" class="headerlink" title="空函数 - pass"></a>空函数 - <code>pass</code></h2><p><code>pass</code>语句什么都不做，那有什么用？实际上<code>pass</code>可以用来作为<code>占位符</code>，比如现在还没想好怎么写函数的代码，就可以先放一个<code>pass</code>，让代码 <em>能运行起来</em>。<br>这样的函数适用于在上下文中，保持 <strong><em>整体逻辑思路</em></strong> 的通畅。</p>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>除了在函数体内使用之外，在其他语句中也可以使用：<br>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<h2 id="函数参数检查-isinstance"><a href="#函数参数检查-isinstance" class="headerlink" title="函数参数检查 - isinstance()"></a>函数参数检查 - <code>isinstance()</code></h2><p>当我们自定义的函数传入了不恰当的参数时，python的函数能够检测出错误的参数，而我们自定义的函数则不能。当报错时，提示的错误信息和系统内置的函数提示的错误信息也不一样。<br>我们应该完善我们自己定义的函数，使用<code>isinstance()</code>方法</p>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs_good</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(x,(int, float)):</div><div class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'输入的参数类型异常'</span>)</div><div class="line">    <span class="keyword">if</span> x &gt; <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> -x</div><div class="line"></div><div class="line">print(my_abs_good(<span class="number">-2</span>))      <span class="comment">#2</span></div><div class="line">print(my_abs_good(<span class="string">'a'</span>))     <span class="comment">#TypeError: 输入的参数类型异常</span></div></pre></td></tr></table></figure>
<h2 id="判断一个数据类型是否为可迭代对象"><a href="#判断一个数据类型是否为可迭代对象" class="headerlink" title="判断一个数据类型是否为可迭代对象"></a>判断一个数据类型是否为可迭代对象</h2><p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'ABC'</span></div><div class="line">print(isinstance(s, Iterable))  <span class="comment"># True</span></div><div class="line">print(isinstance(<span class="number">123</span>, Iterable))  <span class="comment"># False</span></div></pre></td></tr></table></figure>
<h2 id="自定义函数的返回值"><a href="#自定义函数的返回值" class="headerlink" title="自定义函数的返回值"></a>自定义函数的返回值</h2><ul>
<li><em>多个返回值</em> 的本质是一个：<code>tuple</code>对象。只有一个返回值时，默认不显示<code>()</code></li>
</ul>
<p><strong><em>多返回值</em></strong> 代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getXY</span><span class="params">(x, y, step, angle = <span class="number">0</span>)</span>:</span></div><div class="line">    nx = x + step * math.cos(angle)</div><div class="line">    ny = y - step * math.cos(angle)</div><div class="line"></div><div class="line">    <span class="comment">#返回两个值</span></div><div class="line">    <span class="keyword">return</span> nx, ny</div><div class="line"><span class="comment"># 1</span></div><div class="line">x, y = getXY(<span class="number">10</span>,<span class="number">20</span>,<span class="number">100</span>)</div><div class="line">print(x, y)     <span class="comment">#110.0 -80.0</span></div><div class="line"></div><div class="line"><span class="comment"># 2</span></div><div class="line">x, y = (<span class="number">110.0</span>, <span class="number">-80.0</span>)</div><div class="line">print(x, y)     <span class="comment">#110.0 -80.0</span></div><div class="line"></div><div class="line"><span class="comment"># 3</span></div><div class="line">z = getXY(<span class="number">10</span>,<span class="number">20</span>,<span class="number">100</span>)</div><div class="line">print(z)        <span class="comment">#(110.0, -80.0)</span></div><div class="line"></div><div class="line"><span class="comment"># 4</span></div><div class="line">z2 = (<span class="number">10</span>)</div><div class="line">print(z2)       <span class="comment">#10</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">比较 #1，#2，#3, #4 可以得出，函数的返回值其实是一个tuple对象,当返回值只有1个时，回省略掉()</span></div><div class="line"><span class="string">'''</span></div><div class="line">print(getXY(<span class="number">10</span>,<span class="number">20</span>,<span class="number">100</span>))     <span class="comment">#(110.0, -80.0)</span></div><div class="line"></div><div class="line">x, y, z = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">100</span>)</div><div class="line">print(x, y, z)      <span class="comment">#10 20 100</span></div><div class="line">print(x)        <span class="comment">#10</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">在声明多个变量的同时，也将tuple对象的值对应的赋值给变量，很神奇！</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<ul>
<li><strong><em>没有返回值</em></strong> <code>return None</code></li>
</ul>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">noRetuen</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'aaaa'</span>)</div></pre></td></tr></table></figure>
<p><strong><em>返回值小结</em></strong></p>
<blockquote>
<ul>
<li>定义函数时，需要确定 函数名 和 参数个数；</li>
<li>如果有必要，可以先对参数的 数据类型 做检查；</li>
<li>函数体内部可以用 return 随时返回函数结果；</li>
<li>函数执行完毕也 没有return语句 时，自动 return None。</li>
<li>函数可以同时返回 多个值，但其实就是一个 tuple。</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  02-函数-参数类型]]></title>
      <url>/Python3%20%2002-%E5%87%BD%E6%95%B0-%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p><strong>人生苦短，我用Python</strong></p>
<a id="more"></a>
<hr>
<p>[TOC]</p>
<hr>
<pre><code>默认参数必须指向 不可变对象。
因为不变对象一旦创建，对象内部的数据就 不能修改，这样就减少了由于修改数据导致的错误。
此外，由于对象不变，多任务环境下同时读取对象 不需要加锁，同时读一点问题都没有。
</code></pre><h2 id="函数参数的5种类型"><a href="#函数参数的5种类型" class="headerlink" title="函数参数的5种类型"></a>函数参数的5种类型</h2><blockquote>
<p>1.必选参数<br>2.默认参数<br>3.可变参数<br>4.关键字参数<br>5.命名关键字参数<br>组合参数<br>注意：  函数参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。</p>
</blockquote>
<h2 id="必选参数"><a href="#必选参数" class="headerlink" title="必选参数"></a>必选参数</h2><p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(num)</span>:</span></div><div class="line">    print(num*num)</div><div class="line"></div><div class="line">fun(<span class="number">10</span>)     <span class="comment">#100</span></div></pre></td></tr></table></figure>
<h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">##默认参数示例 1: tag = 2,为默认参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span><span class="params">(num, tag = <span class="number">2</span>)</span>:</span></div><div class="line">    s = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> tag &gt; <span class="number">0</span>:</div><div class="line">        tag = tag - <span class="number">1</span></div><div class="line">        s = s * num</div><div class="line">    <span class="keyword">return</span> s</div><div class="line"></div><div class="line">print(fun2(<span class="number">5</span>))      <span class="comment">#25</span></div><div class="line">print(fun2(<span class="number">5</span>,<span class="number">3</span>))        <span class="comment">#125</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#默认参数示例 2</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun3</span><span class="params">(name,  age = <span class="number">6</span>, city = <span class="string">'beijing'</span>)</span>:</span></div><div class="line">    print(<span class="string">"name is %s"</span> % name)</div><div class="line">    print(<span class="string">"age is %d"</span> % age)</div><div class="line">    print(<span class="string">"city is %s"</span> % city)</div><div class="line"></div><div class="line"></div><div class="line">fun3(<span class="string">'cwj'</span>)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">name is cwj</span></div><div class="line"><span class="string">age is 6</span></div><div class="line"><span class="string">city is beijing </span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="comment">#默认参数在赋值时要注明： 参数名称</span></div><div class="line">fun3(<span class="string">'cwj'</span>, age = <span class="number">9</span>)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">name is cwj</span></div><div class="line"><span class="string">age is 9</span></div><div class="line"><span class="string">city is beijing</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"></div><div class="line">fun3(<span class="string">'cwj'</span>, city=<span class="string">'tinajin'</span>)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">name is cwj</span></div><div class="line"><span class="string">age is 6</span></div><div class="line"><span class="string">city is tinajin</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><pre><code>可变参数（个数可变），其本质是 `tuple`集合，由函数返回的结果可以看出
可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个`tuple`  
</code></pre><p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun4</span><span class="params">(*numbers)</span>:</span></div><div class="line">    sum = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> numbers:</div><div class="line">        sum = sum + num * num</div><div class="line">    print(sum)</div><div class="line"></div><div class="line"></div><div class="line">fun4(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)     <span class="comment">#29</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="string">'''*l表示把l这个list的所有元素作为可变参数传进去。这种写法相当有用，而且很常见'''</span></div><div class="line">l = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line">fun4(*l)        <span class="comment">#29</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="string">'''*t表示把t这个tuple的所有元素作为可变参数传进去。这种写法相当有用，而且很常见'''</span></div><div class="line">t = (<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</div><div class="line">fun4(*t)        <span class="comment">#29e</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#可变参数个数为0</span></div><div class="line">fun4()          <span class="comment">#0</span></div></pre></td></tr></table></figure>
<h2 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h2><pre><code>关键字参数本质 dict（实际参数为 键值对 即可）
而关键字参数允许你传入0个或任意个含 参数名的参数 ，这些关键字参数在函数 内部 自动组装为一个 dict。
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun5</span><span class="params">(name, age, **keyWord)</span>:</span></div><div class="line">    print(<span class="string">'fun5-----'</span>)</div><div class="line">    print(<span class="string">"name is : "</span>, name)</div><div class="line">    print(<span class="string">"age is : %d"</span> % age)</div><div class="line">    print(<span class="string">"address is : "</span>, keyWord)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#传入1个关键字参数</span></div><div class="line">fun5(<span class="string">'cwj'</span>, <span class="number">24</span>, address=<span class="string">'tianjin'</span>)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">name is :  cwj</span></div><div class="line"><span class="string">age is : 24</span></div><div class="line"><span class="string">address is :  &#123;'address': 'tianjin'&#125;</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#传入多个关键字参数</span></div><div class="line">fun5(<span class="string">'cwj'</span>, <span class="number">24</span>, address=<span class="string">'beijing'</span>, weather=<span class="string">'hot'</span>)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">name is :  cwj</span></div><div class="line"><span class="string">age is : 24</span></div><div class="line"><span class="string">address is :  &#123;'address': 'beijing', 'weather': 'hot'&#125;</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#传入0个参数</span></div><div class="line">fun5(<span class="string">'cwj'</span>, <span class="number">24</span>)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">name is :  cwj</span></div><div class="line"><span class="string">age is : 24</span></div><div class="line"><span class="string">address is :  &#123;&#125;</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#在有现成dict类型的情况下</span></div><div class="line"><span class="comment">#此处是将d这个dict类型对象的所有 key-value 用关键字参数导入到函数的**keyWord参数中，</span></div><div class="line">keyWord获得的是d的一份拷贝，对keyWord的改变将不会影响到函数外的d本身。</div><div class="line">d = &#123;<span class="string">'address'</span>: <span class="string">'beijing'</span>, <span class="string">'wether'</span>:<span class="string">'hot'</span>&#125;</div><div class="line">fun5(<span class="string">'cwj'</span>, <span class="number">24</span>,**d)</div><div class="line"></div><div class="line">name <span class="keyword">is</span> :  cwj</div><div class="line">age <span class="keyword">is</span> : <span class="number">24</span></div><div class="line">address <span class="keyword">is</span> :  &#123;<span class="string">'address'</span>: <span class="string">'beijing'</span>, <span class="string">'wether'</span>: <span class="string">'hot'</span>&#125;</div></pre></td></tr></table></figure>
<h2 id="命名关键字"><a href="#命名关键字" class="headerlink" title="命名关键字"></a>命名关键字</h2><pre><code>此种参数是用来 限制关键字参数 的名字，就是仅接受 已经命名的形参 的参数
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">'''表示方法1：*，参数名1，参数名2'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun6</span><span class="params">(name, age, *, address, wethear)</span>:</span></div><div class="line">    print(<span class="string">'fun6-----'</span>)</div><div class="line">    print(<span class="string">"name is : "</span>, name)</div><div class="line">    print(<span class="string">'age is : %d'</span> % age)</div><div class="line">    print(<span class="string">'address is : %s'</span> % address)</div><div class="line">    print(<span class="string">'wether is : '</span>, wethear)</div><div class="line"></div><div class="line"></div><div class="line">fun6(<span class="string">'cwj'</span>, <span class="number">26</span>, address=<span class="string">'tianjin'</span>, wethear=<span class="string">'hot'</span>)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">name is :  cwj</span></div><div class="line"><span class="string">age is : 26</span></div><div class="line"><span class="string">address is : tianjin</span></div><div class="line"><span class="string">wether is :  hot</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="string">'''表示方法2，若函数中已经含有一个'可变参数'，则之后的参数不需要在添加 * 符号'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun7</span><span class="params">(name, age, *keyWord, city, wether)</span>:</span></div><div class="line">    print(<span class="string">'fun7-----'</span>)</div><div class="line">    print(<span class="string">'name is : '</span>, name)</div><div class="line">    print(<span class="string">'age is : '</span>, age)</div><div class="line">    print(<span class="string">'keuWord is : '</span>, keyWord)</div><div class="line">    print(<span class="string">'city is : '</span>, city)</div><div class="line">    print(<span class="string">'wether is : '</span>, wether)</div><div class="line"></div><div class="line"></div><div class="line">fun7(<span class="string">'cwj'</span>, <span class="number">24</span>, <span class="string">'xian'</span>, city=<span class="string">'tianjin'</span>, wether=<span class="string">'windy'</span>)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">name is :  cwj</span></div><div class="line"><span class="string">age is :  24</span></div><div class="line"><span class="string">keuWord is :  ('xian',)</span></div><div class="line"><span class="string">city is :  tianjin</span></div><div class="line"><span class="string">wether is :  windy</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="string">'''表示方法3：设置有默认值的命名关键字参数'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun8</span><span class="params">(name, *, city=<span class="string">'beijng'</span>,wether)</span>:</span></div><div class="line">    print(name, city, wether)</div><div class="line"></div><div class="line"></div><div class="line">fun8(<span class="string">'cwj'</span>,wether=<span class="string">'hot'</span>)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">cwj beijng hot</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun9</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line">fun9(<span class="string">'cwj'</span>)</div></pre></td></tr></table></figure>
<h2 id="组合参数"><a href="#组合参数" class="headerlink" title="组合参数"></a>组合参数</h2><p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 参数 必须参数，可选参数，可变参数，关键字参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun10</span><span class="params">(name, age=<span class="number">19</span>, *key_word, **city)</span>:</span></div><div class="line">    print(name, age, key_word, city)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 参数 必须参数，可选参数，可变参数，命名关键字参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun11</span><span class="params">(name, age=<span class="number">19</span>, *key_word, city, weather)</span>:</span></div><div class="line">    print(name, age, *key_word, city, weather)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 参数 必须参数，可选参数，命名关键字参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun12</span><span class="params">(name, age=<span class="number">8</span>, *, city, weather)</span>:</span></div><div class="line">    print(name, age, city, weather)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 参数 可选参数，可变参数，命名关键字参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun13</span><span class="params">(age=<span class="number">23</span>, *l_num, **key_word)</span>:</span></div><div class="line">    print(age, l_num, key_word)</div><div class="line"></div><div class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">fun10(<span class="string">'cwj'</span>, <span class="number">24</span>, *l)  <span class="comment"># cwj 24 (1, 2, 3) &#123;&#125;</span></div><div class="line"></div><div class="line">fun10(<span class="string">'cwj'</span>, <span class="number">24</span>, *l, city=<span class="string">'beijing'</span>)  <span class="comment"># cwj 24 (1, 2, 3) &#123;'city': 'beijing'&#125;</span></div><div class="line"></div><div class="line">fun11(<span class="string">'cwj'</span>, <span class="number">24</span>, *l, city=<span class="string">'tianjin'</span>, weather=<span class="string">'hot'</span>)  <span class="comment"># cwj 24 1 2 3 tianjin hot</span></div><div class="line"></div><div class="line">fun12(<span class="string">'cwj'</span>, age=<span class="number">24</span>, city=<span class="string">'xian'</span>, weather=<span class="string">'very hot'</span>)  <span class="comment"># cwj 24 xian very hot</span></div><div class="line"></div><div class="line">fun12(<span class="string">'cwj'</span>, <span class="number">0</span>, city=<span class="string">'beijing'</span>, weather=<span class="string">'windy'</span>)  <span class="comment"># cwj 0 beijing windy</span></div><div class="line"></div><div class="line">fun13(<span class="number">24</span>, *l, fa=<span class="string">'sss'</span>)  <span class="comment"># 24 (1, 2, 3) &#123;'fa': 'sss'&#125;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  02-数据-序列]]></title>
      <url>/Python3%20%2002-%E6%95%B0%E6%8D%AE-%E5%BA%8F%E5%88%97/</url>
      <content type="html"><![CDATA[<p><strong>人生苦短，我用Python</strong></p>
<a id="more"></a>
<hr>
<p>[TOC]</p>
<hr>
<p><strong>通过print()结果来区分各种序列类型</strong></p>
<ul>
<li><code>[]</code>是<code>list</code></li>
<li><code>()</code>是<code>tuple</code></li>
<li><code>{}</code>是<code>set</code></li>
<li><code>{key:value, ...}</code>是<code>dict</code></li>
</ul>
<p><strong>说明：在序列声明时：</strong></p>
<ul>
<li><code>list</code>使用<code>[]</code></li>
<li><code>tuple</code>与set使用<code>()</code>。其中声明<code>set</code>值时用到<code>set关键字</code>，以区分<code>tuple</code></li>
<li><code>dict</code>使用<code>{}</code></li>
<li><code>set</code>使用<code>set()</code></li>
</ul>
<h2 id="关于集合–list和tuple"><a href="#关于集合–list和tuple" class="headerlink" title="关于集合–list和tuple"></a>关于集合–list和tuple</h2><ul>
<li><code>list</code>是python内置的、是有序的、可随时添加、删除其中元素的数据类型。通过<code>[]</code>来包裹内容</li>
<li><code>tuple</code>是有序、”指向不可变“的另一种集合，称为”元组“。通过<code>()</code>来包裹内容</li>
<li><code>list</code>使用<code>print()</code>后打印的结果为：`[]``</li>
<li><code>set</code>使用<code>print()</code>后打印的结果为：<code>{}</code></li>
</ul>
<h2 id="序列相加"><a href="#序列相加" class="headerlink" title="序列相加"></a>序列相加</h2><pre><code>相同数据类型序列之间可以相加，不同数据类型序列不能相加
</code></pre><p><strong>1.list</strong></p>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">nameList = [<span class="string">'张三'</span>, <span class="string">'李四'</span>, <span class="string">'王五'</span>]</div><div class="line">print(nameList)     <span class="comment">#['张三', '李四', '王五']</span></div><div class="line"></div><div class="line"><span class="comment">#增 方式-1：追加,只能添加到集合的末尾</span></div><div class="line">nameList.append(<span class="string">'赵六'</span>)</div><div class="line">print(nameList)     <span class="comment">#['张三', '李四', '王五', '赵六']</span></div><div class="line"></div><div class="line"><span class="comment">#增 方式-2：插入。参数1，添加的位置；参数2，插入的内容</span></div><div class="line">nameList.insert(<span class="number">1</span>,<span class="string">'钱七'</span>)</div><div class="line">print(nameList)     <span class="comment">#['张三', '钱七', '李四', '王五', '赵六']</span></div><div class="line"></div><div class="line"><span class="comment">#删</span></div><div class="line">nameList.pop(<span class="number">1</span>)</div><div class="line">print(nameList)     <span class="comment">#['张三', '李四', '王五', '赵六']</span></div><div class="line"></div><div class="line"><span class="comment">#删，无参数情况下默认删除最后一个元素</span></div><div class="line">nameList.pop()</div><div class="line">print(nameList)     <span class="comment">#['张三', '李四', '王五']</span></div><div class="line"></div><div class="line"><span class="comment">#改 根据指定的下标，替换元素</span></div><div class="line">nameList[<span class="number">0</span>] = <span class="string">'孙八'</span></div><div class="line">print(nameList)     <span class="comment">#['孙八', '李四', '王五']</span></div><div class="line"></div><div class="line"><span class="comment">#查 输出集合的长度</span></div><div class="line">print(len(nameList))        <span class="comment">#3</span></div><div class="line"></div><div class="line"><span class="comment">#查 输出指定位置的元素  方式-1：从前向后，正序</span></div><div class="line">print(nameList[<span class="number">1</span>])      <span class="comment">#李四</span></div><div class="line"></div><div class="line"><span class="comment">#查 输出指定位置的元素  方式-2：从后向前，倒序</span></div><div class="line">print(nameList[<span class="number">-1</span>])     <span class="comment">#王五</span></div><div class="line"></div><div class="line"><span class="comment">#查 循环遍历，方式-1 for</span></div><div class="line"><span class="keyword">for</span> nameSingle <span class="keyword">in</span> nameList:</div><div class="line">    print(nameSingle)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">孙八</span></div><div class="line"><span class="string">李四</span></div><div class="line"><span class="string">王五</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="comment">#查 循环遍历，方式-2 while</span></div><div class="line">count = len(nameList)</div><div class="line"><span class="keyword">while</span> count &gt; <span class="number">0</span>:</div><div class="line">    print(nameList[(-count)])</div><div class="line">    count = count<span class="number">-1</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">孙八</span></div><div class="line"><span class="string">李四</span></div><div class="line"><span class="string">王五</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<p><strong>2.tuple</strong></p>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">tupleValue = (<span class="number">1</span>,<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment">#空的tuple</span></div><div class="line">tupleValue01 = ()</div><div class="line"></div><div class="line"><span class="comment">#只有1个元素的tuple定义时必须加一个逗号·,·，来消除歧义。若不加，则定义的不是tuple，是1这个数！这是因为括号()既可以表示tuple，又可以表示数学公式中的小括号。</span></div><div class="line">tupleValue02 = (<span class="number">1</span>,)</div><div class="line"></div><div class="line"><span class="comment">#一个“可变的”tuple：变的不是tuple的元素，而是其中的list的元素</span></div><div class="line"><span class="comment">#tuple一开始指向的list并没有改成别的list，所以所谓的“不变”是说，tuple的每个元素，指向永远不变。</span></div><div class="line"><span class="comment"># 即指向'a'，就不能改成指向'b'，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！</span></div><div class="line">t = (<span class="string">'a'</span>, <span class="string">'b'</span>, [<span class="string">'A'</span>, <span class="string">'B'</span>])</div><div class="line">print(t[<span class="number">2</span>][<span class="number">0</span>])</div><div class="line">print(t[<span class="number">2</span>][<span class="number">1</span>])</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">A</span></div><div class="line"><span class="string">B</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<h2 id="关于dict和set"><a href="#关于dict和set" class="headerlink" title="关于dict和set"></a>关于dict和set</h2><p> <strong>dict</strong></p>
<ul>
<li><code>dict</code>在其他语言中称为<code>map</code>，其存储的值是 无序 的，使用的<code>键-值对（key-value）</code>存储,用<code>{}</code>来包裹内容。</li>
<li><code>dict</code>使用<code>print()</code>后打印的结果为：{‘mac’: 999999, ‘hp’: 777777, ‘ASUS’: 46567}</li>
<li><p><code>dict</code>默认是去重复的</p>
<p><strong><em>注意:</em></strong> dict的key必须是不可变对象。</p>
<p><strong>特点：和list相比</strong><br>  1.查询速度快<br>  2.内存占用量大</p>
</li>
</ul>
<p><strong>dict</strong>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">d = &#123;<span class="string">'mac'</span>:<span class="number">999999</span>, <span class="string">'hp'</span>:<span class="number">777777</span>, <span class="string">'ASUS'</span>:<span class="number">46567</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">#查</span></div><div class="line">print(d[<span class="string">'mac'</span>])     <span class="comment">#999999</span></div><div class="line"></div><div class="line"><span class="comment">#改</span></div><div class="line">d[<span class="string">'mac'</span>] = <span class="number">90000</span></div><div class="line">print(d[<span class="string">'mac'</span>])     <span class="comment">#90000</span></div><div class="line"></div><div class="line"><span class="comment">#判断dict中是否存在当前的键 方法-1</span></div><div class="line">print(<span class="string">'mac'</span> <span class="keyword">in</span> d)       <span class="comment">#True</span></div><div class="line">print(<span class="string">'lenvol'</span> <span class="keyword">in</span> d)        <span class="comment">#False</span></div><div class="line"></div><div class="line"><span class="comment">#判断dict中是否存在当前的键 方法-2</span></div><div class="line">print(d.get(<span class="string">'mac'</span>))     <span class="comment">#90000</span></div><div class="line">print(d.get(<span class="string">'lenvol'</span>))         <span class="comment">#None</span></div><div class="line"></div><div class="line"><span class="comment">#删</span></div><div class="line">d.pop(<span class="string">'mac'</span>)</div><div class="line">print(d)        <span class="comment">#&#123;'hp': 777777, 'ASUS': 46567&#125;</span></div></pre></td></tr></table></figure>
<p> <strong>set</strong></p>
<ul>
<li><code>set</code>是 <code>list</code>的精简版，去掉其重复的元素，而且只存储key值，不存储value值。即set内部是无重复元素的。</li>
<li><code>set</code> 不能放入 可变对象.因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”</li>
<li><code>set</code>使用<code>print()</code>后显示的结果是：{}</li>
<li><p><code>set</code>中到的参数只能放一个。</p>
<p> <strong><em>注意: </em></strong>dict的key必须是不可变对象。</p>
<p> <strong>特点：和list相比</strong></p>
<pre><code>1.查询速度快
2.内存占用量大
</code></pre></li>
</ul>
<p><strong>set</strong>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">l = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line">print(l)        <span class="comment">#[1, 5, 1, 1, 2, 2, 3, 3, 4, 5]</span></div><div class="line">print(len(l))      <span class="comment">#10</span></div><div class="line"></div><div class="line">s = set(l)</div><div class="line">print(s)        <span class="comment">#&#123;1, 2, 3, 4, 5&#125;</span></div><div class="line">print(len(s))       <span class="comment">#5</span></div><div class="line"></div><div class="line">s.add(<span class="number">7</span>)</div><div class="line">print(s)        <span class="comment">#&#123;1, 2, 3, 4, 5, 7&#125;</span></div><div class="line">print(len(s))       <span class="comment">#6</span></div><div class="line"></div><div class="line">s.remove(<span class="number">7</span>)</div><div class="line">print(s)        <span class="comment">#&#123;1, 2, 3, 4, 5&#125;</span></div><div class="line">print(len(s))       <span class="comment">#5</span></div><div class="line"></div><div class="line">s2 = set([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</div><div class="line"><span class="comment">#交集</span></div><div class="line">print((s &amp; s2))     <span class="comment">#&#123;4, 5&#125;</span></div><div class="line"></div><div class="line"><span class="comment">#并集</span></div><div class="line">print((s | s2))      <span class="comment">#&#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;</span></div></pre></td></tr></table></figure>
<h2 id="解释“不可变对象”"><a href="#解释“不可变对象”" class="headerlink" title="解释“不可变对象”"></a>解释<em>“不可变对象”</em></h2><p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">a = <span class="string">'abc'</span></div><div class="line">print(a)</div><div class="line">print(a.replace(<span class="string">'a'</span>,<span class="string">'A'</span>))</div><div class="line">print(a)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">abc</span></div><div class="line"><span class="string">Abc</span></div><div class="line"><span class="string">abc</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line">b = a.replace(<span class="string">'a'</span>,<span class="string">'A'</span>)</div><div class="line">print(b)</div><div class="line">print(a)</div><div class="line">print(b)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">Abc</span></div><div class="line"><span class="string">abc</span></div><div class="line"><span class="string">Abc</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<p>由上面的代码可以看出：在调用了变量a的replace()之后，立即输出变量a的值，此时变量a的值是修改后的，但是在次输出a的值时，还是原来的内容，即：变量a的内容最终并没有被修改。</p>
<p><em>那为什么立即输出a修改后的内容时是变化的呢？</em></p>
<p>当我们把修改后a的值赋给变量b时，不管输出多少次b变量的值，其内容一直是不变的。也就是说：变量b存储的是一个新的内容，即一个新的str类型的对象。而这个新的str类型的对象是在变量a所指的对象的基础上修改之后的新对象。</p>
<p>结论就是：<strong>不可变对象修改后得到的对象是一个新的对象，而原有的对象保持不变</strong></p>
<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p><code>elif</code>是<code>else if</code>的缩写，完全可以有多个<code>elif</code></p>
<p>代码示例</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">age = <span class="number">3</span></div><div class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</div><div class="line">    print(<span class="string">'adult'</span>)</div><div class="line"><span class="keyword">elif</span> age &gt;= <span class="number">6</span>:</div><div class="line">    print(<span class="string">'teenager'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">'kid'</span>)</div></pre></td></tr></table></figure>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><blockquote>
<p>1.<code>for A in AList</code>. 将‘AList集合’中的每一个元素赋值到‘变量A’中<br>2.<code>while n</code>。只要条件’n‘满足，就将‘AList集合’中的每一个元素取出并赋值到变量中</p>
</blockquote>
<ul>
<li><code>for ... in ...</code></li>
<li><code>while</code></li>
</ul>
<h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>主要是使用: for in<br>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">    ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</div><div class="line">    sum02 = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> ls:</div><div class="line">        print(item)</div><div class="line">        sum02 = sum02 + item</div><div class="line">    print(sum02)</div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    1</span></div><div class="line"><span class="string">    2</span></div><div class="line"><span class="string">    3</span></div><div class="line"><span class="string">    4</span></div><div class="line"><span class="string">    5</span></div><div class="line"><span class="string">    6</span></div><div class="line"><span class="string">    7</span></div><div class="line"><span class="string">    8</span></div><div class="line"><span class="string">    9</span></div><div class="line"><span class="string">    45</span></div><div class="line"><span class="string">    '''</span></div><div class="line"></div><div class="line">    d = &#123;<span class="string">'cwj'</span>: <span class="number">150</span>, <span class="string">'zh'</span>: <span class="number">145</span>, <span class="string">'ww'</span>: <span class="number">234</span>, <span class="string">'cwj'</span>: <span class="number">200</span>&#125;</div><div class="line"></div><div class="line">    print(d)  <span class="comment"># &#123;'cwj': 150, 'zh': 145, 'ww': 234&#125;</span></div><div class="line">    print(len(d))  <span class="comment"># 3</span></div><div class="line">    print(d.keys())  <span class="comment"># dict_keys(['cwj', 'zh', 'ww'])</span></div><div class="line"></div><div class="line">    dlk = list(d.keys())</div><div class="line">    print(dlk)  <span class="comment"># ['cwj', 'zh', 'ww']</span></div><div class="line"></div><div class="line">    dlks = set(dlk)</div><div class="line">    print(dlks)  <span class="comment"># &#123;'zh', 'ww', 'cwj'&#125;</span></div><div class="line"></div><div class="line">    dtk = tuple(d.keys())</div><div class="line">    print(dtk)  <span class="comment"># ('cwj', 'zh', 'ww')</span></div><div class="line"></div><div class="line">    <span class="string">'''遍历方式 1'''</span></div><div class="line">    <span class="keyword">for</span> (key, value) <span class="keyword">in</span> d.items():</div><div class="line">        print(key, value)</div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    cwj 200</span></div><div class="line"><span class="string">    zh 145</span></div><div class="line"><span class="string">    ww 234</span></div><div class="line"><span class="string">    '''</span></div><div class="line"></div><div class="line">    <span class="string">'''遍历方式 2'''</span></div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> d:</div><div class="line">        print(<span class="string">'dict[%s]\'s value is : '</span> % key, d[key])</div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    dict[cwj]'s value is :  200</span></div><div class="line"><span class="string">    dict[zh]'s value is :  145</span></div><div class="line"><span class="string">    dict[ww]'s value is :  234</span></div><div class="line"><span class="string">    '''</span></div><div class="line"></div><div class="line">    <span class="string">'''遍历方式 3 ，遍历到指定的key时，修改其元素'''</span></div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> d.keys():</div><div class="line">        print(key)</div><div class="line">        print(d[key])</div><div class="line">        <span class="keyword">if</span> key == <span class="string">'cwj'</span>:</div><div class="line">            d[key] = <span class="number">500</span></div><div class="line">            print(<span class="string">'ok cwj,your grade has changed!'</span>)</div><div class="line">    print(d)</div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    cwj</span></div><div class="line"><span class="string">    200</span></div><div class="line"><span class="string">    ok cwj,your grade has changed!</span></div><div class="line"><span class="string">    zh</span></div><div class="line"><span class="string">    145</span></div><div class="line"><span class="string">    ww</span></div><div class="line"><span class="string">    234</span></div><div class="line"><span class="string">    &#123;'cwj': 500, 'zh': 145, 'ww': 234&#125;</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<h2 id="几个内置函数"><a href="#几个内置函数" class="headerlink" title="几个内置函数"></a>几个内置函数</h2><p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">ll = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line">ll2 = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</div><div class="line">ll3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</div><div class="line">ll4 = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>]</div><div class="line">print(ll * <span class="number">2</span>)  <span class="comment"># [1, 2, 3, 4, 1, 2, 3, 4]</span></div><div class="line">print(ll + ll2)  <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8]</span></div><div class="line"><span class="comment"># 不能相减</span></div><div class="line"><span class="comment"># print(ll3 - ll2)</span></div><div class="line"></div><div class="line"><span class="comment"># 成员资格</span></div><div class="line"><span class="comment"># 检测 1 是否在 ll2序列 中， 使用 in 关键字返回值</span></div><div class="line"><span class="comment"># 为：True or False</span></div><div class="line">print(<span class="number">1</span> <span class="keyword">in</span> ll2)  <span class="comment"># False</span></div><div class="line"></div><div class="line"><span class="comment"># 获得序列中的最大值</span></div><div class="line">print(max(ll3))  <span class="comment"># 8</span></div><div class="line">print(min(ll4))  <span class="comment"># 0</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  02-函数-生成器+切片]]></title>
      <url>/Python3%20%2002-%E5%87%BD%E6%95%B0-%E7%94%9F%E6%88%90%E5%99%A8+%E5%88%87%E7%89%87/</url>
      <content type="html"><![CDATA[<p><strong>人生苦短，我用Python</strong></p>
<a id="more"></a>
<hr>
<p>[TOC]</p>
<hr>
<pre><code>高级特性——(slice)切片，表示为[::]
</code></pre><ul>
<li>切片语法：[1:4:2]</li>
</ul>
<blockquote>
<ul>
<li>数字’1’ 表示开始的索引位置</li>
<li>数字’4’ 表示结束的索引位置</li>
<li>数字’2’ 表示间隔的索引数</li>
</ul>
</blockquote>
<p><em>补充于：2017年07月18日16:29:53</em></p>
<blockquote>
<p>Python序列切片操作：<a href="http://developer.51cto.com/art/201304/389771.htm" target="_blank" rel="external">http://developer.51cto.com/art/201304/389771.htm</a></p>
</blockquote>
<ul>
<li>切片的方向与位置</li>
</ul>
<blockquote>
<p>对于序列结构数据来说，索引和步长都具有正负两个值<br>任意一个序列结构数据的索引范围为: -len(consequence) 到 len(consequence)-1 范围内的连续整数。<br>step 步长：默认为1，步长值不能为0。<br>切片过程:从第1个想要的对象开始，到第1个不想要的对象结束</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">说明</th>
<th style="text-align:center">正索引默认位置</th>
<th style="text-align:center">负索引默认位置</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">序列方向说明</td>
<td style="text-align:center">左 –&gt; 右</td>
<td style="text-align:center">左 &lt;– 右</td>
</tr>
<tr>
<td style="text-align:center">序列第一个元素位置</td>
<td style="text-align:center">0</td>
<td style="text-align:center">-len(consequence)</td>
</tr>
<tr>
<td style="text-align:center">序列末元素位置</td>
<td style="text-align:center">len(consequence)－1</td>
<td style="text-align:center">-1</td>
</tr>
</tbody>
</table>
<ul>
<li>切片方向代码示例</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">s3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line">print(s3[<span class="number">1</span>:<span class="number">4</span>:<span class="number">1</span>])  <span class="comment"># [2, 3, 4]</span></div><div class="line">print(s3[<span class="number">-4</span>:<span class="number">-2</span>])  <span class="comment"># [2, 3]</span></div><div class="line">print(s3[<span class="number">-3</span>:<span class="number">-1</span>])  <span class="comment"># [3, 4]</span></div><div class="line">print(s3[<span class="number">-5</span>:])  <span class="comment"># [1, 2, 3, 4, 5]</span></div><div class="line">print(s3[:])  <span class="comment"># [1, 2, 3, 4, 5]</span></div><div class="line">print(s3[<span class="number">-1</span>::<span class="number">-1</span>])  <span class="comment"># [5, 4, 3, 2, 1]</span></div><div class="line">print(s3[<span class="number">-1</span>:])  <span class="comment"># [5]</span></div></pre></td></tr></table></figure>
<ul>
<li>range语法range(start, stop, step)</li>
</ul>
<blockquote>
<p>参考：<a href="http://www.nowamagic.net/academy/detail/1302446" target="_blank" rel="external">http://www.nowamagic.net/academy/detail/1302446</a></p>
<ul>
<li>根据<code>start</code>和<code>stop</code>确定范围，根据<code>step</code>设定步长</li>
</ul>
</blockquote>
<ul>
<li>range与xrange</li>
</ul>
<blockquote>
<p>两者都能用于for循环中<br>range 与 xrange 用法上完全相同，不同点是，产生的结果类型不同</p>
<ul>
<li>range 产生的结果是 list</li>
<li>xrange 产生的结果是 生成器</li>
</ul>
</blockquote>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''这两个输出的结果都是一样的，实际上有很多不同，'''</span></div><div class="line"><span class="string">'''range会直接生成一个list对象'''</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">5</span>)</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"></div><div class="line"><span class="string">'''而xrange则不会直接生成一个list，而是每次调用返回其中的一个值'''</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>xrange(<span class="number">5</span>)</div><div class="line">xrange(<span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(xrange(<span class="number">5</span>))</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"></div><div class="line"><span class="string">'''要生成很大的数字序列的时候，用xrange会比range性能优很多，因为不需要一上来就开辟一块很大的内存空间。'''</span></div></pre></td></tr></table></figure>
<h2 id="函数range的使用"><a href="#函数range的使用" class="headerlink" title="函数range的使用"></a>函数range的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''表示从1开始，到10之前（不包括10'''</span></div><div class="line">l = range(<span class="number">1</span>, <span class="number">10</span>)</div><div class="line"><span class="string">'''从0开始（0可以省略），生成10个数'''</span></div><div class="line">ll = range(<span class="number">10</span>)</div><div class="line"><span class="string">'''从0开始，生成10个数，公差为2（相邻的数之间间隔为2）'''</span></div><div class="line">lll = range(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="string">'''根据range的规则，生成指定的序列'''</span></div><div class="line">print(l)  <span class="comment"># range(1, 10)</span></div><div class="line">print(ll)  <span class="comment"># range(0, 10)</span></div><div class="line">print(list(l))  <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></div><div class="line">print(list(ll))  <span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></div><div class="line">print(list(lll))  <span class="comment"># [0, 2, 4, 6, 8]</span></div><div class="line"></div><div class="line"><span class="string">'''从缩影0开始，去之后索引+2对应的具体数值'''</span></div><div class="line">print(list(lll)[::<span class="number">2</span>])  <span class="comment"># [0, 4, 8]</span></div></pre></td></tr></table></figure>
<p><strong><em>使用range进行求和</em></strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sum = <span class="number">0</span></div><div class="line">numbers = range(<span class="number">1</span>, <span class="number">10</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> numbers:</div><div class="line">    sum += i</div><div class="line">print(sum)</div><div class="line"><span class="string">'''45'''</span></div></pre></td></tr></table></figure>
<h2 id="对list使用切片"><a href="#对list使用切片" class="headerlink" title="对list使用切片"></a>对list使用切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">l = [<span class="string">'cwj'</span>, <span class="string">'serr'</span>, <span class="string">'bob'</span>, <span class="string">'jack'</span>]</div><div class="line"></div><div class="line"><span class="string">'''取3个元素 使用方法 切片（slice）,是指：取出一个范围内的元素'''</span></div><div class="line"><span class="string">'''从索引0开始，直到3为止，但是不包括索引3，实际的取得索引为0，1，2</span></div><div class="line"><span class="string">    如果索引是从0开始的，0可以省略'''</span></div><div class="line">print(l[<span class="number">0</span>:<span class="number">3</span>])  <span class="comment"># ['cwj', 'serr', 'bob']</span></div><div class="line">print(l[:<span class="number">3</span>])  <span class="comment"># ['cwj', 'serr', 'bob']</span></div><div class="line"></div><div class="line"><span class="string">'''倒着取出元素'''</span></div><div class="line">print(l[<span class="number">-3</span>:])  <span class="comment"># ['serr', 'bob', 'jack']</span></div><div class="line">print(l[<span class="number">0</span>:<span class="number">-3</span>])  <span class="comment"># ['cwj']</span></div></pre></td></tr></table></figure>
<h2 id="对str使用切片"><a href="#对str使用切片" class="headerlink" title="对str使用切片"></a>对str使用切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'cwj, cwj, cwj, cwj'</span></div><div class="line">sp = s[::]</div><div class="line">print(sp)  <span class="comment"># cwj, cwj, cwj, cwj</span></div><div class="line">print(sp[<span class="number">0</span>:<span class="number">4</span>:<span class="number">2</span>])  <span class="comment"># cj</span></div></pre></td></tr></table></figure>
<h2 id="对dict使用切片-–-dict不适用与切片"><a href="#对dict使用切片-–-dict不适用与切片" class="headerlink" title="对dict使用切片 – dict不适用与切片"></a>对dict使用切片 – dict不适用与切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">"对dict使用切片"</span>)</div><div class="line">d = &#123;<span class="string">'cwj'</span>: <span class="number">150</span>, <span class="string">'zh'</span>: <span class="number">145</span>, <span class="string">'ww'</span>: <span class="number">234</span>, <span class="string">'cwj'</span>: <span class="number">200</span>&#125;</div><div class="line"><span class="comment"># print(d[1:3])  # TypeError: unhashable type: 'slice'</span></div></pre></td></tr></table></figure>
<h2 id="对tuple使用切片"><a href="#对tuple使用切片" class="headerlink" title="对tuple使用切片"></a>对tuple使用切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">print(range(<span class="number">8</span>))  <span class="comment"># range(0, 8)</span></div><div class="line">ll5 = range(<span class="number">8</span>)  <span class="comment"># range(0, 8)</span></div><div class="line">print(ll5)</div><div class="line">t = tuple(ll5)</div><div class="line">print(t)  <span class="comment"># (0, 1, 2, 3, 4, 5, 6, 7)</span></div><div class="line"></div><div class="line">lls = t[::]</div><div class="line">print(<span class="string">'将 t序列 复制后的结果为：'</span>)</div><div class="line">print(lls)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">将 t序列 复制后的结果为：</span></div><div class="line"><span class="string">(0, 1, 2, 3, 4, 5, 6, 7)</span></div><div class="line"><span class="string">注意： tuple执行切片以后仍是一个tuple</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<h2 id="对set使用切片"><a href="#对set使用切片" class="headerlink" title="对set使用切片"></a>对set使用切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">s = set(lls)</div><div class="line">print(s)  <span class="comment"># &#123;0, 1, 2, 3, 4, 5, 6, 7&#125; 是set类型的数据</span></div><div class="line">spl = t[::]</div><div class="line">print(spl)  <span class="comment"># (0, 1, 2, 3, 4, 5, 6, 7) 使用range后是tuple类型的数据</span></div></pre></td></tr></table></figure>
<h2 id="迭代器-for-的使用"><a href="#迭代器-for-的使用" class="headerlink" title="迭代器 for 的使用"></a>迭代器 for 的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'ABC'</span></div><div class="line"><span class="keyword">for</span> c <span class="keyword">in</span> s:</div><div class="line">    print(c)</div><div class="line"></div><div class="line"><span class="string">'''使用下标循环'''</span></div><div class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate(l):</div><div class="line">    print(i, value)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">0 1</span></div><div class="line"><span class="string">1 2</span></div><div class="line"><span class="string">2 3</span></div><div class="line"><span class="string">3 4</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i, ch <span class="keyword">in</span> enumerate(s):</div><div class="line">    print(i, ch)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">0 A</span></div><div class="line"><span class="string">1 B</span></div><div class="line"><span class="string">2 C</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line">d = &#123;<span class="string">'A'</span>: <span class="number">123</span>, <span class="string">'B'</span>: <span class="number">456</span>&#125;</div><div class="line">print(d)  <span class="comment"># &#123;'A': 123, 'B': 456&#125;</span></div><div class="line"><span class="keyword">for</span> i, dict0 <span class="keyword">in</span> enumerate(d):</div><div class="line">    print(i, d.items())</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">0 A</span></div><div class="line"><span class="string">1 B</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line">ls = [(<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">3</span>)]</div><div class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> ls:</div><div class="line">    print(x, y)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">1 1</span></div><div class="line"><span class="string">2 2</span></div><div class="line"><span class="string">3 3</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="string">'''列表生成器'''</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</div><div class="line">    print(x * x)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">1</span></div><div class="line"><span class="string">4</span></div><div class="line"><span class="string">9</span></div><div class="line"><span class="string">16</span></div><div class="line"><span class="string">25</span></div><div class="line"><span class="string">36</span></div><div class="line"><span class="string">49</span></div><div class="line"><span class="string">64</span></div><div class="line"><span class="string">81</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="string">'''生成的序列后，进行计算'''</span></div><div class="line">print([x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">9</span>)])  <span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64]</span></div><div class="line"></div><div class="line"><span class="string">'''生成序列后，新进行取余数预算，然后进行相乘运算'''</span></div><div class="line">print([x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>])  <span class="comment"># [4, 16, 36, 64]</span></div><div class="line"></div><div class="line"><span class="string">'''遍历两个字符串进行 排列组合'''</span></div><div class="line">print([m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'123'</span>])  <span class="comment"># ['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3']</span></div><div class="line"></div><div class="line"><span class="string">'''将dict类型的数据转换为 序列'''</span></div><div class="line">d = &#123;<span class="string">'A'</span>: <span class="number">1</span>, <span class="string">'B'</span>: <span class="number">2</span>, <span class="string">'C'</span>: <span class="number">3</span>&#125;</div><div class="line">print([k + <span class="string">' = '</span> + str(v) <span class="keyword">for</span> k, v <span class="keyword">in</span> d.items()])  <span class="comment"># 'A = 1', 'B = 2', 'C = 3']</span></div></pre></td></tr></table></figure>
<h2 id="yield关键字"><a href="#yield关键字" class="headerlink" title="yield关键字"></a>yield关键字</h2><p> <strong><em>定义generator函数的另一中方式：</em></strong><br>    当一个函数中含有关键字 <code>yield</code>时，这个函数就不在是一个普通的函数，而是一个<code>generator</code>函数</p>
<p> <strong><em>带有yield关键字的generator函数，执行流程与普通函数不同：</em></strong></p>
<pre><code>- 普通函数：执行到return或者函数的最后一句时，退出函数。
- 带有yield关键字的generator函数，调用next()函数时执行操作，遇到yield()函数时，退出返回。当 再次执行此函数时从上次返回yield语句处继续执行
</code></pre><p> <em>运行含有yield关键字的函数</em></p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_yield</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'step_01'</span>)</div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span></div><div class="line">    print(<span class="string">'step_02'</span>)</div><div class="line">    <span class="keyword">yield</span> <span class="number">2</span></div><div class="line">    print(<span class="string">'step_03'</span>)</div><div class="line">    <span class="keyword">yield</span> <span class="number">3</span></div><div class="line"><span class="comment"># 调用该generator时，首先要生成一个generator对象，然后用next()函数不断获得下一个返回值：</span></div><div class="line">o = p_yield()</div><div class="line">next(o)  <span class="comment"># step_01</span></div><div class="line"></div><div class="line">next(o)  <span class="comment"># step_02</span></div><div class="line"></div><div class="line">next(o)  <span class="comment"># step_03</span></div><div class="line"></div><div class="line"><span class="comment"># next(o)  # StopIteration</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></div><div class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></div><div class="line">    <span class="comment">#l = []</span></div><div class="line">    <span class="keyword">while</span> n &lt; max:</div><div class="line">        <span class="string">'''方法1 返回值：1 \n 2 \n 3 \n 4 \n 5'''</span></div><div class="line">        <span class="comment"># print(b)</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        方法2 返回值：[1, 1, 2, 3, 5]</span></div><div class="line"><span class="string">        函数在运行中占用的内存会随着参数 max 的增大而增大，如果要控制内存占用，最好不要用 List</span></div><div class="line"><span class="string">来保存中间结果，而是通过 iterable 对象来迭代。</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        <span class="comment">#l.append(b)</span></div><div class="line">        <span class="string">'''方法3 返回值：1 \n 1 \n 2 \n 3 \n 5. 使用yield关键字，使得生成的值为一个generator对象,而不是使用list占用大量的内存'''</span></div><div class="line">        <span class="keyword">yield</span> b</div><div class="line">        a, b = b, a + b</div><div class="line">        n = n + <span class="number">1</span></div><div class="line">    <span class="comment">#return l</span></div><div class="line"></div><div class="line"><span class="comment"># print(fib(5))</span></div></pre></td></tr></table></figure>
<p><strong><em>yield关键字的使用</em></strong></p>
<blockquote>
<p>参考：<a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/</a></p>
</blockquote>
<ul>
<li><p>yield关键字 使得一个普通的函数变成一个generator函数。Python解释器会将其视为一个generator，当for循环fib（5）函数的返回值时，实际调用的是iterable对象。</p>
</li>
<li><p>一个带有 yield 的函数就是一个 generator，它和普通函数不同，生成一个 generator 看起来像函数调用，<br> 但不会执行任何函数代码，直到对其调用 next()（在 for 循环中会自动调用 next()）才开始执行。</p>
</li>
<li><p>虽然执行流程仍按函数的流程执行，但每执行到一个 yield 语句就会中断，并返回一个迭代值，下次执行时从 yield 的下一个语句继续执行。看起来就好像一个函数在正常执行的过程中被 yield 中断了数次，每次中断都会通过 yield 返回当前的迭代值。</p>
</li>
<li><p>yield 的好处是显而易见的，把一个函数改写为一个 generator 就获得了迭代能力，比起用类的实例保存状态来计算下一个 next() 的值，<br> 不仅代码简洁，而且执行流程异常清晰</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> fib(<span class="number">5</span>):</div><div class="line">    print(n)</div></pre></td></tr></table></figure>
<p><strong><em>区分：fib与fib(5)</em></strong></p>
<ul>
<li>fib：是一个generator function  好比于：类的定义</li>
<li>fib(5)：是调用 fib 后返回的一个generator对象  好比于：类的实例化</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  01-基础-基本数据类型]]></title>
      <url>/Python3%20%2001-%E5%9F%BA%E7%A1%80-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p><strong>人生苦短，我用Python</strong></p>
<a id="more"></a>
<hr>
<p>[TOC]</p>
<hr>
<pre><code>Python是一种计算机编程语言，使用Unicode编码，支持多语言(动态语言，因为变量本身不固定)。
是一种解释性语言在运行 .py 文件时需要通过 解释器 进行解释然后显示呢结果。
区分大小写
</code></pre><blockquote>
<p>参考网站：<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000</a></p>
</blockquote>
<h1 id="Python代码创建方式"><a href="#Python代码创建方式" class="headerlink" title="Python代码创建方式"></a>Python代码创建方式</h1><p>   1.在 终端环境 中编写<br>   2.在 文件 中编写</p>
<p>   <strong><em> 方式 1：在终端环境下 </em></strong><br>   输入 python 进入python交互模式，在&gt;&gt;&gt;后名编写代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">300</span> + <span class="number">100</span></div><div class="line"><span class="number">400</span></div></pre></td></tr></table></figure>
<p>输入 <code>exit()</code> 退出python模式。</p>
<p>   <strong><em> 方式 2：在文件中 </em></strong><br>   直接在文件中编写代码，然后打开终端进入文件所在目录，运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python 文件名.py</div></pre></td></tr></table></figure>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre><code>1、采用缩进方式（4个空格）
2、大小写敏感，例如：`True`, `False`, `None`
</code></pre><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>  <code># coding=utf-8</code> 使用Scrapy爬虫框架时应该添加此条语句表明注释是<code>中文注释</code><br>   <code>#</code> 单行注释<br>    <code>&#39;&#39;&#39; &#39;&#39;&#39;</code>多行注释</p>
<h2 id="符号-：作用"><a href="#符号-：作用" class="headerlink" title="符号 ：作用"></a>符号 ：作用</h2><p>  <code>:</code>结尾表示时，缩进的语句视为代码块,如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ooo:</div><div class="line">    XXX</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    XXX</div></pre></td></tr></table></figure>
<h2 id="字符串编码"><a href="#字符串编码" class="headerlink" title="字符串编码"></a>字符串编码</h2><blockquote>
<p>参考：<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000</a></p>
</blockquote>
<ul>
<li><p>ASCII、Unicode和UTF-8的关系<br>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。</p>
</li>
<li><p>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件</p>
</li>
<li><p>浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器。<br>所以你看到很多网页的源码上会有类似<meta charset="UTF-8">的信息，表示该网页正是用的UTF-8编码</p>
<p><code>Python 3</code>版本中，字符串是以<code>Unicode编码</code>的，也就是说，Python的字符串支持多语言</p>
</li>
</ul>
<h2 id="数据类型和变量"><a href="#数据类型和变量" class="headerlink" title="数据类型和变量"></a>数据类型和变量</h2><blockquote>
<ol>
<li>整数</li>
<li>浮点型</li>
<li>字符串</li>
<li>布尔值</li>
<li>空值</li>
<li>变量</li>
<li>常量</li>
<li>列表</li>
<li>字典</li>
<li>自定义数据类型  </li>
</ol>
</blockquote>
<h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><pre><code>1，-1，0x123。
</code></pre><p>   整数的除法在Python中有两种：<code>/</code>和<code>//</code>。<br>   其中<code>/</code>表示除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(<span class="number">13</span>/<span class="number">5</span>)   <span class="comment">#2.6</span></div></pre></td></tr></table></figure>
<p>   另一种除法<code>//</code>称为地板除，两个整数的除法仍然是整数:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(<span class="number">13</span>//<span class="number">5</span>)   <span class="comment">#2</span></div></pre></td></tr></table></figure>
<h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><pre><code>1.2， 1.23e9, 12.3e8， 1.23e-8
</code></pre><h3 id="字符串（！此处划重点！）"><a href="#字符串（！此处划重点！）" class="headerlink" title="字符串（！此处划重点！）"></a>字符串（！此处划重点！）</h3><p>   字符串类型是<code>str</code>。<br>   由于Python的字符串类型是<code>str</code>，在内存中以<code>Unicode</code>表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把<code>str</code>变为以字节为单位的<code>bytes</code>。<br>   Python对<code>bytes</code>类型的数据用带<code>b</code>前缀的单引号或双引号表示。<br>   使用 <code>&#39; &#39;</code> 或者 <code>&quot; &quot;</code> 表示的任意字符。其中包括 “‘”的用法</p>
<pre><code>&quot;I&apos;m OK&quot;
</code></pre><p>   既有<code>&#39;</code>又有<code>&quot;</code>的表示方法 I’m “OK”的用法：</p>
<pre><code>&apos;I \&apos;m \&quot;OK\&quot;&apos;
</code></pre><p>   即：需要显示的特殊字符或者需要转义的字符用 <code>\</code> 表示。<br>   如果不需要转义当前字符，则可以使用 <code>r&#39;&#39;</code> 表示 <code>&#39;&#39;</code>内部不需要转义的字符，例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">r'"I\'m \"OK\""'</span>)</div></pre></td></tr></table></figure>
<p>   结果为：</p>
<pre><code>&quot;I\&apos;m \&quot;OK\&quot;&quot;
</code></pre><p>   在<code>&#39;&#39;&#39; &#39;&#39;&#39;</code> 内可以不使用<code>\n</code>换行符而直接表示多行内容</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'''line1</span></div><div class="line"><span class="string">line2</span></div><div class="line"><span class="string">line3'''</span>)</div></pre></td></tr></table></figure>
<p>   结果为：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">line1</div><div class="line">line2</div><div class="line">line3</div></pre></td></tr></table></figure>
<h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p>   注意<code>True</code>和<code>False</code>的大小写，而且布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算<br>   测试代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">print(<span class="number">3</span> &gt; <span class="number">2</span>)  <span class="comment">#True</span></div><div class="line">print(<span class="number">3</span> &lt; <span class="number">2</span>)  <span class="comment">#False</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="number">3</span> &gt; <span class="number">2</span> <span class="keyword">and</span> <span class="number">4</span> &lt; <span class="number">5</span>:</div><div class="line">    print(<span class="string">"3 &gt; 2"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">"3 &lt; 2"</span>)  <span class="comment">#3 &gt; 2</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="number">3</span> &gt; <span class="number">2</span> <span class="keyword">or</span> <span class="number">4</span> &gt; <span class="number">5</span>:</div><div class="line">    print(<span class="string">"3 &gt; 2"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">"3 &lt; 2"</span>)  <span class="comment">#3 &gt; 2</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="number">4</span> &lt; <span class="number">5</span>:</div><div class="line">    print(<span class="string">"3 &gt; 2"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print((<span class="keyword">not</span> <span class="number">4</span> &lt; <span class="number">5</span>))  <span class="comment">#False</span></div><div class="line">    print(<span class="string">"3 &lt; 2"</span>)  <span class="comment">#3 &lt; 2</span></div></pre></td></tr></table></figure>
<h3 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h3><p>   空值是用<code>None</code>表示的（注意大小写），但是<code>None</code>不能理解为<code>0</code>。</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>   <code>Python</code>与其他不同的是它的变量的<code>类型</code>是通过被赋予的<code>值得类型</code>决定的，即：</p>
<pre><code>后者决定前者的类型。
</code></pre><p>   <code>Python</code>的变量只是一个名字而已，数值内容及其类型才是重点，决定了变量名的实际意义。<br>   <code>变量本身类型不固定</code>的语言称之为<code>动态语言</code>，与之对应的是静态语言。<br>   静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错,例如Java是静态语言.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">123</span></div><div class="line">print(a)    <span class="comment">#123</span></div><div class="line">a = <span class="string">"a是个变量名"</span></div><div class="line">print(a)    <span class="comment">#a是个变量名</span></div><div class="line">a = <span class="keyword">True</span></div><div class="line">print(a)    <span class="comment">#True</span></div><div class="line">b = a</div><div class="line">print(b)    <span class="comment">#True</span></div></pre></td></tr></table></figure>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>   在Python中，通常用全部大写的变量名表示常量，全部大写的变量名表示常量只是一个习惯上的用法。</p>
<h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><p>   格式化输出字符串 – 同<code>C</code>语言，格式化与实际数据之间通过%连接</p>
<p>   使用%，%运算符就是用来格式化字符串的，其中</p>
<blockquote>
<p>%s 表示替换字符串，<br>%d 表示替换整数，<br>%f 表示替换浮点型<br>%x 表示16进制</p>
</blockquote>
<ul>
<li>代码示例</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">name = input(<span class="string">'请输入你的名字：'</span>)        <span class="comment">#请输入你的名字：yannis</span></div><div class="line">print(<span class="string">'Hello, %s ,你好啊~'</span> % name)     <span class="comment">#Hello, yannis ,你好啊~</span></div><div class="line">age = input(<span class="string">"请输入你的年龄： "</span>)</div><div class="line">print(<span class="string">"你的年龄为 %d，确认：%d"</span> % (<span class="number">12</span>,<span class="number">12</span>))       <span class="comment">#你的年龄为 12，确认：12</span></div><div class="line"></div><div class="line"><span class="comment">#在不确定使用何种类型的数据时，用%s即可</span></div><div class="line">print(<span class="string">'age is : %s; Gener: %s'</span> % (<span class="number">32</span>,<span class="keyword">False</span>))    <span class="comment">#age is : 32; Gener: False</span></div><div class="line"></div><div class="line"><span class="comment">#字符串里面的%是一个普通字符时,需要转义，用%%来表示一个%</span></div><div class="line">print(<span class="string">'增长率为：%d%%'</span> % <span class="number">7</span>)      <span class="comment">#增长率为：7%</span></div></pre></td></tr></table></figure>
<ul>
<li>一个计算成绩比率的小代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">grade1 = input(<span class="string">"请输入去年的成绩："</span>)</div><div class="line">grade2 = input(<span class="string">"请输入今年的成绩："</span></div><div class="line"></div><div class="line"><span class="comment">#此处将str类型的grade1转换为int的10进制类型，参数：grade1表示待转换的数据，参数：10，表示进制</span></div><div class="line">num = int(grade1,<span class="number">10</span>) - int(grade2,<span class="number">10</span>)</div><div class="line"></div><div class="line"><span class="comment">#此处将int类型的num转换为str类型</span></div><div class="line">print(<span class="string">'num is : '</span> + str(num))</div><div class="line">print(<span class="string">'abs is : %d'</span> % abs(num))</div><div class="line"></div><div class="line"><span class="comment">#将结果转换为float类型</span></div><div class="line">mPercent = float(((abs(num))/int(grade1,<span class="number">10</span>))*<span class="number">100</span>)</div><div class="line">print(<span class="string">'mPercent is : '</span> + str(mPercent))</div><div class="line"></div><div class="line"><span class="comment">#格式化输出结果</span></div><div class="line">print(<span class="string">'成绩变化率为：%.2f%%'</span> % mPercent)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux/Unix系统文件结构]]></title>
      <url>/Linux:Unix%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<p>总结</p>
<a id="more"></a>
<p>[TOC]</p>
<h2 id="bin"><a href="#bin" class="headerlink" title="/bin"></a>/bin</h2><pre><code>系统有很多放置执行档的目录，但/bin比较特殊。
因为/bin放置的是在单人维护模式下还能够被操作的指令。
在/bin底下的指令可以被root与一般帐号所使用，主要有：cat,chmod(修改权限), chown, date, mv, mkdir, cp, bash等等常用的指令。
</code></pre><h2 id="boot"><a href="#boot" class="headerlink" title="/boot"></a>/boot</h2><pre><code>主要放置开机会使用到的档案，包括Linux核心档案以及开机选单与开机所需设定档等等。
Linux kernel常用的档名为：vmlinuz ，如果使用的是grub这个开机管理程式，则还会存在/boot/grub/这个目录。
</code></pre><h2 id="dev"><a href="#dev" class="headerlink" title="/dev"></a>/dev</h2><pre><code>在Linux系统上，任何装置与周边设备都是以档案的型态存在于这个目录当中。 只要通过存取这个目录下的某个档案，就等于存取某个装置。比要重要的档案有/dev/null, /dev/zero, /dev/tty , /dev/lp*, / dev/hd*, /dev/sd*等等
</code></pre><h2 id="etc"><a href="#etc" class="headerlink" title="/etc"></a>/etc</h2><pre><code>系统主要的设定档几乎都放置在这个目录内，例如人员的帐号密码档、各种服务的启始档等等。 一般来说，这个目录下的各档案属性是可以让一般使用者查阅的，但是只有root有权力修改。 FHS建议不要放置可执行档(binary)在这个目录中。 比较重要的档案有：/etc/inittab, /etc/init.d/, /etc/modprobe.conf, /etc/X11/, /etc/fstab, /etc/sysconfig/等等。 另外，其下重要的目录有：/etc/init.d/ ：所有服务的预设启动script都是放在这里的，例如要启动或者关闭iptables的话： /etc/init.d/iptables start、/etc/init.d/ iptables stop
</code></pre><h3 id="etc-xinetd-d-："><a href="#etc-xinetd-d-：" class="headerlink" title="/etc/xinetd.d/ ："></a>/etc/xinetd.d/ ：</h3><pre><code>这就是所谓的super daemon管理的各项服务的设定档目录。
</code></pre><h2 id="etc-X11-："><a href="#etc-X11-：" class="headerlink" title="/etc/X11/ ："></a>/etc/X11/ ：</h2><pre><code>与XWindow有关的各种设定档都在这里，尤其是xorg.conf或XF86Config这两个X Server的设定档。
</code></pre><h2 id="home"><a href="#home" class="headerlink" title="/home"></a>/home</h2><pre><code>这是系统预设的使用者家目录(home directory)。
在你新增一个一般使用者帐号时，预设的使用者家目录都会规范到这里来。比较重要的是，家目录有两种代号：
    ~ ：代表当前使用者的家目录，而
    ~guest：则代表用户名为guest的家目录。
</code></pre><h2 id="lib"><a href="#lib" class="headerlink" title="/lib"></a>/lib</h2><pre><code>系统的函式库非常的多，而/lib放置的则是在开机时会用到的函式库，以及在/bin或/sbin底下的指令会呼叫的函式库而已 。 什么是函式库呢？妳可以将他想成是外挂，某些指令必须要有这些外挂才能够顺利完成程式的执行之意。 尤其重要的是/lib/modules/这个目录，因为该目录会放置核心相关的模组(驱动程式)。
</code></pre><h2 id="media"><a href="#media" class="headerlink" title="/media"></a>/media</h2><pre><code>media是媒体的英文，顾名思义，这个/media底下放置的就是可移除的装置。 包括软碟、光碟、DVD等等装置都暂时挂载于此。 常见的档名有：/media/floppy, /media/cdrom等等。
</code></pre><h2 id="mnt"><a href="#mnt" class="headerlink" title="/mnt"></a>/mnt</h2><pre><code>如果妳想要暂时挂载某些额外的装置，一般建议妳可以放置到这个目录中。在古早时候，这个目录的用途与/media相同啦。 只是有了/media之后，这个目录就用来暂时挂载用了。
</code></pre><h2 id="opt"><a href="#opt" class="headerlink" title="/opt"></a>/opt</h2><pre><code>这个是给第三方协力软体放置的目录 。 什么是第三方协力软体啊？举例来说，KDE这个桌面管理系统是一个独立的计画，不过他可以安装到Linux系统中，因此KDE的软体就建议放置到此目录下了。 另外，如果妳想要自行安装额外的软体(非原本的distribution提供的)，那么也能够将你的软体安装到这里来。 不过，以前的Linux系统中，我们还是习惯放置在/usr/local目录下。
</code></pre><h2 id="root"><a href="#root" class="headerlink" title="/root"></a>/root</h2><pre><code>系统管理员(root)的家目录。 之所以放在这里，是因为如果进入单人维护模式而仅挂载根目录时，该目录就能够拥有root的家目录，所以我们会希望root的家目录与根目录放置在同一个分区中。
</code></pre><h2 id="sbin"><a href="#sbin" class="headerlink" title="/sbin"></a>/sbin</h2><pre><code>Linux有非常多指令是用来设定系统环境的，这些指令只有root才能够利用来设定系统，其他使用者最多只能用来查询而已。放在/sbin底下的为开机过程中所需要的，里面包括了开机、修复、还原系统所需要的指令。至于某些伺服器软体程式，一般则放置到/usr/sbin/当中。至于本机自行安装的软体所产生的系统执行档(system binary)，则放置到/usr/local/sbin/当中了。常见的指令包括：fdisk, fsck, ifconfig, init, mkfs等等。
</code></pre><h2 id="srv"><a href="#srv" class="headerlink" title="/srv"></a>/srv</h2><pre><code>srv可以视为service的缩写，是一些网路服务启动之后，这些服务所需要取用的资料目录。 常见的服务例如WWW, FTP等等。 举例来说，WWW伺服器需要的网页资料就可以放置在/srv/www/里面。呵呵，看来平时我们编写的代码应该放到这里了。
</code></pre><h2 id="tmp"><a href="#tmp" class="headerlink" title="/tmp"></a>/tmp</h2><pre><code>这是让一般使用者或者是正在执行的程序暂时放置档案的地方。这个目录是任何人都能够存取的，所以你需要定期的清理一下。当然，重要资料不可放置在此目录啊。 因为FHS甚至建议在开机时，应该要将/tmp下的资料都删除。
</code></pre><p>事实上FHS针对根目录所定义的标准就仅限于上表，不过仍旧有些目录也需要我们了解一下，具体如下：</p>
<h2 id="lost-found"><a href="#lost-found" class="headerlink" title="/lost+found"></a>/lost+found</h2><pre><code>这个目录是使用标准的ext2/ext3档案系统格式才会产生的一个目录，目的在于当档案系统发生错误时，将一些遗失的片段放置到这个目录下。 这个目录通常会在分割槽的最顶层存在，例如你加装一个硬盘于/disk中，那在这个系统下就会自动产生一个这样的目录/disk/lost+found
</code></pre><h2 id="proc"><a href="#proc" class="headerlink" title="/proc"></a>/proc</h2><pre><code>这个目录本身是一个虚拟文件系统(virtual filesystem)喔。 他放置的资料都是在内存当中，例如系统核心、行程资讯(process)（是进程吗?）、周边装置的状态及网络状态等等。因为这个目录下的资料都是在记忆体（内存）当中，所以本身不占任何硬盘空间。比较重要的档案（目录）例如： /proc/cpuinfo, /proc/dma, /proc/interrupts, /proc/ioports, /proc/net/*等等。呵呵，是虚拟内存吗[guest]？
</code></pre><h2 id="sys"><a href="#sys" class="headerlink" title="/sys"></a>/sys</h2><pre><code>这个目录其实跟/proc非常类似，也是一个虚拟的档案系统，主要也是记录与核心相关的资讯。 包括目前已载入的核心模组与核心侦测到的硬体装置资讯等等。 这个目录同样不占硬盘容量。
</code></pre><h2 id="根目录下与开机过程有关的目录"><a href="#根目录下与开机过程有关的目录" class="headerlink" title="根目录下与开机过程有关的目录"></a>根目录下与开机过程有关的目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">除了这些目录的内容之外，另外要注意的是，因为根目录与开机有关，开机过程中仅有根目录会被挂载， 其他分区则是在开机完成之后才会持续的进行挂载的行为。就是因为如此，因此根目录下与开机过程有关的目录， 就不能够与根目录放到不同的分区去。那哪些目录不可与根目录分开呢？有底下这些：</div><div class="line">    /etc：配置文件</div><div class="line">    /bin：重要执行档</div><div class="line">    /dev：所需要的装置文件</div><div class="line">    /lib：执行档所需的函式库与核心所需的模块</div><div class="line">    /sbin：重要的系统执行文件</div><div class="line">这五个目录千万不可与根目录分开在不同的分区。请背下来啊。</div></pre></td></tr></table></figure>
<hr>
<h1 id="usr-的意义与内容："><a href="#usr-的意义与内容：" class="headerlink" title="/usr 的意义与内容："></a>/usr 的意义与内容：</h1><p>依据FHS的基本定义，/usr里面放置的数据属于可分享的与不可变动的(shareable, static)， 如果你知道如何透过网络进行分区的挂载(例如在服务器篇会谈到的NFS服务器)，那么/usr确实可以分享给局域网络内的其他主机来使用喔。</p>
<p>/usr不是<code>user</code>的缩写，其实usr是<code>Unix Software Resource</code>的缩写， 也就是Unix操作系统软件资源所放置的目录，而不是用户的数据啦。这点要注意。 FHS建议所有软件开发者，应该将他们的数据合理的分别放置到这个目录下的次目录，而不要自行建立该软件自己独立的目录。<br>因为是所有系统默认的软件(distribution发布者提供的软件)都会放置到/usr底下，因此这个目录有点类似Windows 系统的C:\Windows\ + C:\Program files\这两个目录的综合体，系统刚安装完毕时，这个目录会占用最多的硬盘容量。 一般来说，/usr的次目录建议有底下这些：</p>
<h2 id="usr-X11R6"><a href="#usr-X11R6" class="headerlink" title="/usr/X11R6/"></a>/usr/X11R6/</h2><p>为X Window System重要数据所放置的目录，之所以取名为X11R6是因为最后的X版本为第11版，且该版的第6次释出之意。<br>/usr/bin/<br>绝大部分的用户可使用指令都放在这里。请注意到他与/bin的不同之处。(是否与开机过程有关)</p>
<h2 id="usr-include"><a href="#usr-include" class="headerlink" title="/usr/include/"></a>/usr/include/</h2><p>c/c++等程序语言的档头(header)与包含档(include)放置处，当我们以tarball方式 (*.tar.gz 的方式安装软件)安装某些数据时，会使用到里头的许多包含档。</p>
<h2 id="usr-lib"><a href="#usr-lib" class="headerlink" title="/usr/lib/"></a>/usr/lib/</h2><p>包含各应用软件的函式库、目标文件(object file)，以及不被一般使用者惯用的执行档或脚本(script)。 某些软件会提供一些特殊的指令来进行服务器的设定，这些指令也不会经常被系统管理员操作， 那就会被摆放到这个目录下啦。要注意的是，如果你使用的是X86_64的Linux系统， 那可能会有/usr/lib64/目录产生</p>
<h2 id="usr-local"><a href="#usr-local" class="headerlink" title="/usr/local/"></a>/usr/local/</h2><p>统管理员在本机自行安装自己下载的软件(非distribution默认提供者)，建议安装到此目录， 这样会比较便于管理。举例来说，你的distribution提供的软件较旧，你想安装较新的软件但又不想移除旧版， 此时你可以将新版软件安装于/usr/local/目录下，可与原先的旧版软件有分别啦。 你可以自行到/usr/local去看看，该目录下也是具有bin, etc, include, lib…的次目录</p>
<h2 id="usr-sbin"><a href="#usr-sbin" class="headerlink" title="/usr/sbin/"></a>/usr/sbin/</h2><p>非系统正常运作所需要的系统指令。最常见的就是某些网络服务器软件的服务指令(daemon)</p>
<h2 id="usr-share"><a href="#usr-share" class="headerlink" title="/usr/share/"></a>/usr/share/</h2><p>放置共享文件的地方，在这个目录下放置的数据几乎是不分硬件架构均可读取的数据， 因为几乎都是文本文件嘛。在此目录下常见的还有这些次目录：/usr/share/man：联机帮助文件</p>
<pre><code>/usr/share/doc：软件杂项的文件说明
/usr/share/zoneinfo：与时区有关的时区文件
/usr/src/
</code></pre><p>一般原始码建议放置到这里，src有source的意思。至于核心原始码则建议放置到/usr/src/linux/目录下。</p>
<hr>
<h1 id="var-的意义与内容："><a href="#var-的意义与内容：" class="headerlink" title="/var 的意义与内容："></a>/var 的意义与内容：</h1><p>如果/usr是安装时会占用较大硬盘容量的目录，那么/var就是在系统运作后才会渐渐占用硬盘容量的目录。 因为/var目录主要针对常态性变动的文件，包括缓存(cache)、登录档(log file)以及某些软件运作所产生的文件， 包括程序文件(lock file, run file)，或者例如MySQL数据库的文件等等。</p>
<h2 id="var-cache"><a href="#var-cache" class="headerlink" title="/var/cache/"></a>/var/cache/</h2><p>应用程序本身运作过程中会产生的一些暂存档</p>
<h2 id="var-lib"><a href="#var-lib" class="headerlink" title="/var/lib/"></a>/var/lib/</h2><p>程序本身执行的过程中，需要使用到的数据文件放置的目录。在此目录下各自的软件应该要有各自的目录。 举例来说，MySQL的数据库放置到/var/lib/mysql/而rpm的数据库则放到/var/lib/rpm去</p>
<h2 id="var-lock"><a href="#var-lock" class="headerlink" title="/var/lock/"></a>/var/lock/</h2><p>某些装置或者是文件资源一次只能被一个应用程序所使用，如果同时有两个程序使用该装置时， 就可能产生一些错误的状况，因此就得要将该装置上锁(lock)，以确保该装置只会给单一软件所使用。 举例来说，刻录机正在刻录一块光盘，你想一下，会不会有两个人同时在使用一个刻录机烧片？ 如果两个人同时刻录，那片子写入的是谁的数据？所以当第一个人在刻录时该刻录机就会被上锁， 第二个人就得要该装置被解除锁定(就是前一个人用完了)才能够继续使用</p>
<h2 id="var-log"><a href="#var-log" class="headerlink" title="/var/log/"></a>/var/log/</h2><p>非常重要。这是登录文件放置的目录。里面比较重要的文件如/var/log/messages, /var/log/wtmp(记录登入者的信息)等。</p>
<h2 id="var-mail"><a href="#var-mail" class="headerlink" title="/var/mail/"></a>/var/mail/</h2><p>放置个人电子邮件信箱的目录，不过这个目录也被放置到/var/spool/mail/目录中，通常这两个目录是互为链接文件。</p>
<h2 id="var-run"><a href="#var-run" class="headerlink" title="/var/run/"></a>/var/run/</h2><p>某些程序或者是服务启动后，会将他们的PID放置在这个目录下</p>
<h2 id="var-spool"><a href="#var-spool" class="headerlink" title="/var/spool/"></a>/var/spool/</h2><p>这个目录通常放置一些队列数据，所谓的“队列”就是排队等待其他程序使用的数据。 这些数据被使用后通常都会被删除。举例来说，系统收到新信会放置到/var/spool/mail/中， 但使用者收下该信件后该封信原则上就会被删除。信件如果暂时寄不出去会被放到/var/spool/mqueue/中， 等到被送出后就被删除。如果是工作排程数据(crontab)，就会被放置到/var/spool/cron/目录中。<br>由于FHS仅是定义出最上层(/)及次层(/usr, /var)的目录内容应该要放置的文件或目录数据， 因此，在其他次目录层级内，就可以随开发者自行来配置了。<br>四. 目录树(directory tree) :<br>在Linux底下，所有的文件与目录都是由根目录开始的。那是所有目录与文件的源头, 然后再一个一个的分支下来，因此，我们也称这种目录配置方式为：目录树(directory tree), 这个目录树的主要特性有：<br>目录树的启始点为根目录 (/, root)；<br>每一个目录不止能使用本地端的 partition 的文件系统，也可以使用网络上的 filesystem 。举例来说， 可以利用 Network File System (NFS) 服务器挂载某特定目录等。<br>每一个文件在此目录树中的文件名(包含完整路径)都是独一无二的。</p>
]]></content>
      
        <categories>
            
            <category> 系统 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 命令 </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自定义View-1 三剑客：Canvas + Paint + Path 初步概览]]></title>
      <url>/%E8%87%AA%E5%AE%9A%E4%B9%89View-1%20%E4%B8%89%E5%89%91%E5%AE%A2%EF%BC%9ACanvas%20+%20Paint%20+%20Path%20%E5%88%9D%E6%AD%A5%E6%A6%82%E8%A7%88/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考：<a href="http://www.jianshu.com/p/d2c7a837265e" target="_blank" rel="external">http://www.jianshu.com/p/d2c7a837265e</a><br>关于Paint资料非常丰富：<a href="http://www.jianshu.com/p/420da0f6e279" target="_blank" rel="external">http://www.jianshu.com/p/420da0f6e279</a><br>非常系统的知识：<a href="http://hencoder.com/ui-1-1/" target="_blank" rel="external">http://hencoder.com/ui-1-1/</a></p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　　自己一直在学习许多技术大牛的技术博客，看他们是如何学习Android源码，看他们是如何分析当下流行、火热的技术以及框架的使用，可以说是他们的无私奉献、共享精神一直在支持着像我这样渴望学到更多，渴望技术升级的初学者。正所谓“穷则独善其身，达则兼济天下”。一直想着，如果自己有一天能够达到让自己满意的高度，也会将这样的方式继续传递，技术因为通过共享、传递才能得以实现其对社会的价值。</p>
<p>　　之前自己也学习过<code>自定义View</code>，也写过示例，在项目中也应用过，可都是写较为简单的。而自己写的<code>随手笔记</code>因为条理性、技术点太低（所以不敢称为<code>技术博客</code>），总是使自己不满意，也没有很好的传承下来。<br>最近换了工作而且手头也比较闲，也是一个新的开始。所以秉着<code>好记性不如烂笔头</code>、<code>博客记录成长</code>的信条，将自己的所学、所悟记录下来。</p>
<h1 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h1><h2 id="自定义View的3个关键点"><a href="#自定义View的3个关键点" class="headerlink" title="自定义View的3个关键点"></a>自定义View的3个关键点</h2><p>　　布局<br>　　绘制<br>　　触摸反馈</p>
<h1 id="Android坐标系"><a href="#Android坐标系" class="headerlink" title="Android坐标系"></a>Android坐标系</h1><p>图片来自网络，忘记出处，如有侵权请联系我。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%9D%90%E6%A0%87%E7%B3%BB1%E5%BC%A0%E5%9B%BE%E5%85%A8%E8%A7%A3.png" alt=""></p>
<p><strong>4个级别</strong></p>
<ol>
<li>Canvas</li>
</ol>
<ul>
<li>Canvas.drawXXX()是自定义绘制的基本操作。可以绘制几何图形、文字、图片，在+Paint的常用方法。</li>
<li>裁剪范围（很酷的效果）</li>
<li>几何变换（很酷的效果）</li>
</ul>
<ol>
<li>Paint ：Paint的使用</li>
<li>Path ：轮廓,路径</li>
</ol>
<h1 id="Canvas的使用"><a href="#Canvas的使用" class="headerlink" title="Canvas的使用"></a>Canvas的使用</h1><p>　　Canvas是“画布”的意思，拥有“绘制”的功能。</p>
<h2 id="1-Canvas的使用需要4个基本元素："><a href="#1-Canvas的使用需要4个基本元素：" class="headerlink" title="1. Canvas的使用需要4个基本元素："></a>1. Canvas的使用需要4个基本元素：</h2><ol>
<li>一个Bitmap用于保存像素</li>
<li>一个Canvas来承载绘图调用（写入到位图）</li>
<li>一个绘图的基本元素（例如Rect，Path，文本，位图）</li>
<li>一支Paint（描述颜色和样式）</li>
</ol>
<h2 id="2-Canvas有两个构造方法："><a href="#2-Canvas有两个构造方法：" class="headerlink" title="2. Canvas有两个构造方法："></a>2. Canvas有两个构造方法：</h2><ol>
<li>Canvas()：创建一个空的Canvas对象</li>
<li>Canvas(Bitmap bitmap)：用指定的位图构造一个Canvas对象</li>
</ol>
<h2 id="3-常用绘制方法："><a href="#3-常用绘制方法：" class="headerlink" title="3. 常用绘制方法："></a>3. 常用绘制方法：</h2><ul>
<li>translate()：画布移动</li>
<li>drawARGB()：用指定ARGB颜色填充画布上面的位图</li>
<li>drawRGB()：用指定RGB颜色填充画布上面的位图</li>
<li>drawColor()：用指定颜色填充画布上面的位图</li>
<li>drawArc()：画圆弧</li>
</ul>
<p>startAngle：表示开始的角度<br>sweepAngle：表示角度范围<br>useCenter：表示是否连接到圆心，如果不连接到圆心，就是弧形，如果连接到圆心，就是扇形。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-09%2013.52.43.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">RectF rectF = new RectF(DensityUtil.dip2px(context, 100), DensityUtil.dip2px(context, 100),</div><div class="line">                DensityUtil.dip2px(context, 220), DensityUtil.dip2px(context, 180));</div><div class="line"></div><div class="line">paint.setStyle(Paint.Style.STROKE);</div><div class="line">canvas.drawArc(rectF, 0, 80, false, paint);</div><div class="line">paint.setStyle(Paint.Style.STROKE);</div><div class="line">canvas.drawArc(rectF, -10, -80, true, paint);</div><div class="line">paint.setStyle(Paint.Style.FILL);</div><div class="line">canvas.drawArc(rectF, -100, -80, true, paint);</div><div class="line">paint.setStyle(Paint.Style.FILL);</div><div class="line">canvas.drawArc(rectF, -190, -80,false,paint);</div></pre></td></tr></table></figure>
<ul>
<li>drawBitmap()：画位图</li>
<li>drawPicture()</li>
<li>drawCircle() ：画圆</li>
<li>drawLine()：画直线</li>
<li>drawLines()：折线</li>
<li>drawOval()：画椭圆</li>
<li>drawRect()：画矩形</li>
<li>drawRoundRect()：画圆角矩形</li>
<li>drawPoint()：画点</li>
<li>drawPoints()：画一组点<br>pts : 这个数组是点的坐标，每两个成一对<br>offset : 表示跳过数组的前几个数再开始记坐标<br>count : 表示一共要绘制几个点</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-09%2014.41.23.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//圆点和方点的切换使用 paint.setStrokeCap(cap)：`ROUND` 是圆点，`BUTT` 或 `SQUARE` 是方点</span></div><div class="line"><span class="keyword">this</span>.paint.setStrokeCap(Paint.Cap.ROUND);</div><div class="line"><span class="keyword">this</span>.paint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line"><span class="keyword">this</span>.paint.setStyle(Paint.Style.FILL);</div><div class="line"><span class="keyword">this</span>.paint.setStrokeWidth(<span class="number">50</span>);</div><div class="line"></div><div class="line"><span class="keyword">this</span>.paint.setStrokeCap(Paint.Cap.ROUND);</div><div class="line">canvas.drawPoint(canvas.getWidth() / <span class="number">2</span> - <span class="number">200</span>, canvas.getHeight() / <span class="number">2</span>, paint);</div><div class="line"></div><div class="line">paint.setStrokeCap(Paint.Cap.SQUARE);</div><div class="line">canvas.drawPoint(canvas.getWidth() / <span class="number">2</span> + <span class="number">200</span>, canvas.getHeight() / <span class="number">2</span>, paint);</div><div class="line"></div><div class="line">paint.setStrokeCap(Paint.Cap.ROUND);</div><div class="line"><span class="keyword">this</span>.paint.setStrokeWidth(<span class="number">10</span>);</div><div class="line"><span class="keyword">float</span>[] points = &#123;<span class="number">20</span>,<span class="number">20</span>, <span class="number">50</span>,<span class="number">50</span>, <span class="number">80</span>,<span class="number">80</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">130</span>,<span class="number">130</span>,<span class="number">170</span>,<span class="number">170</span>,<span class="number">210</span>,<span class="number">210</span>,<span class="number">240</span>,<span class="number">240</span>,&#125;;</div><div class="line">canvas.translate(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">canvas.drawPoints(points,paint);</div><div class="line"></div><div class="line">canvas.translate(<span class="number">0</span>,<span class="number">300</span>);</div><div class="line">canvas.drawPoints(points,<span class="number">3</span>,<span class="number">10</span>,paint);</div></pre></td></tr></table></figure>
<ul>
<li>drawPath()：画路径<br>组合。这个方法是通过描述路径的方式来绘制图形的，它的 path 参数就是用来描述图形路径的对象</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-09%2015.50.43.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">path.arcTo(canvas.getWidth() / <span class="number">2</span> - <span class="number">200</span>, <span class="number">380</span>, canvas.getWidth() / <span class="number">2</span>, <span class="number">580</span>, <span class="number">135</span>, <span class="number">225</span>, <span class="keyword">false</span>);</div><div class="line">path.arcTo(canvas.getWidth() / <span class="number">2</span>, <span class="number">380</span>, canvas.getWidth() / <span class="number">2</span> + <span class="number">200</span>, <span class="number">580</span>, <span class="number">180</span>, <span class="number">225</span>, <span class="keyword">false</span>);</div><div class="line">path.lineTo(canvas.getWidth() / <span class="number">2</span>, <span class="number">720</span>);</div><div class="line">path.close();</div><div class="line">canvas.drawPath(path, paint);</div></pre></td></tr></table></figure>
<p>角度和划过度数</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-09%2015.49.16.png" alt=""></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-09%2016.02.46.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">RectF rectF1 = <span class="keyword">new</span> RectF(<span class="number">200</span>,<span class="number">100</span>,<span class="number">300</span>,<span class="number">200</span>);</div><div class="line">paint.setStyle(Paint.Style.STROKE);</div><div class="line">canvas.drawArc(rectF1, <span class="number">135</span>, <span class="number">225</span>, <span class="keyword">true</span>, paint);</div><div class="line">paint.setStyle(Paint.Style.STROKE);</div><div class="line"></div><div class="line">canvas.translate(<span class="number">100</span>,<span class="number">0</span>);</div><div class="line">canvas.drawArc(rectF1, <span class="number">180</span>, <span class="number">225</span>, <span class="keyword">true</span>, paint);</div></pre></td></tr></table></figure>
<ul>
<li>drawText()：画文本</li>
<li>drawTextOnPath()：根据路径画文本</li>
<li>drawPosText()：指定单个文字位置</li>
<li>arcTo(): 将指定的弧添加到路径作为新的轮廓。</li>
</ul>
<hr>
<h1 id="Paint的使用"><a href="#Paint的使用" class="headerlink" title="Paint的使用"></a>Paint的使用</h1><p>画笔</p>
<h2 id="1-Paint有3个构造方法："><a href="#1-Paint有3个构造方法：" class="headerlink" title="1. Paint有3个构造方法："></a>1. Paint有3个构造方法：</h2><p>1.Paint():用默认设置创建一个Paint对象<br>2.Paint(int flags):用特殊标记创建一个Paint对象<br>3.Paint(Paint paint):用指定Paint对象的参数初始化一个新的Paint对象</p>
<p>##2. 常用方法</p>
<ul>
<li>reset() ：清空path的所有数据，但是不会清空FillType</li>
<li>rewind() ：清除FillType及数据等，但会保留数据结构。这样可以快速重用，提高一定的性能</li>
<li><strong><em>setARGB(int a, int r, int g, int b)</em></strong> : 画笔颜色</li>
<li><strong><em>setColor(int color)</em></strong> : 画笔颜色</li>
<li><strong><em>setAntiAlias(boolean aa)</em></strong>： 是否抗锯齿</li>
<li>setAlpha(int a) ：设置画笔透明度</li>
<li><strong><em>setStrokeWidth(float width)</em></strong> ：画笔的粗细(线条的宽度)</li>
<li><strong><em>setXfermode(Xfermode xfermode)</em></strong> ：设置图像重叠时的处理方式 - 16种</li>
<li>setFillType()：2个图形重合的模式.类似前面讲解的xfermode,只有4个值：WINDING//默认值，取两个图形相交；EVEN_ODD//取不相交的部分；INVERSE_WINDING//反转相交；INVERSE_EVEN_ODD//反转不相交部分
　</li>
<li><p><strong><em>setShader(Shader shader)</em></strong> ：设置着色器</p>
</li>
<li><p>setPathEffect(PathEffect effect) ：设置或者清除路径效果 - 6种</p>
</li>
<li><strong><em>setShader(Shader shader)</em></strong> ：设置图像效果，可以绘制出各种渐变效果</li>
<li>setShadowLayer(float radius ,float dx,float dy,int color)：在图形下面设置阴影层，产生阴影效果，radius为阴影的角度，dx和dy为阴影在x轴和y轴上的距离，color为阴影的颜色
　　</li>
<li>setStrokeCap(Paint.Cap cap)：设置线冒样式(线头的装饰画法)，取值有: Cap.ROUND(圆形线冒)、Cap.SQUARE(方形线冒)、Paint.Cap.BUTT(无线冒)
　　</li>
<li>setStrokeJoin(Paint.Join join)：设置线段连接处样式(折线的拐角装饰画法)，取值有：Join.MITER（结合处为锐角）、Join.Round(结合处为圆弧)、Join.BEVEL(结合处为直线) 
　　</li>
<li><strong><em>setStyle(Paint.Style style)</em></strong></li>
</ul>
<p>　　设置画笔样式”，画笔样式有三种:<br>　　　　(1)Paint.Style.FILL：默认值，用这种风格绘制的几何图与文本将被填充，它画出来的是实心图<br>　　　　(2)Paint.Style.STROKE：用这种风格绘制的几何图与文本将被画出外边框，它画出来的是空心图　　<br>　　　　(3)Paint.Style.FILL_AND_STROKE：用这种风格绘制的几何图与文本将被填充并被画出外边框</p>
<h2 id="3-设置“文字-字体“外观"><a href="#3-设置“文字-字体“外观" class="headerlink" title="3.设置“文字/字体“外观"></a>3.设置“文字/字体“外观</h2><ul>
<li><strong><em>setTextSize(float textSize)</em></strong> ：设置文字大小”</li>
<li>setFakeBoldText(boolean fakeBoldText)：设置是否为粗体文字</li>
<li>setStrikeThruText(boolean strikeThruText) ：设置带有删除线效果</li>
<li>setUnderlineText(boolean underlineText) ：设置下划线</li>
<li><strong><em>setTextAlign(Paint.Align align)</em></strong> ：设置开始绘图点位置,文本对齐方式</li>
<li><strong><em>setTextScaleX(float scaleX)</em></strong> ：水平拉伸设置</li>
<li>setTextSkewX(float skewX) ：设置字体水平倾斜度，普通斜体字是-0.25，可见往右斜</li>
<li><strong><em>setTypeface()</em></strong> ：置字体样式:Typeface.NORMAL - 正常体;Typeface.BOLD - 粗体;Typeface.ITALIC - 斜体;Typeface.BOLD_ITALIC - 粗斜体</li>
</ul>
<h2 id="4-字体样式-Typeface"><a href="#4-字体样式-Typeface" class="headerlink" title="4.字体样式(Typeface)"></a>4.字体样式(Typeface)</h2><ul>
<li>create(String familyName, int style) ：直接通过指定字体名来加载系统中自带的文字样式</li>
<li>create(Typeface family, int style) ：通过其它Typeface变量来构建文字样式</li>
<li>createFromAsset(AssetManager mgr, String path) ：通过从Asset中获取外部字体来显示字体样式</li>
<li>createFromFile(String path) ：直接从路径创建</li>
<li>createFromFile(File path) ：从外部路径来创建字体样式</li>
<li>defaultFromStyle(int style) ：创建默认字体<h2 id="5-字体设置"><a href="#5-字体设置" class="headerlink" title="5. 字体设置"></a>5. 字体设置</h2></li>
</ul>
<ol>
<li>在assets目录下新建fonts目录，把ttf字体文件放到这。</li>
<li>程序中调用：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//得到AssetManager</span></div><div class="line">AssetManager mgr=getAssets();</div><div class="line"><span class="comment">//根据路径得到Typeface，注意"ttf文件命名不能使用中文,否则可能无法加载。</span></div><div class="line">Typeface tf=Typeface.createFromAsset(mgr, <span class="string">"fonts/ttf.ttf"</span>);</div><div class="line"><span class="comment">//设置字体样式</span></div><div class="line">tv.setTypeface(tf);</div></pre></td></tr></table></figure>
<h2 id="6-文字所占的区域（范围）的设定"><a href="#6-文字所占的区域（范围）的设定" class="headerlink" title="6.文字所占的区域（范围）的设定"></a>6.文字所占的区域（范围）的设定</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 注意:在使用FontMetrics时必须为同一个Paint对象,否则,无法获取文字正确的位置关系</span></div><div class="line"><span class="comment"> */</span></div><div class="line">Paint paint12 = <span class="keyword">new</span> Paint();</div><div class="line">paint12.setAntiAlias(<span class="keyword">true</span>);</div><div class="line">paint12.setStrokeWidth(<span class="number">1</span>);</div><div class="line">paint12.setStyle(Paint.Style.STROKE);</div><div class="line">paint12.setColor(Color.BLACK);</div><div class="line">paint12.setTextSize(<span class="number">100</span>);</div><div class="line">Paint.FontMetrics fontMetrics = paint12.getFontMetrics();</div><div class="line"><span class="comment">//可绘制的最高高度所在线</span></div><div class="line"><span class="keyword">float</span> top;</div><div class="line"><span class="comment">//可绘制的最低高度所在线</span></div><div class="line"><span class="keyword">float</span> bottom;</div><div class="line"><span class="comment">//系统建议的，绘制单个字符时，字符应当的最高高度所在线</span></div><div class="line"><span class="keyword">float</span> ascent;</div><div class="line"><span class="comment">//系统建议的，绘制单个字符时，字符应当的最低高度所在线</span></div><div class="line"><span class="keyword">float</span> descent;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 建议在文本行之间添加的额外空格。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="comment">//fontMetrics.leading</span></div><div class="line">top = <span class="number">100</span> + fontMetrics.top;</div><div class="line">bottom = <span class="number">100</span> + fontMetrics.bottom;</div><div class="line">ascent = <span class="number">100</span> + fontMetrics.ascent;</div><div class="line">descent = <span class="number">100</span> + fontMetrics.descent;</div><div class="line"><span class="comment">//绘制文字</span></div><div class="line">canvas.drawText(strs,<span class="number">100</span>,<span class="number">100</span>,paint12);</div><div class="line"></div><div class="line"><span class="comment">//------------------------令人惊喜的分割线---------------------</span></div><div class="line"></div><div class="line">canvas.translate(<span class="number">0</span>,<span class="number">200</span>);</div><div class="line">canvas.drawLine(<span class="number">100</span>,<span class="number">100</span>,<span class="number">1080</span>,<span class="number">100</span>,paintStyle(Color.RED,Paint.Style.STROKE));</div><div class="line">canvas.drawLine(<span class="number">100</span>,top,<span class="number">1080</span>,top,paint12);<span class="comment">//可绘制的最高高度所在线</span></div><div class="line">canvas.drawLine(<span class="number">100</span>,bottom,<span class="number">1080</span>,bottom,paint12);<span class="comment">//可绘制的最低高度所在线</span></div><div class="line">canvas.drawLine(<span class="number">100</span>,ascent,<span class="number">1080</span>,ascent,paint12);<span class="comment">//系统建议的，绘制单个字符时，字符应当的最高高度所在线</span></div><div class="line">canvas.drawLine(<span class="number">100</span>,descent,<span class="number">1080</span>,descent,paint12);<span class="comment">//系统建议的，绘制单个字符时，字符应当的最低高度所在线</span></div><div class="line">canvas.drawLine(<span class="number">100</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>,paintStyle(Color.RED,Paint.Style.STROKE));</div><div class="line"></div><div class="line"><span class="keyword">float</span> width = paint12.measureText(strs);<span class="comment">//获取文字所占宽度</span></div><div class="line"><span class="keyword">float</span> height = bottom - top;<span class="comment">//获取文字所占高度</span></div><div class="line">Log.e(TAG, <span class="string">"onDraw width: "</span> + width + <span class="string">", height : "</span> + height);</div><div class="line"></div><div class="line"><span class="comment">//绘制文字所占区域的边框</span></div><div class="line">Path rectPath = <span class="keyword">new</span> Path();</div><div class="line">RectF rectF2 = <span class="keyword">new</span> RectF(<span class="number">100</span>,top,width+<span class="number">100</span>,bottom);</div><div class="line"><span class="comment">//绘制文字</span></div><div class="line">paint12.setColor(Color.GREEN);</div><div class="line">canvas.drawRect(rectF2,paint12);</div></pre></td></tr></table></figure>
<h1 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h1><h2 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1. 常用方法"></a>1. 常用方法</h2><ul>
<li><strong><em>moveTo()</em></strong> ：设定起始点</li>
<li><strong><em>lineTo()</em></strong> ：画条直线(连续使用此方法,将会画出连续的线)</li>
<li><strong><em>close()</em></strong> ：封闭图形</li>
<li>addRect() ：矩形路径（使用此方法时首先绘制一个矩形,后续addXXX()使用类似）</li>
<li>addRoundRect() ：绘制圆角矩形路径</li>
<li>addCircle() ：绘制原型路径</li>
<li>addCircle() ：绘制椭圆路径</li>
<li>addArc() ：绘制一段弧形路径</li>
<li>quadTo() ：绘制”贝塞尔曲线” 有4个方法</li>
</ul>
<p><strong><em>参数说明</em></strong> </p>
<p>Path.Direction有两个值：</p>
<ul>
<li>Path.Direction.CCW：是counter-clockwise缩写，指创建”逆时针”方向的矩形路径；</li>
<li>Path.Direction.CW：是clockwise的缩写，指创建”顺时针”方向的矩形路径；</li>
</ul>
<h2 id="2-PathMeasure类的使用"><a href="#2-PathMeasure类的使用" class="headerlink" title="2. PathMeasure类的使用"></a>2. PathMeasure类的使用</h2><blockquote>
<p>参考:<a href="http://blog.csdn.net/cquwentao/article/details/51436852" target="_blank" rel="external">http://blog.csdn.net/cquwentao/article/details/51436852</a></p>
</blockquote>
<p>(1)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//path：需要测量的path</span></div><div class="line"><span class="comment">//forceClosed：是否关闭path</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">PathMeasure</span><span class="params">(Path path, <span class="keyword">boolean</span> forceClosed)</span></span></div></pre></td></tr></table></figure>
<p>(2)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这里就是指定需要测量的path，同上。</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPath</span><span class="params">(Path path, <span class="keyword">boolean</span> forceClosed)</span></span></div></pre></td></tr></table></figure>
<p>(3)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//返回当前path的"总"长度。</span></div><div class="line">PathMeasure pathMeasure = <span class="keyword">new</span> PathMeasure(path, <span class="keyword">false</span>);</div><div class="line"><span class="keyword">float</span> length = pathMeasure.getLength();</div></pre></td></tr></table></figure>
<p>(4)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getPosTan</span><span class="params">(<span class="keyword">float</span> distance, <span class="keyword">float</span> pos[], <span class="keyword">float</span> tan[])</span></span></div><div class="line"><span class="function"><span class="comment">//返回值是boolean，如过path为空，则返回false</span></span></div><div class="line"><span class="function">传入参数有三个：</span></div><div class="line"><span class="function">	distance：传入距离起点的距离。</span></div><div class="line"><span class="function">	pos[]:意思是position，分别对应点的x，y坐标</span></div><div class="line"><span class="function">	tan[]：这个值比较难以理解。我们下面讲解下这个值的意义。</span></div></pre></td></tr></table></figure>
<p><strong>Path 有两类方法，一类是直接描述路径的，另一类是辅助的设置或计算。</strong></p>
<h3 id="直接描述路径。"><a href="#直接描述路径。" class="headerlink" title="直接描述路径。"></a>直接描述路径。</h3><h4 id="1-添加子图形-：addXxx"><a href="#1-添加子图形-：addXxx" class="headerlink" title="1. 添加子图形 ：addXxx()"></a>1. 添加子图形 ：<strong>addXxx()</strong></h4><p>添加的完整封闭图形（除了 addPath() ）</p>
<h4 id="2-画线（直线或曲线）：xxxTo"><a href="#2-画线（直线或曲线）：xxxTo" class="headerlink" title="2. 画线（直线或曲线）：xxxTo()"></a>2. 画线（直线或曲线）：<strong>xxxTo()</strong></h4><ul>
<li>lineTo(float x, float y) / rLineTo(float x, float y) ：画直线</li>
</ul>
<p>lineTo(x, y) 的参数是绝对坐标，而 rLineTo(x, y) 的参数是相对当前位置的相对坐标 （前缀 r 指的就是  relatively 「相对地」)。</p>
<p>所谓当前位置，即最后一次调用画 Path 的方法的终点位置。初始值为原点 (0, 0)。</p>
<ul>
<li>quadTo(float x1, float y1, float x2, float y2) / rQuadTo(float dx1, float dy1, float dx2, float dy2) ：画二次贝塞尔曲线    </li>
<li>cubicTo(float x1, float y1, float x2, float y2, float x3, float y3) / rCubicTo(float x1, float y1, float x2, float y2, float x3, float y3) ：画三次贝塞尔曲线</li>
<li>moveTo(float x, float y) / rMoveTo(float x, float y) ：移动到目标位置</li>
</ul>
<p>设置图形起点。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-09%2015.05.18.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">paint.setStyle(Style.STROKE);  </div><div class="line">path.lineTo(<span class="number">50</span>, <span class="number">50</span>); <span class="comment">// 斜线  </span></div><div class="line">path.moveTo(<span class="number">150</span>, <span class="number">50</span>); <span class="comment">// 移动 </span></div><div class="line">path.lineTo(<span class="number">150</span>, <span class="number">0</span>); <span class="comment">// 竖线</span></div></pre></td></tr></table></figure>
<p>画弧形</p>
<ul>
<li>arcTo(RectF oval, float startAngle, float sweepAngle, boolean forceMoveTo)</li>
<li>arcTo(float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean forceMoveTo)</li>
<li>arcTo(RectF oval, float startAngle, float sweepAngle) </li>
</ul>
<p>orceMoveTo ：绘制是要 抬一下笔移动过去，还是 直接拖着笔过去，区别在于是否留下移动的痕迹。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-09%2015.29.50.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">path.moveTo(<span class="number">100</span>,<span class="number">0</span>);</div><div class="line">path.lineTo(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">path.arcTo(<span class="number">100</span>,<span class="number">100</span>,<span class="number">300</span>,<span class="number">300</span>,-<span class="number">90</span>,<span class="number">90</span>,<span class="keyword">true</span>);</div><div class="line">canvas.drawPath(path,paint);</div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-09%2015.29.30.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">path.moveTo(<span class="number">100</span>,<span class="number">0</span>);</div><div class="line">path.lineTo(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">path.arcTo(<span class="number">100</span>,<span class="number">100</span>,<span class="number">300</span>,<span class="number">300</span>,-<span class="number">90</span>,<span class="number">90</span>,<span class="keyword">false</span>);</div><div class="line">canvas.drawPath(path,paint);</div></pre></td></tr></table></figure>
<ul>
<li>addArc(float left, float top, float right, float bottom, float startAngle, float sweepAngle)</li>
<li>addArc(RectF oval, float startAngle, float sweepAngle)</li>
</ul>
<p>addArc() 只是一个直接使用了 forceMoveTo = true 的简化版 arcTo() 。</p>
<ul>
<li>close() ：封闭当前子图形</li>
</ul>
<p>当需要填充图形时（即 Paint.Style 为  FILL 或 FILL_AND_STROKE），Path 会自动封闭子图形。</p>
<h3 id="辅助的设置或计算"><a href="#辅助的设置或计算" class="headerlink" title="辅助的设置或计算"></a>辅助的设置或计算</h3><p>Path.setFillType(Path.FillType ft) 设置填充方式。</p>
<blockquote>
<p>使用参考：<a href="http://hencoder.com/ui-1-1/" target="_blank" rel="external">http://hencoder.com/ui-1-1/</a></p>
</blockquote>
<h2 id="3-获取随机Path方法"><a href="#3-获取随机Path方法" class="headerlink" title="3. 获取随机Path方法"></a>3. 获取随机Path方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Path <span class="title">getPath</span><span class="params">()</span></span>&#123;  </div><div class="line">    Path path = <span class="keyword">new</span> Path();  </div><div class="line">    <span class="comment">// 定义路径的起点  </span></div><div class="line">    path.moveTo(<span class="number">0</span>, <span class="number">0</span>);  </div><div class="line">    <span class="comment">// 定义路径的各个点  </span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">40</span>; i++) &#123;  </div><div class="line">	path.lineTo(i*<span class="number">35</span>, (<span class="keyword">float</span>) (Math.random() * <span class="number">150</span>));  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> path;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Color："><a href="#Color：" class="headerlink" title="Color："></a>Color：</h1><p><strong>Android系统中颜色的常用表示方法有以下3种：</strong></p>
<ol>
<li>int color = Color.BLUE;</li>
<li>int color = Color.argb(150,200,0,100);</li>
<li>在xml文件中定义颜色；</li>
</ol>
<h2 id="1-常用颜色："><a href="#1-常用颜色：" class="headerlink" title="1. 常用颜色："></a>1. 常用颜色：</h2><table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Color.BLACK</td>
<td style="text-align:left">黑色 </td>
</tr>
<tr>
<td style="text-align:left">Color.GREEN</td>
<td style="text-align:left">绿色</td>
</tr>
<tr>
<td style="text-align:left">Color.BLUE</td>
<td style="text-align:left">蓝色 </td>
</tr>
<tr>
<td style="text-align:left">Color.LTGRAY</td>
<td style="text-align:left">浅灰色</td>
</tr>
<tr>
<td style="text-align:left">Color.CYAN</td>
<td style="text-align:left">青绿色 </td>
</tr>
<tr>
<td style="text-align:left">Color.MAGENTA</td>
<td style="text-align:left">红紫色</td>
</tr>
<tr>
<td style="text-align:left">Color.DKGRAY</td>
<td style="text-align:left">灰黑色 </td>
</tr>
<tr>
<td style="text-align:left">Color.RED</td>
<td style="text-align:left">红色</td>
</tr>
<tr>
<td style="text-align:left">Color.YELLOW</td>
<td style="text-align:left">黄色 </td>
</tr>
<tr>
<td style="text-align:left">Color.TRANSPARENT</td>
<td style="text-align:left">透明</td>
</tr>
<tr>
<td style="text-align:left">Color.GRAY</td>
<td style="text-align:left">灰色 </td>
</tr>
<tr>
<td style="text-align:left">Color.WHITE</td>
<td style="text-align:left">白色</td>
</tr>
</tbody>
</table>
<h2 id="2-ColorFilter类的使用"><a href="#2-ColorFilter类的使用" class="headerlink" title="2. ColorFilter类的使用"></a>2. ColorFilter类的使用</h2><blockquote>
<p>参考:<a href="http://blog.csdn.net/cquwentao/article/details/51396466" target="_blank" rel="external">http://blog.csdn.net/cquwentao/article/details/51396466</a></p>
</blockquote>
<p><strong>ColorFilter主要用来处理颜色有3个子类</strong>:</p>
<ol>
<li>ColorMatrixColorFilter：颜色矩阵</li>
<li>LightingColorFilter：亮度</li>
<li>PorterDuffColorFilter：颜色的混合模式    </li>
</ol>
<h3 id="2-1-ColorMatrixColorFilter"><a href="#2-1-ColorMatrixColorFilter" class="headerlink" title="2.1. ColorMatrixColorFilter"></a>2.1. ColorMatrixColorFilter</h3><p><strong>这个类主要是使用matrix对颜色做运算，矩阵的形态如下：</strong></p>
<pre><code>            &quot;R&quot;   &quot;G&quot;   &quot;B&quot;   &quot;A&quot;
&quot;Red通道&quot;   a[0]  a[1]  a[2]  a[3]  a[4]
&quot;Green通道&quot; a[5]  a[6]  a[7]  a[8]  a[9]
&quot;Blue通道&quot;  a[10] a[11] a[12] a[13] a[14]
&quot;Alpha通道&quot; a[15] a[16] a[17] a[18] a[19]        
</code></pre><p><strong>RGB色彩和Alpha的终值计算方法如下：</strong></p>
<ul>
<li><strong>“Red通道”  终值</strong>    = a[0]  <em> srcR + a[1]  </em> srcG + a[2]  <em> srcB + a[3]  </em> srcA + a[4]</li>
<li><strong>“Green通道”终值</strong> = a[5]  <em> srcR + a[6]  </em> srcG + a[7]  <em> srcB + a[8]  </em> srcA + a[9]</li>
<li><strong>“Blue通道” 终值</strong>  = a[10] <em> srcR + a[11] </em> srcG + a[12] <em> srcB + a[13] </em> srcA + a[14]</li>
<li><strong>“Alpha通道”终值</strong> = a[15] <em> srcR + a[16] </em> srcG + a[17] <em> srcB + a[18] </em> srcA + a[19]</li>
</ul>
<p><strong>“备注”</strong></p>
<p>srcR为原图Red通道值，srcG为原图Green通道值，srcB为原图Blue通道值，srcA为原图Alpha通道值。<br>每个通道的源值和终值都在0到255的范围内。即使计算结果大于255或小于0，值都将被限制在0到255的范围内。</p>
<p><strong>使用示例</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">float</span>[] MATRIX = <span class="keyword">new</span> <span class="keyword">float</span>[] </div><div class="line">&#123;</div><div class="line">    <span class="number">0.5f</span>, <span class="number">0</span>,    <span class="number">0</span>,    <span class="number">0</span>, <span class="number">0</span>,</div><div class="line">    <span class="number">0</span>,    <span class="number">0.5f</span>, <span class="number">0</span>,    <span class="number">0</span>, <span class="number">0</span>,</div><div class="line">    <span class="number">0</span>,    <span class="number">0</span>,    <span class="number">0.5f</span>, <span class="number">0</span>, <span class="number">0</span>,</div><div class="line">    <span class="number">0</span>,    <span class="number">0</span>,    <span class="number">0</span>,    <span class="number">1</span>, <span class="number">0</span> </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="2-2-LightingColorFilter"><a href="#2-2-LightingColorFilter" class="headerlink" title="2.2. LightingColorFilter"></a>2.2. LightingColorFilter</h3><p>LightingColorFilter是上面ColorMatrixColorFilter的一个简化版本，构造函数也比较简单<br><strong>构造函数</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LightingColorFilter</span><span class="params">(<span class="keyword">int</span> mul, <span class="keyword">int</span> add)</span>  </span></div><div class="line"><span class="function">	<span class="comment">//mul代表multiply,也就是乘法</span></span></div><div class="line"><span class="function">	<span class="comment">//add代表加法，也就是颜色偏移量</span></span></div></pre></td></tr></table></figure>
<p><strong>使用示例</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Bitmap bitmap = BitmapFactory.decodeResource(getContext().getResources(), R.drawable.home);</div><div class="line">canvas.drawBitmap(bitmap, <span class="number">100</span>, <span class="number">0</span>, paint);</div><div class="line">LightingColorFilter filter = <span class="keyword">new</span> LightingColorFilter(<span class="number">0x888888</span>, <span class="number">0x000000</span>);</div><div class="line">paint.setColorFilter(filter);</div><div class="line">canvas.drawBitmap(bitmap, <span class="number">100</span>, <span class="number">500</span>, paint);</div></pre></td></tr></table></figure>
<p><strong>计算方法</strong></p>
<p>color = color <em> mul／２５５+ add (计算结果大于等于255都指定为255)<br>其中”color”可以为RGB三种通道中的”一种”，mul和add分别为通道对应的值。<br>假设R通道的值就为R=R</em>0x88/0xff+0  0x88/0xff肯定是小于1的，所以颜色变暗了。<br>add的值越”大”,画面越”亮”.</p>
<h3 id="2-3-PorterDuffColorFilter"><a href="#2-3-PorterDuffColorFilter" class="headerlink" title="2.3. PorterDuffColorFilter"></a>2.3. PorterDuffColorFilter</h3><p>构造函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">PorterDuffColorFilter</span><span class="params">(<span class="keyword">int</span> srcColor, PorterDuff.Mode mode)</span>  </span></div><div class="line"><span class="function">	<span class="comment">//srcColor源颜色，</span></span></div><div class="line"><span class="function">	<span class="comment">//mode是色彩的混合模式.</span></span></div></pre></td></tr></table></figure>
<hr>
<h1 id="重绘方法"><a href="#重绘方法" class="headerlink" title="重绘方法"></a>重绘方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* 重绘方法</span></div><div class="line"><span class="comment">* 在某个时候调用 onDraw（android.graphics.Canvas)</span></div><div class="line"><span class="comment">* 这必须从UI线程调用。 要从非UI线程调用则调用 postInvalidate()</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invalidate</span><span class="params">()</span> </span>&#123;</div><div class="line">	invalidate(<span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">	*这是invalidate（）工作实际发生的地方。 一个完整的invalidate（）会导致绘图缓存无效，但是可以使用invalidateCache设置为false来调用此函数，以便在不需要该过程的情况下跳过该无效步骤。</span></div><div class="line"><span class="comment">	*</span></div><div class="line"><span class="comment">	* <span class="doctag">@param</span> invalidateCache此视图的绘图缓存是否也应该被无效。对于完全无效，这通常是正确的，但如果视图的内容或维度未更改，则可能会设置为false。</span></div><div class="line"><span class="comment">	*/</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">invalidate</span><span class="params">(<span class="keyword">boolean</span> invalidateCache)</span> </span>&#123;</div><div class="line">	invalidateInternal(<span class="number">0</span>, <span class="number">0</span>, mRight - mLeft, mBottom - mTop, invalidateCache, <span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[代理模式]]></title>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<hr>
<p>《head First 设计模式》</p>
<a id="more"></a>
<p>[TOC]</p>
<hr>
<blockquote>
<p>参考：<a href="http://blog.csdn.net/self_study/article/details/51628486" target="_blank" rel="external">http://blog.csdn.net/self_study/article/details/51628486</a></p>
</blockquote>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>创建一个抽象类方法，里面写有代理与主题共同的方法。</p>
<pre><code>public abstract class MyObject {
    //代理与实际主题的共同方法
    public abstract void operate();
}
</code></pre><p>真实主题</p>
<pre><code>public class RealObject extends MyObject {
    @Override
    public void operate() {
    System.out.println(&quot;这是来自RealObject的方法处理&quot;);
    }
}
</code></pre><p>代理主题</p>
<pre><code>public class ProxyObject extends MyObject {

    private RealObject realObject;
    //在此类中调用真实的主题，因为是代理主题“代理”真实主题中的方法，需要用到真实主题的引用
    public ProxyObject(RealObject realObject) {
    this.realObject = realObject;
    }

    @Override
    public void operate() {
    System.out.println(&quot;在处理“RealObject”之前，处理代理模式中自己的方法处理&quot;);
    //在此处调用真实主题中的同名方法。
    realObject.operate();
    System.out.println(&quot;在处理“RealObject”之后，处理代理模式中自己的方法处理&quot;);
    }
}
</code></pre><p>测试</p>
<pre><code>public class Proxy_DesignPattern {
    public static void main(String[] args){
    ProxyObject proxyObject = new ProxyObject(new RealObject());
    proxyObject.operate();
    }
}
/**
 * 输出结果：
 * 在处理“RealObject”之前，处理代理模式中自己的方法处理
   这是来自RealObject的方法处理
   在处理“RealObject”之后，处理代理模式中自己的方法处理
 */
</code></pre><h1 id="代理模式的角色："><a href="#代理模式的角色：" class="headerlink" title="代理模式的角色："></a>代理模式的角色：</h1><p><strong>Subject：抽象主题类</strong><br>    该类的主要职责是声明真实主题与代理的共同接口方法，该类既可以是一个抽象类，也可以是一个接口；</p>
<p><strong>RealSubjct：真实主题类</strong><br>    该类也称为被委托类或被代理类，该类定义了代理所表示的真实对象，由其执行具体的业务逻辑方法，而客户端则通过代理类间接地调用真实主题类中定义的方法；</p>
<p><strong>ProxySubject：代理类</strong><br>    该类也称为委托类或代理类，该类持有一个对真实主题类的引用，在其所实现的接口方法中调用真实主题类中对应的接口方法，以此起到代理的作用；</p>
<p><strong>Client：客户类</strong><br>    即使用代理类的部分。</p>
<h1 id="代理模式根据实际使用的场景也可以分为以下几种："><a href="#代理模式根据实际使用的场景也可以分为以下几种：" class="headerlink" title="代理模式根据实际使用的场景也可以分为以下几种："></a>代理模式根据实际使用的场景也可以分为以下几种：</h1><p><strong>远程代理（Remote Proxy）</strong><br>    为某个在不同的内存地址空间的对象提供局部代理，使系统可以将 Server 部分的实现隐藏，以便 Client 可以不必考虑 Server 的存在，类似于 C/S 模式（主要拦截并控制远程方法的调用，做代理防火墙之类的）；</p>
<p><strong>虚拟代理（Virtual Proxy）</strong><br>    使用一个代理对象标识一个十分耗资源的对象，并在真正需要时才创建，实现一个延迟加载的机制；</p>
<p><strong>保护代理（Protection Proxy）</strong><br>    使用代理控制对原始对象的访问，该类型的代理通常被用于原始对象有不同访问权限的情况；</p>
<p><strong>智能引用（Smart Proxy）</strong><br>    在访问原始对象时执行一些自己的附加操作并对指向原始对象的引用计数；</p>
<p><strong>写时拷贝（克隆）代理（Copy-on-write Proxy）</strong><br>    其实是虚拟代理的一个分支，提供了拷贝大对象的时候只有在对象真正变化后才会进行拷贝（克隆）的操作，即延迟拷贝。</p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[装饰者模式]]></title>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<hr>
<p>《head First 设计模式》</p>
<a id="more"></a>
<p>[TOC]</p>
<hr>
<blockquote>
<p> 参考：<a href="http://www.cnblogs.com/java-my-life/archive/2012/04/20/2455726.html" target="_blank" rel="external">http://www.cnblogs.com/java-my-life/archive/2012/04/20/2455726.html</a></p>
</blockquote>
<h1 id="设计原则："><a href="#设计原则：" class="headerlink" title="设计原则："></a>设计原则：</h1><p>封装变化<br>多用组合，少用继承<br>对扩展开发，对修改关闭</p>
<h1 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h1><p>装饰模式又名包装(Wrapper)模式。装饰者模式动态地将责任添加到对象上，是继承关系的一个替代方案。</p>
<h1 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h1><ul>
<li>装饰着可以在所委托装饰着的行为之前或者之后添加自己的行为，已达到特定的目的。</li>
<li>通过使用不同的具体装饰类以及这些装饰类的组合，可以创造出很多不同行为的组合。</li>
<li>装饰着与组件组合时，就是在加入新的行为，新的行为是由组合对象得来的。</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-07%2008.39.41.png" alt=""></p>
<h1 id="如何封装的更好："><a href="#如何封装的更好：" class="headerlink" title="如何封装的更好："></a>如何封装的更好：</h1><p>装饰着模式（Decorator） + 工厂模式（Factory） + 生成器模式（Builder）</p>
<h2 id="装饰模式中的角色有："><a href="#装饰模式中的角色有：" class="headerlink" title="装饰模式中的角色有："></a>装饰模式中的角色有：</h2><ul>
<li>抽象构件(Component)角色：给出一个抽象接口，以规范准备接收附加责任的对象。</li>
<li>具体构件(ConcreteComponent)角色：定义一个将要接收附加责任的类。</li>
<li>抽象装饰(Decorator)角色：持有一个构件(Component)对象的实例，并定义一个与抽象构件接口一致的接口。</li>
<li>具体装饰(ConcreteDecorator)角色：负责给构件对象“贴上”附加的责任。</li>
</ul>
<p><strong>抽象装饰角色 继承 抽象构件角色，是为了有正确的类型，而不是继承它的行为。行为来自装饰着和基础组件，或与其他装饰着之间的组合关系。</strong></p>
<h1 id="实际应用："><a href="#实际应用：" class="headerlink" title="实际应用："></a>实际应用：</h1><p>java的I/O流</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-07%2010.18.59.png" alt=""></p>
<p><strong>装饰者模式的缺点</strong> ： </p>
<ul>
<li>产生大量的类。</li>
<li>类型问题。某一个对象依赖特定类型的类型。</li>
<li>采用装饰着实例化组件时，将会增加代码复杂度，不但需要实例化组件，还有把组件包装进装饰者中。</li>
</ul>
<h1 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h1><p><strong>组件</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 饮料抽象类</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Drink</span> </span>&#123;</div><div class="line"></div><div class="line">    String describtion = <span class="string">"Drink"</span>;</div><div class="line">    <span class="keyword">int</span> price = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 打印 描述</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescribtion</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> describtion;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 行为：输出价格</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">printPrice</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 具体牛奶饮料类</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MilkDrink</span> <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MilkDrink</span><span class="params">()</span></span>&#123;</div><div class="line">        price = <span class="number">11</span>;</div><div class="line">        describtion = <span class="string">"MilkDrink "</span> + String.valueOf(price);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">printPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> price;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 具体茶饮料类</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeaDrink</span> <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TeaDrink</span><span class="params">()</span></span>&#123;</div><div class="line">        price = <span class="number">12</span>;</div><div class="line">        describtion = <span class="string">"TeaDrink "</span> + String.valueOf(price);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">printPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> price;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>装饰者</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 抽象 装饰者</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CondimentDecorator</span> <span class="keyword">extends</span> <span class="title">Drink</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> condimentPrice= <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">printPrice</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 抽象装饰角色 继承 抽象构件角色，是为了有正确的类型，而不是继承它的行为</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HoneyDecorator</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</div><div class="line"></div><div class="line">    Drink mDrink;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HoneyDecorator</span><span class="params">(Drink drink)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.mDrink = drink;</div><div class="line">        condimentPrice = <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescribtion</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"HoneyDecorator "</span> +  String.valueOf(condimentPrice) + <span class="string">" "</span>  + mDrink.getDescribtion();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">printPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> condimentPrice + mDrink.printPrice();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MochaDecorator</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</div><div class="line"></div><div class="line">    Drink mDrink;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 使用抽象基类，践行 "开闭原则"：对扩展开放，对修改关闭</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> drink 基类</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MochaDecorator</span><span class="params">(Drink drink)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.mDrink = drink;</div><div class="line">        condimentPrice = <span class="number">5</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 输出当前组合</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescribtion</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"MochaDecorator "</span> +  String.valueOf(condimentPrice) + <span class="string">" "</span> + mDrink.getDescribtion();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 组合得到新的行为</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 当前组合价格</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">printPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span>  condimentPrice + mDrink.printPrice();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>测试类</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecoratorMain</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//只有一个底料的茶饮料</span></div><div class="line">        Drink teaDrink = <span class="keyword">new</span> TeaDrink();</div><div class="line">        System.out.println(teaDrink.getDescribtion());</div><div class="line">        System.out.println(teaDrink.printPrice());</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * TeaDrink 12</span></div><div class="line"><span class="comment">         * 12</span></div><div class="line"><span class="comment">         */</span></div><div class="line"></div><div class="line">        <span class="comment">//茶饮料 + 蜂蜜</span></div><div class="line">        <span class="comment">//抽象装饰角色 继承 抽象构件角色，是为了有正确的类型，而不是继承它的行为</span></div><div class="line">        Drink honeyDecorator = <span class="keyword">new</span> HoneyDecorator(teaDrink);</div><div class="line">        System.out.println(honeyDecorator.getDescribtion());</div><div class="line">        System.out.println(honeyDecorator.printPrice());</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * HoneyDecorator 10 + TeaDrink 12</span></div><div class="line"><span class="comment">         * 22</span></div><div class="line"><span class="comment">         */</span></div><div class="line"></div><div class="line">        <span class="comment">//茶饮料 + 蜂蜜 + 摩卡</span></div><div class="line">        Drink mochaDecorator = <span class="keyword">new</span> MochaDecorator(honeyDecorator);</div><div class="line">        System.out.println(mochaDecorator.getDescribtion());</div><div class="line">        System.out.println(mochaDecorator.printPrice());</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * MochaDecorator 5 + HoneyDecorator 10 + TeaDrink 12</span></div><div class="line"><span class="comment">         * 27</span></div><div class="line"><span class="comment">         */</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[观察者模式]]></title>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<hr>
<p>《head First 设计模式》</p>
<a id="more"></a>
<p>[TOC]</p>
<hr>
<p><strong>OO基础</strong> ：抽象<br><strong>OO原则</strong> ：封装变化、针对接口编程、松耦合（多用组合，少用继承）<br><strong>观察者模式</strong>  ：在对象之间定义一对多的依赖，当一个对象的状态改变，其他对象都会收到通知并自动改变。</p>
<h1 id="被观察者"><a href="#被观察者" class="headerlink" title="被观察者"></a>被观察者</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WeatherSet</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(WeatherOberver oberver)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unRegister</span><span class="params">(WeatherOberver oberver)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">upData</span><span class="params">(WeatherData weatherData)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 主题（被观察者）</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherSetI</span> <span class="keyword">implements</span> <span class="title">WeatherSet</span></span>&#123;</div><div class="line"></div><div class="line">    List&lt;WeatherOberver&gt; oberverList;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 初始化存储观察者的集合</span></div><div class="line"><span class="comment">     * 模块间的依赖应该是通过 抽象来实现的</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherSetI</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.oberverList = <span class="keyword">new</span> ArrayList&lt;WeatherOberver&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 注册</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> oberver 观察者</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(WeatherOberver oberver)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (oberverList.contains(oberver)) &#123;</div><div class="line">            System.out.println(<span class="string">"注意 : "</span> + oberver.getClass().getName() + <span class="string">" 当前订阅者已经存在，无需订阅"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            oberverList.add(oberver);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 取消注册</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> oberver 观察者</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unRegister</span><span class="params">(WeatherOberver oberver)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"注意："</span> + oberver.getClass().getName() + <span class="string">" 已经不再订阅该消息，bye~bye~"</span>);</div><div class="line">        oberverList.remove(oberver);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 数据更新</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> weatherData 数据Bean类</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * 设计原则：“不要打电话给我，我打电话给你”（上层调用下层，下层不调用上层）</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upData</span><span class="params">(WeatherData weatherData)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"注意：当前有 "</span> + oberverList.size() + <span class="string">" 位订阅了该消息！"</span>);</div><div class="line">        <span class="keyword">for</span> (WeatherOberver item : oberverList) &#123;</div><div class="line">            item.getData(weatherData);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* 数据Bean类</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> temp;</div><div class="line">    <span class="keyword">int</span> pressure;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">(<span class="keyword">int</span> temp, <span class="keyword">int</span> pressure)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.temp = temp;</div><div class="line">        <span class="keyword">this</span>.pressure = pressure;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTemp</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> temp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTemp</span><span class="params">(<span class="keyword">int</span> temp)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.temp = temp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPressure</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> pressure;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPressure</span><span class="params">(<span class="keyword">int</span> pressure)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.pressure = pressure;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"WeatherData&#123;"</span> +</div><div class="line">                <span class="string">"temp="</span> + temp +</div><div class="line">                <span class="string">", pressure="</span> + pressure +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="观察者"><a href="#观察者" class="headerlink" title="观察者"></a>观察者</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 观察者 接口</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WeatherOberver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 数据更新行为</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> weatherData 数据Bean类</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getData</span><span class="params">(WeatherData weatherData)</span></span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WangObserver</span> <span class="keyword">implements</span> <span class="title">WeatherOberver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(WeatherData weatherData)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"WangObserver get data temp is : "</span> + weatherData.getTemp() + <span class="string">", pressure is : "</span> + weatherData.getPressure());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZhangObserver</span> <span class="keyword">implements</span> <span class="title">WeatherOberver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(WeatherData weatherData)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"ZhangObserver get data temp is : "</span> + weatherData.getTemp() + <span class="string">", pressure is : "</span> + weatherData.getPressure());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LiObserver</span> <span class="keyword">implements</span> <span class="title">WeatherOberver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(WeatherData weatherData)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"LiObserver get data temp is : "</span> + weatherData.getTemp() + <span class="string">", pressure is : "</span> + weatherData.getPressure());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OberverMain</span> </span>{

    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{
        WeatherOberver oberverWang = <span class="keyword">new</span> WangObserver();
        WeatherOberver oberverLi = <span class="keyword">new</span> LiObserver();
        WeatherOberver oberverZhang = <span class="keyword">new</span> ZhangObserver();

        WeatherSetI set = <span class="keyword">new</span> WeatherSetI();
        set.register(oberverWang);
        set.register(oberverLi);
        set.register(oberverZhang);

        set.upData(<span class="keyword">new</span> WeatherData(<span class="number">12</span>, <span class="number">45</span>));
        <span class="comment">/**</span>
<span class="comment">         *  注意：当前有 3 位订阅了该消息！</span>
<span class="comment">            WangObserver get data temp is : 12, pressure is : 45</span>
<span class="comment">            LiObserver get data temp is : 12, pressure is : 45</span>
<span class="comment">            ZhangObserver get data temp is : 12, pressure is : 45</span>
<span class="comment">         */</span>

        System.out.println();
        set.unRegister(oberverLi);
        set.upData(<span class="keyword">new</span> WeatherData(<span class="number">32</span>, <span class="number">100</span>));
        <span class="comment">/**</span>
<span class="comment">         *  注意：observer.LiObserver 已经不再订阅该消息，bye~bye~</span>
<span class="comment">            注意：当前有 2 位订阅了该消息！</span>
<span class="comment">            WangObserver get data temp is : 32, pressure is : 100</span>
<span class="comment">            ZhangObserver get data temp is : 32, pressure is : 100</span>
<span class="comment">         */</span>

        System.out.println();
        set.register(oberverZhang);
        set.upData(<span class="keyword">new</span> WeatherData(<span class="number">33</span>, <span class="number">97</span>));
        <span class="comment">/**</span>
<span class="comment">         *  注意 : observer.ZhangObserver 当前订阅者已经存在，无需订阅</span>
<span class="comment">            注意：当前有 2 位订阅了该消息！</span>
<span class="comment">            WangObserver get data temp is : 33, pressure is : 97</span>
<span class="comment">            ZhangObserver get data temp is : 33, pressure is : 97</span>
<span class="comment">         */</span>
    }
}
</code></pre>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ul>
<li><p>Android的广播机制。</p>
<p>  我们平时使用本地广播主要就是下面四个方法:</p>
<pre><code>LocalBroadcastManager localBroadcastManager=LocalBroadcastManager.getInstance(this);
localBroadcastManager.registerReceiver(BroadcastReceiver receiver, IntentFilter filter);
localBroadcastManager.unregisterReceiver(BroadcastReceiver receiver);
localBroadcastManager.sendBroadcast(Intent intent)
</code></pre></li>
</ul>
<p>调用registerReceiver方法注册广播，调用unregisterReceiver方法取消注册，之后直接使用<br>sendBroadcast发送广播，发送广播之后，注册的广播会收到对应的广播信息，这就是典型的观察者模式</p>
<ul>
<li><p>EventBus。<br>  观察者模式的三个典型方法它都具有，即注册，取消注册，发送事件：</p>
<pre><code>EventBus.getDefault().register(Object subscriber);
EventBus.getDefault().unregister(Object subscriber);
EventBus.getDefault().post(Object event);
</code></pre></li>
</ul>
<ul>
<li><p>RxJava。<br>  创建一个被观察者：</p>
<pre><code>Observable&lt;String&gt; myObservable = Observable.create(  
    new Observable.OnSubscribe&lt;String&gt;() {  
    @Override  
    public void call(Subscriber&lt;? super String&gt; sub) {  
        sub.onNext(&quot;Hello, world!&quot;);  
        sub.onCompleted();  
    }  
    }  
);  
</code></pre><p>  创建一个观察者，也就是订阅者：</p>
<pre><code>Subscriber&lt;String&gt; mySubscriber = new Subscriber&lt;String&gt;() {  
    @Override  
    public void onNext(String s) { System.out.println(s); }  

    @Override  
    public void onCompleted() { }  

    @Override  
    public void onError(Throwable e) { }  
};  
</code></pre><p>  观察者进行事件的订阅</p>
<pre><code>myObservable.subscribe(mySubscriber); 
</code></pre></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[原型模式]]></title>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<hr>
<p>《head First 设计模式》</p>
<a id="more"></a>
<p>[TOC]</p>
<hr>
<blockquote>
<p>参考：<a href="http://blog.csdn.net/sbsujjbcy/article/details/49302717" target="_blank" rel="external">http://blog.csdn.net/sbsujjbcy/article/details/49302717</a></p>
</blockquote>
<h1 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h1><p>用原型模式的实例创建对象的实例，同过拷贝这些原型模式的实例创建新的对象。</p>
<h1 id="优点及适用场景"><a href="#优点及适用场景" class="headerlink" title="优点及适用场景"></a>优点及适用场景</h1><ol>
<li><p>一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用，即保护性拷贝。</p>
</li>
<li><p>使用原型模式创建对象比直接new一个对象在性能上要好的多，因为Object类的clone方法是一个本地方法，它直接操作内存中的二进制流，特别是复制大对象时，性能的差别非常明显。</p>
</li>
<li><p>使用原型模式的另一个好处是简化对象的创建，使得创建对象就像我们在编辑文档时的复制粘贴一样简单。</p>
</li>
<li><p>因为以上优点，所以在需要重复地创建相似对象时可以考虑使用原型模式。<br>比如需要在一个循环体内创建对象，假如对象创建过程比较复杂或者循环次数很多的话，使用原型模式不但可以简化创建过程，而且可以使系统的整体性能提高很多。</p>
</li>
</ol>
<h1 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h1><ol>
<li><p>使用原型模式复制对象不会调用类的构造方法。<br>因为对象的复制是通过调用Object类的clone方法来完成的，它直接在内存中复制数据，因此不会调用到类的构造方法。<br>不但构造方法中的代码不会执行，甚至连访问权限都对原型模式无效。<br>单例模式中，只要将构造方法的访问权限设置为private型，就可以实现单例。<br>但是clone方法直接无视构造方法的权限，所以，单例模式与原型模式是冲突的，在使用时要特别注意。</p>
</li>
<li><p>深拷贝与浅拷贝。<br>Object类的clone方法只会拷贝对象中的基本的数据类型，对于数组、容器对象、引用对象等都不会拷贝，这就是浅拷贝。<br>如果要实现深拷贝，必须将原型模式中的数组、容器对象、引用对象等另行拷贝<br>例如： prototype.list = (ArrayList) this.list.clone();</p>
</li>
</ol>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><pre><code>//实现“原型模式”第一步：实现Cloneable接口
public class Person implements Cloneable{

    private String name;
    private String address;
    private int age;
    private int height;
    private ArrayList&lt;String&gt; hobbies;

    public Person(String name, String address, int age, int height, ArrayList&lt;String&gt; hobbies) {
        this.name = name;
        this.address = address;
        this.age = age;
        this.height = height;
        this.hobbies = hobbies;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public int getHeight() {
        return height;
    }

    public void setHeight(int height) {
        this.height = height;
    }

    public ArrayList&lt;String&gt; getHobbies() {
        return hobbies;
    }

    public void setHobbies(ArrayList&lt;String&gt; hobbies) {
        this.hobbies = hobbies;
    }

    @Override
    public String toString() {
        return &quot;Person{&quot; +
                &quot;name=&apos;&quot; + name + &apos;\&apos;&apos; +
                &quot;, address=&apos;&quot; + address + &apos;\&apos;&apos; +
                &quot;, age=&quot; + age +
                &quot;, height=&quot; + height +
                &quot;, hobbies=&quot; + hobbies +
                &apos;}&apos;;
    }

    //实现“原型模式”第二步：重写clone（）
    @Override
    protected Object clone() throws CloneNotSupportedException {
        Person person = (Person) super.clone();
        person.name = this.name;
        person.address = this.address;
        person.age = this.age;
        person.height = this.height;
        //person.hobbies = this.hobbies;
        //此处使用使用深拷贝
        person.hobbies = (ArrayList&lt;String&gt;) this.hobbies.clone();
        return person;
    }
}
</code></pre><p>使用</p>
<pre><code>public class Prototype_DesignPattern {

    public static void main(String[] args){
        ArrayList&lt;String&gt; hobbies = new ArrayList&lt;String&gt;();
        hobbies.add(&quot;游泳&quot;);
        hobbies.add(&quot;足球&quot;);
        hobbies.add(&quot;自行车&quot;);


        Person person0 = new Person(&quot;张三&quot;,&quot;北京&quot;,24,177,hobbies);
        System.out.println(&quot;person0 is &quot; + person0.toString());

        //原型模式的使用
        try {

            Person person1 = (Person) person0.clone();
            person1.setName(&quot;王哇&quot;);
            hobbies.remove(&quot;足球&quot;);
            person1.setHobbies(hobbies);
            System.out.println(&quot;person1 is &quot; + person1.toString());

            Person person2 = (Person) person0.clone();
            person2.setAge(44);
            System.out.println(&quot;person2 is &quot; + person2.toString());

        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
        }

        System.out.println(&quot;person0 is &quot; + person0.toString());
    }
}
</code></pre>]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式与原则]]></title>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%8E%9F%E5%88%99/</url>
      <content type="html"><![CDATA[<hr>
<p>《head First 设计模式》</p>
<a id="more"></a>
<p>[TOC]</p>
<hr>
<blockquote>
<p>参考：<a href="http://blog.csdn.net/self_study/article/details/51234377" target="_blank" rel="external">http://blog.csdn.net/self_study/article/details/51234377</a></p>
</blockquote>
<p><strong>Patterns：模式</strong><br><strong>PrinciPle：原则</strong></p>
<hr>
<ul>
<li>设计模式不会直接进入你的“代码”中，而是先进入你的“大脑”中。</li>
<li>在设计模式中，所谓的“实现一个接口”并“不一定”表示“写一个类，并利用implement关键词实现某个java接口”。而是泛指“实现某个超类型（可以是接口或是类）的某个方法”。</li>
</ul>
<hr>
<h1 id="设计模式的出现："><a href="#设计模式的出现：" class="headerlink" title="设计模式的出现："></a>设计模式的出现：</h1><p>设计模式是历经验证的OO设计经验，而模式不是被发明的，是被发现的。<br>设计是一门艺术，总是有许多可取舍的地方。<br>如果找不到合适的设计模式，采用一些设计原则也是相当不错的。<br>好的OO系统设计必须是：可维护、可扩充、可复用的。</p>
<h1 id="设计原则（６大）："><a href="#设计原则（６大）：" class="headerlink" title="设计原则（６大）："></a>设计原则（６大）：</h1><h2 id="1-OCP-开闭原则："><a href="#1-OCP-开闭原则：" class="headerlink" title="1. OCP - 开闭原则："></a>1. OCP - 开闭原则：</h2><p><strong>what</strong><br>　　编写代码应该：面向扩展开放，对修改关闭。<br>　　尽量不要通过修改现有代码来满足需求。<br><strong>How</strong><br>　　要利用扩展来适应变更。<br>　　接口 优于 抽象，抽象 优于 具体类。<br>　　针对接口编程，而不是针对实现。<br>　　多用组合，少用继承。</p>
<h2 id="2-SRP-单一职责原则："><a href="#2-SRP-单一职责原则：" class="headerlink" title="2. SRP - 单一职责原则："></a>2. SRP - 单一职责原则：</h2><p><strong>what</strong><br>　　一个类、一个方法只做一件事。<br><strong>how</strong><br>　　一个类应该只有一个引起变化的原因。避免潜在错误。</p>
<h2 id="3-LSP-里氏替换原则："><a href="#3-LSP-里氏替换原则：" class="headerlink" title="3. LSP - 里氏替换原则："></a>3. LSP - 里氏替换原则：</h2><p><strong>what</strong><br>　　所有引用基类的地方都能透明的使用子类的对象。<br><strong>how</strong><br>　　子类必须完全实现父类的方法。<br>　　子类可以拥有自己的属性和方法。<br>　　子类覆盖或实现父类方法时参数范围可以扩大。<br>　　子类覆盖或实现父类方法时返回值范围可以缩小。</p>
<h2 id="4-DIP-依赖倒置原则："><a href="#4-DIP-依赖倒置原则：" class="headerlink" title="4. DIP - 依赖倒置原则："></a>4. DIP - 依赖倒置原则：</h2><p><strong>what</strong><br>　　模块间的依赖应该通过抽象发生，具体类之间不应该有依赖关系。<br>　　接口或者抽象不依赖于实现类，否则就失去了抽象接口的意义。<br>　　实现  依赖于  接口或者抽象即：底层依赖于高层。<br><strong>how</strong><br>　　针对接口编程，而不是针对实现。<br>　　别打电话给我，我打电话给你。</p>
<h2 id="5-ISP-接口隔离原则："><a href="#5-ISP-接口隔离原则：" class="headerlink" title="5. ISP - 接口隔离原则："></a>5. ISP - 接口隔离原则：</h2><p><strong>what</strong><br>　　使用接口时应该建立单一的接口，不应该建立过于臃肿的接口。<br>　　接口应该 “专” 而非 “多”即：提供独立单一的接口。</p>
<h2 id="6-LKP-最少知识原则："><a href="#6-LKP-最少知识原则：" class="headerlink" title="6. LKP - 最少知识原则："></a>6. LKP - 最少知识原则：</h2><p><strong>what</strong><br>　　一个对象应该对 “其他对象”有最少的了解。<br><strong>how</strong><br>　　一个类对于另一个类而言，尽量减少“public”，对外只提供一个简洁的访问<br>    自己的方法。</p>
<hr>
<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p><img src="http://oy991qm3u.bkt.clouddn.com/%E6%AD%A3%E8%A7%A3.png" alt=""></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%A7%88.jpg" alt=""></p>
<h2 id="1-观察者模式"><a href="#1-观察者模式" class="headerlink" title="1. 观察者模式"></a>1. 观察者模式</h2><p>　　（有趣的事情发生了，可千万别错过！）定义了对象之间的一对多依赖，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。</p>
<h2 id="2-装饰者模式"><a href="#2-装饰者模式" class="headerlink" title="2. 装饰者模式"></a>2. 装饰者模式</h2><p>　　动态的将责任附加到对象上，若要扩展功能，装饰者模式提供了比“继承”更有弹性的替代方案。</p>
<h2 id="3-简单工厂模式"><a href="#3-简单工厂模式" class="headerlink" title="3. 简单工厂模式"></a>3. 简单工厂模式</h2><p>　　不是一个真正的模式，但是同“抽象工厂模式”和“工厂方法模式”一样，被用于封装创建对象的代码。</p>
<h2 id="4-抽象工厂模式"><a href="#4-抽象工厂模式" class="headerlink" title="4. 抽象工厂模式"></a>4. 抽象工厂模式</h2><p>　　提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。</p>
<h2 id="5-工厂方法模式"><a href="#5-工厂方法模式" class="headerlink" title="5. 工厂方法模式"></a>5. 工厂方法模式</h2><p>　　定义了一个创建对象的接口，但由子类决定实例化的类是哪一个。工厂方法模式让类把实例化推迟到子类。</p>
<h2 id="6-单例模式"><a href="#6-单例模式" class="headerlink" title="6. 单例模式"></a>6. 单例模式</h2><p>　　确保一个类只有一个实例，并提供一个全局的访问点。</p>
<h2 id="7-命令模式"><a href="#7-命令模式" class="headerlink" title="7. 命令模式"></a>7. 命令模式</h2><p>　　将“请求”封装成对象，以便使用不同的请求、队列、或者日志来参数化其他对象。命令模式也支持可撤销的操作。</p>
<h2 id="8-适配器模式"><a href="#8-适配器模式" class="headerlink" title="8. 适配器模式"></a>8. 适配器模式</h2><p>　　将一个类的接口转换为期望的另一个接口，让原本接口不兼容的类可以兼容。</p>
<h2 id="9-模板模式"><a href="#9-模板模式" class="headerlink" title="9. 模板模式"></a>9. 模板模式</h2><p>　　定义一个算法的骨架，将算法中的某些步骤延迟到子类中具体实现。使得子类在不改变算法结构的情况下，重新定义算法中的某些步骤。</p>
<h2 id="10-代理模式-保护"><a href="#10-代理模式-保护" class="headerlink" title="10. 代理模式 - 保护"></a>10. 代理模式 - 保护</h2><p>　　为另一个对象提供一个替身或占位符以访问这个对象，是基于访问权控制对对象的访问。</p>
<h2 id="11-代理模式-虚拟"><a href="#11-代理模式-虚拟" class="headerlink" title="11. 代理模式 - 虚拟"></a>11. 代理模式 - 虚拟</h2><p>　　作为创建开销大的对象的代表，虚拟代理经常是直到我们真正需要一个对象时才创建真正的对象。当对象在创建前和创建中时，由虚拟代理来扮演真正对象的替身，待真正对象创建后，虚拟代理就会将请求直接给真正的对象。</p>
<h2 id="12-代理模式-远程"><a href="#12-代理模式-远程" class="headerlink" title="12. 代理模式 - 远程"></a>12. 代理模式 - 远程</h2><p>　　好比远程对象的本地代表。</p>
<h2 id="13-迭代器模式"><a href="#13-迭代器模式" class="headerlink" title="13. 迭代器模式"></a>13. 迭代器模式</h2><p>　　提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露器内部的表示。</p>
<h2 id="14-组合模式"><a href="#14-组合模式" class="headerlink" title="14. 组合模式"></a>14. 组合模式</h2><p>　　允许你将对象组合成树形结构来表现“整体/部分”层次结构。组合模式能让客户以一致的方式处理个别对象及组合对象。</p>
<h2 id="15-外观模式"><a href="#15-外观模式" class="headerlink" title="15. 外观模式"></a>15. 外观模式</h2><p>　　提供了一个统一的接口，用来访问子系统中的一群接口。外观模式定义了一个高层接口，让子系统更容易使用。外观模式不仅简化一个接口，而且将客户以组件的一个子系统中解耦。</p>
<h2 id="16-策略模式"><a href="#16-策略模式" class="headerlink" title="16. 策略模式"></a>16. 策略模式</h2><p>　　定义了算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。</p>
<h2 id="17-状态模式"><a href="#17-状态模式" class="headerlink" title="17. 状态模式"></a>17. 状态模式</h2><p>　　允许对象在内部状态改变时改变它的行为，使对象看起来好像修改了它的类。</p>
<h1 id="使用设计模式的好处"><a href="#使用设计模式的好处" class="headerlink" title="使用设计模式的好处"></a>使用设计模式的好处</h1><ul>
<li>使用模式名称和其他人员进行开发或者开发团队沟通时，彼此之间交流的不只是模式名称，而是一整套模式背后所象征的质量、特性、约束。</li>
<li>思路清晰：他人能更清晰的了解你对设计的想法，团队之间对于设计的看法不会轻易产生误解。</li>
<li>宏观：使用设计模式谈论软件系统，能让你保持在“设计层次”，不会被纠缠于“对象”与“类”这种琐碎的实现细节上。 </li>
<li>大家对设计模式都有深入的了解，更易提升自身水平。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[单例模式]]></title>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<hr>
<p>《head First 设计模式》</p>
<a id="more"></a>
<p>[TOC]</p>
<hr>
<blockquote>
<p>参考：<a href="http://blog.csdn.net/tanyujing/article/details/14160941" target="_blank" rel="external">http://blog.csdn.net/tanyujing/article/details/14160941</a><br>         <a href="http://blog.csdn.net/sbsujjbcy/article/details/49147839" target="_blank" rel="external">http://blog.csdn.net/sbsujjbcy/article/details/49147839</a></p>
</blockquote>
<p>是在内存中维护唯一对象，优点如下：</p>
<pre><code>1.对于那些比较耗内存的类，只实例化一次可以大大提高性能，尤其是在移动开发中。
2.保持程序运行的时候该中始终只有一个实例存在内存中
</code></pre><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><pre><code>public class Singleton{
    private static volatile Singleton instance == null;

    private Singleton(){
    }

    public static Singleton getInstance(){
        if(instance == null){
            synchronized(Singleton.class){
                if(instance == null){
                    instance == new Singleton();
                }
            }
        }
        return instance;
    }
}
</code></pre><h1 id="关于volatile"><a href="#关于volatile" class="headerlink" title="关于volatile"></a>关于volatile</h1><blockquote>
<p>参考：<a href="http://www.ibm.com/developerworks/cn/java/j-jtp06197.html" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/java/j-jtp06197.html</a></p>
</blockquote>
<p>概述：<br>        Java 语言中的 volatile 变量可以被看作是一种 “程度较轻的 synchronized”；<br>        与 synchronized 块相比，volatile 变量所需的编码较少，并且运行时开销也较少，<br>        但是它所能实现的功能也仅是 synchronized 的一部分。</p>
<h1 id="单例模式使用："><a href="#单例模式使用：" class="headerlink" title="单例模式使用："></a>单例模式使用：</h1><ol>
<li>必须防止外部可以调用构造函数进行实例化，因此构造函数必须私有化。</li>
<li>必须定义一个静态函数获得该单例</li>
<li>单例使用volatile修饰</li>
<li>使用synchronized 进行同步处理，并且双重判断是否为null，<br>在synchronized (Singleton.class)里面又进行了是否为null的判断，<br>这是因为一个线程进入了该代码，如果另一个线程在等待，这时候前一个线程创建<br>了一个实例出来完毕后，另一个线程获得锁进入该同步代码，实例已经存在，没必<br>要再次创建，因此这个判断是否是null还是必须的。</li>
</ol>
<h1 id="单例的并发测试：见参考。"><a href="#单例的并发测试：见参考。" class="headerlink" title="单例的并发测试：见参考。"></a>单例的并发测试：见参考。</h1><h1 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h1><pre><code>public class ActivityManager {

    private static volatile ActivityManager instance;
    private Stack&lt;Activity&gt; mActivityStack = new Stack&lt;Activity&gt;();

    private ActivityManager(){

    }

    public static ActivityManager getInstance(){
    if (instance == null) {
    synchronized (ActivityManager.class) {
        if (instance == null) {
            instance = new ActivityManager();
        }
    }
    return instance;
    }

    public void addActicity(Activity act){
    mActivityStack.push(act);
    }

    public void removeActivity(Activity act){
    mActivityStack.remove(act);
    }

    public void killMyProcess(){
    int nCount = mActivityStack.size();
    for (int i = nCount - 1; i &gt;= 0; i--) {
        Activity activity = mActivityStack.get(i);
        activity.finish();
    }

    mActivityStack.clear();
    android.os.Process.killProcess(android.os.Process.myPid());
    }
}
</code></pre>]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 桌面使用命令]]></title>
      <url>/Ubuntu%20%E6%A1%8C%E9%9D%A2%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>命令使用参考</p>
<a id="more"></a>
<p>[TOC]</p>
<h2 id="桌面环境："><a href="#桌面环境：" class="headerlink" title="桌面环境："></a>桌面环境：</h2><pre><code>super                ：    长按显示启动器快捷信息
super + 数字     ：    启动指定的应用
super + D             ：    显示桌面
super + w         :      所有窗口平铺
super + s         :      显示所有的工作区
super + t         :          打开回收站

alt + prt          ：    对窗口截图
ctrl + h           ：    显示隐藏文件.h开头
shift + prt        ：    选取截图
shift + ctrl + T  :          桌面打开终端（在同一窗口下，新的标签页）
ctrl + w              :          关闭应用

super + c         :          搜索图片
super + v         :          搜索视屏
super + a        :          搜索应用
super + f        :          搜索文件和文件夹
super + m        :           搜索音乐
</code></pre><h2 id="终端运行命令-简洁版"><a href="#终端运行命令-简洁版" class="headerlink" title="终端运行命令(简洁版)"></a>终端运行命令(简洁版)</h2><blockquote>
<p>2016年12月19日10:40:37</p>
</blockquote>
<h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><pre><code>更新        apt-get update
安装        apt-get install 软件名称
卸载        apt-get remove 软件名称 
</code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><pre><code>清屏        clear
vim编辑    vim（vim filename）
</code></pre><h3 id="组"><a href="#组" class="headerlink" title="组"></a>组</h3><pre><code>添加组        groupadd 组名
删除组        groupdel 组名
更改组信息    groupmod 组名
显示当前用户所属组 groups
</code></pre><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><pre><code>查询历史登录         last [用户名]
切换用户               su 用户名
退出切换的用户   exit
相关文件               etc/group,  etc/passwd,  etc/shadow
查看当前用户         w/who
添加用户               useradd  用户名 
删除用户               suerdel  用户名
更改用户信息         usermod  
添加用户到组中    
                        useradd -G 组名 用户名 （G:附加组，用户将创建一个与自己同名的组）
                         useradd -g 组名 用户名 （g：表示用户所加入的主组）
用户修改密码         passwd    用户名
查询id值               id
将用户添加至已存在的组中    usermod -a -G 组名 用户名
更改用户主要所在组        usermod -g 组名 用户名 
</code></pre><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><pre><code>pwd         查看当前目录    
cat         （从第一行开始显示）查看文件内容    
cat [-nTAEv]
tac         （从最后一行开始显示）
nl          （显示时输出行号）
nl [-b{ a, t}n{ln,rn,rz}w ] 
more        （分页显示）
space        向下翻一页
enter         向下翻一行
q              立即退出
:f              立刻显示当前文件名及当前行数
/字符串      在当前显示内容中，向下查询【字符串】
less（同more，可以向前翻页）
/字符串      向上查询
？字符串    向下查询
n            重复前一个查询
N            反向重复前一个查询
q            离开
pagedown 向下翻页
pageuP     向上翻页
head      （仅显示头几行）
head [-n number]  文件
tail（仅显示尾几行）
tail [-n number] 文件
od  （以2进制的方式读取档案）
</code></pre><h3 id="目录与文件查看-ls-aAdfFhilrRSt-目录名-（可以使用×作为匹配符）"><a href="#目录与文件查看-ls-aAdfFhilrRSt-目录名-（可以使用×作为匹配符）" class="headerlink" title="目录与文件查看 ls [-aAdfFhilrRSt] 目录名 （可以使用×作为匹配符）"></a>目录与文件查看 ls [-aAdfFhilrRSt] 目录名 （可以使用×作为匹配符）</h3><pre><code>ls [--color={none,auto,always}] 目录名
ls [--full-time{mtime,ctime,atime}] 目录名
ll == ls -l
ls -a （显示隐藏文件及目录）
pwd -P （返回真实目录，非连接目录）
</code></pre><h3 id="路径切换-cd-文件路径"><a href="#路径切换-cd-文件路径" class="headerlink" title="路径切换        cd 文件路径"></a>路径切换        cd 文件路径</h3><pre><code>cd -  (返回上一个工作目录)
cd ~ （home目录）
cd .. (返回上层文件)
cd ../目录 （同一层目录中前往其他目录）
cd ~用户名 （进入此用户的home目录）
</code></pre><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><pre><code>vim 文件名   （方式1）
touch 文件名(空)     （方式2）
echo “输入内容” &gt; 文件名.后缀    （方式3）
echo “输入内容” &gt;&gt; 文件名.后缀    （方式3: 追加到文件末尾）
sed (在某一行添加)
</code></pre><h3 id="修改文件时间-创建文件"><a href="#修改文件时间-创建文件" class="headerlink" title="修改文件时间+创建文件"></a>修改文件时间+创建文件</h3><pre><code>touch(空)
</code></pre><h3 id="时间分类"><a href="#时间分类" class="headerlink" title="时间分类"></a>时间分类</h3><pre><code>mtime:内容变更时间； ctime：状态时间； atime：接收时间
touch [-mcadt]
</code></pre><h3 id="创建目录-mkdir"><a href="#创建目录-mkdir" class="headerlink" title="创建目录    mkdir"></a>创建目录    mkdir</h3><pre><code>mkdir [-mp] 目录名 （m：权限，p：自动建立多层目录） 
</code></pre><h3 id="删除目录-rmdir"><a href="#删除目录-rmdir" class="headerlink" title="删除目录    rmdir"></a>删除目录    rmdir</h3><pre><code>rmdir [-p] 目录名 （p：当前目录包含多个目录，删除时连同自身删除）仅能删除空目录
rm -rf 目录名 （删除非空目录） 慎用
</code></pre><h3 id="更改组-chgrp"><a href="#更改组-chgrp" class="headerlink" title="更改组    chgrp"></a>更改组    chgrp</h3><pre><code>chgrp [-R] 组名 文件 （R：文件夹递归）
</code></pre><h3 id="更改拥有者-chown"><a href="#更改拥有者-chown" class="headerlink" title="更改拥有者    chown"></a>更改拥有者    chown</h3><pre><code>chown [-R] 用户名 文件
chown [-R] 用户名：组名 文件
</code></pre><h3 id="获取文件名"><a href="#获取文件名" class="headerlink" title="获取文件名"></a>获取文件名</h3><pre><code>basename 目录
</code></pre><h3 id="获取目录"><a href="#获取目录" class="headerlink" title="获取目录"></a>获取目录</h3><pre><code>dirname 目录
</code></pre><h3 id="文件预设权限-umask"><a href="#文件预设权限-umask" class="headerlink" title="文件预设权限     umask"></a>文件预设权限     umask</h3><pre><code>umask [-S] (查看权限预设) 022:表示被‘拿掉的权限’,即：u,g-w,o-w
umask 002 （设置权限）
</code></pre><h3 id="权限的分类"><a href="#权限的分类" class="headerlink" title="权限的分类"></a>权限的分类</h3><pre><code>基本属性 + 隐藏属性 + 特别S属性
</code></pre><h3 id="更改权限属性-chmod"><a href="#更改权限属性-chmod" class="headerlink" title="更改权限属性    chmod"></a>更改权限属性    chmod</h3><pre><code>chmod [-R] 777 文件名
chmod [-R] u=(+/-)rwx,g=(+/-)rwx,o=(+/-)rwx 文件名
</code></pre><h3 id="设定隐藏属性-chattr"><a href="#设定隐藏属性-chattr" class="headerlink" title="设定隐藏属性    chattr"></a>设定隐藏属性    chattr</h3><pre><code>chattr [+-=][ASacdistu] 文件或目录名 (最常用a，i)
chattr +a：表示在原有参数的基础上，追加参数-append，表示只能向文件中添加数据，不能删除,多用于日志。
chattr +i：表示文件不能被删除，改名，设定链接关系，同时不能写入，追加内容。
</code></pre><h3 id="显示隐藏属性-lsattr"><a href="#显示隐藏属性-lsattr" class="headerlink" title="显示隐藏属性    lsattr"></a>显示隐藏属性    lsattr</h3><pre><code>lsattr [-aR] 文件或目录名 
</code></pre><h3 id="SUID-SGID-SBIT-设定"><a href="#SUID-SGID-SBIT-设定" class="headerlink" title="SUID,SGID,SBIT    设定"></a>SUID,SGID,SBIT    设定</h3><pre><code>4：SUID（使用在非目录上）
2：SGID（目录与文件均可）
1：SBIT（使用在非文件上）
e.g. chmod 4755 文件名 结果为：-rwsr-xr-x
</code></pre><h3 id="文件的类型-file"><a href="#文件的类型-file" class="headerlink" title="文件的类型    file"></a>文件的类型    file</h3><pre><code>file 文件路径
</code></pre><h3 id="文件查询"><a href="#文件查询" class="headerlink" title="文件查询"></a>文件查询</h3><pre><code>whereis/locate（通过数据库查询,所以在查询前最好更新数据书库，updatedb文件）
which
</code></pre><p>find不推荐使用（伤硬盘：原理是在硬盘上查找，耗时）<br>使用×匹配文件</p>
<pre><code>which [-a] 文件
whereis [-bmsu] 文件或目录
locate 文件名
</code></pre><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><pre><code>cp 源文件路径 新文件路径 （复制，建立快捷方式，新旧比对，复制目录）
cp [-adfilprsu]
cp 源1，源2…… 目录
</code></pre><h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><pre><code>mv （移动，更名 ）
mv [-fiu]
mv 原文件名 新文件名
mv 文件1，文件2 目录名
</code></pre><h3 id="删除-rm"><a href="#删除-rm" class="headerlink" title="删除        rm"></a>删除        rm</h3><pre><code>rm [-rfi] 目录或文件 (若文件名中含有-，则用‘./’或者‘空格--空格’)
</code></pre><blockquote>
<p>更新 2017年02月04日 星期六 18时34分42秒  查看磁盘空间大小命令</p>
</blockquote>
<h3 id="主要命令："><a href="#主要命令：" class="headerlink" title="主要命令："></a>主要命令：</h3><pre><code>df
</code></pre><h3 id="详细命令："><a href="#详细命令：" class="headerlink" title="详细命令："></a>详细命令：</h3><pre><code>df -hl   : 查看磁盘剩余空间（效果同 df -H）
df -h    : 查看每个根路径的分区大小
du -sh   : [目录名] 返回该目录的大小
du -sm   : [文件夹] 返回该文件夹总M数
fdisk -l : 查看硬盘分区
</code></pre><h3 id="查看ip地址"><a href="#查看ip地址" class="headerlink" title="查看ip地址"></a>查看ip地址</h3><pre><code>ifconfig 
</code></pre><h3 id="查看端口号"><a href="#查看端口号" class="headerlink" title="查看端口号"></a>查看端口号</h3><p>主要命令 ：</p>
<pre><code>netstat
</code></pre><p>查看所有的服务端口:</p>
<pre><code>netstat -a
</code></pre><p>查看所有的服务端口，显示pid号</p>
<pre><code>netstat -ap
</code></pre><p>查看某一（**）端口，则可以结合grep命令：</p>
<pre><code>netstat -ap | grep **
</code></pre><p>如查看**端口，：</p>
<pre><code>lsof -i:**
</code></pre><p>若要停止使用这个端口的程序，使用kill +对应的pid</p>
<pre><code>kill  pid
</code></pre><p>还有一个比较好用的命令，查看**端口：</p>
<pre><code>netstat -lnp | grep ** 
</code></pre><p>查看端口号和运行程序：</p>
<pre><code>netstat -atunp | more
</code></pre><p>查看进程所用端口：</p>
<pre><code>netstat -tlnp|grep **    
</code></pre><h3 id="卸载已经安装的软件"><a href="#卸载已经安装的软件" class="headerlink" title="卸载已经安装的软件"></a>卸载已经安装的软件</h3><p>命令：</p>
<pre><code>dpkg -l | grep appName
apt-get remove appName
</code></pre><h3 id="更新grep命令"><a href="#更新grep命令" class="headerlink" title="更新grep命令"></a>更新grep命令</h3><blockquote>
<p>参考：<a href="http://www.lai18.com/content/24612942.html" target="_blank" rel="external">http://www.lai18.com/content/24612942.html</a></p>
</blockquote>
<p>命令：</p>
<pre><code>是linux中的搜索工具。可以用在搜索条件“过滤”。
</code></pre><p>用法：</p>
<pre><code>grep [选项] PATTERN 
</code></pre><p>参数说明：</p>
<pre><code>[options]
-c：只输出匹配行的计数。 
-i：不区分大 小写(只适用于单字符)。
-h：查询多文件时不显示文件名。
-l：查询多文件时只输出包含匹配字符的文件名。
-n：显示匹配行及行号。
-s：不显示不存在或无匹配文本的错误信息。
-v：排除，不显示过滤的字符串的行；显示不包含匹配文本的所有行。
-E ：过滤多个字符串。
-o ：输出精确匹配的字符而不是默认的整行。
-f ：指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式。
</code></pre><p> Context control：</p>
<pre><code>-B 除了显示匹配的一行之外，并显示该行之前的num行
-A 除了显示匹配的一行之外，并显示该行之后的num行
-C 除了显示匹配的一行之外，并显示该行之前后各num行
grep &quot;String&quot; -B 10 test.txt #显示匹配的String行和String的前10行。
</code></pre><p>pattern正则表达式主要参数：</p>
<pre><code>\：忽略正则表达式中特殊字符的原有含义。
^：匹配正则表达式的开始行。
$: 匹配正则表达式的结束行。
\&lt;：从匹配正则表达 式的行开始。
\&gt;：到匹配正则表达式的行结束。
[ ]：单个字符，如 [Gg]rep 匹配Grep和grep。
[ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求。
[^]：匹配一个不在指定范围内的字符，如：&apos;[^A-FH-Z]rep&apos;匹配不包含A-F和H-Z的一个字母开头，紧跟rep的行。
x\{m\}：重复字符x，m次，如：&apos;0\{5\}&apos;匹配包含5个0的行。
x\{m,\}：重复字符x,至少m次，如：&apos;0\{5,\}&apos;匹配至少有5个0的行。
x\{m,n\}：重复字符x，至少m次，不多于n次，如：&apos;0\{5,10\}&apos;匹配5 -- 10个0的行。 
.：所有的单个字符。
*：有字符，长度可以为0。
</code></pre><h3 id="更新tree命令"><a href="#更新tree命令" class="headerlink" title="更新tree命令"></a>更新tree命令</h3><h4 id="安装-tree"><a href="#安装-tree" class="headerlink" title="安装 tree"></a>安装 tree</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">brew install tree</div><div class="line">```	</div><div class="line"></div><div class="line">**解决 `tree` 不能显示 中文 问题：**</div></pre></td></tr></table></figure>
<p>  tree -N<br>  ```</p>
<h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p>-1. <strong>清单选项</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td> -a</td>
<td>列出所有文件</td>
</tr>
<tr>
<td>  -d</td>
<td>仅列出目录。</td>
</tr>
<tr>
<td>  -l</td>
<td>遵循像目录这样的符号链接。</td>
</tr>
<tr>
<td>  -f</td>
<td>打印每个文件的完整路径前缀。</td>
</tr>
<tr>
<td>  -x</td>
<td>仅保留在当前文件系统上。</td>
</tr>
<tr>
<td>  -L level</td>
<td>层级目录。</td>
</tr>
<tr>
<td>  -R</td>
<td>达到最高等级时重新运行树。</td>
</tr>
<tr>
<td>  -P pattern</td>
<td>仅列出与给定模式相匹配的文件。</td>
</tr>
<tr>
<td>  -I pattern</td>
<td>不要列出与给定模式匹配的文件。</td>
</tr>
<tr>
<td>  –ignore-case</td>
<td>模式匹配时忽略大小写。</td>
</tr>
<tr>
<td>  –matchdirs</td>
<td>在-P模式匹配中包含目录名称。</td>
</tr>
<tr>
<td>  –noreport</td>
<td>关闭树列表末尾的文件/目录计数。</td>
</tr>
<tr>
<td>  –charset X</td>
<td>使用字符集X作为终端/ HTML和缩进行输出。</td>
</tr>
<tr>
<td>  –filelimit＃</td>
<td>不要下载超过＃个文件的dirs。</td>
</tr>
<tr>
<td>  –timefmt <f></f></td>
<td>根据格式<f>打印和格式化时间。</f></td>
</tr>
<tr>
<td>  -o filename</td>
<td>输出到文件而不是标准输出</td>
</tr>
</tbody>
</table>
<p>-2. <strong>文件选项</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>  -q</td>
<td>将不可打印的字符打印为’？’</td>
</tr>
<tr>
<td>  -N</td>
<td>按原样打印不可打印的字符。</td>
</tr>
<tr>
<td>  -Q</td>
<td>用双引号引用文件名。</td>
</tr>
<tr>
<td>  -p</td>
<td>打印每个文件的保护。</td>
</tr>
<tr>
<td>  -u</td>
<td>显示文件所有者或UID号码。</td>
</tr>
<tr>
<td>  -g</td>
<td>显示文件组所有者或GID号码。</td>
</tr>
<tr>
<td>  -s</td>
<td>打印每个文件的字节大小。</td>
</tr>
<tr>
<td>  -h</td>
<td>以更易读的方式打印尺寸。</td>
</tr>
<tr>
<td>  –si</td>
<td>像-h，但在国际单位中使用（幂数为1000）。</td>
</tr>
<tr>
<td>  -D</td>
<td>打印上次修改日期或（-c）状态更改。</td>
</tr>
<tr>
<td>  -F</td>
<td>附加’/‘，’=’，’*’，’@’，’</td>
<td>‘或’&gt;’按照ls -F</td>
</tr>
<tr>
<td>  –inodes</td>
<td>打印每个文件的inode编号</td>
</tr>
<tr>
<td>  –device</td>
<td>打印每个文件所属的设备ID号</td>
</tr>
</tbody>
</table>
<p>-3. <strong>排序选项</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>  -v</td>
<td>按文本字母数字排序文件。</td>
</tr>
<tr>
<td>  -t</td>
<td>按上次修改时间对文件进行排序。</td>
</tr>
<tr>
<td>  -c</td>
<td>按上次状态更改时间对文件进行排序。</td>
</tr>
<tr>
<td>  -U</td>
<td>保留文件未排序。</td>
</tr>
<tr>
<td>  -r</td>
<td>反转排序的顺序。</td>
</tr>
<tr>
<td>  –dirsfirst</td>
<td>列出文件之前的目录（-U禁用）。</td>
</tr>
<tr>
<td>   - sort X</td>
<td>选择排序：名称，版本，大小，mtime，ctime。</td>
</tr>
</tbody>
</table>
<p>-4. <strong>图形选项</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>  -i</td>
<td>不要打印缩进线。</td>
</tr>
<tr>
<td>  -A</td>
<td>打印ANSI线图形缩进线。</td>
</tr>
<tr>
<td>  -S</td>
<td>使用CP437（控制台）图形缩进线打印。</td>
</tr>
<tr>
<td>  -n</td>
<td>始终关闭着色（-C覆盖）。</td>
</tr>
<tr>
<td>  -C</td>
<td>总是打开彩色。</td>
</tr>
</tbody>
</table>
<p>-5. <strong>XML / HTML / JSON选项</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>  -X</td>
<td>打印树的XML表示。</td>
</tr>
<tr>
<td>  -J</td>
<td>打印出树的JSON表示。</td>
</tr>
<tr>
<td>  -H baseHREF</td>
<td>以baseHREF作为顶层目录打印HTML格式。</td>
</tr>
<tr>
<td>  -T</td>
<td>字符串用字符串替换默认的HTML标题和H1标题。</td>
</tr>
<tr>
<td>  –nolinks</td>
<td>关闭HTML输出中的超链接。</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> 系统 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 命令 </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux vim 命令]]></title>
      <url>/Linux%20vim%20%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>Vim使用总结</p>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="vim命令"><a href="#vim命令" class="headerlink" title="vim命令"></a>vim命令</h1><h2 id="vi有3个模式：插入模式、命令模式、低行模式。"><a href="#vi有3个模式：插入模式、命令模式、低行模式。" class="headerlink" title="vi有3个模式：插入模式、命令模式、低行模式。"></a>vi有3个模式：插入模式、命令模式、低行模式。</h2><pre><code>插入模式：在此模式下可以输入字符，按ESC将回到命令模式。
命令模式：可以移动光标、删除字符等。
低行模式：可以保存文件、退出vi、设置vi、查找等功能(低行模式也可以看作是命令模式里的)。
</code></pre><h2 id="打开文件、保存、关闭文件（vi命令模式下使用）"><a href="#打开文件、保存、关闭文件（vi命令模式下使用）" class="headerlink" title="打开文件、保存、关闭文件（vi命令模式下使用）"></a>打开文件、保存、关闭文件（vi命令模式下使用）</h2><pre><code>vi filename     //打开filename文件,文件名称可以不存在
:w           //保存文件
:w filename     //保存至filename文件
:q              //退出编辑器，如果文件已修改请使用下面的命令
:q!            //退出编辑器，且不保存
:wq             //退出编辑器，且保存文件
:wq!        //强制保存内容退出
</code></pre><h2 id="3-插入文本或行（vi命令模式下使用，执行下面命令后将进入插入模式，按ESC键可退出插入模式）"><a href="#3-插入文本或行（vi命令模式下使用，执行下面命令后将进入插入模式，按ESC键可退出插入模式）" class="headerlink" title="3.插入文本或行（vi命令模式下使用，执行下面命令后将进入插入模式，按ESC键可退出插入模式）"></a>3.插入文本或行（vi命令模式下使用，执行下面命令后将进入插入模式，按ESC键可退出插入模式）</h2><pre><code>a              //在当前光标位置的右边添加文本
A             //在当前行的末尾位置添加文本
i           //在当前光标位置的左边添加文本
I              //在当前行的开始处添加文本(非空字符的行首)
O             //在当前行的上面新建一行
o             //在当前行的下面新建一行
R            //替换(覆盖)当前光标位置及后面的若干文本
J            //合并光标所在行及下一行为一行(依然在命令模式)        
</code></pre><h2 id="移动光标（vi命令模式下使用）"><a href="#移动光标（vi命令模式下使用）" class="headerlink" title="移动光标（vi命令模式下使用）"></a>移动光标（vi命令模式下使用）</h2><pre><code>&lt;1&gt;、使用上下左右方向键
&lt;2&gt;、命令模式下：
h          向左、l      向右、j              向下 、k            向上。
Backspace  向左、空格键 向右、Enter  移动到下一行首、-  移动到上一行首。
&lt;3&gt;  $        跳至行末，0        跳至行首
</code></pre><h2 id="删除、恢复字符或行（vi命令模式下使用）"><a href="#删除、恢复字符或行（vi命令模式下使用）" class="headerlink" title="删除、恢复字符或行（vi命令模式下使用）"></a>删除、恢复字符或行（vi命令模式下使用）</h2><pre><code>x             //删除当前字符
nx             //删除从光标开始的n个字符
dd          //删除当前行
ndd           //向下删除当前行在内的n行
d&lt;enter&gt;    //删除光标所在行及下一行(共计删除2行)
u           //撤销上一步操作
U              //撤销对当前行的所有操作        
</code></pre><h2 id="搜索（vi命令模式下使用）"><a href="#搜索（vi命令模式下使用）" class="headerlink" title="搜索（vi命令模式下使用）"></a>搜索（vi命令模式下使用）</h2><pre><code>/vpser         //向光标下搜索vpser字符串
?vpser         //向光标上搜索vpser字符串
n               //向下搜索前一个搜素动作
N             //向上搜索前一个搜索动作        
</code></pre><h2 id="跳至指定行（vi命令模式下使用）"><a href="#跳至指定行（vi命令模式下使用）" class="headerlink" title="跳至指定行（vi命令模式下使用）"></a>跳至指定行（vi命令模式下使用）</h2><pre><code>n            //跳n行
n+            //向下跳n行
n-             //向上跳n行
G               //跳至文件的底部    
gg               //跳至文件顶部        
</code></pre><h2 id="设置行号（vi命令模式下使用）"><a href="#设置行号（vi命令模式下使用）" class="headerlink" title="设置行号（vi命令模式下使用）"></a>设置行号（vi命令模式下使用）</h2><pre><code>:set  nu         //显示行号
:set nonu        //取消显示行号    
</code></pre><h2 id="复制、粘贴（vi命令模式下使用）"><a href="#复制、粘贴（vi命令模式下使用）" class="headerlink" title="复制、粘贴（vi命令模式下使用）"></a>复制、粘贴（vi命令模式下使用）</h2><pre><code>yy            //将当前行复制到缓存区，也可以用 &quot;ayy 复制，&quot;a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。
nyy           //将当前行向下n行复制到缓冲区，也可以用 &quot;anyy 复制，&quot;a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。
yw            //复制从光标开始到词尾的字符。
nyw           //复制从光标开始的n个单词。
y^          //复制从光标到行首的内容。  
y$          //复制从光标到行尾的内容。
p           //粘贴剪切板里的内容在光标后，如果使用了前面的自定义缓冲区，建议使用&quot;ap 进行粘贴。
P            //粘贴剪切板里的内容在光标前，如果使用了前面的自定义缓冲区，建议使用&quot;aP 进行粘贴。
</code></pre><h2 id="替换（vi命令模式下使用）"><a href="#替换（vi命令模式下使用）" class="headerlink" title="替换（vi命令模式下使用）"></a>替换（vi命令模式下使用）</h2><pre><code>:s/old/new          //用new替换行中首次出现的old
:s/old/new/g        //用new替换行中所有的old
:n,m s/old/new/g    //用new替换从n到m行里所有的old
:%s/old/new/g       //用new替换当前文件里所有的old        
</code></pre><h2 id="编辑其他文件"><a href="#编辑其他文件" class="headerlink" title="编辑其他文件"></a>编辑其他文件</h2><pre><code>:e otherfilename        //编辑文件名为otherfilename的文件。
</code></pre><h2 id="修改文件格式"><a href="#修改文件格式" class="headerlink" title="修改文件格式"></a>修改文件格式</h2><pre><code>:set fileformat=unix    //将文件修改为unix格式，如win下面的文本文件在linux下会出现^M。
</code></pre><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><pre><code>当如果不知道自己处在什么模式时可以按:    2次Esc键
即可回到命令模式，会有最后提醒一点：     注意大小写！！！
</code></pre><hr>
<h1 id="Linux中vim编辑注意事项"><a href="#Linux中vim编辑注意事项" class="headerlink" title="Linux中vim编辑注意事项"></a>Linux中vim编辑注意事项</h1><blockquote>
<p>2016年12月17日21:47:04</p>
</blockquote>
<pre><code>Ctrl s：    暂停该终端
Ctrl q：    让终端继续运行
Ctrl c：    中止当前正在执行的程序。
Ctrl d：    相当于exit命令，退出当前会话。
Ctrl z：    将当前运行的程序放到后台运行。与运行时加&amp;类似。
Tab键自动补全命令。
</code></pre><hr>
<h1 id="Linux中Terminal快捷键的使用"><a href="#Linux中Terminal快捷键的使用" class="headerlink" title="Linux中Terminal快捷键的使用"></a>Linux中Terminal快捷键的使用</h1><blockquote>
<p>2017年 01月 09日 星期一 22:21:36 CST</p>
</blockquote>
<h2 id="文件："><a href="#文件：" class="headerlink" title="文件："></a>文件：</h2><pre><code>shift + ctrl + T：    新标签页打开新的终端
shift + ctrl + N：    新的窗口打开新的终端
alt + w            :    关闭终端
alt + Q           :    关闭全部终端
</code></pre><h2 id="编辑："><a href="#编辑：" class="headerlink" title="编辑："></a>编辑：</h2><pre><code>ctrl + C    ：      复制
ctrl + V       ：      粘贴
</code></pre><h2 id="查看："><a href="#查看：" class="headerlink" title="查看："></a>查看：</h2><pre><code>F11            ：      全屏
ctrl + =       :       放大
ctrl + -         ：      缩小
ctrl + 0      ：     正常大小
</code></pre><h2 id="查找："><a href="#查找：" class="headerlink" title="查找："></a>查找：</h2><pre><code>ctrl + F        ：    查找
ctrl + G     ：      查找下一个
ctrl + H        ：      查找上一个
ctrl + J        ：      清除高亮查找
</code></pre><h2 id="标签页："><a href="#标签页：" class="headerlink" title="标签页："></a>标签页：</h2><pre><code>ctrl + pgup       :    向上翻页
ctrl + pgdn       :       向下翻页
shift + ctrl + pgup ：    标签内容移动之左侧标签
shift + ctrl + pgdn ：    标签内容移动之右侧标签
alt +数字        ：    切换至指定的标签页    
</code></pre>]]></content>
      
        <categories>
            
            <category> 系统 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 命令 </tag>
            
            <tag> vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu16.04安装记录]]></title>
      <url>/Ubuntu16.04%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>以下省略“sudo”命令表示是在root权限下运行的</p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<h2 id="ubuntu16-04使用参考网址"><a href="#ubuntu16-04使用参考网址" class="headerlink" title="ubuntu16.04使用参考网址"></a>ubuntu16.04使用参考网址</h2><blockquote>
<p> Linux使用设置 &gt;&gt;网页<br>    <a href="http://m.blog.csdn.net/article/details?id=51049513" target="_blank" rel="external">http://m.blog.csdn.net/article/details?id=51049513</a><br> Linux命令大全 &gt;&gt;网页<br>    <a href="http://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="external">http://www.runoob.com/linux/linux-command-manual.html</a><br> Linux命令大全–支持在线搜寻<br>    <a href="http://man.linuxde.net/" target="_blank" rel="external">http://man.linuxde.net/</a><br> 文档手册中心 –ChinaUnix &gt;&gt;网页<br>    <a href="http://man.chinaunix.net/" target="_blank" rel="external">http://man.chinaunix.net/</a><br> Linux Kernel –ChinaUnix &gt;&gt;网页<br>    <a href="http://man.chinaunix.net/tech/lyceum/linuxK/tlk.html" target="_blank" rel="external">http://man.chinaunix.net/tech/lyceum/linuxK/tlk.html</a><br> Linux Git使用 &gt;&gt;网页<br>    <a href="http://v.youku.com/v_show/id_XNzgwOTk0NDQw.html?f=22842023&amp;spm=a2hzp.8244740.0.0&amp;from=y1.7-1.1" target="_blank" rel="external">http://v.youku.com/v_show/id_XNzgwOTk0NDQw.html?f=22842023&amp;spm=a2hzp.8244740.0.0&amp;from=y1.7-1.1</a></p>
</blockquote>
<p>以下省略“sudo”命令表示是在root权限下运行的</p>
<h2 id="root登录"><a href="#root登录" class="headerlink" title="root登录"></a>root登录</h2><ol>
<li><p>先设定一个root的密码：</p>
<pre><code>sudo passwd root
</code></pre></li>
<li><p>root 登陆：</p>
<pre><code>su root
cp -p /etc/lightdm/lightdm.conf /etc/lightdm/lightdm.conf.bak
vi /etc/lightdm/lightdm.conf
</code></pre></li>
<li><p>在lightdm.conf最后增加一行：</p>
<pre><code>greeter-show-manual-login=true
</code></pre></li>
<li><p>重启后，即可用root登入。</p>
</li>
</ol>
<h2 id="系统没有声音"><a href="#系统没有声音" class="headerlink" title="系统没有声音"></a>系统没有声音</h2><p>Ubuntu在root用户下，为了安全考虑默认关闭系统的声音。</p>
<ol>
<li><p>将root加到pulse和pulse-access组：</p>
<pre><code>usermod -a -G pulse-access root
gpasswd -a root pulse
gpasswd -a root pulse-access
</code></pre></li>
<li><p>编辑/etc/default/pulseaudio文件</p>
<pre><code>cp -p /etc/default/pulseaudio/etc/default/pulseaudio.bak
vim /etc/default/pulseaudio
</code></pre></li>
<li><p>修改以下两处</p>
<pre><code>PULSEAUDIO_SYSTEM_START=1
DISALLOW_MODULE_LOADING=0
</code></pre></li>
<li><p>改为1和0，表示允许运行在system环境，允许动态加载模块。</p>
</li>
<li>重启计算机</li>
</ol>
<h2 id="有声音但在“系统设置”中无法调节声音："><a href="#有声音但在“系统设置”中无法调节声音：" class="headerlink" title="有声音但在“系统设置”中无法调节声音："></a>有声音但在“系统设置”中无法调节声音：</h2><ol>
<li><p>运行：</p>
<pre><code>gedit /root/.profile
</code></pre></li>
<li><p>在文件的最后添加：</p>
<pre><code>pulseaudio --start --log-target=syslog
</code></pre></li>
<li><p>当在“系统设置”中出现“伪声音”时，且无法实际调节声音时：</p>
<pre><code>apt install pavucontrol
pavucontrol
</code></pre></li>
</ol>
<h2 id="系统正常耳机没有声音"><a href="#系统正常耳机没有声音" class="headerlink" title="系统正常耳机没有声音"></a>系统正常耳机没有声音</h2><blockquote>
<p>参考网址：<a href="http://www.linuxdiyf.com/linux/25529.html" target="_blank" rel="external">http://www.linuxdiyf.com/linux/25529.html</a></p>
</blockquote>
<ol>
<li><p>终端运行</p>
<pre><code>alsamixer
</code></pre></li>
<li><p>按M键把关闭的都大开（关闭的都显示的是MM），然后调节到合适的位置，白色为宜</p>
</li>
<li>最后一项Independ显示为ON表示耳机和音箱只能有一个有声音，按M键关闭则表示耳机和音箱可以同时有声音 （–未进行测试–）</li>
<li><p>若耳机还是没声音，可是试着运行</p>
<pre><code>gedit /etc/modprobe.d/alsa-base.conf
</code></pre></li>
<li><p>在最后一行加入</p>
<pre><code>#enable headphoneoptions snd-hda-intel power_save=10 power_save_controller=N model=6stack-dig
</code></pre></li>
<li><p>然后运行</p>
<pre><code>apt-get remove alsa-base
</code></pre></li>
<li><p>然后重启</p>
<pre><code>shutdown -r now
</code></pre></li>
<li><p>重启后运行</p>
<pre><code>apt-get install alsa-base
</code></pre></li>
</ol>
<h2 id="ubuntu16-04系统字体变成方框问题"><a href="#ubuntu16-04系统字体变成方框问题" class="headerlink" title="ubuntu16.04系统字体变成方框问题"></a>ubuntu16.04系统字体变成方框问题</h2><p>进入到字体的目录下/usr/share/fonts/，输入下面的命令：</p>
<pre><code>cd /usr/share/fonts/
</code></pre><h2 id="制作ubuntu16-04app启动图标"><a href="#制作ubuntu16-04app启动图标" class="headerlink" title="制作ubuntu16.04app启动图标"></a>制作ubuntu16.04app启动图标</h2><blockquote>
<p>2016年12月15日15:40:42</p>
</blockquote>
<ol>
<li><p>在文件所在目录下新建一个Studio.desktop文件,并用gedit打开,然后将下面的内容复制进去并修改.</p>
<pre><code>[Desktop Entry]
Name=应用的名称
Type=Application（不改）
Icon=你的AndroidStudio解压目录的绝对路径/android-studio/bin/studio.png
Exec=sh 你的AndroidStudio解压目录的绝对路径/android-studio/bin/studio.sh
</code></pre></li>
<li><p>保存退出(注意：每一行后面都不能有空格,否则失败)</p>
</li>
<li>右键该文件–&gt;属性–&gt;权限–&gt;选择“允许作为程序执行文件”,此时发现图标变了,双击打开App</li>
</ol>
<h2 id="安装ADB"><a href="#安装ADB" class="headerlink" title="安装ADB"></a>安装ADB</h2><blockquote>
<p>2017年01月30日 星期一 15时57分56秒<br> 参考：<br>    <a href="http://www.itdadao.com/articles/c15a299707p0.html" target="_blank" rel="external">http://www.itdadao.com/articles/c15a299707p0.html</a><br>    <a href="http://www.jianshu.com/p/8768e5bccfa8" target="_blank" rel="external">http://www.jianshu.com/p/8768e5bccfa8</a></p>
</blockquote>
<ol>
<li><p>若apt-get install 失败：</p>
<pre><code>sudo add-apt-repository  ppa:phablet-team/tools (原始ppa更好)
sudo apt-get update
sudo apt-get install android-tools-adb
</code></pre></li>
<li><p>出现异常：</p>
<pre><code>E: 无法获得锁 /var/lib/dpkg/lock – open (11: 资源临时不可用)
E: 无法对管理目录(/var/lib/dpkg/)加锁，是不是另一个包管理程序在使用它？
</code></pre></li>
</ol>
<p>解决办法：</p>
<pre><code>删除有问题的文件
</code></pre><h2 id="安装-JDK-Eclipse-Apache-Tomcat"><a href="#安装-JDK-Eclipse-Apache-Tomcat" class="headerlink" title="安装 JDK + Eclipse + Apache Tomcat"></a>安装 JDK + Eclipse + Apache Tomcat</h2><blockquote>
<p>2016年12月14日15:32:34<br>以下省略“sudo”命令表示是在root权限下运行的</p>
</blockquote>
<h3 id="JDK8"><a href="#JDK8" class="headerlink" title="JDK8"></a>JDK8</h3><ol>
<li><p>（下载地址）</p>
<pre><code>http://download.oracle.com/otn-pub/java/jdk/8u111-b14/jdk-8u111-linux-x64.tar.gz
</code></pre></li>
<li><p>在所在的文件夹目录下，可以直接打开terminal，跳过以下两句操作，直接进行环境配置</p>
<pre><code>cd /Downloads
tar -zxvf jdk-8u101-linux-x64.tar.gz
</code></pre></li>
</ol>
<p>3.配置环境变量</p>
<pre><code>gedit /etc/profile
</code></pre><ol>
<li><p>在文件末尾添加以下内容：</p>
<pre><code>export JAVA_HOME=/home/lt/Java/jdk1.8.0_101(你的Jdk目录)
export PATH=$JAVA_HOME/bin:$PATH
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
</code></pre></li>
<li><p>更新文件（必须执行）</p>
<pre><code>source /etc/profile
</code></pre></li>
<li><p>notice！若在终端中出现:程序 ‘javac’ 已包含在下列软件包中：</p>
<pre><code>update-alternatives --install /usr/bin/javac javac /root/文档/jdk1.8.0_112/bin/javac 300
update-alternatives --install /usr/bin/java java /root/文档/jdk1.8.0_112/bin/java 300
</code></pre></li>
</ol>
<h3 id="Eclipse（eclipse安装工具）"><a href="#Eclipse（eclipse安装工具）" class="headerlink" title="Eclipse（eclipse安装工具）"></a>Eclipse（eclipse安装工具）</h3><ol>
<li><p>（下载地址）</p>
<pre><code>https://www.eclipse.org/downloads/download.php?file=/oomph/epp/neon/R/eclipse-inst-linux64.tar.gz
</code></pre></li>
<li><p>解压</p>
<pre><code>tar -zxcf eclipse-inst-linux64.tar.gz
</code></pre></li>
<li>进入解后目录下,双击eclipse.inst运行安装程序</li>
<li><p>若有安装错误执行</p>
<pre><code>mkdir jre
cd jre
ln -s （你的JDK目录/bin bin）
</code></pre></li>
</ol>
<h3 id="Tomcat9"><a href="#Tomcat9" class="headerlink" title="Tomcat9"></a>Tomcat9</h3><ol>
<li><p>（下载地址）</p>
<pre><code>http://tomcat.apache.org/download-90.cgi
</code></pre></li>
<li><p>在所在的文件夹目录下，可以直接打开terminal，跳过以下两句操作，直接进行环境配置</p>
<pre><code>cd Downloads/
unzip apache-tomcat-9.0.0.M9.zip
</code></pre></li>
<li><p>配置环境变量：</p>
<pre><code>export CATLINA_HOME=/home/lt/Java/apache-tomcat-9.0.0.M9（文件所在路径）
sourse /etc/profile
</code></pre></li>
</ol>
<h2 id="安装MySQL-WorkBrench"><a href="#安装MySQL-WorkBrench" class="headerlink" title="安装MySQL+WorkBrench"></a>安装MySQL+WorkBrench</h2><blockquote>
<p>2016年12月15日15:54:09<br> 以下省略“sudo”命令表示是在root权限下运行的</p>
</blockquote>
<h3 id="ubuntu16-04安装mysql5-7"><a href="#ubuntu16-04安装mysql5-7" class="headerlink" title="ubuntu16.04安装mysql5.7"></a>ubuntu16.04安装mysql5.7</h3><p>未用sudo apt-get update<br>未用sudo apt-get upgrade</p>
<pre><code>apt-get install mysql-server mysql-client
apt-get install libmysqlclient-dev
</code></pre><p> 自动安装会装上5.7的client端，中间会弹出提示框输入root的密码<br> 安装完成之后检查是否成功。socket处于 listen 状态则表示安装成功</p>
<pre><code>netstat -tap | grep mysql
</code></pre><p>未用sudo groupadd mysql<br>未用sudo useradd -r -g mysql mysql</p>
<p>修改密码<br> 未用sudo /usr/bin/mysqladmin -u root password</p>
<p> 登陆mysql数据库可以通过如下命令：</p>
<pre><code>mysql -u root -p
-u 用户名， -p 用户密码，输入后提示输入密码，此时输入密码就可以登录到mysql
</code></pre><h3 id="安装客户端"><a href="#安装客户端" class="headerlink" title="安装客户端"></a>安装客户端</h3><pre><code>apt-get install mysql-workbench
</code></pre><h2 id="安装RabbitVCS"><a href="#安装RabbitVCS" class="headerlink" title="安装RabbitVCS"></a>安装RabbitVCS</h2><blockquote>
<p>2017年02月06日 星期一 14时04分24秒<br>参考：<a href="http://blog.csdn.net/catshitone/article/details/48022315" target="_blank" rel="external">http://blog.csdn.net/catshitone/article/details/48022315</a></p>
</blockquote>
<p><em>注：</em><br>    安装完毕后，注销LogOut，重新登录，在文件夹和文件夹内点击鼠标右键就用RabbitVCS操作工具了。<br>    如果不能正常运行则输入：</p>
<pre><code>sudo apt-get install python-nautilus python-configobj python-gtk2 python-glade2 python-svn python-dbus python-dulwich subversion meld
</code></pre><p>再次更新软件包库：</p>
<pre><code>sudo apt-get update
</code></pre><p>注销LogOut，重新登录即可。</p>
<h2 id="安装Terminator"><a href="#安装Terminator" class="headerlink" title="安装Terminator"></a>安装Terminator</h2><blockquote>
<p>2017年02月06日 星期一 15时53分34秒<br>参考：<br>    <a href="http://www.jianshu.com/p/cee2de32ca28" target="_blank" rel="external">http://www.jianshu.com/p/cee2de32ca28</a></p>
</blockquote>
<ol>
<li><p>安装：</p>
<pre><code>apt-get install terminator
</code></pre></li>
<li><p>卸载：</p>
<pre><code>apt-get remove terminator
</code></pre></li>
</ol>
<ol>
<li><p>快捷键(自定义之后的):</p>
<pre><code>水平分割终端  : Ctrl+O
垂直分割终端  : Ctrl+E
搜索         : Ctrl+F
复制         : Ctrl+C
粘贴         : Ctrl+V
clear屏幕    : Ctrl+G
关闭当前终端  : Ctrl+W
退出当前窗口  : Ctrl+Q
变化当前窗口位置 ：super+R
全屏状态           : F11
在垂直分割的终端中将分割条向右移动 :Ctrl+Right
在垂直分割的终端中将分割条向左移动 :Ctrl+Left
隐藏/显示滚动条 :Ctrl+Shift+S
</code></pre></li>
</ol>
<ol>
<li><p>配置文件（可参考）：</p>
<pre><code>[global_config]
  handle_size = -3
  enabled_plugins = CustomCommandsMenu, LaunchpadCodeURLHandler, APTURLHandler, LaunchpadBugURLHandler
  title_transmit_fg_color = &quot;#000000&quot;
  suppress_multiple_term_dialog = True
  title_transmit_bg_color = &quot;#3e3838&quot;
  inactive_color_offset = 1.0
[keybindings]
[profiles]
  [[default]]
    palette = &quot;#000000:#5a8e1c:#2d5f5f:#cdcd00:#1e90ff:#cd00cd:#00cdcd:#e5e5e5:#4c4c4c:#868e09:#00ff00:#ffff00:#4682b4:#ff00ff:#00ffff:#ffffff&quot;
    background_image = &quot;&quot;
    background_darkness = 0.68
    scrollback_lines = 3000
    background_type = transparent
    use_system_font =
    scroll_background = False
    show_titlebar = False
    cursor_shape = ibeam
    font = Liberation Mono 12
    background_color = &quot;#0e2424&quot;
    foreground_color = &quot;#e8e8e8&quot;
[layouts]
  [[default]]
    [[[child1]]]
      type = Terminal
      parent = window0
      profile = default
    [[[window0]]]
      type = Window
      parent = &quot;&quot;
      size = 925, 570
[plugins]
</code></pre></li>
</ol>
<h2 id="ubuntu安装Wine"><a href="#ubuntu安装Wine" class="headerlink" title="ubuntu安装Wine"></a>ubuntu安装Wine</h2><blockquote>
<p>参考：<a href="http://www.ubuntukylin.com/ukylin/forum.php?mod=viewthread&amp;tid=27068" target="_blank" rel="external">http://www.ubuntukylin.com/ukylin/forum.php?mod=viewthread&amp;tid=27068</a></p>
</blockquote>
<ol>
<li><p>安装源</p>
<pre><code>sudo add-apt-repository ppa:wine/wine-builds
sudo apt-get update
</code></pre></li>
<li><p>安装wine</p>
<pre><code>apt-get install wine1.8
</code></pre></li>
<li><p>卸载wine<br>  1).卸载wine主程序，在终端里输入：</p>
<pre><code>sudo apt-get remove --purge wine
</code></pre><p>  2).然后删除wine的目录文件：</p>
<pre><code>rm -r ~/.wine
</code></pre><p>  3).卸载残留不用的软件包：</p>
<pre><code>sudo apt-get autoremove
</code></pre></li>
<li><p>终端中输入wine，检测是否安装完成</p>
</li>
</ol>
<h2 id="ubuntu安装WebStorm"><a href="#ubuntu安装WebStorm" class="headerlink" title="ubuntu安装WebStorm"></a>ubuntu安装WebStorm</h2><blockquote>
<p>2017年02月16日 星期四 12时31分00秒<br> 参考：<a href="https://quanru.github.io/2016/04/17/%E4%BD%BF%E7%94%A8%20Linux%20%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91Web%E5%89%8D%E7%AB%AF/" target="_blank" rel="external">https://quanru.github.io/2016/04/17/%E4%BD%BF%E7%94%A8%20Linux%20%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91Web%E5%89%8D%E7%AB%AF/</a><br>webstorm使用快捷键参考：<br>    <a href="http://blog.csdn.net/zghekuiwu/article/details/54382145" target="_blank" rel="external">http://blog.csdn.net/zghekuiwu/article/details/54382145</a><br>    <a href="https://github.com/damao/Intellij-IDEA-F2E#%E6%B3%A8%E5%86%8C" target="_blank" rel="external">https://github.com/damao/Intellij-IDEA-F2E#%E6%B3%A8%E5%86%8C</a></p>
</blockquote>
<ol>
<li><p>下载：</p>
<pre><code>http://www.jetbrains.com/webstorm/index.html
</code></pre></li>
<li><p>解压下载的 gz 包，在bin/下运行：</p>
<pre><code>./webstorm.sh
</code></pre></li>
<li><p>WebStorm 默认情况下是需要收费的，可以申请为开源项目的贡献者来获得 licenses。</p>
</li>
<li>安装完成后，在 File - Settings - Plugins，选择需要安装的插件，例如 AngularJS、Markdown 等。</li>
<li>在 File - Settings - Directories 下，通过 Add content Root 来设置我们的项目路径</li>
<li>在 File - Settings - JavaScript - Libraries 下，勾选想要支持的库，建议全部勾上（如 NodeJS）。</li>
<li>在 File - Settings - Editor - Colors &amp; Fonts - Font 下，选择自己想要的主题， 然后 Save as… 保存自己想要的主题名称，设置字体为Ubuntu Mono， 字体设置为 16（貌似有点小，相当于 Eclipse 下的 12）</li>
<li>在 File - Settings - Appearance 下，勾选 Show line numbers 选项。</li>
<li><p>破解方式：选择line server 方式，输入：</p>
<pre><code>http://idea.iteblog.com/key.php
</code></pre></li>
</ol>
<h2 id="安装ubuntu主题"><a href="#安装ubuntu主题" class="headerlink" title="安装ubuntu主题"></a>安装ubuntu主题</h2><blockquote>
<p>2016年12月15日14:54:25</p>
</blockquote>
<ol>
<li><p>安装主题管理工具：</p>
<pre><code>apt-get install unity-tweak-tool
</code></pre></li>
<li><p>安装主题</p>
<pre><code>apt-add-repository ppa:numix/ppa
apt-get update
apt-get install numix-icon-theme-circle        //安装图标
apt-get install numix-gtk-theme            //安装主题
</code></pre><p> 　</p>
</li>
<li>安装docky（Mac桌面下方的启动器）</li>
<li><blockquote>
<p>参考网址：<a href="http://www.aichengxu.com/view/992905" target="_blank" rel="external">http://www.aichengxu.com/view/992905</a><br>参考网址：<a href="http://www.noobslab.com/2014/11/mbuntu-macbuntu-1410-transformation.html" target="_blank" rel="external">http://www.noobslab.com/2014/11/mbuntu-macbuntu-1410-transformation.html</a></p>
</blockquote>
<pre><code>install docky
add-apt-repository ppa:docky-core/ppa
apt-get update
apt-get install docky
apt-get remove docky docky
</code></pre></li>
</ol>
<h2 id="安装XX-Net"><a href="#安装XX-Net" class="headerlink" title="安装XX-Net"></a>安装XX-Net</h2><blockquote>
<p>2017年02月04日 星期六 17时17分36秒</p>
</blockquote>
<ol>
<li>安装xx-net</li>
<li>安装firefox或者chrome</li>
<li><p>设置：</p>
<pre><code>  系统设置 --&gt; 网络 --&gt; 网络代理 --&gt;
  方法：自动
配置：http://127.0.0.1:8086/proxy.pac
全局配置
</code></pre></li>
<li><p>重点：<br> 此项目来自GitHub，可以直接clone到本地<br> 需要使用到Google AppID，以此进行服务器部署，以达到真正上网的目的</p>
</li>
</ol>
<h2 id="使用host科学上网"><a href="#使用host科学上网" class="headerlink" title="使用host科学上网"></a>使用host科学上网</h2><p>2016年12月15日16:04:07<br>使用host文件进行翻墙</p>
<blockquote>
<p>参考链接：<a href="https://laod.cn/hosts/2016-google-hosts.html" target="_blank" rel="external">https://laod.cn/hosts/2016-google-hosts.html</a></p>
</blockquote>
<h2 id="安装sbulime-text3"><a href="#安装sbulime-text3" class="headerlink" title="安装sbulime text3"></a>安装sbulime text3</h2><p>2017年 01月 28日 星期六 15:05:31 CST</p>
<blockquote>
<p>安装参考：<br>    <a href="http://www.cnblogs.com/unflynaomi/p/5704293.html" target="_blank" rel="external">http://www.cnblogs.com/unflynaomi/p/5704293.html</a></p>
</blockquote>
<ol>
<li>汉化，中文输入问题参考：<br> <a href="http://blog.csdn.net/u013453604/article/details/48002127" target="_blank" rel="external">http://blog.csdn.net/u013453604/article/details/48002127</a></li>
<li>汉化，无法输入中文资源：<br> <a href="http://download.csdn.net/detail/u013453604/9049633" target="_blank" rel="external">http://download.csdn.net/detail/u013453604/9049633</a></li>
<li>不能输入中文问题参考：<br> <a href="http://www.cnblogs.com/mo-wang/p/5120484.html（步骤不全，修改的内容全面）" target="_blank" rel="external">http://www.cnblogs.com/mo-wang/p/5120484.html（步骤不全，修改的内容全面）</a><br> <a href="http://www.liuqianfei.com/article/3e51f07d254b464995b0f4c94cc1d69c（步骤全面）" target="_blank" rel="external">http://www.liuqianfei.com/article/3e51f07d254b464995b0f4c94cc1d69c（步骤全面）</a></li>
<li>配置java，python，markdown：<br> <a href="http://www.jianshu.com/p/58bf9e4d5b32" target="_blank" rel="external">http://www.jianshu.com/p/58bf9e4d5b32</a></li>
<li><p>安装步骤：</p>
<pre><code>sudo add-apt-repository ppa:webupd8team/sublime-text-3
sudo apt-get update
sudo apt-get install sublime-text-installer
</code></pre></li>
<li><p>安装：python3</p>
<pre><code>apt install python3-pip
</code></pre></li>
<li><p>卸载 sublime text 命令：</p>
<pre><code>sudo apt-get remove sublime-text-installer
</code></pre></li>
<li><p>启动sublime text3<br> 在terminal终端中输入：subl</p>
</li>
<li>打开指定的文件：<br> subl 文件名</li>
<li><p>解决sublime无法输入中文的问题<br>在进行所有操作时首先进行依赖包的安装：<br>代码依赖于 gtk 2.0，编译 c 需要安装 build-essential。</p>
<pre><code>sudo apt-get install build-essential libgtk2.0-dev
</code></pre></li>
<li><p>如果路径中含有空格，你必须使用双引号将路径括起来：</p>
<pre><code>$ subl &amp;quot;~/Documents/test/my test file.txt&amp;quot;
</code></pre></li>
<li><p>解决无法输入中文问题 - 2017年03月12日 星期日 15时17分24秒 </p>
</li>
<li><blockquote>
<p>参考：<a href="http://www.jianshu.com/p/03a9092c73e2" target="_blank" rel="external">http://www.jianshu.com/p/03a9092c73e2</a><br>亲测有效！</p>
</blockquote>
</li>
<li><p>解决事件输入问题</p>
<blockquote>
<p>参考：<a href="https://my.oschina.net/antsky/blog/491146" target="_blank" rel="external">https://my.oschina.net/antsky/blog/491146</a></p>
</blockquote>
</li>
</ol>
<h2 id="WPS字体缺失"><a href="#WPS字体缺失" class="headerlink" title="WPS字体缺失"></a>WPS字体缺失</h2><ol>
<li><p>下载缺失的字体文件，然后复制到Linux系统中的/usr/share/fonts文件夹中。</p>
<pre><code>国外下载地址：https://www.dropbox.com/s/lfy4hvq95ilwyw5/wps_symbol_fonts.zip
国内下载地址：https://pan.baidu.com/s/1eS6xIzosudo cp * /usr/share/fonts
</code></pre></li>
<li><p>执行以下命令,生成字体的索引信息：</p>
<pre><code>sudo mkfontscale
sudo mkfontdir
</code></pre></li>
<li><p>运行fc-cache命令更新字体缓存。</p>
<pre><code>sudo fc-cache
</code></pre></li>
<li><p>重启wps即可，字体缺失的提示不再出现。</p>
</li>
<li><p>WPS不能输入中文问题</p>
</li>
</ol>
<blockquote>
<p>参考:<a href="http://forum.ubuntu.org.cn/viewtopic.php?f=48&amp;t=476937" target="_blank" rel="external">http://forum.ubuntu.org.cn/viewtopic.php?f=48&amp;t=476937</a><br>原因：环境变量未正确设置，以上可以直接针对wps设置。</p>
</blockquote>
<p>解决办法,终端输入:</p>
<pre><code>gedit /usr/bin/wps
</code></pre><p>在此文件中输入一下内容,#!/bin/bash之后:</p>
<pre><code>export XMODIFIERS=&quot;@im=fcitx&quot;
export QT_IM_MODULE=&quot;fcitx&quot;
</code></pre><h2 id="安装WeChat"><a href="#安装WeChat" class="headerlink" title="安装WeChat"></a>安装WeChat</h2><blockquote>
<p>2016年12月13日22:43:53</p>
</blockquote>
<ol>
<li><p>安装linux微信：</p>
<blockquote>
<p>下载地址:<a href="https://github.com/geeeeeeeeek/electronic-wechat/releases" target="_blank" rel="external">https://github.com/geeeeeeeeek/electronic-wechat/releases</a></p>
</blockquote>
<pre><code>apt-get install git
git clone https://github.com/geeeeeeeeek/electronic-wechat.git
cd electronic-wechat
apt-get install npm
apt-get install nodejs-legacy
npm install &amp;&amp; npm start
</code></pre></li>
<li><p>官方推荐的安装方法：<br> To clone and run this repository you’ll need Git and Node.js (which comes with npm) installed on your computer. From your command line:<br> Clone this repository<br> git clone <a href="https://github.com/geeeeeeeeek/electronic-wechat.git#" target="_blank" rel="external">https://github.com/geeeeeeeeek/electronic-wechat.git#</a> Go into the repositorycd electronic-wechat# Install dependencies and run the app<br> npm install &amp;&amp; npm start<br> To pack into an app, simply type one of these:<br> npm run build:osx<br> npm run build:linux</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 系统 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 命令 </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Alias 的使用]]></title>
      <url>/Alias%20%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>所有命令均在ubuntu16.04环境下完成，在不同环境下可能会有差异</p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="alias介绍"><a href="#alias介绍" class="headerlink" title="alias介绍"></a>alias介绍</h1><p>alias用于自定义快捷命令，避免总是使用相同的，重复的，冗长的命令来执行操作</p>
<h1 id="alias的用法"><a href="#alias的用法" class="headerlink" title="alias的用法"></a>alias的用法</h1><p>1.添加新的自定义快捷方式</p>
<pre><code>alias  自定义新名字=&quot;操作命令&quot;
</code></pre><p>示例：将进入文档目录的命令定义为 cdd 新命令</p>
<pre><code>alias cdd=&quot;cd /root/文档/&quot;
</code></pre><p>2.删除自定义的快捷方式：</p>
<pre><code>unalias 自定义新名字
</code></pre><p>示例：删除 cdd 新命令</p>
<pre><code>unalias cdd
</code></pre><p>3.查询自定义快捷方式：</p>
<pre><code>alias
</code></pre><h1 id="alias的存储"><a href="#alias的存储" class="headerlink" title="alias的存储"></a>alias的存储</h1><p><strong>注：</strong></p>
<pre><code>若不保存在文件中，则只能在当前的`terminal`中使用,只有保存到文件中后才能供以后继续使用
</code></pre><h2 id="来自～-bashrc文档的介绍"><a href="#来自～-bashrc文档的介绍" class="headerlink" title="来自～/.bashrc文档的介绍"></a>来自～/.bashrc文档的介绍</h2><blockquote>
<p>Alias definitions.<br>You may want to put all your additions into a separate file like<br> ~/.bash_aliases, instead of adding them here directly.<br> See /usr/share/doc/bash-doc/examples in the bash-doc package.</p>
</blockquote>
<ol>
<li><p>使用以下方式，将自定义的快捷键存入系统已有文件中。此文件位于/root/下:</p>
<pre><code>vim ~/.bashrc
</code></pre></li>
<li><p>使用以下方式，将自定义的快捷键存入”指定”的新文件中。此文件位于/root/下:</p>
<pre><code>vim ~/.bash_aliases
</code></pre></li>
</ol>
<p><strong>注：</strong><br>    对于以上两中方式，必须使用：<br>        source ~/.bash_aliases<br>    命令更新文件，否则自定义快捷键将不会被找到，无法起作用。</p>
<h1 id="个人快捷命令组合："><a href="#个人快捷命令组合：" class="headerlink" title="个人快捷命令组合："></a>个人快捷命令组合：</h1><blockquote>
<p>ls 查询字段释义：<a href="http://blog.csdn.net/sjzs5590/article/details/8254527" target="_blank" rel="external">http://blog.csdn.net/sjzs5590/article/details/8254527</a><br>更多详细使用参考：用户目录下的 <code>.bash_profile</code></p>
</blockquote>
<pre><code># Alias
alias ll=&apos;ls -lh -G&apos;
alias la=&quot;ls -lah -G&quot;

# 显示size
alias lls=&apos;ls -lSGh&apos;
alias las=&quot;ls -laSGh&quot;

# 显示行号
alias lln=&apos;ls -lh | nl&apos;
alias lan=&quot;ls -lah | nl&quot;

alias llns=&apos;ls -lSh | nl&apos;
alias lans=&quot;ls -laSh | nl&quot;

alias grep=&apos;grep --color&apos;

# Hexo
alias ohb=&apos;open &quot;/Users/yannischeng/Documents/HexoBLog&quot;&apos;
alias ohbs=&apos;open &quot;/Users/yannischeng/Documents/HexoBLog/source/_posts&quot;&apos;

alias chbl=&apos;cd &quot;/Users/yannischeng/Documents/HexoBLog&quot;&apos;
alias chbsl=&apos;cd &quot;/Users/yannischeng/Documents/HexoBLog/source/_posts&quot;&apos;


# python project
alias opp=&apos;open /Users/yannischeng/PycharmProjects/First_Python_Project&apos;
alias cppl=&apos;cd /Users/yannischeng/PycharmProjects/First_Python_Project&apos;


# .bash_profile
alias sup=&apos;source .bash_profile&apos;
alias oup=&apos;open /Users/yannischeng/.bash_profile&apos;
alias cupl=&apos;cd /Users/yannischeng/&apos;


# open app
alias om=&apos;open /Applications/MWeb.app&apos;
alias oas=&apos;open /Applications/&quot;Android Studio&quot;.app&apos;
alias osb=&apos;open /Applications/&quot;Sublime Text&quot;.app&apos;
alias ogc=&apos;open /Applications/&quot;Google Chrome&quot;.app&apos;
alias opc=&apos;open /Applications/PyCharm.app&apos;
alias owc=&apos;open /Applications/WeChat.app&apos;
alias od=&apos;open /Applications/Dictionary.app&apos;
alias owm=&apos;open /Applications/NeteaseMusic.app&apos;

# login mysql
alias lms=&apos;mysql -u root -p&apos;

# mytree
alias mtree=&quot;find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;&quot;
</code></pre>]]></content>
      
        <categories>
            
            <category> 系统 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 命令 </tag>
            
            <tag> vim </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
