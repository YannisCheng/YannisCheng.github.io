<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[抽象工厂模式]]></title>
      <url>/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[工厂模式]]></title>
      <url>/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从pizza生产中使用的<code>简单工厂方法</code>到pizzaStore中使用pizzaStore子类来生产属于自己店的pizza🍕，来理解<code>工厂方法模式</code>。</p>
<a id="more"></a>
<h1 id="“工厂模式”关键点："><a href="#“工厂模式”关键点：" class="headerlink" title="“工厂模式”关键点："></a>“工厂模式”关键点：</h1><ul>
<li>封装对象创建   </li>
<li>子类中实现对象创建</li>
</ul>
<h1 id="工厂模式预热"><a href="#工厂模式预热" class="headerlink" title="工厂模式预热"></a>工厂模式预热</h1><p>pizza总店提供了<code>createPizza()</code>和<code>orderPizza(String type)</code>供它的加盟店使用。但是加盟店并不想生产固定种类的pizza，想要在继续沿袭总店订单模式<code>orderPizza(String type)</code>的基础上，通过<code>createPizza()</code>突出自己的pizza特色。</p>
<p>所以需要一个框架：让pizza的制作活动局限于PizzaStore类，同时又能让加盟店可以自由的创作处自己的口味。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * pizza总店</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStoreTop</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 制作pizza</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> type pizza类别</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> pizza对象</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">doPizza</span><span class="params">(String type)</span></span>&#123;</div><div class="line"></div><div class="line">        Pizza pizza = createPizza(type);</div><div class="line"></div><div class="line">        pizza.preapare();</div><div class="line">        pizza.make();</div><div class="line">        pizza.cut();</div><div class="line">        pizza.box();</div><div class="line">        pizza.pizza();</div><div class="line">        pizza.getDescribtion();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> pizza;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 抽象pizza制作方法</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> type pizza类型</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> pizza对象</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">abstract</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>此时，每个继承<code>PizzaStoreTop</code>类的<code>子类</code>，通过实现<code>createPizza(String type)</code>方法创建属于自己Pizza店风味的pizza。</li>
<li>同<code>简单工厂方法</code>相比，<code>工厂方法模式</code>是将原本由<code>一个对象</code>负责所有具体类的实例化，现在改为通过由<code>一群子类</code>负责实例化。</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-07%2017.29.11.png" alt=""></p>
<p>加盟店的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 山东风味pizza店</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShandongPizzaStore</span> <span class="keyword">extends</span> <span class="title">PizzaStoreTop</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</div><div class="line">       <span class="comment">//使用简单工厂方法，选择具体的Pizza风味</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleFactoryPizza().createPizza(type);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 天津风味Pizza店</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TianjinPizzaStore</span> <span class="keyword">extends</span> <span class="title">PizzaStoreTop</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleFactoryPizza().createPizza(type);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 简单工厂方法，算不上是模块。</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * 创建对象的工厂</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactoryPizza</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span></span>&#123;</div><div class="line"></div><div class="line">        Pizza pizza = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (type) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">"dic"</span>:</div><div class="line">                pizza = <span class="keyword">new</span> DICShiPizza();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"mc"</span>:</div><div class="line">                pizza = <span class="keyword">new</span> McDonaldPizza();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"ph"</span>:</div><div class="line">                pizza = <span class="keyword">new</span> PizzaHutPizza();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"sub"</span>:</div><div class="line">                pizza = <span class="keyword">new</span> SubwayPizza();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"kfc"</span>:</div><div class="line">                pizza = <span class="keyword">new</span> KFCPizza();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"sd"</span>:</div><div class="line">                pizza = <span class="keyword">new</span> ShanDongPizza();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"tj"</span>:</div><div class="line">                pizza = <span class="keyword">new</span> TianJiPizza();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> pizza;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="认识-“工厂模式”"><a href="#认识-“工厂模式”" class="headerlink" title="认识 “工厂模式”"></a>认识 “工厂模式”</h1><p>工厂模式使用来封装对象创建的，通过让子类决定创建的对象是什么，以达到封装创建对象过程的目的。</p>
<h2 id="认识角度-1-：-创建者-产品类"><a href="#认识角度-1-：-创建者-产品类" class="headerlink" title="认识角度 1 ： 创建者 + 产品类"></a>认识角度 1 ： 创建者 + 产品类</h2><p>创建者</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-08%2009.46.33.png" alt=""></p>
<p>产品类</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-08%2009.46.55.png" alt=""></p>
<h2 id="认识角度-2-：平行类层级"><a href="#认识角度-2-：平行类层级" class="headerlink" title="认识角度 2 ：平行类层级"></a>认识角度 2 ：平行类层级</h2><p>当两个类集合拥有相似的结构组成时，就可以称为“平行类层级”。<br>通过<code>orderPizza()</code>和一个工厂方法<code>createPizzz()</code>联合起来，可视为一个框架。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-08%2009.58.33.png" alt=""></p>
<h1 id="定义：工厂方法模式"><a href="#定义：工厂方法模式" class="headerlink" title="定义：工厂方法模式"></a>定义：工厂方法模式</h1><p>定义一个创建对象的接口，但由子类决定要实例化的类是哪一个（具体创建什么样的对象）。工厂方法将类的实例化推迟到子类中。</p>
<p>工厂方法让子类决定要实例化的类是哪一个，其中“决定”并不是指模式允许子类本身在运行时做决定，而是指在编写创建者时无需知道实际创建的产品是哪一个，选择使用哪个子类就自然决定了实际创建的产品是什么。即：<br>–选择–&gt; 子类 –决定–&gt; 具体实例化的类 –&gt;  实际对象。 </p>
<ul>
<li><p>当只有一个具体的创建者时，工厂方法模式的还有使用的优势吗？</p>
<pre><code>有优势，因为他能帮助我们将产品的“实现”从“使用”解耦。如果以后发生了“change”，也不会影响现有的代码。
</code></pre></li>
<li><p>简单工厂与工厂模式？</p>
<pre><code>简单工厂将全部的事情集中在一个地方全部处理完了。
工厂方法模式是创建一个框架，让子类决定如何实现。
</code></pre></li>
<li><p>如果不创建任何对象，就无法创建任何Java程序。</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简单工厂方法]]></title>
      <url>/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="new-实例化问题"><a href="#new-实例化问题" class="headerlink" title="new 实例化问题"></a>new 实例化问题</h1><p>new -&gt; 具体类，针对实现编程：</p>
<pre><code>Drink drink = new TeaDrink();
</code></pre><p>上述语句中使用接口让代码更有那弹性，但是还是针对的具体的类。</p>
<ul>
<li>针对接口编程，可以隔离掉以后系统可能发生的部分改变。因为是针对接口而编写的，那么通过多态，他可以与任何新类实现该接口。</li>
</ul>
<a id="more"></a>
<ul>
<li>当代码中使用大量具体的类时，再加入新的具体的类，就必须打开原来的代码修改它，而“对修改关闭原则”则不能适用。<br>如：</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-07%2011.03.48.png" alt=""></p>
<ul>
<li>根据OO设计原则：找出变化的部分，将其从不变中分离出来。即：<strong>将实例化具体类的代码从应用中分离、封装，避免这部分代码对其他部分的干扰。</strong></li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-07%2011.11.08.png" alt=""></p>
<ul>
<li>这样做似乎是将之前类的问题移动到了另一个类中，但是实际上是将“公共动作”集中处理了。</li>
</ul>
<p><strong>试想：如果“实例化具体类”这部分代码在5个甚至更多的类中使用，那岂不是“重复编写”了5个甚至更多的代码，这还只是问题的一部分（时刻谨记：代码复用）；更为严重的是：如果加入了新的具体类，那么若要修改此块代码必须要挨个修改，若忽略其中的任何一处实例化，就为原本的代码引入了bug，风险和隐患都很大（时刻谨记：开&lt;对外部扩展开放&gt;闭&lt;对内部修改关闭&gt;原则）。</strong></p>
<h1 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h1><p>简单工厂并不是一个设计模式，更像是一种编程习惯。工厂处理创建对象的细节，使用“工厂”的类只需关心从工厂得到一个对象即可，无需考虑对象的具体创建过程。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-07%2014.43.44.png" alt=""></p>
<p>示例：</p>
<p>产品</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 制作pizza</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Pizza</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 描述</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getDescribtion</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 准备</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preapare</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 做</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">make</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 切</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 装盒</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 成品</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pizza</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 麦当劳</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">McDonaldPizza</span> <span class="keyword">implements</span> <span class="title">Pizza</span> </span>&#123;</div><div class="line"></div><div class="line">    String pizzaName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">McDonaldPizza</span><span class="params">()</span> </span>&#123;</div><div class="line">        pizzaName = <span class="string">"McDonaldPizza"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getDescribtion</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(pizzaName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preapare</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"preapare"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">make</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"make"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"make"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"box"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pizza</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"pizza do it !"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">DICShiPizza&#123;&#125;  德克士</div><div class="line">KFCPizza&#123;&#125;  肯德基</div><div class="line">PizzaHutPizza&#123;&#125;  必胜客</div><div class="line">SubwayPizza&#123;&#125;  赛百味</div></pre></td></tr></table></figure>
<p>工厂</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 简单工厂方法，算不上是模块。</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * 创建对象的工厂</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactoryPizza</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span></span>&#123;</div><div class="line"></div><div class="line">        Pizza pizza = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (type) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">"dic"</span>:</div><div class="line">                pizza = <span class="keyword">new</span> DICShiPizza();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"mc"</span>:</div><div class="line">                pizza = <span class="keyword">new</span> McDonaldPizza();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"ph"</span>:</div><div class="line">                pizza = <span class="keyword">new</span> PizzaHutPizza();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"sub"</span>:</div><div class="line">                pizza = <span class="keyword">new</span> SubwayPizza();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"kfc"</span>:</div><div class="line">                pizza = <span class="keyword">new</span> KFCPizza();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> pizza;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生产</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * pizza商店</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    SimpleFactoryPizza mSimpleFactoryPizza = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PizzaStore</span><span class="params">(SimpleFactoryPizza factoryPizza)</span></span>&#123;</div><div class="line">        mSimpleFactoryPizza = factoryPizza;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 制作pizza</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> type pizza类别</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> pizza对象</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">doPizza</span><span class="params">(String type)</span></span>&#123;</div><div class="line"></div><div class="line">        Pizza pizza = mSimpleFactoryPizza.createPizza(type);</div><div class="line"></div><div class="line">        pizza.preapare();</div><div class="line">        pizza.make();</div><div class="line">        pizza.cut();</div><div class="line">        pizza.box();</div><div class="line">        pizza.pizza();</div><div class="line">        pizza.getDescribtion();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> pizza;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">         preapare</span></div><div class="line"><span class="comment">         make</span></div><div class="line"><span class="comment">         make</span></div><div class="line"><span class="comment">         box</span></div><div class="line"><span class="comment">         pizza do it !</span></div><div class="line"><span class="comment">         McDonaldPizza</span></div><div class="line"><span class="comment">         */</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[StarUML的使用]]></title>
      <url>/StarUML%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>StarUML使用参考：<a href="http://blog.csdn.net/eyckwu/article/details/53871841" target="_blank" rel="external">http://blog.csdn.net/eyckwu/article/details/53871841</a><br>UML学 : <a href="http://www.uml.org.cn/oobject/201104212.asp" target="_blank" rel="external">http://www.uml.org.cn/oobject/201104212.asp</a><br>各种图（流程图，思维导图，UML，拓扑图，ER图）简介 ：<a href="http://www.cnblogs.com/jiqing9006/p/3344221.html" target="_blank" rel="external">http://www.cnblogs.com/jiqing9006/p/3344221.html</a></p>
</blockquote>
<hr>
<h2 id="文章持续更新中……"><a href="#文章持续更新中……" class="headerlink" title="文章持续更新中……"></a><strong><em>文章持续更新中……</em></strong></h2><h1 id="码云拾遗"><a href="#码云拾遗" class="headerlink" title="码云拾遗"></a>码云拾遗</h1><ul>
<li><p><strong>明星效应。很简单，在一个领域保持顶尖水平，比在一两个领域保持领先水平和五六个领域保持一般水准都要更有价值、并且收益更好。</strong> </p>
</li>
<li><p><strong>有悖常识的真相：让未来更开放的方式，正是专注的去做好一件事情。这个世界上最成功的人，他们在某一领域获得成功之后，可通过经营杠杆进入任何他们想要涉足的领域。而这都得依赖于他们曾极致的专注在做好一件事情上。</strong></p>
</li>
</ul>
<a id="more"></a>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p><strong>StarUML</strong>是一个韩国人用DELPHI写的UML工具，支持UML2.0。</p>
<h1 id="UML分为："><a href="#UML分为：" class="headerlink" title="UML分为："></a>UML分为：</h1><h2 id="1-静态建模：系统基础和系统固定框架结构，这些图形往往是“静态”的。"><a href="#1-静态建模：系统基础和系统固定框架结构，这些图形往往是“静态”的。" class="headerlink" title="1. 静态建模：系统基础和系统固定框架结构，这些图形往往是“静态”的。"></a>1. 静态建模：系统基础和系统固定框架结构，这些图形往往是“静态”的。</h2><h3 id="2-类图-Class-Diagram-：常用来分析业务概念"><a href="#2-类图-Class-Diagram-：常用来分析业务概念" class="headerlink" title="2. 类图(Class Diagram)：常用来分析业务概念"></a>2. 类图(Class Diagram)：常用来分析业务概念</h3><h3 id="3-用例图-Use-Case-Diagram-：由参与者、用例以及它们之间的关系构成的"><a href="#3-用例图-Use-Case-Diagram-：由参与者、用例以及它们之间的关系构成的" class="headerlink" title="3. 用例图(Use Case Diagram)：由参与者、用例以及它们之间的关系构成的"></a>3. 用例图(Use Case Diagram)：由参与者、用例以及它们之间的关系构成的</h3><p>使用参考：<a href="https://www.2cto.com/os/201502/377091.html" target="_blank" rel="external">https://www.2cto.com/os/201502/377091.html</a>     </p>
<p>　　<strong>参与者</strong>：是指存在于系统外部并直接与系统交互的人、系统或设备等。<br>　　<strong>用例</strong>：是系统为参与者提供的功能。<br>　　<strong>用例命名</strong>：取一个简单、概括性的名称，一般是带有动作性的名称。<br>　　<strong>用例表示</strong>：用椭圆表示，椭圆下面附有用例的名称、实线箭头，在用例图中用于连接参与者与用例，用例方向指向用例。<br>　　<strong>用例与用例之间的三种关系</strong>：<br>　　<br>　　1. 泛化（generalization）代表一般与特殊的关系<br>　　2. 包含（include）关系<br>　　3. 扩展（extend）关系</p>
<h3 id="4-对象图-Object-Diagram"><a href="#4-对象图-Object-Diagram" class="headerlink" title="4. 对象图(Object Diagram)"></a>4. 对象图(Object Diagram)</h3><h3 id="5-构件图-Component-Diagram-：表示组件之间的关系"><a href="#5-构件图-Component-Diagram-：表示组件之间的关系" class="headerlink" title="5. 构件图(Component Diagram)：表示组件之间的关系"></a>5. 构件图(Component Diagram)：表示组件之间的关系</h3><h3 id="6-部署图-Deployment-Diagram-：部署软件应用的物理设备信息"><a href="#6-部署图-Deployment-Diagram-：部署软件应用的物理设备信息" class="headerlink" title="6. 部署图(Deployment Diagram)：部署软件应用的物理设备信息"></a>6. 部署图(Deployment Diagram)：部署软件应用的物理设备信息</h3><h2 id="2-动态建模：描述的是某种行为，是“动态”的。"><a href="#2-动态建模：描述的是某种行为，是“动态”的。" class="headerlink" title="2. 动态建模：描述的是某种行为，是“动态”的。"></a>2. 动态建模：描述的是某种行为，是“动态”的。</h2><ul>
<li>活动图(Activity Diagram)：类似流程图</li>
<li>状态机图(State Machine Diagram)</li>
<li>时序图(Sequence Diagram)：捕捉一段时间范围内多个对象之间的交互信息， 强调信息交互的时间顺序。</li>
<li>通讯图(Communication Diagram)</li>
<li>时间图(Timing Diagram)</li>
</ul>
<h1 id="StarUML使用"><a href="#StarUML使用" class="headerlink" title="StarUML使用"></a>StarUML使用</h1><h2 id="Mode的选择"><a href="#Mode的选择" class="headerlink" title="Mode的选择"></a>Mode的选择</h2><h3 id="选择更为具体的图"><a href="#选择更为具体的图" class="headerlink" title="选择更为具体的图"></a>选择更为具体的图</h3><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-06%2014.56.00.png" alt=""></p>
<h3 id="添加更为丰富的元素"><a href="#添加更为丰富的元素" class="headerlink" title="添加更为丰富的元素"></a>添加更为丰富的元素</h3><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-06%2014.58.17.png" alt=""></p>
<h2 id="1-类图的画法"><a href="#1-类图的画法" class="headerlink" title="1. 类图的画法"></a>1. 类图的画法</h2><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-06%2014.00.35.png" alt=""></p>
<p>如上图是一个类图，下面对每一个图标的内容进行解释（从左到右，从从上到下）。<br><strong>左侧</strong>： </p>
<ul>
<li>标识Class的可见性（默认public） </li>
<li>添加note，进行对类的说明 </li>
</ul>
<p><strong>右侧</strong>： </p>
<ul>
<li>增加类的属性 </li>
<li>增加类的行为 </li>
<li>添加reception </li>
<li>添加子类 </li>
<li>添加父类 </li>
<li>添加已有的接口 </li>
<li>添加需要的接口 </li>
<li>添加关联 </li>
<li>添加聚合 </li>
<li>添加组合 </li>
<li>添加端口 </li>
<li>添加组件 </li>
</ul>
<h3 id="具体"><a href="#具体" class="headerlink" title="具体"></a>具体</h3><h4 id="1-类图"><a href="#1-类图" class="headerlink" title="1. 类图"></a>1. 类图</h4><p>包括：类名 + 属性 + 方法</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-06%2015.25.50.png" alt=""></p>
<h4 id="2-类图之间的关系"><a href="#2-类图之间的关系" class="headerlink" title="2. 类图之间的关系"></a>2. 类图之间的关系</h4><h5 id="1-泛化（Generalization）："><a href="#1-泛化（Generalization）：" class="headerlink" title="1. 泛化（Generalization）："></a>1. 泛化（Generalization）：</h5><ul>
<li>就是面向对象中的<code>继承</code>，奔驰、宝马、奥迪都继承自<code>汽车类</code></li>
<li>表示<code>is-a</code>的关系，是对象之间<code>耦合度最大</code>的一种关系，子类继承父类的所有细节，直接使用语言中的继承表达。在类图中使用<code>带三角箭头</code>的<code>实线</code>表示，箭头从子类指向父类。</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-06%2015.35.17.png" alt=""></p>
<h5 id="2-实现（interface-Realization）："><a href="#2-实现（interface-Realization）：" class="headerlink" title="2. 实现（interface Realization）："></a>2. 实现（interface Realization）：</h5><p>圆圈代表接口</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-06%2015.49.39.png" alt=""></p>
<p>一般接口实现的画法及表示：在类图中使用<code>带三角箭头的虚线</code>表示，箭头从<code>实现类</code>指向<code>接口</code>。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/0c834dc1.jpg" alt=""></p>
<h5 id="3-依赖（Dependency）："><a href="#3-依赖（Dependency）：" class="headerlink" title="3. 依赖（Dependency）："></a>3. 依赖（Dependency）：</h5><ul>
<li>对象之间最弱的一种关联方式，是临时性的关联，代码中一般指由局部变量、函数参数、返回值建立的对于其他<code>对象的调用关系</code>。</li>
<li>一个类调用被依赖类中的某些方法而得以完成这个类的一些职责。</li>
<li>在类图使用<code>带箭头的虚线</code>表示，箭头从<code>使用类</code>指向<code>被依赖的类</code>。</li>
</ul>
<p>StarUML的使用同下图<br><img src="http://oy991qm3u.bkt.clouddn.com/3c13e1c1.jpg" alt=""></p>
<h5 id="4-关联"><a href="#4-关联" class="headerlink" title="4. 关联"></a>4. 关联</h5><h6 id="4-1-一般关联-Association"><a href="#4-1-一般关联-Association" class="headerlink" title="4.1 一般关联(Association) :"></a>4.1 一般关联(Association) :</h6><ul>
<li><code>对象之间</code>一种<code>引用关系</code>，比如客户类与订单类之间的关系。这种关系通常使用<code>类的属性</code>表达。</li>
<li>在类图使用<code>带箭头的实线</code>表示，箭头从<code>使用类</code>指向<code>被关联的类</code>。可以是<code>单向</code>和<code>双向</code>。</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/940065f4.jpg" alt=""></p>
<h6 id="4-2-聚合关联-Aggregation"><a href="#4-2-聚合关联-Aggregation" class="headerlink" title="4.2 聚合关联(Aggregation) :"></a>4.2 聚合关联(Aggregation) :</h6><ul>
<li>表示<code>has-a</code>的关系，是一种<code>不稳定</code>的<code>包含关系</code>。</li>
<li>较强于一般关联,有<code>整体</code>与<code>局部</code>的关系,并且没有了整体,局部也可单独存在。如公司和员工的关系，公司包含员工，但如果公司倒闭，员工依然可以换公司。</li>
<li>在类图使用<code>空心的菱形</code>表示，菱形从<code>局部</code>指向<code>整体</code>。</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/aafc5bec.jpg" alt=""></p>
<h5 id="4-3-组合-Composition"><a href="#4-3-组合-Composition" class="headerlink" title="4.3 组合(Composition) :"></a>4.3 组合(Composition) :</h5><ul>
<li>表示<code>contains-a</code>的关系，是一种<code>强烈</code>的<code>包含关系</code>。</li>
<li><code>组合类</code>负责<code>被组合类</code>的<code>生命周期</code>，是一种更强的<code>聚合关系</code>。部分不能脱离整体存在。如公司和部门的关系，没有了公司，部门也不能存在了；调查问卷中问题和选项的关系；订单和订单选项的关系。</li>
<li>在类图使用<code>实心的菱形</code>表示，菱形从<code>局部</code>指向<code>整体</code>。</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/660db5e8.jpg" alt=""></p>
<h5 id="5-多重性-Multiplicity"><a href="#5-多重性-Multiplicity" class="headerlink" title="5. 多重性(Multiplicity) :"></a>5. 多重性(Multiplicity) :</h5><p>通常在关联、聚合、组合中使用。就是代表有多少个关联对象存在。使用数字..星号（数字）表示。</p>
<h2 id="2-用例图"><a href="#2-用例图" class="headerlink" title="2. 用例图"></a>2. 用例图</h2><p> </p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UML </tag>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[顶级程序员的10条最佳实践]]></title>
      <url>/%E9%A1%B6%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%8410%E6%9D%A1%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<p>今天看到了公众号推荐的文章，写的相当的棒，所有连标题都没有修改，直接就搬了过来，供自己勉励。</p>
<blockquote>
<p>来源：<a href="https://mp.weixin.qq.com/s/LtgV6YNlgtPdRx788plbgg" target="_blank" rel="external">https://mp.weixin.qq.com/s/LtgV6YNlgtPdRx788plbgg</a></p>
</blockquote>
<h1 id="1-慎重选择第-1-门语言"><a href="#1-慎重选择第-1-门语言" class="headerlink" title="1. 慎重选择第 1 门语言"></a>1. 慎重选择第 1 门语言</h1><pre><code>编程语言各有不同，不过区别不大。
但用语言的人区别就大了。选择了一门语言你就选择了一个群落。
</code></pre><p>　　– Sam Kaufman，自由职业者，iOS 开发者，10x management</p>
<pre><code>如果你想快速建立原型（尤其对于希望对产品进行迭代升级的创始人来说），那就用 Ruby 或者 Javascript
</code></pre><p>　　– Erin Parker，Spitfire Athlete 创始人兼首席开发者</p>
<a id="more"></a>
<h1 id="2-你不是程序猿！"><a href="#2-你不是程序猿！" class="headerlink" title="2. 你不是程序猿！"></a>2. 你不是程序猿！</h1><pre><code>伟大的开发者能够建构并开发应用。
惊艳的开发者能够在关注业务的同时做这件事。
业务端的人大都不懂编码，但是肯定能够理解特定功能背后的动机。
别人说什么开发者就做什么，没有去理解为什么要这么做，导致双方均错失了机会，这样的事情太常见了。
</code></pre><p>　　– John Coggeshall，自由职业者，web 开发者，10x Management，PHP 核心贡献者</p>
<pre><code>精通编程是一个崇高的职业目标。一旦实现了这个目标，别忘了考虑一下你自己。不要成为任何公司的奴隶或者在毫无价值的东西上浪费你的时间。
</code></pre><p>　　— Greg Sadetsky， Python 及 Javascript 专家，10x Managemen；协同办公空间 Abri.co 创始人</p>
<pre><code>要想按期完成，得在开始技术工作之前事先进行项目沟通（哪怕这并非先决条件），因为其他人的响应速度千变万化。
</code></pre><p>　　– Andrew Wilcox ，web 应用开发者，Meteor 核心贡献者，10x Management</p>
<h1 id="3-保持敏捷，不断交付"><a href="#3-保持敏捷，不断交付" class="headerlink" title="3. 保持敏捷，不断交付"></a>3. 保持敏捷，不断交付</h1><pre><code>早发布，不断发布，边说唱边发布。
</code></pre><p>　　– Max Nanis ，自由职业者，web 开发者，生物信息学专家，10x Management</p>
<pre><code>不断测试。好的测试包如保单和煤矿里的金丝雀之结合。它能帮助你在生产周期中更早地找出错误，而错误越早发现越容易解决。
</code></pre><p>　　– Jeremy Green，自由职业者，web 开发者，专长 Ruby on Rails，10x Management</p>
<pre><code>快速失败。编码（及生活）时我希望尽早知道什么地方不能工作，而不是放任不管让它增殖扩散。全面放开，快速失败，修补缺陷，不断继续。
</code></pre><p>　　– Stephanie Volftsun，Knotch 联合创始人兼 CTO</p>
<pre><code>为所有代码编写自动测试！尽可能践行测试驱动的开发。
</code></pre><p>　　– Zoran Kacic-Alesic，Industrial Light &amp; Magic 研发主管</p>
<h1 id="4-保持对测试流程的控制"><a href="#4-保持对测试流程的控制" class="headerlink" title="4. 保持对测试流程的控制"></a>4. 保持对测试流程的控制</h1><pre><code>许多项目深受多测试周期之苦。这会拖累项目，导致组织整体出现高级别的问题。
程序员应该专注于对自己的代码进行单元测试及半回归测试。
他们比其他任何人更了解代码库，也知道自己会影响到哪些变更。有时此类变更会由于 QA 测试范围有限而缺失，因此导致生产环节出现重大问题。
</code></pre><p>　　– Sanjib Sahoo，tradeMONSTER CTO</p>
<pre><code>要想在力所能及的情况下尽快开发出无缺陷代码，永远永远也不要把写测试放到后面。我们更清楚这一点。要检查一下测试的覆盖率，确保 100% 无死角。
</code></pre><p>　　– Seth Purcell，Signpost 工程副总裁</p>
<h1 id="5-如果你是自由职业者，要学会说不，哪怕面对的是金钱"><a href="#5-如果你是自由职业者，要学会说不，哪怕面对的是金钱" class="headerlink" title="5. 如果你是自由职业者，要学会说不，哪怕面对的是金钱"></a>5. 如果你是自由职业者，要学会说不，哪怕面对的是金钱</h1><pre><code>要对时间和成本有一个合理的评估，然后把它加倍。如果大家都说 “这应该很简单，” 那就做
</code></pre><p>　　– Ryan Waggoner ，自由职业者，web 及移动应用开发者，10x Management</p>
<h1 id="6-荣誉属于过去，理论是一回事，但实践更重要"><a href="#6-荣誉属于过去，理论是一回事，但实践更重要" class="headerlink" title="6. 荣誉属于过去，理论是一回事，但实践更重要"></a>6. 荣誉属于过去，理论是一回事，但实践更重要</h1><pre><code>改进软件开发质量的最好方式就是去开发软件。
许多雄心勃勃的刚入门的工程师花了很多的业务时间去读书，关于最新工具的、关于开放流程的，诸如此类的东西。很多人都是这么消磨自己的闲暇时间的，但这样很容易就把你给耽搁了。
别这样，通过尽可能用脑来强化大脑负责开发软件的那部分。
</code></pre><p>　　–James Cropcho，General Assembly 的 Ruby on Rails 专家及讲师</p>
<pre><code>不断探索。
我见过的许多编码者手上都有几个在进行的业务项目。做业务项目迫使你要探索新技术然后学习创建应用的方方面面。
你可能需要做前端的 HTML/CSS，后端的 API 集成，数据库优化，做移动 app，还得设置自己的服务器。
</code></pre><p>　　– Andrew Waage，Retention Science CTO 及联合创始人</p>
<h1 id="7-结对评审是你的秘密武器"><a href="#7-结对评审是你的秘密武器" class="headerlink" title="7. 结对评审是你的秘密武器"></a>7. 结对评审是你的秘密武器</h1><pre><code>结对编程非常必要。
两个程序员联合开发同一个模块可以相互审查对方的代码。开发团队每周也要召开代码审查会议，让每一个开发者给其他人的代码提供反馈意见，解释如何更好地改进代码。
这能够形成一种协作文化，把开发者的自负抛开！
</code></pre><p>　　– Sanjib Sahoo</p>
<h1 id="8-像躲瘟疫一样避免过早优化"><a href="#8-像躲瘟疫一样避免过早优化" class="headerlink" title="8. 像躲瘟疫一样避免过早优化"></a>8. 像躲瘟疫一样避免过早优化</h1><pre><code>只有在问题和解决方案都出现在你面前时才进行重构！
过早重构是时间上的巨大浪费。不要投入半年后可能被扔掉的任何东西的完善上。
过早优化是罪恶之源。
</code></pre><p>　　–Seth Purcell</p>
<pre><code>不要过早优化！
我不断看到工程师在用户还没有到 1000 的时候一再对扩充到 100 万的用户规模担心。
</code></pre><p>　　– Mariya Yao，Xanadu Mobile 创始人兼创意总监，移动开发者及设计师</p>
<h1 id="9-你的代码只写一次，可别人会读它千万遍"><a href="#9-你的代码只写一次，可别人会读它千万遍" class="headerlink" title="9. 你的代码只写一次，可别人会读它千万遍"></a>9. 你的代码只写一次，可别人会读它千万遍</h1><pre><code>你写的代码机器会解析执行，可其他人却需要读你的代码，理解它，摆弄它。
你必须明白，你的代码会有未来的观众。
代码也是一种书写形式的沟通。
</code></pre><p>　　– Tracy Chou，Pinterest 软件工程师</p>
<pre><code>听起来很奇怪，但是你永远都得替自己的未来着想。问问自己：如果你有健忘症的话，你还能不能理解自己写过的代码？
</code></pre><p>　　– Wai Ching Jessica Lam，Sugarbox 联合创始人兼 CTO</p>
<pre><code>通读你的文档。
设计改动很多，有时候代码更新的时候注释不一定会跟进。保持文档的更新，未来的人（包括你自己）理解起来就更容易。    我说不清有多少次我看回自己代码时总在想：“我到底在干什么？” 只要我写出了好的注释，未来头疼就少很多。
</code></pre><p>　　– Kitt Vanderwater，Google 软件工程师</p>
<h1 id="10-这是一个崇高的职业，把你的技能用到好的地方。"><a href="#10-这是一个崇高的职业，把你的技能用到好的地方。" class="headerlink" title="10. 这是一个崇高的职业，把你的技能用到好的地方。"></a>10. 这是一个崇高的职业，把你的技能用到好的地方。</h1><pre><code>帮助他人是深层次的人类需求。想办法用你的工作来改善人类，你就会有成功的把握。
</code></pre>]]></content>
      
        <categories>
            
            <category> 技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 阅读 </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Scrapy爬虫框架使用]]></title>
      <url>/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Scrapy框架使用指南：<a href="http://scrapy-chs.readthedocs.io/zh_CN/1.0/intro/overview.html" target="_blank" rel="external">http://scrapy-chs.readthedocs.io/zh_CN/1.0/intro/overview.html</a><br>Scrapy零基础使用：<a href="http://www.jb51.net/article/57183.htm" target="_blank" rel="external">http://www.jb51.net/article/57183.htm</a></p>
</blockquote>
<p><strong>问：把网站装进爬虫需要几步？</strong><br><strong>答：四步。</strong></p>
<p><strong>1. 新建项目</strong><br><strong>2. 明确目标</strong><br><strong>3. 制作爬虫</strong><br><strong>4. 存储内容</strong></p>
<a id="more"></a>
<p><strong>注意：<code># coding=utf-8</code> 使用Scrapy爬虫框架时应该添加此条语句表明注释是<code>中文注释</code></strong></p>
<h1 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1. 新建项目"></a>1. 新建项目</h1><p><strong>使用命令新建一个<code>scrapy</code>项目</strong></p>
<pre><code>scrapy startproject projectName
</code></pre><p><strong>建立项目的文件目录</strong></p>
<pre><code>scrapyproject
├── scrapy.cfg
└── scrapyproject
    ├── __init__.py
    ├── items.py
    ├── middlewares.py
    ├── pipelines.py
    ├── settings.py
    └── spiders
        └── __init__.py

2 directories, 7 files
</code></pre><p><strong>各个文件的作用：</strong></p>
<ul>
<li><strong>scrapy.cfg</strong> ：项目的配置文件</li>
<li><strong>scrapyproject</strong>/ ：项目的Python模块，将会从这里引用代码</li>
<li><strong>scrapyproject/items.py</strong> ：项目的items文件</li>
<li><strong>scrapyproject/pipelines.py</strong> ：项目的pipelines文件</li>
<li><strong>scrapyproject/settings.py</strong> ：项目的设置文件</li>
<li><strong>scrapyproject/spiders</strong>/ ：具体执行爬虫的目录</li>
</ul>
<h1 id="2-明确目标"><a href="#2-明确目标" class="headerlink" title="2. 明确目标"></a>2. 明确目标</h1><p>在<code>Scrapy</code>中，<code>items</code>是用来管理抓取内容的容器，有点像<code>Python</code>中的<code>Dict</code>，但是提供了一些额外的保护减少错误。</p>
<p>一般来说，<code>item</code>可以用<code>scrapy.item.Item</code>类来创建，并且用<code>scrapy.item.Field</code>对象来定义属性（可以理解成类似于<code>ORM映射关系</code>，类似于<code>java bean</code>）。</p>
<p><strong>编写Item：</strong>修改<code>scrapyproject</code>目录下的<code>items.py</code>4文件，在原本的class后面添加我们自己的class。</p>
<pre><code>import scrapy

class PyScrapy1601Item(scrapy.Item):
    # define the fields for your item here like:
    # name = scrapy.Field()
    pass

class DmozItem(scrapy.Item):
    node = scrapy.Field()
</code></pre><h1 id="3-爬虫实现"><a href="#3-爬虫实现" class="headerlink" title="3. 爬虫实现"></a>3. 爬虫实现</h1><p><strong>先爬后取</strong></p>
<h2 id="3-1-爬"><a href="#3-1-爬" class="headerlink" title="3.1 爬"></a>3.1 爬</h2><p>要建立一个<code>Spider</code>，你必须用<code>scrapy.spider.BaseSpider</code>创建一个子类，并确定<strong>三个强制属性</strong>：</p>
<ol>
<li><strong>name</strong> ：爬虫的识别名称，必须是唯一的。</li>
<li><strong>start_urls</strong> ：爬取的URL列表。爬虫从这里开始抓取数据。</li>
<li><strong>parse()</strong> ：解析的方法，调用的时候传入从每一个URL传回的<code>Response对象</code>作为唯一参数，负责解析并匹配抓取的数据(解析为<code>item</code>)。</li>
</ol>
<p>allow_domains ：allow_domains是搜索的域名范围，也就是爬虫的约束区域，规定爬虫只爬取这个域名下的网页。<br>一个模板：</p>
<pre><code>from scrapy.spider import Spider
from scrapy.selector import Selector
from py_scrapy_16_01.py_scrapy_16_01.items import DmozItem

class DmozSpider(Spider):

    name = &quot;dmoz&quot;

    allowed_domains = [&quot;dmoztools.net&quot;]
    start_urls = [
        &quot;http://dmoztools.net/Computers/Programming/Languages/Python/&quot;,
    ]

    def parse(self, response):
        sel = Selector(response)
        sites = sel.xpath(&apos;//div[@class=&quot;browse-node&quot;]/text()&apos;)
        items2 = []
        for node in sites:
            item = DmozItem()
            item[&apos;href&apos;] = node.extract()
            items2.append(item)

        return items2
</code></pre><p><strong>进入到 <code>/scrapyproject/scrapyproject</code>下 运行</strong></p>
<pre><code>scrapy crawl dmoz 
</code></pre><p><strong>执行了这条命令发生了啥？</strong><br>首先，Scrapy为爬虫的 <code>start_urls</code> 属性中的每个<code>URL</code>创建了一个<code>scrapy.http.Request</code> 对象 ，并将爬虫的<code>parse()</code> 方法指定为回调函数。<br>然后，这些 <code>Request</code> 被调度并执行，之后通过<code>parse()</code>方法返回 <code>scrapy.http.Response</code> 对象，并反馈给爬虫。</p>
<h2 id="3-2-取"><a href="#3-2-取" class="headerlink" title="3.2 取"></a>3.2 取</h2><p>爬取整个网页完毕，接下来的就是的取过程了。在基础的爬虫里，这一步可以用<code>正则表达式</code>来抓。在<code>Scrapy</code>里，<strong>使用一种叫做 <code>XPath selectors</code>的机制，它基于 <code>XPath</code>表达式</strong>。</p>
<p><strong>例子：</strong><br><strong>/html/head/title</strong> : 选择HTML文档<head>元素下面的<code>&lt;title&gt;</code>标签。<br><strong>/html/head/title/text()</strong> : 选择前面提到的<code>&lt;title&gt;</code> 元素下面的文本内容<br><strong>//td</strong>: 选择所有 <code>&lt;td&gt;</code> 元素<br><strong>//div[@class=”mine”]</strong> : 选择所有包含 <code>class=&quot;mine&quot;</code> 属性的<code>div</code>标签元素</head></p>
<p>xpath路径表达式：</p>
<table>
<thead>
<tr>
<th style="text-align:center">表达式</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>/</strong></td>
<td style="text-align:left">从根节点选取</td>
</tr>
<tr>
<td style="text-align:center"><strong>//</strong></td>
<td style="text-align:left">从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置</td>
</tr>
<tr>
<td style="text-align:center"><strong>.</strong></td>
<td style="text-align:left">选取当前节点</td>
</tr>
<tr>
<td style="text-align:center"><strong>..</strong></td>
<td style="text-align:left">选取当前节点的父节点</td>
</tr>
<tr>
<td style="text-align:center"><strong>@</strong></td>
<td style="text-align:left">选取属性</td>
</tr>
</tbody>
</table>
<p>更多使用参考 <code>W3C-XPath</code> ：<a href="http://www.w3school.com.cn/xpath/index.asp" target="_blank" rel="external">http://www.w3school.com.cn/xpath/index.asp</a></p>
<p><strong>为了方便使用<code>XPaths</code>，<code>Scrapy</code>提供<code>XPathSelector</code> 类，有2种可以选择</strong>:</p>
<ol>
<li><strong>HtmlXPathSelector (HTML数据解析)</strong></li>
<li><strong>XmlXPathSelector (XML数据解析)</strong></li>
</ol>
<p>必须通过一个 <code>Response</code> 对象对他们进行实例化操作，如：</p>
<pre><code>sel = Selector(response)
</code></pre><p><code>Selector对象</code>展示了文档的<code>节点结构</code>。因此，第一个实例化的<code>selector</code>必与<code>根节点</code>或者是<code>整个目录</code>有关 。<br><strong>在<code>Scrapy</code>里面，<code>Selectors</code> 有4种基础的方法</strong>：</p>
<ol>
<li><strong>xpath()</strong> ：返回一系列的selectors，每一个select表示一个xpath参数表达式选择的节点。</li>
<li><strong>css()</strong> ：返回一系列的selectors，每一个select表示一个css参数表达式选择的节点。</li>
<li><strong>extract()</strong> ：返回一个unicode字符串，即选中的数据。</li>
<li><strong>re()</strong> ：返回一串一个unicode字符串，即使用正则表达式抓取出来的内容。</li>
</ol>
<h2 id="3-3-xpath-测试"><a href="#3-3-xpath-测试" class="headerlink" title="3.3 xpath()测试"></a>3.3 xpath()测试</h2><p>在终端输入：</p>
<pre><code>scrapy shell http://dmoztools.net/Computers/Programming/Languages/Python/ 
</code></pre><p>在没有报错的情况下，输入 <code>response.headers</code> 得到：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-03%2010.32.34.png" alt=""></p>
<p>在没有报错的情况下，输入 <code>response.body</code> 得到：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-03%2010.35.02.png" alt=""></p>
<h1 id="4-存储内容"><a href="#4-存储内容" class="headerlink" title="4. 存储内容"></a>4. 存储内容</h1><p>保存信息的最简单的方法是通过Feed exports，主要有4种：<code>JSON</code>，<code>JSON lines</code>，<code>CSV</code>，<code>XML</code>。<br>我们将结果用最常用的JSON导出，命令如下：</p>
<pre><code>scrapy crawl dmoz -o items.json -t json
</code></pre><p>其中，<code>-o</code> 后面是<code>导出文件名</code>，<code>-t</code> 后面是<code>导出类型</code>。</p>
<h1 id="Pycharm中运行爬虫程序错误"><a href="#Pycharm中运行爬虫程序错误" class="headerlink" title="Pycharm中运行爬虫程序错误"></a>Pycharm中运行爬虫程序错误</h1><h2 id="1-NameError-global-name-‘DmozItem’-is-not-defined"><a href="#1-NameError-global-name-‘DmozItem’-is-not-defined" class="headerlink" title="1. NameError: global name ‘DmozItem’ is not defined"></a>1. NameError: global name ‘DmozItem’ is not defined</h2><pre><code>File &quot;/Users/yannischeng/PycharmProjects/First_Python_Project/spiderone/spiderone/spiders/dmoe_spider.py&quot;, line 20, in parse
item = DmozItem()
NameError: global name &apos;DmozItem&apos; is not defined
</code></pre><p><strong>解决方案：使用相对导入</strong></p>
<pre><code>from ..items import DmozItem
</code></pre><p>第一个点(.) 表示当前目录，第二个点表示上一级父目录。这样做还有一个额外的好处就是你可以随意修改你的包的名称，松耦合。</p>
<h2 id="2-Scrapy爬取中文，显示ascii码，如何转变成utf-8正常编码？"><a href="#2-Scrapy爬取中文，显示ascii码，如何转变成utf-8正常编码？" class="headerlink" title="2. Scrapy爬取中文，显示ascii码，如何转变成utf-8正常编码？"></a>2. Scrapy爬取中文，显示ascii码，如何转变成utf-8正常编码？</h2><blockquote>
<p>参考：<a href="http://www.jianshu.com/p/c03d968ef68b" target="_blank" rel="external">http://www.jianshu.com/p/c03d968ef68b</a></p>
</blockquote>
<p>将爬取到的中文信息存储为<code>json</code>格式的文件时，文字显示就会出现问题，存储为<code>xml</code>时就不会有问题。本要求应该显示的是：<code>摘要</code>，而实际显示的内容为：<code>\&quot;\u6458\u8981</code></p>
<p><strong>解决方案：使用<code>json包</code>中的<code>json.dumps(dictname,ensure_ascii=False)</code></strong><br>具体案例使用：</p>
<pre><code>item[&apos;node&apos;] = json.dumps(node.extract(), ensure_ascii=False)
print(item[&apos;node&apos;])
摘要: 把系统换到了fedora,记录几个相关的配置
</code></pre><h2 id="3-scrapy-的-parse-return-值必须是Request-BaseItem-dict-or-None，如果返回str报错"><a href="#3-scrapy-的-parse-return-值必须是Request-BaseItem-dict-or-None，如果返回str报错" class="headerlink" title="3. scrapy` 的 parse() return 值必须是Request, BaseItem, dict or None，如果返回str报错"></a>3. scrapy` 的 parse() return 值必须是Request, BaseItem, dict or None，如果返回str报错</h2><pre><code>[scrapy.core.scraper] ERROR: Spider must return Request, BaseItem, dict or None, got &apos;str&apos; in &lt;GET http://www.cnblogs.com/aLittleBitCool/&gt;
</code></pre><h2 id="4-scrapy爬虫得到的json文件是ascii码问题"><a href="#4-scrapy爬虫得到的json文件是ascii码问题" class="headerlink" title="4. scrapy爬虫得到的json文件是ascii码问题"></a>4. scrapy爬虫得到的json文件是ascii码问题</h2><blockquote>
<p>参考：<a href="http://bbs.fishc.com/thread-85672-1-1.html" target="_blank" rel="external">http://bbs.fishc.com/thread-85672-1-1.html</a></p>
</blockquote>
<pre><code>import json        #记得添加这两个库
import codecs

class XXXPipeline(object):                 #XXX就是你建立scrapy工程的名称
        def __init__(self):                #添加一下初始化方法
                self.file = codecs.open(&apos;item.json&apos;, &apos;wb&apos;, encoding=&apos;utf-8&apos;)        #item.json指的是你要保存的json格式文件的名称，编码格式一般都是&apos;utf-8&apos;
        def process_item(self, item, spider):
                line = json.dumps(dict(item),ensure_ascii=False) + &apos;\n&apos;        #这一句会将你每次返回的字典抓取出来,“ensure_ascii=False”这一句话很重要，如果是True的话就是我们保存的\u4e2d\u56fd这种格式了
                self.file.write(line)        #写入到文件中
                return item
</code></pre><p>将以上内容插入<code>pipelines.py</code>,同时在<code>settings.py</code>中加入</p>
<pre><code>ITEM_PIPELINES = {
    &apos;panda.pipelines.PandaPipeline&apos;: 300
}
</code></pre>]]></content>
      
        <categories>
            
            <category> 爬虫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[来自他人的编程技巧总结]]></title>
      <url>/%E6%9D%A5%E8%87%AA%E4%BB%96%E4%BA%BA%E7%9A%84%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<ol>
<li>函数不要超过 50 行。</li>
<li>不要一次性写太多来不及测的代码，而是要写一段调试一段。</li>
</ol>
<hr>
<a id="more"></a>
<ol>
<li>UT 和编码要同步做。</li>
<li>多写注释方便的往往是自己。</li>
<li>碰到一堆问题时，一次只尝试解决一个问题。</li>
<li>没把握一眼看出问题症结的时候，老老实实单步调试。</li>
<li>设计模式是个好东西，但不要强行使用。</li>
<li>没造成可观的损失前不要尝试做性能优化。</li>
<li>没事别重复造轮子。</li>
</ol>
<hr>
<ol>
<li>大多数情况下 Boss 不关心技术含量，而且往往简单的解决方案更快更有效果。</li>
<li>不要害怕接触新知识，因为害怕也没用，不管你愿意不愿意，你现在会的东西 5 年后就会过时。</li>
<li>重构是程序员的主力技能。</li>
<li>工作日志能提升脑容量。</li>
</ol>
<hr>
<ol>
<li>先用 profiler 调查，才有脸谈优化。</li>
<li>漫山遍野的注释实际背景噪音。</li>
<li>普通程序员 + google = 超级程序员。</li>
<li>写单元测试总是合算的。</li>
<li>不要先写框架再写实现。最好反过来，从原型中提炼框架。</li>
<li>代码结构清晰，其它问题都不算事儿。</li>
<li>管理行不行，就看工作流。</li>
<li>编码不要畏惧变化，要拥抱变化。</li>
<li>常充电。程序员只有一种死法：土死的。</li>
</ol>
<hr>
<ol>
<li>相信你的同事的能力，你不能解决的问题，他们说不能就能神奇的解决</li>
<li>不要相信的你的同事，他们能神奇地解决的方式，往往都是新问题的原因</li>
<li>相信你的同事，他能解决这个问题。</li>
<li>不能相信你的同事，他把问题变得更糟糕了。</li>
<li>但是你还是必须相信你的同事，因为有他在，这些问题还是可以解决的</li>
<li>不能相信你的同事，当问题无法解决的时候，他可能就辞职不干了。</li>
<li>要相信自己，一定可以解决同事或者前任遗留下来的任何问题。</li>
<li>要相信新进来了员工，如果有任何自己无法解决的技术问题，相信新员工可以用非常神奇的方法解决</li>
</ol>
<hr>
<ol>
<li>编程之事，隔离是方向，起名是关键，测试是主角，调试是补充，版本控制是后悔药。</li>
<li>一行代码一个兵。形成建制才能有战斗力。单位规模不宜过大，千人班，万人排易成万人坑。</li>
<li>重构 / 优化 / 修复 Bug，同时只能作一件。</li>
<li>简单模块注意封装，复杂模块注意分层。</li>
<li>人脑性能有限，整洁胜于杂乱。读不懂的代码，尝试整理下格式;  不好用的接口，尝试重新封装下。</li>
<li>迭代速度决定工作强度。想多快好省，就从简化开发流程，加快迭代速度开始。</li>
<li>忘掉优化写代码。过早优化等同恶意破坏；忘掉代码作优化。优化要基于性能测试，而不是纠结于字里行间。</li>
<li>最好的工具是纸笔; 其次好的是 markdown。</li>
<li>leader 问任务时间，若答不上来，可能是任务拆分还不够细。</li>
<li>宁可多算一周，不可少估一天。过于 “乐观” 容易让 boss 受惊吓。</li>
<li>最有用的语言是 English。其次的可能是 Python。</li>
<li>百闻不如一见。画出结果，一目了然。调试耗时将大大缩短。</li>
<li>资源、代码应一道受版本管理。资源匹配错误远比代码匹配错误更难排查。</li>
<li>不要基于想象开发， 要基于原型开发。原型的价值是快速验证想法，帮大家节省时间。</li>
<li>序列化首选明文文本 。诸如二进制、混淆、加密、压缩等等有需要时再加。</li>
<li>编译器永远比你懂微观优化。只能向它不擅长的方向努力。</li>
<li>不要定过大、过远、过细的计划。即使定了也没有用。</li>
</ol>
<hr>
<ol>
<li>至少半数时间将花在集成上。时间，时间，时间总是不够。</li>
<li>与主流意见 / 方法 / 风格 / 习惯相悖时，先检讨自己最可靠。</li>
<li>出现 bug 主动查，不管是不是你的。这能让你业务能力猛涨、个人形象飙升; 如果你的 bug 被别人揪出来….. 呵呵，那你会很被动～≧﹏≦</li>
<li>不知怎么选技术书时就挑薄的。起码不会太贵，且你能看完。</li>
<li>git 是最棒的。简单，可靠，免费。</li>
<li>仅对 “可预测的非理性” 抛断言。</li>
<li>Log 要写时间与分类。并且要能重定向输出。</li>
<li>注释是稍差的文档。更好的是清晰的命名。让代码讲自己的故事。</li>
<li>造轮子是很好的锻炼方法。前提是你见过别的轮子。</li>
<li>code review 最好以小组 / 结对的形式。对业务有一定了解，建议会更有价值（但不绝对）。而且不会成为负担。管理员个人 review 则很容易成 team 的瓶颈。</li>
<li>提问前先做调研。问不到点上既被鄙视，又浪费自己的时间。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 技巧 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 阅读 </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac环境下MySQL的安装与使用]]></title>
      <url>/Mac%E7%8E%AF%E5%A2%83%E4%B8%8BMySQL%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><strong>平台：Mac环境</strong></p>
<blockquote>
<p>mysql操作命令参考：<a href="http://www.runoob.com/mysql/mysql-tutorial.html" target="_blank" rel="external">http://www.runoob.com/mysql/mysql-tutorial.html</a></p>
</blockquote>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul>
<li><p>官网下载地址  <a href="https://dev.mysql.com/downloads/file/?id=473576" target="_blank" rel="external">https://dev.mysql.com/downloads/file/?id=473576</a></p>
</li>
<li><p>默认安装目录 <code>/usr/local/</code></p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>安装时弹出的默认密码，在第一次登录时需要用到：</p>
<pre><code>A temporary password is generated for root@localhost: gkct&gt;2Wajv5W
</code></pre></li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-01%2009.38.31.png" alt=""></p>
<ul>
<li>安装完成</li>
</ul>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-01%2009.39.41.png" alt=""></p>
<ul>
<li><p>登录mysql （连接远程数据库，默认端口号：3306）</p>
<ul>
<li><p>远程连接</p>
<pre><code>mysql -h主机地址 -u用户名 －p用户密码
</code></pre></li>
<li><p>登录mysql （连接本地数据库）</p>
<pre><code>mysql -u root -p
输入密码
</code></pre></li>
</ul>
</li>
<li><p>登录后，修改密码</p>
<pre><code>SET PASSWORD FOR &apos;root&apos;@&apos;localhost&apos; = PASSWORD(&apos;新密码&apos;);
</code></pre></li>
<li><p>开启/关闭 - 手动</p>
</li>
</ul>
<p><code>系统偏好设置</code> -&gt; <code>mysql</code></p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-01%2009.54.09.png" alt=""></p>
<ul>
<li><p>修改mysql编码</p>
<p>查看编码 默认设置：</p>
<pre><code>mysql&gt; show variables like &apos;%char%&apos;;
+--------------------------+-----------------------------------------------------------+
| Variable_name            | Value                                                     |
+--------------------------+-----------------------------------------------------------+
| character_set_client     | utf8                                                      |
| character_set_connection | utf8                                                      |
| character_set_database   | latin1                                                    |
| character_set_filesystem | binary                                                    |
| character_set_results    | utf8                                                      |
| character_set_server     | latin1                                                    |
| character_set_system     | utf8                                                      |
| character_sets_dir       | /usr/local/mysql-5.7.20-macos10.12-x86_64/share/charsets/ |
+--------------------------+-----------------------------------------------------------+
8 rows in set (0.01 sec)
</code></pre></li>
<li><p>修改</p>
</li>
</ul>
<p>在目录：<code>/usr/local/mysql/support-files</code>下找里面有没有<code>my-default.cnf</code>或<code>my.cnf</code>文件.</p>
<ul>
<li><p>如果有则直接打开添加:</p>
<p> 在<code>[client]</code>在下面添加</p>
<pre><code>default-character-set=utf8 默认字符集为utf8 
</code></pre><p> 在<code>[mysqld]</code> 添加 </p>
<pre><code>default-character-set=utf8 默认字符集为utf8 
</code></pre><p> 设定连接mysql数据库时使用utf8编码，以让mysql数据库为<code>utf8</code>运行</p>
<pre><code>init_connect=&apos;SET NAMES utf8&apos;     
</code></pre></li>
</ul>
<ul>
<li><p>若是没有在<code>/etc</code>下新建<code>my.cnf</code>。执行命令：</p>
<pre><code>$ cd /etc
$ sudo vim my.cnf 
</code></pre></li>
</ul>
<p>将 本文 <code>附录</code>内容粘贴到文件中后，保存退出即可。<br><strong>注意：修改完编码后要 退出之后再次进入 才能生效</strong><br>修改之后的编码设置</p>
<pre><code>mysql&gt; show variables like &apos;%char%&apos;;
+--------------------------+-----------------------------------------------------------+
| Variable_name            | Value                                                     |
+--------------------------+-----------------------------------------------------------+
| character_set_client     | utf8                                                      |
| character_set_connection | utf8                                                      |
| character_set_database   | utf8                                                      |
| character_set_filesystem | binary                                                    |
| character_set_results    | utf8                                                      |
| character_set_server     | utf8                                                      |
| character_set_system     | utf8                                                      |
| character_sets_dir       | /usr/local/mysql-5.7.20-macos10.12-x86_64/share/charsets/ |
+--------------------------+-----------------------------------------------------------+
8 rows in set (0.00 sec)
</code></pre><h1 id="卸载MySQL"><a href="#卸载MySQL" class="headerlink" title="卸载MySQL"></a>卸载MySQL</h1><pre><code>sudo rm /usr/local/mysql
sudo rm -rf /usr/local/mysql*
sudo rm -rf /Library/StartupItems/MySQLCOM
sudo rm -rf /Library/PreferencePanes/My*
vim /etc/hostconfig  (and removed the line MYSQLCOM=-YES-)
rm -rf ~/Library/PreferencePanes/My*
sudo rm -rf /Library/Receipts/mysql*
sudo rm -rf /Library/Receipts/MySQL*
sudo rm -rf /var/db/receipts/com.mysql.*
</code></pre><h1 id="MySQL操作命令"><a href="#MySQL操作命令" class="headerlink" title="MySQL操作命令"></a>MySQL操作命令</h1><blockquote>
<p>命令操作参考：<a href="http://www.cnblogs.com/zhangzhu/archive/2013/07/04/3172486.html" target="_blank" rel="external">http://www.cnblogs.com/zhangzhu/archive/2013/07/04/3172486.html</a><br>命令操作参考：<a href="http://blog.csdn.net/qi49125/article/details/77887100" target="_blank" rel="external">http://blog.csdn.net/qi49125/article/details/77887100</a></p>
</blockquote>
<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="查看版本号"><a href="#查看版本号" class="headerlink" title="查看版本号"></a>查看版本号</h3><pre><code>select version();
</code></pre><h3 id="查询所有数据库"><a href="#查询所有数据库" class="headerlink" title="查询所有数据库"></a>查询所有数据库</h3><pre><code>show database;
</code></pre><h3 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h3><pre><code>use 数据库名称
</code></pre><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><pre><code>create database 数据库名
</code></pre><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><pre><code>drop database 数据库名
</code></pre><h3 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h3><h4 id="外部数据库-导入"><a href="#外部数据库-导入" class="headerlink" title="外部数据库 导入"></a>外部数据库 导入</h4><p>登录</p>
<pre><code>mysql -u root -p;
</code></pre><p>选择数据库</p>
<pre><code>use databaseName;
</code></pre><p>将外部的<code>.sql</code>文件拖入终端中 <code>source</code> 命令后面，然后回车</p>
<pre><code>source 拖如.sql文件;
</code></pre><h4 id="内部数据库-导出"><a href="#内部数据库-导出" class="headerlink" title="内部数据库 导出"></a>内部数据库 导出</h4><p>在终端中，要进入存储文件的目录，然后再执行导出操作</p>
<pre><code>cd 待存文件的目录
</code></pre><h5 id="导出MySQL中的所有数据库（结构-数据）"><a href="#导出MySQL中的所有数据库（结构-数据）" class="headerlink" title="导出MySQL中的所有数据库（结构+数据）"></a>导出MySQL中的所有数据库（结构+数据）</h5><pre><code>mysqldump -u root -p --all-databases &gt; dafadf00.sql;
</code></pre><h5 id="导出MySQL中的单个数据库（结构-数据）"><a href="#导出MySQL中的单个数据库（结构-数据）" class="headerlink" title="导出MySQL中的单个数据库（结构+数据）"></a>导出MySQL中的单个数据库（结构+数据）</h5><pre><code>mysqldump -u root -p database_name &gt; sql_name.sql
</code></pre><h5 id="导出单个数据库中的单张表，导出命令中加了一个表名（结构-数据）"><a href="#导出单个数据库中的单张表，导出命令中加了一个表名（结构-数据）" class="headerlink" title="导出单个数据库中的单张表，导出命令中加了一个表名（结构+数据）"></a>导出单个数据库中的单张表，导出命令中加了一个表名（结构+数据）</h5><pre><code>mysqldump -u root -p database_name table_name &gt; sql_name.sql
</code></pre><h4 id="导出数据库的结构-（仅结构）"><a href="#导出数据库的结构-（仅结构）" class="headerlink" title="导出数据库的结构 （仅结构）"></a>导出数据库的结构 （仅结构）</h4><pre><code>mysqldump -u root -p --add-drop-table temp &gt; /Users/yannischeng/Desktop/outfile_name.sql    
</code></pre><h4 id="导出查询数据结果到指定文件"><a href="#导出查询数据结果到指定文件" class="headerlink" title="导出查询数据结果到指定文件"></a>导出查询数据结果到指定文件</h4><blockquote>
<p>参考：<a href="http://blog.csdn.net/u011677147/article/details/64129606" target="_blank" rel="external">http://blog.csdn.net/u011677147/article/details/64129606</a></p>
</blockquote>
<p>在做mysql导出数据的时候，遇到的问题如下：</p>
<pre><code>ERROR 1290 (HY000): The MySQL server is running with the --secure-file-priv option so it cannot execute this statement
</code></pre><p>mysql 默认对导出的目录有权限限制，也就是说使用命令行进行导出的时候，需要指定目录进行操作。解决方法：</p>
<ul>
<li><p>查询mysql 的<code>secure_file_priv</code>配置，使用命令行： </p>
<pre><code>show global variables like &apos;%secure%&apos;;  
</code></pre><p>  查询结果</p>
<pre><code>secure_file_prive=null   -- 限制mysqld 不允许导入导出
secure_file_priv=/tmp/   -- 限制mysqld的导入导出只能发生在/tmp/目录下
secure_file_priv=&apos; &apos;         -- 不对mysqld 的导入 导出做限制
</code></pre></li>
<li><p>更改secure_file_pri的值：<br>/usr/local/mysql/support-files中的my-default.cnf配置文件，就把它复制到/private/etc中，重命名为“my.cnf”，并加入secure_file_priv=’’，重启mysql服务器即可。        </p>
</li>
<li><p>使用 into outfile 开始导出：</p>
<pre><code>select * from table_name into outfile &apos;/Users/yannischeng/Desktop/NewFile.txt&apos;  FIELDS TERMINATED BY &apos;,&apos; OPTIONALLY ENCLOSED BY &apos;&quot;&apos; LINES TERMINATED BY &apos;\n&apos;;
</code></pre><p>  因为导出的数据会出现一些乱码或者特殊字符，所以使用以上关键字进行转义。</p>
</li>
<li><p>出现问题</p>
<pre><code>ERROR 1 (HY000): Can&apos;t create/write to file &apos;/Users/yannischeng/Desktop/NewFile.txt&apos; (Errcode: 13 - Permission denied
</code></pre></li>
</ul>
<h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><pre><code>use 数据库名;
</code></pre><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><pre><code>drop table 表名;
</code></pre><h3 id="删除表中数据"><a href="#删除表中数据" class="headerlink" title="删除表中数据"></a>删除表中数据</h3><pre><code>delete from 表名,……，…… where 表达式;
</code></pre><h3 id="显示当前数据库的表"><a href="#显示当前数据库的表" class="headerlink" title="显示当前数据库的表"></a>显示当前数据库的表</h3><pre><code>show tables;
</code></pre><h3 id="显示表的数据结构"><a href="#显示表的数据结构" class="headerlink" title="显示表的数据结构"></a>显示表的数据结构</h3><pre><code>describe 表名;
</code></pre><p>或者</p>
<pre><code>desc 表名;
</code></pre><p>或者</p>
<pre><code>show columns from 表名;    
</code></pre><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><pre><code>mysql&gt; create table student(
-&gt; id int(4) not null primary key auto_increment,
-&gt; name char(20) not null,
-&gt; age int(4) not null,
-&gt; address char(100),
-&gt; other varchar(100) default &quot;null&quot;);
</code></pre><h3 id="rename-修改表名"><a href="#rename-修改表名" class="headerlink" title="rename 修改表名"></a>rename 修改表名</h3><pre><code>alter table 旧表名 rename 新表名;
</code></pre><p>或者</p>
<pre><code>rename table 原表名  新表名;
</code></pre><h3 id="修改表结构：增（add）、删（drop）、改（modify）、重命名（change）"><a href="#修改表结构：增（add）、删（drop）、改（modify）、重命名（change）" class="headerlink" title="修改表结构：增（add）、删（drop）、改（modify）、重命名（change）"></a>修改表结构：增（add）、删（drop）、改（modify）、重命名（change）</h3><p>可通过<code>after 字段名、first</code>精确控制添加的位置。</p>
<h4 id="add-增加字段"><a href="#add-增加字段" class="headerlink" title="add 增加字段"></a>add 增加字段</h4><pre><code>alter table 表名 add 字段名 字段设置 字段位置;
</code></pre><h4 id="modify-修改字段"><a href="#modify-修改字段" class="headerlink" title="modify 修改字段"></a>modify 修改字段</h4><pre><code>alter table 表名 modify 字段名 字段设置 字段位置;
</code></pre><h4 id="change-重命名字段"><a href="#change-重命名字段" class="headerlink" title="change 重命名字段"></a>change 重命名字段</h4><pre><code>alter table 表名 change 旧字段名 新字段名 字段设置;
</code></pre><h4 id="drop-删除字段"><a href="#drop-删除字段" class="headerlink" title="drop 删除字段"></a>drop 删除字段</h4><pre><code>alter table 表名 drop 字段名;
</code></pre><h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p>单条数据</p>
<pre><code>insert into student (,&apos;yannis&apos;, 25, &apos;tianjin&apos;, &apos;good&apos;);
</code></pre><p>多条数据</p>
<pre><code>insert into student values (13,&apos;tom&apos;, 25, &apos;tianjin&apos;, &apos;good&apos;),(21,&apos;jack&apos;, 25, &apos;tianjin&apos;, &apos;good&apos;);
</code></pre><p>指定字段插入数据</p>
<pre><code>insert into 表名 (字段名) values (&apos;数值&apos;);
</code></pre><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><pre><code>delete from 表名 where 条件;
</code></pre><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><pre><code>update 表名 set name=&apos;marry&apos; where id=13;
</code></pre><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><p>查询数据完整语法</p>
<pre><code>select [distinct][统计函数] 字段名/*
from  数据源
[where 条件子句]
[group by 子句]
[having 子句]
[order by 子句]
[limit 子句];
</code></pre><ul>
<li><code>distinct</code> ：去重复    </li>
<li><p><code>统计函数</code> ：</p>
<pre><code>Count()： 统计分组后的记录数，每一相同的组有多少行记录
Max()：   统计每组最大的值
Min()：   统计每组最小的值
Avg()：   统计每组的平均值
Sum()：   统计每组的和
</code></pre></li>
<li><p><code>where</code> ：条件</p>
</li>
<li><code>group by 字段</code> ：分组。根据某个字段进行分组，相同的放一组，不同的分到不同的组。统计的是数据，不是记录。</li>
<li><p><code>having 子句</code> ：与where子句一样进行条件判断，<strong>为什么是group by……having…… 而不是group by……where?</strong></p>
<p>  因为：<strong>进行数据统计时，是数据进入内存之后，会进行分组 -&gt; 统计 -&gt; having条件判断。而where是针对从磁盘读取数据时进行判断，此刻还没分组，进行统计就判断了。所以错误！</strong></p>
</li>
<li><p><code>order by 子句</code> ：order by根据某个字段进行<code>升序</code>或<code>降序</code>排序，基本语法： </p>
</li>
<li><p><code>order by</code> 字段名 [asc/desc];  </p>
<p>  asc升序 可不写   desc降序</p>
</li>
<li><p><code>limit 子句</code> ：是一种限制结果的语句。</p>
<p>  1）用来限制数量<br>  2) 限制起始位置  limit 起始位置，长度。分页常用。</p>
</li>
<li><p><code>内连接</code>，<code>外连接</code>，<code>自然连接</code>，<code>交叉连接</code></p>
<p>  内连接：从左表中取出每一条记录，和右表中所有的记录进行匹配，匹配必须是左表中与右表中某个条件相同，最终会保留结果，否则不保留。<br>基本语法：  左表 [inner] join 右表  on 左表.字段 = 右表.字段;</p>
<pre><code>select * from my_student inner join my_class on my_student.C_id = mu_class.id;
</code></pre><p>  左外连接：左表为主，然后每条记录与右表进行连接，不管能不能匹配的上，左表都会保留。能匹配，右表某条记录保留，不能匹配，某条记录置为NULL，最终记录数至少不少于左表已有的记录。<br>基本语法：  左表  left join  右表  on  左表.字段 = 右表.字段;</p>
</li>
</ul>
<h3 id="当前时间："><a href="#当前时间：" class="headerlink" title="当前时间："></a>当前时间：</h3><pre><code>select now();    
</code></pre><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><pre><code># Example MySQL config file for medium systems. 
# 
# This is for a system with little memory (32M - 64M) where MySQL plays 
# an important part, or systems up to 128M where MySQL is used together with 
# other programs (such as a web server) 
# 
# MySQL programs look for option files in a set of 
# locations which depend on the deployment platform. 
# You can copy this option file to one of those 
# locations. For information about these locations, see: 
# http://dev.mysql.com/doc/mysql/en/option-files.html 
# 
# In this file, you can use all long options that a program supports. 
# If you want to know which options a program supports, run the program 
# with the &quot;--help&quot; option. 
# The following options will be passed to all MySQL clients 
[client]
default-character-set=utf8
#password = your_password 
port = 3306 
socket = /tmp/mysql.sock 
# Here follows entries for some specific programs 
# The MySQL server 
[mysqld]
character-set-server=utf8
init_connect=&apos;SET NAMES utf8
port = 3306 
socket = /tmp/mysql.sock 
skip-external-locking 
key_buffer_size = 16M 
max_allowed_packet = 1M 
table_open_cache = 64 
sort_buffer_size = 512K 
net_buffer_length = 8K 
read_buffer_size = 256K 
read_rnd_buffer_size = 512K 
myisam_sort_buffer_size = 8M 
character-set-server=utf8 
init_connect=&apos;SET NAMES utf8&apos; 
# Don&apos;t listen on a TCP/IP port at all. This can be a security enhancement, 
# if all processes that need to connect to mysqld run on the same host. 
# All interaction with mysqld must be made via Unix sockets or named pipes. 
# Note that using this option without enabling named pipes on Windows 
# (via the &quot;enable-named-pipe&quot; option) will render mysqld useless! 
# 
#skip-networking

# Replication Master Server (default) 
# binary logging is required for replication 
log-bin=mysql-bin

# binary logging format - mixed recommended 
binlog_format=mixed

# required unique id between 1 and 2^32 - 1 
# defaults to 1 if master-host is not set 
# but will not function as a master if omitted 
server-id = 1

# Replication Slave (comment out master section to use this) 
# 
# To configure this host as a replication slave, you can choose between 
# two methods : 
# 
# 1) Use the CHANGE MASTER TO command (fully described in our manual) - 
# the syntax is: 
# 
# CHANGE MASTER TO MASTER_HOST=&lt;host&gt;, MASTER_PORT=&lt;port&gt;, 
# MASTER_USER=&lt;user&gt;, MASTER_PASSWORD=&lt;password&gt; ; 
# 
# where you replace &lt;host&gt;, &lt;user&gt;, &lt;password&gt; by quoted strings and 
# &lt;port&gt; by the master&apos;s port number (3306 by default). 
# 
# Example: 
# 
# CHANGE MASTER TO MASTER_HOST=&apos;125.564.12.1&apos;, MASTER_PORT=3306, 
# MASTER_USER=&apos;joe&apos;, MASTER_PASSWORD=&apos;secret&apos;; 
# 
# OR 
# 
# 2) Set the variables below. However, in case you choose this method, then 
# start replication for the first time (even unsuccessfully, for example 
# if you mistyped the password in master-password and the slave fails to 
# connect), the slave will create a master.info file, and any later 
# change in this file to the variables&apos; values below will be ignored and 
# overridden by the content of the master.info file, unless you shutdown 
# the slave server, delete master.info and restart the slaver server. 
# For that reason, you may want to leave the lines below untouched 
# (commented) and instead use CHANGE MASTER TO (see above) 
# 
# required unique id between 2 and 2^32 - 1 
# (and different from the master) 
# defaults to 2 if master-host is set 
# but will not function as a slave if omitted 
#server-id = 2 
# 
# The replication master for this slave - required 
#master-host = &lt;hostname&gt; 
# 
# The username the slave will use for authentication when connecting 
# to the master - required 
#master-user = &lt;username&gt; 
# 
# The password the slave will authenticate with when connecting to 
# the master - required 
#master-password = &lt;password&gt; 
# 
# The port the master is listening on. 
# optional - defaults to 3306 
#master-port = &lt;port&gt; 
# 
# binary logging - not required for slaves, but recommended 
#log-bin=mysql-bin

# Uncomment the following if you are using InnoDB tables 
#innodb_data_home_dir = /usr/local/mysql/data 
#innodb_data_file_path = ibdata1:10M:autoextend 
#innodb_log_group_home_dir = /usr/local/mysql/data 
# You can set .._buffer_pool_size up to 50 - 80 % 
# of RAM but beware of setting memory usage too high 
#innodb_buffer_pool_size = 16M 
#innodb_additional_mem_pool_size = 2M 
# Set .._log_file_size to 25 % of buffer pool size 
#innodb_log_file_size = 5M 
#innodb_log_buffer_size = 8M 
#innodb_flush_log_at_trx_commit = 1 
#innodb_lock_wait_timeout = 50

[mysqldump] 
quick 
max_allowed_packet = 16M

[mysql] 
no-auto-rehash 
# Remove the next comment character if you are not familiar with SQL 
#safe-updates 
default-character-set=utf8

[myisamchk] 
key_buffer_size = 20M 
sort_buffer_size = 20M 
read_buffer = 2M 
write_buffer = 2M

[mysqlhotcopy] 
interactive-timeout
</code></pre>]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3 16-安装爬虫工具Scrapy]]></title>
      <url>/Python3%20%2016-%E5%AE%89%E8%A3%85%E7%88%AC%E8%99%AB%E5%B7%A5%E5%85%B7Scrapy/</url>
      <content type="html"><![CDATA[<p>python的学习在今天又开始了：<br><strong>人生苦短，我用python。</strong></p>
<p>安装Scrapy需要使用到：pip（python2）、pip3（python3），由于之前已经安装，此处忽略。</p>
<a id="more"></a>
<p><strong>平台：Mac</strong><br><strong>python2 pip</strong><br><strong>python3 pip3</strong></p>
<h1 id="使用pip进行安装"><a href="#使用pip进行安装" class="headerlink" title="使用pip进行安装"></a>使用pip进行安装</h1><p><strong>注意：安装过程还是比较曲折的 (〒︿〒)</strong></p>
<pre><code>sudo pip install scrapy
</code></pre><p><strong>错误 - 1 ：</strong></p>
<pre><code>Found existing installation: six 1.4.1
DEPRECATION: Uninstalling a distutils installed project (six) has been deprecated and will be removed in a future version. This is due to the fact that uninstalling a distutils project will only partially uninstall the project.
Uninstalling six-1.4.1:
...
OSError: [Errno 1] Operation not permitted: &apos;/tmp/pip-89wTP6-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/six-1.4.1-py2.7.egg-info&apos;
</code></pre><p>根据网上得出的解决方案：</p>
<p>重启电脑，按住 <code>option</code> 键，–&gt; 再按 <code>command + r</code> 进入 <code>Recovery</code>模式 –&gt; <code>工具</code>选择<code>终端</code><br>输入：</p>
<pre><code>csrutil disable
</code></pre><p>然后</p>
<pre><code>reboot
</code></pre><p>再次执行</p>
<pre><code>sudo pip install Scrapy
</code></pre><p>进行安装，结果依然出错。<br><strong>错误 - 2 ：</strong></p>
<pre><code> Found existing installation: six 1.4.1
DEPRECATION: Uninstalling a distutils installed project (six) has been deprecated and will be     removed in a future version. This is due to the fact that uninstalling a distutils project will only     partially uninstall the project.
Uninstalling six-1.4.1:
  Successfully uninstalled six-1.4.1

  Running setup.py install for PyDispatcher ... done
  Running setup.py install for Twisted ... done
</code></pre><p>  <strong>注意：</strong></p>
<pre><code>Running setup.py install for PyDispatcher ... done
Running setup.py install for Twisted ... done
</code></pre><p>因为未安装 以上两个，导致 Scrapy未能安装成功。<strong>错误描述为：</strong></p>
<pre><code>AttributeError: &apos;module&apos; object has no attribute &apos;OP_NO_TLSv1_1&apos;
</code></pre><p>安装 <code>twisted</code></p>
<pre><code>$ pip install twisted==15.4.0
</code></pre><p><strong>仍然报错 - 3 ：</strong></p>
<pre><code>AttributeError: &apos;module&apos; object has no attribute &apos;OP_NO_TLSv1_1&apos;
</code></pre><p>更新<code>pyOpenSSl</code></p>
<pre><code>sudo pip install --upgrade pyOpenSSl
</code></pre><p>最终出现：</p>
<pre><code>Successfully uninstalled pyOpenSSL-0.13.1
Successfully installed asn1crypto-0.23.0 cffi-1.11.2 cryptography-2.1.2 enum34-1.1.6 idna-2.6 ipaddress-1.0.18 pyOpenSSl-17.3.0 pycparser-2.18
</code></pre><p>然后输入：</p>
<pre><code>scrapy version
</code></pre><p>出现结果：</p>
<pre><code>Scrapy 1.4.0
</code></pre><p><strong>安装成功！</strong></p>
<h1 id="使用pip3进行安装"><a href="#使用pip3进行安装" class="headerlink" title="使用pip3进行安装"></a>使用pip3进行安装</h1><blockquote>
<p>参考：<a href="http://www.jianshu.com/p/d00a19f6c4ed" target="_blank" rel="external">http://www.jianshu.com/p/d00a19f6c4ed</a></p>
</blockquote>
<p><strong>提示：在使用 pip3 进行安装时，首先应该执行以下步骤：</strong></p>
<pre><code>sudo -s pip3 install --ignore-installed six
</code></pre><p>否则报错：</p>
<pre><code>PermissionError: [Errno 13] Permission denied: &apos;/usr/local/Cellar/python3/3.6.1/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/six.py&apos;
</code></pre><p>然后执行：</p>
<pre><code>sudo -s pip3 install scrapy
</code></pre><p>结果：</p>
<pre><code>Installing collected packages: cssselect, queuelib, w3lib, PyDispatcher, lxml, parsel, idna, pycparser, cffi, asn1crypto, cryptography, pyOpenSSL, pyasn1, attrs, pyasn1-modules, service-identity, hyperlink, incremental, zope.interface, Automat, constantly, Twisted, scrapy
Successfully installed Automat-0.6.0 PyDispatcher-2.0.5 Twisted-17.9.0 asn1crypto-0.23.0 attrs-17.2.0 cffi-1.11.2 constantly-15.1.0 cryptography-2.1.2 cssselect-1.0.1 hyperlink-17.3.1 idna-2.6 incremental-17.5.0 lxml-4.1.0 parsel-1.2.0 pyOpenSSL-17.3.0 pyasn1-0.3.7 pyasn1-modules-0.1.5 pycparser-2.18 queuelib-1.4.2 scrapy-1.4.0 service-identity-17.0.0 w3lib-1.18.0 zope.interface-4.4.3
</code></pre><p><strong>验证：</strong></p>
<pre><code>YannisCheng:source yannischeng$ python3
Python 3.6.1 (default, Apr  4 2017, 09:40:21) 
[GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.38)] on darwin
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; import scrapy
&gt;&gt;&gt; 
</code></pre><p><strong>安装成功</strong></p>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio 快捷键]]></title>
      <url>/Android-Studio%E4%BD%BF%E7%94%A8%E5%BF%AB%E4%BA%BA%E4%B8%80%E6%AD%A52%20%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<p>键盘快捷键</p>
<blockquote>
<p>快捷键参考：<a href="https://developer.android.google.cn/studio/intro/keyboard-shortcuts.html" target="_blank" rel="external">https://developer.android.google.cn/studio/intro/keyboard-shortcuts.html</a><br><strong>Android Studio使用指南</strong>：<a href="https://developer.android.google.cn/studio/projects/android-library.html" target="_blank" rel="external">https://developer.android.google.cn/studio/projects/android-library.html</a></p>
</blockquote>
<p><strong>常规</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">说明</th>
<th style="text-align:left">Windows/Linux</th>
<th style="text-align:left">Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">全部保存</td>
<td style="text-align:left">Control + S</td>
<td style="text-align:left">Command + S</td>
</tr>
<tr>
<td style="text-align:left">同步</td>
<td style="text-align:left">Control + Alt + Y</td>
<td style="text-align:left">Command + Option + Y</td>
</tr>
<tr>
<td style="text-align:left">最大化/最小化编辑器</td>
<td style="text-align:left">Control + Shift + F12</td>
<td style="text-align:left">Control + Command + F12</td>
</tr>
<tr>
<td style="text-align:left">添加到收藏夹</td>
<td style="text-align:left">Alt + Shift + F</td>
<td style="text-align:left">Option + Shift + F</td>
</tr>
<tr>
<td style="text-align:left">使用当前配置文件检查当前文件</td>
<td style="text-align:left">Alt + Shift + I</td>
<td style="text-align:left">Option + Shift + I</td>
</tr>
<tr>
<td style="text-align:left">快速切换模式</td>
<td style="text-align:left">Control +  （反引号）</td>
<td style="text-align:left">Control + `（反引号）</td>
</tr>
<tr>
<td style="text-align:left">打开设置对话框</td>
<td style="text-align:left">Control + Alt + S</td>
<td style="text-align:left">Command + ,（英文逗号）</td>
</tr>
<tr>
<td style="text-align:left">打开项目结构对话框</td>
<td style="text-align:left">Control + Alt + Shift + S</td>
<td style="text-align:left">Command + ;（英文分号）</td>
</tr>
<tr>
<td style="text-align:left">在标签和工具窗口之间切换</td>
<td style="text-align:left">Control + Tab</td>
<td style="text-align:left">Control + Tab</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p><strong>在 Studio 内导航和搜索</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">说明</th>
<th style="text-align:left">Windows/Linux</th>
<th style="text-align:left">Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">搜索全部内容（包括代码和菜单）</td>
<td style="text-align:left">按两次 Shift</td>
<td style="text-align:left">按两次 Shift</td>
</tr>
<tr>
<td style="text-align:left">查找</td>
<td style="text-align:left">Control + F</td>
<td style="text-align:left">Command + F</td>
</tr>
<tr>
<td style="text-align:left">查找下一个</td>
<td style="text-align:left">F3</td>
<td style="text-align:left">Command + G</td>
</tr>
<tr>
<td style="text-align:left">查找上一个</td>
<td style="text-align:left">Shift + F3</td>
<td style="text-align:left">Command + Shift + G</td>
</tr>
<tr>
<td style="text-align:left">替换</td>
<td style="text-align:left">Control + R</td>
<td style="text-align:left">Command + R</td>
</tr>
<tr>
<td style="text-align:left">查找操作</td>
<td style="text-align:left">Control + Shift + A</td>
<td style="text-align:left">Command + Shift + A</td>
</tr>
<tr>
<td style="text-align:left">按符号名称搜索</td>
<td style="text-align:left">Control + Alt + Shift + N</td>
<td style="text-align:left">Command + Option + O</td>
</tr>
<tr>
<td style="text-align:left">查找类</td>
<td style="text-align:left">Control + N</td>
<td style="text-align:left">Command + O</td>
</tr>
<tr>
<td style="text-align:left">查找文件（而不是类）</td>
<td style="text-align:left">Control + Shift + N</td>
<td style="text-align:left">Command + Shift + O</td>
</tr>
<tr>
<td style="text-align:left">在路径中查找</td>
<td style="text-align:left">Control + Shift + F</td>
<td style="text-align:left">Command + Shift + F</td>
</tr>
<tr>
<td style="text-align:left">打开文件结构弹出式菜单</td>
<td style="text-align:left">Control + F12</td>
<td style="text-align:left">Command + F12</td>
</tr>
<tr>
<td style="text-align:left">在打开的编辑器标签之前导航</td>
<td style="text-align:left">Alt + 向右/向左箭头</td>
<td style="text-align:left">Control + 向右/向左箭头</td>
</tr>
<tr>
<td style="text-align:left">跳到源代码</td>
<td style="text-align:left">F4 / Control + Enter</td>
<td style="text-align:left">F4 / Command + 向下箭头</td>
</tr>
<tr>
<td style="text-align:left">在新窗口中打开当前编辑器标签</td>
<td style="text-align:left">Shift + F4</td>
<td style="text-align:left">Shift + F4</td>
</tr>
<tr>
<td style="text-align:left">最近打开的文件弹出式菜单</td>
<td style="text-align:left">Control + E</td>
<td style="text-align:left">Command + E</td>
</tr>
<tr>
<td style="text-align:left">最近编辑的文件弹出式菜单</td>
<td style="text-align:left">Control + Shift + E</td>
<td style="text-align:left">Command + Shift + E</td>
</tr>
<tr>
<td style="text-align:left">转到上一个编辑位置</td>
<td style="text-align:left">Control + Shift + 退格键</td>
<td style="text-align:left">Command + Shift + 退格键</td>
</tr>
<tr>
<td style="text-align:left">关闭活动编辑器标签</td>
<td style="text-align:left">Control + F4</td>
<td style="text-align:left">Command + W</td>
</tr>
<tr>
<td style="text-align:left">从工具窗口返回到编辑器窗口</td>
<td style="text-align:left">Esc</td>
<td style="text-align:left">Esc</td>
</tr>
<tr>
<td style="text-align:left">隐藏活动或上一个活动工具窗口</td>
<td style="text-align:left">Shift + Esc</td>
<td style="text-align:left">Shift + Esc</td>
</tr>
<tr>
<td style="text-align:left">转到行</td>
<td style="text-align:left">Control + G</td>
<td style="text-align:left">Command + L</td>
</tr>
<tr>
<td style="text-align:left">打开类型层次结构</td>
<td style="text-align:left">Control + H</td>
<td style="text-align:left">Control + H</td>
</tr>
<tr>
<td style="text-align:left">打开方法层次结构</td>
<td style="text-align:left">Control + Shift + H</td>
<td style="text-align:left">Command + Shift + H</td>
</tr>
<tr>
<td style="text-align:left">打开调用层次结构</td>
<td style="text-align:left">Control + Alt + H</td>
<td style="text-align:left">Control + Option + H</td>
<td>s</td>
</tr>
</tbody>
</table>
<p><strong>编写代码</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">说明</th>
<th style="text-align:left">Windows/Linux</th>
<th style="text-align:left">Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">生成代码（getter、setter、构造函数、hashCode/equals、toString、新文件、新类）</td>
<td style="text-align:left">Alt + Insert</td>
<td style="text-align:left">Command + N</td>
</tr>
<tr>
<td style="text-align:left">替换方法</td>
<td style="text-align:left">Control + O</td>
<td style="text-align:left">Control + O</td>
</tr>
<tr>
<td style="text-align:left">实现方法</td>
<td style="text-align:left">Control + I</td>
<td style="text-align:left">Control + I</td>
</tr>
<tr>
<td style="text-align:left">控制语句 (if…else / try…catch / etc.)</td>
<td style="text-align:left">Control + Alt + T</td>
<td style="text-align:left">Command + Option + T</td>
</tr>
<tr>
<td style="text-align:left">删除插入符处的行</td>
<td style="text-align:left">Control + Y</td>
<td style="text-align:left">Command + 退格键</td>
</tr>
<tr>
<td style="text-align:left">折叠/展开当前代码块</td>
<td style="text-align:left">Control + 减号/加号</td>
<td style="text-align:left">Command + 减号/加号</td>
</tr>
<tr>
<td style="text-align:left">折叠/展开所有代码块</td>
<td style="text-align:left">Control + Shift + 减号/加号</td>
<td style="text-align:left">Command + Shift + 减号/加号</td>
</tr>
<tr>
<td style="text-align:left">复制当前行或选择</td>
<td style="text-align:left">Control + D</td>
<td style="text-align:left">Command + D</td>
</tr>
<tr>
<td style="text-align:left">基本代码自动完成</td>
<td style="text-align:left">Control + 空格键</td>
<td style="text-align:left">Control + 空格键</td>
</tr>
<tr>
<td style="text-align:left">智能代码自动完成（按预期类型过滤方法和变量列表）</td>
<td style="text-align:left">Control + Shift + 空格键</td>
<td style="text-align:left">Control + Shift + 空格键</td>
</tr>
<tr>
<td style="text-align:left">完成语句</td>
<td style="text-align:left">Control + Shift + Enter</td>
<td style="text-align:left">Command + Shift + Enter</td>
</tr>
<tr>
<td style="text-align:left">快速文档查找</td>
<td style="text-align:left">Control + Q</td>
<td style="text-align:left">Control + J</td>
</tr>
<tr>
<td style="text-align:left">显示选定方法的参数</td>
<td style="text-align:left">Control + P</td>
<td style="text-align:left">Command + P</td>
</tr>
<tr>
<td style="text-align:left">转到声明（直接）</td>
<td style="text-align:left">Control + B 或 Control + 点击</td>
<td style="text-align:left">Command + B 或 Command + 点击</td>
</tr>
<tr>
<td style="text-align:left">转到实现</td>
<td style="text-align:left">Control + Alt + B</td>
<td style="text-align:left">Command + Alt + B</td>
</tr>
<tr>
<td style="text-align:left">转到超类方法/超类</td>
<td style="text-align:left">Control + U</td>
<td style="text-align:left">Command + U</td>
</tr>
<tr>
<td style="text-align:left">打开快速定义查找</td>
<td style="text-align:left">Control + Shift + I</td>
<td style="text-align:left">Command + Y</td>
</tr>
<tr>
<td style="text-align:left">切换项目工具窗口的可见性</td>
<td style="text-align:left">Alt + 1</td>
<td style="text-align:left">Command + 1</td>
</tr>
<tr>
<td style="text-align:left">切换书签</td>
<td style="text-align:left">F11</td>
<td style="text-align:left">F3</td>
</tr>
<tr>
<td style="text-align:left">通过助记切换书签</td>
<td style="text-align:left">Control + F11</td>
<td style="text-align:left">Option + F3</td>
</tr>
<tr>
<td style="text-align:left">通过行注释添加注释/取消注释</td>
<td style="text-align:left">Control + /</td>
<td style="text-align:left">Command + /</td>
</tr>
<tr>
<td style="text-align:left">通过块注释添加注释/取消注释</td>
<td style="text-align:left">Control + Shift + /</td>
<td style="text-align:left">Command + Shift + /</td>
</tr>
<tr>
<td style="text-align:left">选择连续增加的代码块</td>
<td style="text-align:left">Control + W</td>
<td style="text-align:left">Option + Up</td>
</tr>
<tr>
<td style="text-align:left">将当前选择退回到上一个状态</td>
<td style="text-align:left">Control + Shift + W</td>
<td style="text-align:left">Option + Down</td>
</tr>
<tr>
<td style="text-align:left">移动到代码块起始位置</td>
<td style="text-align:left">Control + [</td>
<td style="text-align:left">Option + Command + [</td>
</tr>
<tr>
<td style="text-align:left">移动到代码块结束位置</td>
<td style="text-align:left">Control + ]</td>
<td style="text-align:left">Option + Command + ]</td>
</tr>
<tr>
<td style="text-align:left">从当前位置选择到代码块起始位置</td>
<td style="text-align:left">Control + Shift + [</td>
<td style="text-align:left">Option + Command + Shift + [</td>
</tr>
<tr>
<td style="text-align:left">从当前位置选择到代码块结束位置</td>
<td style="text-align:left">Control + Shift + ]</td>
<td style="text-align:left">Option + Command + Shift + ]</td>
</tr>
<tr>
<td style="text-align:left">从当前位置删除到单词结尾</td>
<td style="text-align:left">Control + Delete</td>
<td style="text-align:left">Option + Delete</td>
</tr>
<tr>
<td style="text-align:left">从当前位置删除到单词开头</td>
<td style="text-align:left">Control + 退格键</td>
<td style="text-align:left">Option + 退格键</td>
</tr>
<tr>
<td style="text-align:left">优化导入</td>
<td style="text-align:left">Control + Alt + O</td>
<td style="text-align:left">Control + Option + O</td>
</tr>
<tr>
<td style="text-align:left">项目快速修复（显示意图操作和快速修复）</td>
<td style="text-align:left">Alt + Enter</td>
<td style="text-align:left">Option + Enter</td>
</tr>
<tr>
<td style="text-align:left">重新格式化代码</td>
<td style="text-align:left">Control + Alt + L</td>
<td style="text-align:left">Command + Option + L</td>
</tr>
<tr>
<td style="text-align:left">自动缩进行</td>
<td style="text-align:left">Control + Alt + I</td>
<td style="text-align:left">Control + Option + I</td>
</tr>
<tr>
<td style="text-align:left">缩进/取消缩进行</td>
<td style="text-align:left">Tab/Shift + Tab</td>
<td style="text-align:left">Tab/Shift + Tab</td>
</tr>
<tr>
<td style="text-align:left">智能行合并</td>
<td style="text-align:left">Control + Shift + J</td>
<td style="text-align:left">Control + Shift + J</td>
</tr>
<tr>
<td style="text-align:left">智能行拆分</td>
<td style="text-align:left">Control + Enter</td>
<td style="text-align:left">Command + Enter</td>
</tr>
<tr>
<td style="text-align:left">开始新行</td>
<td style="text-align:left">Shift + Enter</td>
<td style="text-align:left">Shift + Enter</td>
</tr>
<tr>
<td style="text-align:left">下一个/上一个突出显示的错误</td>
<td style="text-align:left">F2 / Shift + F2</td>
<td style="text-align:left">F2 / Shift + F2</td>
</tr>
</tbody>
</table>
<p><strong>构建并运行</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">说明</th>
<th style="text-align:left">Windows/Linux</th>
<th style="text-align:left">Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">构建</td>
<td style="text-align:left">Control + F9</td>
<td style="text-align:left">Command + F9</td>
</tr>
<tr>
<td style="text-align:left">构建并运行</td>
<td style="text-align:left">Shift + F10</td>
<td style="text-align:left">Control + R</td>
</tr>
</tbody>
</table>
<p><strong>调试</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">说明</th>
<th style="text-align:left">Windows/Linux</th>
<th style="text-align:left">Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">调试</td>
<td style="text-align:left">Shift + F9</td>
<td style="text-align:left">Control + D</td>
</tr>
<tr>
<td style="text-align:left">跳过</td>
<td style="text-align:left">F8</td>
<td style="text-align:left">F8</td>
</tr>
<tr>
<td style="text-align:left">逐步执行</td>
<td style="text-align:left">F7</td>
<td style="text-align:left">F7</td>
</tr>
<tr>
<td style="text-align:left">智能逐步执行</td>
<td style="text-align:left">Shift + F7</td>
<td style="text-align:left">Shift + F7</td>
</tr>
<tr>
<td style="text-align:left">跳出</td>
<td style="text-align:left">Shift + F8</td>
<td style="text-align:left">Shift + F8</td>
</tr>
<tr>
<td style="text-align:left">运行到光标位置</td>
<td style="text-align:left">Alt + F9</td>
<td style="text-align:left">Option + F9</td>
</tr>
<tr>
<td style="text-align:left">评估表达式</td>
<td style="text-align:left">Alt + F8</td>
<td style="text-align:left">Option + F8</td>
</tr>
<tr>
<td style="text-align:left">继续运行程序</td>
<td style="text-align:left">F9</td>
<td style="text-align:left">Command + Option + R</td>
</tr>
<tr>
<td style="text-align:left">切换断点</td>
<td style="text-align:left">Control + F8</td>
<td style="text-align:left">Command + F8</td>
</tr>
<tr>
<td style="text-align:left">查看断点</td>
<td style="text-align:left">Control + Shift + F8</td>
<td style="text-align:left">Command + Shift + F8</td>
</tr>
</tbody>
</table>
<p><strong>重构</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">说明</th>
<th style="text-align:left">Windows/Linux</th>
<th style="text-align:left">Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">复制</td>
<td style="text-align:left">F5</td>
<td style="text-align:left">F5</td>
</tr>
<tr>
<td style="text-align:left">移动</td>
<td style="text-align:left">F6</td>
<td style="text-align:left">F6</td>
</tr>
<tr>
<td style="text-align:left">安全删除</td>
<td style="text-align:left">Alt + Delete</td>
<td style="text-align:left">Command + Delete</td>
</tr>
<tr>
<td style="text-align:left">重命名</td>
<td style="text-align:left">Shift + F6</td>
<td style="text-align:left">Shift + F6</td>
</tr>
<tr>
<td style="text-align:left">更改签名</td>
<td style="text-align:left">Control + F6</td>
<td style="text-align:left">Command + F6</td>
</tr>
<tr>
<td style="text-align:left">内联</td>
<td style="text-align:left">Control + Alt + N</td>
<td style="text-align:left">Command + Option + N</td>
</tr>
<tr>
<td style="text-align:left">提取方法</td>
<td style="text-align:left">Control + Alt + M</td>
<td style="text-align:left">Command + Option + M</td>
</tr>
<tr>
<td style="text-align:left">提取变量</td>
<td style="text-align:left">Control + Alt + V</td>
<td style="text-align:left">Command + Option + V</td>
</tr>
<tr>
<td style="text-align:left">提取字段</td>
<td style="text-align:left">Control + Alt + F</td>
<td style="text-align:left">Command + Option + F</td>
</tr>
<tr>
<td style="text-align:left">提取常量</td>
<td style="text-align:left">Control + Alt + C</td>
<td style="text-align:left">Command + Option + C</td>
</tr>
<tr>
<td style="text-align:left">提取参数</td>
<td style="text-align:left">Control + Alt + P</td>
<td style="text-align:left">Command + Option + P</td>
</tr>
</tbody>
</table>
<p><strong>版本控制/本地历史记录</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">说明</th>
<th style="text-align:left">Windows/Linux</th>
<th style="text-align:left">MacOS</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">将项目提交到 VCS</td>
<td style="text-align:left">Control + K</td>
<td style="text-align:left">Command + K</td>
</tr>
<tr>
<td style="text-align:left">从 VCS 更新项目</td>
<td style="text-align:left">Control + T</td>
<td style="text-align:left">Command + T</td>
</tr>
<tr>
<td style="text-align:left">查看最近变更</td>
<td style="text-align:left">Alt + Shift + C</td>
<td style="text-align:left">Option + Shift + C</td>
</tr>
<tr>
<td style="text-align:left">打开 VCS 弹出式菜单</td>
<td style="text-align:left">Alt + `（反引号）</td>
<td style="text-align:left">Control + V</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android资源文件-color]]></title>
      <url>/Android%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6-color/</url>
      <content type="html"><![CDATA[<blockquote>
<p>官方参考：<a href="https://material.io/guidelines/style/color.html#color-color-palette" target="_blank" rel="external">https://material.io/guidelines/style/color.html#color-color-palette</a></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 0 Black 黑色 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Black"</span>&gt;</span>#000000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 0 White 白色 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"White"</span>&gt;</span>#FFFFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.39.52.png" alt="Github set up-w300"></p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 1 Grey 灰色 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Grey_50"</span>&gt;</span>#FAFAFA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Grey_100"</span>&gt;</span>#F5F5F5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Grey_200"</span>&gt;</span>#EEEEEE<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Grey_300"</span>&gt;</span>#E0E0E0<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Grey_400"</span>&gt;</span>#BDBDBD<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Grey_500_bar"</span>&gt;</span>#9E9E9E<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Grey_600"</span>&gt;</span>#757575<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Grey_700"</span>&gt;</span>#616161<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Grey_800"</span>&gt;</span>#424242<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Grey_900"</span>&gt;</span>#212121<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.40.32.png" alt="Github set up-w300"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 2 Blue Grey 蓝灰色--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_Grey_50"</span>&gt;</span>#FAFAFA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_Grey_100"</span>&gt;</span>#CFD8DC<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_Grey_200"</span>&gt;</span>#B0BEC5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_Grey_300"</span>&gt;</span>#90A4AE<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_Grey_400"</span>&gt;</span>#78909C<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_Grey_500_bar"</span>&gt;</span>#607D8B<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_Grey_600"</span>&gt;</span>#546E7A<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_Grey_700"</span>&gt;</span>#455A64<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_Grey_800"</span>&gt;</span>#37474F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_Grey_900"</span>&gt;</span>#263238<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.40.10.png" alt="Github set up-w300"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 3 Red 红色--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_50"</span>&gt;</span>#FFEBEE<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_100"</span>&gt;</span>#FFCDD2<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_200"</span>&gt;</span>#EF9A9A<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_300"</span>&gt;</span>#E57373<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_400"</span>&gt;</span>#EF5350<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_500_bar"</span>&gt;</span>#F44336<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_600"</span>&gt;</span>#E53935<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_700"</span>&gt;</span>#D32F2F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_800"</span>&gt;</span>#C62828<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_900"</span>&gt;</span>#B71C1C<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_a100"</span>&gt;</span>#FF8A80<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_a200"</span>&gt;</span>#FF5252<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_a400"</span>&gt;</span>#FF1744<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"r_a700"</span>&gt;</span>#D50000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.43.43.png" alt="Github set up-w300"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 4 Pink 粉色--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_50"</span>&gt;</span>#FCE4EC<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_100"</span>&gt;</span>#F8BBD0<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_200"</span>&gt;</span>#F48FB1<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_300"</span>&gt;</span>#F06292<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_400"</span>&gt;</span>#EC407A<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_500_bar"</span>&gt;</span>#E91E63<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_600"</span>&gt;</span>#D81B60<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_700"</span>&gt;</span>#C2185B<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_800"</span>&gt;</span>#AD1457<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_900"</span>&gt;</span>#880E4F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_a100"</span>&gt;</span>#FF80AB<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_a200"</span>&gt;</span>#FF4081<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_a400"</span>&gt;</span>#F50057<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"p_a700"</span>&gt;</span>#C51162<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.43.53.png" alt="Github set up-w300"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 5 Purple 紫色--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_50"</span>&gt;</span>#F3E5F5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_100"</span>&gt;</span>#E1BEE7<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_200"</span>&gt;</span>#CE93D8<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_300"</span>&gt;</span>#BA68C8<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_400"</span>&gt;</span>#AB47BC<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_500_bar"</span>&gt;</span>#9C27B0<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_600"</span>&gt;</span>#8E24AA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_700"</span>&gt;</span>#7B1FA2<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_800"</span>&gt;</span>#6A1B9A<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_900"</span>&gt;</span>#4A148C<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_a100"</span>&gt;</span>#EA80FC<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_a200"</span>&gt;</span>#E040FB<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_a400"</span>&gt;</span>#D500F9<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"pur_a700"</span>&gt;</span>#AA00FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.43.33.png" alt="Github set up-w300"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 6 Deep Purple 深紫色--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_50"</span>&gt;</span>#EDE7F6<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_100"</span>&gt;</span>#D1C4E9<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_200"</span>&gt;</span>#B39DDB<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_300"</span>&gt;</span>#9575CD<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_400"</span>&gt;</span>#7E57C2<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_500_bar"</span>&gt;</span>#673AB7<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_600"</span>&gt;</span>#5E35B1<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_700"</span>&gt;</span>#512DA8<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_800"</span>&gt;</span>#4527A0<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_900"</span>&gt;</span>#311B92<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_a100"</span>&gt;</span>#B388FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_a200"</span>&gt;</span>#7C4DFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_a400"</span>&gt;</span>#651FFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"deep_pur_a700"</span>&gt;</span>#6200EA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.43.13.png" alt="Github set up-w300"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 7 Indigo  靛蓝色 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_50"</span>&gt;</span>#E8EAF6<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_100"</span>&gt;</span>#C5CAE9<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_200"</span>&gt;</span>#9FA8DA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_300"</span>&gt;</span>#7986CB<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_400"</span>&gt;</span>#5C6BC0<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_500_bar"</span>&gt;</span>#3F51B5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_600"</span>&gt;</span>#3949AB<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_700"</span>&gt;</span>#303F9F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_800"</span>&gt;</span>#283593<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_900"</span>&gt;</span>#1A237E<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_a100"</span>&gt;</span>#8C9EFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_a200"</span>&gt;</span>#536DFE<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_a400"</span>&gt;</span>#3D5AFE<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Indigo_a700"</span>&gt;</span>#304FFE<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.43.21.png" alt="Github set up-w300"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 8 Blue 蓝色 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_50"</span>&gt;</span>#E3F2FD<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_100"</span>&gt;</span>#BBDEFB<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_200"</span>&gt;</span>#90CAF9<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_300"</span>&gt;</span>#64B5F6<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_400"</span>&gt;</span>#42A5F5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_500_bar"</span>&gt;</span>#2196F3<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_600"</span>&gt;</span>#1E88E5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_700"</span>&gt;</span>#1976D2<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_800"</span>&gt;</span>#1565C0<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_900"</span>&gt;</span>#0D47A1<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_a100"</span>&gt;</span>#82B1FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_a200"</span>&gt;</span>#448AFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_a400"</span>&gt;</span>#2979FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Blue_a700"</span>&gt;</span>#2962FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.43.03.png" alt="Github set up-w300"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 9 Light Blue 亮蓝色--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_50"</span>&gt;</span>#E1F5FE<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_100"</span>&gt;</span>#B3E5FC<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_200"</span>&gt;</span>#81D4FA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_300"</span>&gt;</span>#4FC3F7<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_400"</span>&gt;</span>#29B6F6<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_500_bar"</span>&gt;</span>#03A9F4<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_600"</span>&gt;</span>#039BE5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_700"</span>&gt;</span>#0288D1<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_800"</span>&gt;</span>#0277BD<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_900"</span>&gt;</span>#01579B<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_a100"</span>&gt;</span>#80D8FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_a200"</span>&gt;</span>#40C4FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_a400"</span>&gt;</span>#00B0FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Blue_a700"</span>&gt;</span>#0091EA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.42.43.png" alt="Github set up-w300"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 10 Cyan 青色 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_50"</span>&gt;</span>#E0F7FA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_100"</span>&gt;</span>#B2EBF2<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_200"</span>&gt;</span>#80DEEA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_300"</span>&gt;</span>#4DD0E1<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_400"</span>&gt;</span>#26C6DA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_500_bar"</span>&gt;</span>#00BCD4<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_600"</span>&gt;</span>#00ACC1<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_700"</span>&gt;</span>#0097A7<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_800"</span>&gt;</span>#00838F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_900"</span>&gt;</span>#006064<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_a100"</span>&gt;</span>#84FFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_a200"</span>&gt;</span>#18FFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_a400"</span>&gt;</span>#00E5FF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Cyan_a700"</span>&gt;</span>#00B8D4<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.42.51.png" alt="Github set up-w300"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 11 Teal 蓝绿色 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_50"</span>&gt;</span>#E0F2F1<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_100"</span>&gt;</span>#B2DFDB<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_200"</span>&gt;</span>#80CBC4<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_300"</span>&gt;</span>#4DB6AC<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_400"</span>&gt;</span>#26A69A<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_500_bar"</span>&gt;</span>#009688<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_600"</span>&gt;</span>#00897B<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_700"</span>&gt;</span>#00796B<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_800"</span>&gt;</span>#00695C<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_900"</span>&gt;</span>#004D40<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_a100"</span>&gt;</span>#A7FFEB<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_a200"</span>&gt;</span>#64FFDA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_a400"</span>&gt;</span>#1DE9B6<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Teal_a700"</span>&gt;</span>#00BFA5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.42.26.png" alt="Github set up-w300"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 12 Green 绿色 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_50"</span>&gt;</span>#E8F5E9<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_100"</span>&gt;</span>#C8E6C9<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_200"</span>&gt;</span>#A5D6A7<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_300"</span>&gt;</span>#81C784<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_400"</span>&gt;</span>#66BB6A<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_500_bar"</span>&gt;</span>#4CAF50<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_600"</span>&gt;</span>#43A047<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_700"</span>&gt;</span>#388E3C<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_800"</span>&gt;</span>#2E7D32<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_900"</span>&gt;</span>#1B5E20<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_a100"</span>&gt;</span>#B9F6CA<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_a200"</span>&gt;</span>#69F0AE<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_a400"</span>&gt;</span>#00E676<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Green_a700"</span>&gt;</span>#00C853<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.42.02.png" alt="Github set up-w300"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 13 Light Green 亮绿色--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_50"</span>&gt;</span>#F1F8E9<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_100"</span>&gt;</span>#DCEDC8<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_200"</span>&gt;</span>#C5E1A5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_300"</span>&gt;</span>#AED581<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_400"</span>&gt;</span>#9CCC65<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_500_bar"</span>&gt;</span>#8BC34A<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_600"</span>&gt;</span>#7CB342<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_700"</span>&gt;</span>#689F38<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_800"</span>&gt;</span>#558B2F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_900"</span>&gt;</span>#33691E<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_a100"</span>&gt;</span>#CCFF90<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_a200"</span>&gt;</span>#B2FF59<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_a400"</span>&gt;</span>#76FF03<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Light_Green_a700"</span>&gt;</span>#64DD17<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.42.14.png" alt="Github set up-w300"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 14 Lime 酸橙汁饮料 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_50"</span>&gt;</span>#F9FBE7<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_100"</span>&gt;</span>#F0F4C3<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_200"</span>&gt;</span>#E6EE9C<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_300"</span>&gt;</span>#DCE775<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_400"</span>&gt;</span>#D4E157<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_500_bar"</span>&gt;</span>#CDDC39<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_600"</span>&gt;</span>#C0CA33<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_700"</span>&gt;</span>#AFB42B<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_800"</span>&gt;</span>#9E9D24<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_900"</span>&gt;</span>#827717<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_a100"</span>&gt;</span>#F4FF81<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_a200"</span>&gt;</span>#EEFF41<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_a400"</span>&gt;</span>#C6FF00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Lime_a700"</span>&gt;</span>#AEEA00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.41.51.png" alt="Github set up-w300"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">&lt;!-- 15 Yellow 黄色 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_50"</span>&gt;</span>#FFFDE7<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_100"</span>&gt;</span>#FFF9C4<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_200"</span>&gt;</span>#FFF59D<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_300"</span>&gt;</span>#FFF176<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_400"</span>&gt;</span>#FFEE58<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_500_bar"</span>&gt;</span>#FFEB3B<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_600"</span>&gt;</span>#FDD835<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_700"</span>&gt;</span>#FBC02D<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_800"</span>&gt;</span>#F9A825<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_900"</span>&gt;</span>#F57F17<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_a100"</span>&gt;</span>#FFFF8D<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_a200"</span>&gt;</span>#FFFF00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_a400"</span>&gt;</span>#FFEA00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Yellow_a700"</span>&gt;</span>#FFD600<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.41.28.png" alt="Github set up-w300"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 16 Amber 琥珀色--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_50"</span>&gt;</span>#FFF8E1<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_100"</span>&gt;</span>#FFECB3<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_200"</span>&gt;</span>#FFE082<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_300"</span>&gt;</span>#FFD54F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_400"</span>&gt;</span>#FFCA28<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber500_bar"</span>&gt;</span>#FFC107<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_600"</span>&gt;</span>#FFB300<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_700"</span>&gt;</span>#FFA000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_800"</span>&gt;</span>#FF8F00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_900"</span>&gt;</span>#FF6F00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_a100"</span>&gt;</span>#FFE57F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_a200"</span>&gt;</span>#FFD740<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_a400"</span>&gt;</span>#FFC400<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Amber_a700"</span>&gt;</span>#FFAB00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.41.39.png" alt="Github set up-w300"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 17 Orange 橘黄色--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_50"</span>&gt;</span>#FFF3E0<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_100"</span>&gt;</span>#FFE0B2<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_200"</span>&gt;</span>#FFCC80<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_300"</span>&gt;</span>#FFB74D<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_400"</span>&gt;</span>#FFA726<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_500_bar"</span>&gt;</span>#FF9800<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_600"</span>&gt;</span>#FB8C00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_700"</span>&gt;</span>#F57C00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_800"</span>&gt;</span>#EF6C00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_900"</span>&gt;</span>#E65100<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_a100"</span>&gt;</span>#FFD180<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_a200"</span>&gt;</span>#FFAB40<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_a400"</span>&gt;</span>#FF9100<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Orange_a700"</span>&gt;</span>#FF6D00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.41.11.png" alt="Github set up-w300"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 18 Deep Orange 深橘黄色--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_50"</span>&gt;</span>#FBE9E7<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_100"</span>&gt;</span>#FFCCBC<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_200"</span>&gt;</span>#FFAB91<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_300"</span>&gt;</span>#FF8A65<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_400"</span>&gt;</span>#FF7043<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_500_bar"</span>&gt;</span>#FF5722<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_600"</span>&gt;</span>#F4511E<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_700"</span>&gt;</span>#E64A19<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_800"</span>&gt;</span>#D84315<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_900"</span>&gt;</span>#BF360C<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_a100"</span>&gt;</span>#FF9E80<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_a200"</span>&gt;</span>#FF6E40<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_a400"</span>&gt;</span>#FF3D00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Deep_Orange_a700"</span>&gt;</span>#DD2C00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.40.42.png" alt="Github set up-w300"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 19 Brown 棕色--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Brown_50"</span>&gt;</span>#EFEBE9<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Brown_100"</span>&gt;</span>#D7CCC8<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Brown_200"</span>&gt;</span>#BCAAA4<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Brown_300"</span>&gt;</span>#A1887F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Brown_400"</span>&gt;</span>#8D6E63<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Brown_500_bar"</span>&gt;</span>#795548<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Brown_600"</span>&gt;</span>#6D4C41<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Brown_700"</span>&gt;</span>#5D4037<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Brown_800"</span>&gt;</span>#4E342E<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"Brown_900"</span>&gt;</span>#3E2723<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%2011.41.00.png" alt="Github set up-w300"></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 资源文件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Sutdio 使用快人一步]]></title>
      <url>/Android%20Studio%E4%BD%BF%E7%94%A8%E5%BF%AB%E4%BA%BA%E4%B8%80%E6%AD%A51%20%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p><strong>今日感悟，写在前面：</strong></p>
<pre><code>放手无关紧要，精于攻坚克难。
</code></pre><a id="more"></a>
<h1 id="Android-Studio-3-0-Android-Profiler分析器"><a href="#Android-Studio-3-0-Android-Profiler分析器" class="headerlink" title="Android Studio 3.0  - Android Profiler分析器"></a>Android Studio 3.0  - Android Profiler分析器</h1><blockquote>
<p>参考：<a href="http://blog.csdn.net/niubitianping/article/details/72617864" target="_blank" rel="external">http://blog.csdn.net/niubitianping/article/details/72617864</a><br>Android Studio 3.0 新特性：<a href="http://blog.csdn.net/niubitianping/article/details/72600923" target="_blank" rel="external">http://blog.csdn.net/niubitianping/article/details/72600923</a></p>
</blockquote>
<h1 id="Android-Studio-官方用户指南"><a href="#Android-Studio-官方用户指南" class="headerlink" title="Android Studio 官方用户指南"></a>Android Studio 官方用户指南</h1><blockquote>
<p><a href="https://developer.android.google.cn/studio/intro/index.html" target="_blank" rel="external">https://developer.android.google.cn/studio/intro/index.html</a></p>
</blockquote>
<h1 id="使用频率最高的3个快捷键："><a href="#使用频率最高的3个快捷键：" class="headerlink" title="使用频率最高的3个快捷键："></a>使用频率最高的3个快捷键：</h1><ul>
<li><strong><code>⌘ + n</code>：各种自动生成。</strong></li>
<li><p><strong><code>（control）⌃ + t</code> 各位看官自己瞧瞧：</strong></p>
<p>  <img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-25%2021.23.39.png" alt="Github set up-w200"></p>
</li>
<li><p><strong><code>（shift）⇧ + （control）⌃ + （enter） ⏎</code>  补充快捷键</strong></p>
</li>
</ul>
<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>插件安装位置：<code>Android Studio -&gt; Preferences -&gt; Plugins</code>。<strong>快捷键：<code>⌘ + ,</code></strong><br>敲出<code>⌘</code>：<code>⌃ + ⌘ + space</code>，之后进行选择</p>
<h2 id="代码规范-Alibaba-Java-Coding-Guidelines"><a href="#代码规范-Alibaba-Java-Coding-Guidelines" class="headerlink" title="代码规范 - Alibaba Java Coding Guidelines"></a>代码规范 - Alibaba Java Coding Guidelines</h2><p>阿里巴巴Java开发规约的插件。安装后在Android Studio显示为：<img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-25%2020.20.15.png" alt="GitHub set up-w100"><br>可选择实时监测，也可以关闭检测。</p>
<h2 id="真机无线调试-Android-WiFi-ADB"><a href="#真机无线调试-Android-WiFi-ADB" class="headerlink" title="真机无线调试 - Android WiFi ADB"></a>真机无线调试 - Android WiFi ADB</h2><p>通过WIFI连接手机和电脑。<br>数据线插入你的手机，然后点击Connect，显示State = Connect后拔掉数据线即可。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-25%2020.23.33.png" alt="GitHub set up-w200"></p>
<h2 id="布局文件分组的插件-folding-plugin"><a href="#布局文件分组的插件-folding-plugin" class="headerlink" title="布局文件分组的插件 - folding-plugin"></a>布局文件分组的插件 - folding-plugin</h2><p>图片来自网络</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/Preview.png" alt=""></p>
<h2 id="View注解绑定-Android-ButterKnife-Zelezny"><a href="#View注解绑定-Android-ButterKnife-Zelezny" class="headerlink" title="View注解绑定 - Android ButterKnife Zelezny"></a>View注解绑定 - Android ButterKnife Zelezny</h2><p>ButterKnife是一个专注于Android系统的View注入框架,可以减少大量的findViewById以及setOnClickListener代码，可视化一键生成。<br><strong>快捷键：<code>⌘ + n</code></strong><br>使用时必须要将<code>光标</code>悬浮于 <img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-25%2020.37.08.png" alt="Github set up-w300"> <code>activity_main</code>之上才能有效。</p>
<h2 id="资源文件状态生成-SelectorChapek-for-Android"><a href="#资源文件状态生成-SelectorChapek-for-Android" class="headerlink" title="资源文件状态生成 - SelectorChapek for Android"></a>资源文件状态生成 - SelectorChapek for Android</h2><p>通过资源文件命名自动生成Selector文件。</p>
<h3 id="控件的点击事件异常时"><a href="#控件的点击事件异常时" class="headerlink" title="控件的点击事件异常时"></a>控件的点击事件异常时</h3><ol>
<li>只是在Java代码中写明了方法，但是并没有在XML代码中使用<code>onClick=&quot;&quot;</code>来描述此方法</li>
<li>在Java代码中只是声明了方法，当时并没有在方法中声明参数：<code>(View view)</code>。如果不写此参数，将会导致在调用方法时，找不到<code>View中的 指定id</code> 值。</li>
</ol>
<h3 id="空指针异常："><a href="#空指针异常：" class="headerlink" title="空指针异常："></a>空指针异常：</h3><blockquote>
<p>Android Studio2.3 参考：<a href="http://blog.csdn.net/blueamertj/article/details/51517191" target="_blank" rel="external">http://blog.csdn.net/blueamertj/article/details/51517191</a></p>
</blockquote>
<ol>
<li><p>在 <code>app模块</code> 的 <code>gradle</code> 编译文件 <code>build.gradle</code> 加入下列代码：</p>
<pre><code>apply plugin: &apos;com.neenbedankt.android-apt&apos; 
</code></pre></li>
</ol>
<ol>
<li><p>在 <code>app模块</code> 的 <code>gradle</code> 编译文件 <code>build.gradle</code> 中的 <code>dependencies</code>中加入</p>
<pre><code>apt &apos;com.jakewharton:butterknife-compiler:8.0.1&apos;
compile &apos;com.jakewharton:butfe:8.0.1&apos;
</code></pre></li>
<li><p>在 <code>项目</code> 的 <code>gradle</code> 编译文件 <code>build.gradle</code> 文件，在 <code>dependencies</code> 中加入</p>
<pre><code>classpath &apos;com.neenbedankt.gradle.plugins:android-apt:1.8&apos;
</code></pre></li>
</ol>
<blockquote>
<p>Android Studio3.0 参考：<a href="http://blog.csdn.net/pjingying/article/details/71975805?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="external">http://blog.csdn.net/pjingying/article/details/71975805?utm_source=itdadao&amp;utm_medium=referral</a></p>
</blockquote>
<ol>
<li><p>在 <code>app模块</code> 的 <code>gradle</code> 编译文件 <code>build.gradle</code> 中的 <code>dependencies</code>中加入</p>
<pre><code>annotationProcessor &apos;com.jakewharton:butterknife-compiler:8.8.1&apos;
</code></pre></li>
</ol>
<h2 id="ViewHolder代码自动生成-AndroidCodeGenerator"><a href="#ViewHolder代码自动生成-AndroidCodeGenerator" class="headerlink" title="ViewHolder代码自动生成 - AndroidCodeGenerator"></a>ViewHolder代码自动生成 - AndroidCodeGenerator</h2><p>在 <code>res/layout/文件夹</code>下选择你适配器的<code>item layout</code>的布局文件，然后右键，如图所示：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-27%2016.12.20.png" alt=""></p>
<p>选择其中一项之后，会弹出一个窗口，在这个窗口已经根据<code>item布局文件</code>默认生成了一个<code>适配器类</code>，你所要做的就是根据自己的实际需求进行<code>修改</code>。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-27%2016.16.29.png" alt=""></p>
<h2 id="自动findViewById-Prettify"><a href="#自动findViewById-Prettify" class="headerlink" title="自动findViewById() - Prettify"></a>自动findViewById() - Prettify</h2><p>据Layout自动生成findViewById。<br>使用方式同<code>ButterKnife</code><br><strong>快捷键：<code>⌘ + n</code> 后选择 <code>View Variables</code> 或者 <code>View Fields</code></strong><br><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-25%2021.11.59.png" alt="Github set up-w200"><br><strong>区别：</strong></p>
<ul>
<li>前者<code>View Variables</code>生成的是<code>私有变量</code></li>
<li>后者 <code>View Fields</code>生成的是<code>成员变量</code></li>
</ul>
<h2 id="自动生成style代码-Android-Styler"><a href="#自动生成style代码-Android-Styler" class="headerlink" title="自动生成style代码 - Android Styler"></a>自动生成style代码 - Android Styler</h2><p><strong>快捷键：⇧ + ⌘ + d</strong><br>效果如图：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-27%2016.36.50.png" alt=""></p>
<h2 id="生命周期方法位置排序-Lifecycle-Sorter"><a href="#生命周期方法位置排序-Lifecycle-Sorter" class="headerlink" title="生命周期方法位置排序 - Lifecycle Sorter"></a>生命周期方法位置排序 - Lifecycle Sorter</h2><p>根据Activity或者fragment的生命周期对其生命周期方法位置进行先后排序。<br><strong>快捷键 <code>⌘ + ⌥ + K</code></strong></p>
<h2 id="Json数据格式化-GsonFormat"><a href="#Json数据格式化-GsonFormat" class="headerlink" title="Json数据格式化 - GsonFormat"></a>Json数据格式化 - GsonFormat</h2><p>GsonFormat是一个快速格式化json数据，自动生成实体类参数的插件。<br><strong>快捷键：<code>⌘ + n</code> 后选择 <code>GsonFormat</code></strong>。<br><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-25%2020.44.23.png" alt="Github set up-w500"></p>
<h2 id="Parcelable自动生成-ParcelableGenerator"><a href="#Parcelable自动生成-ParcelableGenerator" class="headerlink" title="Parcelable自动生成 - ParcelableGenerator"></a>Parcelable自动生成 - ParcelableGenerator</h2><p>自动生成Parcelable接口所需的代码。</p>
<ul>
<li><code>Serializable</code>的作用是为了<code>保存对象的属性</code>到本地文件、数据库、网络流、rmi以方便数据传输，当然这种传输可以是程序内的也可以是两个程序间的。</li>
<li><p>而Serializable可将<code>数据持久化</code>方便保存，所以在需要保存或网络传输数据时选择Serializable，因为android不同版本Parcelable可能不同，所以不推荐使用Parcelable进行数据持久化。</p>
</li>
<li><p>Android的<code>Parcelable</code>的设计初衷是因为Serializable效率过慢，为了在程序内不同组件间以及不同Android程序间(AIDL)高效的传输数据而设计，这些<code>数据仅在内存中存在</code>，Parcelable是通过IBinder通信的消息的载体。</p>
</li>
<li>Parcelable的性能比Serializable好，在内存开销方面较小，所以在内存间数据传输时推荐使用Parcelable，如activity间传输数据。</li>
</ul>
<p><strong>快捷键：<code>⌘ + n</code></strong><br><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-25%2020.52.54.png" alt="Github set up-w200"></p>
<h2 id="Android-Material-Design-风格图标全集-Android-Material-Design-Icon-Generator"><a href="#Android-Material-Design-风格图标全集-Android-Material-Design-Icon-Generator" class="headerlink" title="Android Material Design 风格图标全集 - Android Material Design Icon Generator"></a>Android Material Design 风格图标全集 - Android Material Design Icon Generator</h2><p>通过此库可以获取<code>MD风格</code>的所有图标，更让人惊喜的是：选中的图标会自动生成各种 <code>drawable 文件夹</code>的图标，而且可以<code>自定义颜色</code>，绝对让人惊喜。<br><strong>快捷键：<code>⌥ + ⌘ + m</code></strong><br><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-25%2021.33.19.png" alt="Github set up-w200"></p>
<p>选择指定图标以及自定义颜色。<br><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-25%2021.31.25.png" alt="Github set up-w500"></p>
<h1 id="组合指令"><a href="#组合指令" class="headerlink" title="组合指令"></a>组合指令</h1><h2 id="自定义组指令"><a href="#自定义组指令" class="headerlink" title="自定义组指令"></a>自定义组指令</h2><p><strong>快捷键：<code>⌘ + ,</code></strong> 后选择 <code>Live TemPlates</code>，如下所示：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-26%2015.23.55.png" alt=""></p>
<p>单击上图中的<code>+</code>可以添加自定义的组合键<br>选择其中的<code>AndroidLog</code>即可进行自定义设置：</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-26%2015.26.31.png" alt=""></p>
<h2 id="已存在组合指令"><a href="#已存在组合指令" class="headerlink" title="已存在组合指令"></a>已存在组合指令</h2><h3 id="Log输出自定义"><a href="#Log输出自定义" class="headerlink" title="Log输出自定义"></a>Log输出自定义</h3><ul>
<li><p>logt</p>
<pre><code>private static final String TAG = &quot;MainActivity  &quot;;
</code></pre></li>
<li>loge</li>
<li>logi</li>
<li>logd</li>
</ul>
<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ul>
<li><p>foreach </p>
<pre><code>for (:
         ) {
    }
</code></pre></li>
<li><p>fori</p>
<pre><code>for (int i = 0; i &lt; ; i++) {   
    }
</code></pre></li>
<li><p>itar (array)</p>
<pre><code>for (int i = 0; i &lt; array.length; i++) {
         = array[i];
    }
</code></pre></li>
<li><p>iten (enum)</p>
<pre><code>while (enumeration.hasMoreElements()) {
        Object nextElement = enumeration.nextElement();
    }
</code></pre></li>
<li><p>itit (iterator)</p>
<pre><code>while (iterator.hasNext()) {
        Object next = iterator.next();
    }
</code></pre></li>
<li><p>itli (List)</p>
<pre><code>for (int i = 0; i &lt; list.size(); i++) {
        Object o = list.get(i);
    }
</code></pre></li>
</ul>
<h3 id="判定"><a href="#判定" class="headerlink" title="判定"></a>判定</h3><ul>
<li><p>ifn</p>
<pre><code>if (savedInstanceState == null) {
    }
</code></pre></li>
<li><p>inn</p>
<pre><code>if (savedInstanceState != null) {
    }
</code></pre></li>
<li><p>lazy</p>
<pre><code>if (savedInstanceState == null) {
        savedInstanceState = new Bundle();
    }
</code></pre></li>
<li><p>lnst</p>
<pre><code>if (savedInstanceState instanceof Object) {
        Object instanceState = (Object) savedInstanceState;
    }
</code></pre></li>
</ul>
<h3 id="View相关"><a href="#View相关" class="headerlink" title="View相关"></a>View相关</h3><ul>
<li><p>gone</p>
<pre><code>.setVisibility(View.GONE);
</code></pre></li>
<li><p>visible</p>
</li>
<li><p>Toast</p>
<pre><code>Toast.makeText(this, &quot;&quot;, Toast.LENGTH_SHORT).show();
</code></pre></li>
<li><p>fbc</p>
<pre><code>() findViewById(R.id.);
</code></pre></li>
<li><p>fixme</p>
<pre><code>// FIXME: 2017/10/26 
</code></pre></li>
<li><p>todo</p>
</li>
<li>lhm</li>
<li>lhw</li>
</ul>
<h3 id="全局-static-final-变量"><a href="#全局-static-final-变量" class="headerlink" title="全局 static final 变量"></a>全局 static final 变量</h3><ul>
<li><p>psf</p>
<pre><code>public static final 
</code></pre></li>
<li><p>psfi</p>
<pre><code>public static final int 
</code></pre></li>
<li><p>psfs    </p>
</li>
<li>St</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android Studio </tag>
            
            <tag> 插件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HHKB 键位组合]]></title>
      <url>/HHKB%20%E9%94%AE%E4%BD%8D%E7%BB%84%E5%90%88/</url>
      <content type="html"><![CDATA[<p>Mac环境下的键位组合</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th style="text-align:center">键位组合</th>
<th style="text-align:center">效果</th>
<th style="text-align:center">键位组合</th>
<th style="text-align:center">效果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Shift + Option + Q</td>
<td style="text-align:center">Œ</td>
<td style="text-align:center">Option + Q</td>
<td style="text-align:center">œ</td>
</tr>
<tr>
<td style="text-align:center">W</td>
<td style="text-align:center">„</td>
<td style="text-align:center">W</td>
<td style="text-align:center">∑</td>
</tr>
<tr>
<td style="text-align:center">E</td>
<td style="text-align:center">´</td>
<td style="text-align:center">E</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">R</td>
<td style="text-align:center">‰</td>
<td style="text-align:center">R</td>
<td style="text-align:center">®</td>
</tr>
<tr>
<td style="text-align:center">T</td>
<td style="text-align:center">ˇ</td>
<td style="text-align:center">T</td>
<td style="text-align:center">†</td>
</tr>
<tr>
<td style="text-align:center">Y</td>
<td style="text-align:center">Á</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">¥</td>
</tr>
<tr>
<td style="text-align:center">U</td>
<td style="text-align:center">¨</td>
<td style="text-align:center">U</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">I</td>
<td style="text-align:center">ˆ</td>
<td style="text-align:center">I</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">O</td>
<td style="text-align:center">Ø</td>
<td style="text-align:center">O</td>
<td style="text-align:center">ø</td>
</tr>
<tr>
<td style="text-align:center">P</td>
<td style="text-align:center">∏</td>
<td style="text-align:center">P</td>
<td style="text-align:center">π</td>
</tr>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">Å</td>
<td style="text-align:center">A</td>
<td style="text-align:center">å</td>
</tr>
<tr>
<td style="text-align:center">D</td>
<td style="text-align:center">Î</td>
<td style="text-align:center">D</td>
<td style="text-align:center">∂</td>
</tr>
<tr>
<td style="text-align:center">F</td>
<td style="text-align:center">Ï</td>
<td style="text-align:center">F</td>
<td style="text-align:center">ƒ</td>
</tr>
<tr>
<td style="text-align:center">G</td>
<td style="text-align:center">˝</td>
<td style="text-align:center">G</td>
<td style="text-align:center">©</td>
</tr>
<tr>
<td style="text-align:center">H</td>
<td style="text-align:center">Ó</td>
<td style="text-align:center">H</td>
<td style="text-align:center">˙</td>
</tr>
<tr>
<td style="text-align:center">J</td>
<td style="text-align:center">Ô</td>
<td style="text-align:center">J</td>
<td style="text-align:center">∆</td>
</tr>
<tr>
<td style="text-align:center">K</td>
<td style="text-align:center"></td>
<td style="text-align:center">K</td>
<td style="text-align:center">˚</td>
</tr>
<tr>
<td style="text-align:center">L</td>
<td style="text-align:center">Ò</td>
<td style="text-align:center">L</td>
<td style="text-align:center">¬</td>
</tr>
<tr>
<td style="text-align:center">Z</td>
<td style="text-align:center">¸</td>
<td style="text-align:center">Z</td>
<td style="text-align:center">Ω</td>
</tr>
<tr>
<td style="text-align:center">X</td>
<td style="text-align:center">˛</td>
<td style="text-align:center">X</td>
<td style="text-align:center">≈</td>
</tr>
<tr>
<td style="text-align:center">C</td>
<td style="text-align:center">Ç</td>
<td style="text-align:center">C</td>
<td style="text-align:center">ç</td>
</tr>
<tr>
<td style="text-align:center">V</td>
<td style="text-align:center">◊</td>
<td style="text-align:center">V</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">B</td>
<td style="text-align:center">ı</td>
<td style="text-align:center">B</td>
<td style="text-align:center">∫</td>
</tr>
<tr>
<td style="text-align:center">N</td>
<td style="text-align:center">˜</td>
<td style="text-align:center">N</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">M</td>
<td style="text-align:center">Â</td>
<td style="text-align:center">M</td>
<td style="text-align:center">µ</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">⁄</td>
<td style="text-align:center">1</td>
<td style="text-align:center">¡</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">€</td>
<td style="text-align:center">2</td>
<td style="text-align:center">™</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">‹</td>
<td style="text-align:center">3</td>
<td style="text-align:center">£</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">›</td>
<td style="text-align:center">4</td>
<td style="text-align:center">¢</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">ﬁ</td>
<td style="text-align:center">5</td>
<td style="text-align:center">∞</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">ﬂ</td>
<td style="text-align:center">6</td>
<td style="text-align:center">§</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">‡</td>
<td style="text-align:center">7</td>
<td style="text-align:center">¶</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">°</td>
<td style="text-align:center">8</td>
<td style="text-align:center">•</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">·</td>
<td style="text-align:center">9</td>
<td style="text-align:center">ª</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">‚</td>
<td style="text-align:center">0</td>
<td style="text-align:center">º</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">—</td>
<td style="text-align:center">-</td>
<td style="text-align:center">–</td>
</tr>
<tr>
<td style="text-align:center">=</td>
<td style="text-align:center">=</td>
<td style="text-align:center">=</td>
<td style="text-align:center">≠</td>
</tr>
<tr>
<td style="text-align:center">\</td>
<td style="text-align:center">»</td>
<td style="text-align:center">\</td>
<td style="text-align:center">«</td>
</tr>
<tr>
<td style="text-align:center">`</td>
<td style="text-align:center">`</td>
<td style="text-align:center">`</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">[</td>
<td style="text-align:center">”</td>
<td style="text-align:center">[</td>
<td style="text-align:center">“</td>
</tr>
<tr>
<td style="text-align:center">]</td>
<td style="text-align:center">’</td>
<td style="text-align:center">]</td>
<td style="text-align:center">‘</td>
</tr>
<tr>
<td style="text-align:center">;</td>
<td style="text-align:center">Ú</td>
<td style="text-align:center">;</td>
<td style="text-align:center">…</td>
</tr>
<tr>
<td style="text-align:center">‘</td>
<td style="text-align:center">Æ</td>
<td style="text-align:center">‘</td>
<td style="text-align:center">æ</td>
</tr>
<tr>
<td style="text-align:center">,</td>
<td style="text-align:center">¯</td>
<td style="text-align:center">,</td>
<td style="text-align:center">≤</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">˘</td>
<td style="text-align:center">.</td>
<td style="text-align:center">≥</td>
</tr>
<tr>
<td style="text-align:center">/</td>
<td style="text-align:center">¿</td>
<td style="text-align:center">/</td>
<td style="text-align:center">÷÷</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> 外设 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 外设 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac环境下Hexo-GitHub-MWeb搭建个人博客]]></title>
      <url>/Mac%E7%8E%AF%E5%A2%83%E4%B8%8BHexo-GitHub-MWeb%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p><strong>需要的工具：Node.js、Git、Hexo、Coding（自选）、MWeb（自选）</strong></p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>非重点，自行安装</p>
<h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>非重点，自行安装</p>
<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><h4 id="按照此命令进行安装Hexo"><a href="#按照此命令进行安装Hexo" class="headerlink" title="按照此命令进行安装Hexo"></a>按照此命令进行安装Hexo</h4><pre><code>$ sudo npm install -g hexo
</code></pre><h4 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h4><p>其中<code>Blog_Hexo</code>为自己建立的目标文件夹。只要是建立自己的任意一个博客，都可使用一下步骤。</p>
<pre><code>$ hexo init Blog_Hexo
</code></pre><p>在“blog”文件夹中安装npm</p>
<pre><code>$ npm install
</code></pre><p>执行一下命令，查看是否安装成功</p>
<pre><code>$ hexo s
</code></pre><p>在浏览器中打开：<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 能看到“Hexo”页面表示安装成功：</p>
<h4 id="关联GitHub"><a href="#关联GitHub" class="headerlink" title="关联GitHub"></a>关联GitHub</h4><p>登录你的Github帐号，新建仓库，名为：<code>用户名.github.io</code> ，此为固定写法。<br>创建之后为：</p>
<p>创建的Hexo文件夹为：</p>
<p><code>cd</code>到<code>Blog_Hexo</code>文件夹下，编辑<code>_config.yml</code>。<br><strong>注意：<code>_config.yml</code> 文件中的 <code>：</code>后面要加一个空格</strong></p>
<p>1）若是只将博客上传至GItHub中，编写</p>
<pre><code>deploy:
    type: git
    repository: https://github.com/gonghonglou/gonghonglou.github.io.git
    branch: master
</code></pre><p>2）若是将博客同时上传至GItHub和Coding中，编写：</p>
<pre><code>deploy:
type: git
repo:
     github: git@github.com:YannisCheng/YannisCheng.github.io.git,master
     coding: git@git.coding.net:yannischeng/blog.git,master
</code></pre><p>在<code>Blog_Hexo</code>文件夹目录下执行生成静态页面命令：</p>
<pre><code>$ hexo g
</code></pre><p>此时若出现如下报错：</p>
<pre><code>ERROR Local hexo not found in ~/blog
ERROR Try runing: &apos;npm install hexo --save&apos;
</code></pre><p>则执行命令：</p>
<pre><code>npm install hexo --save
</code></pre><p>若无报错，自行忽略此步骤。<br>再执行配置命令：</p>
<pre><code>$ hexo d
</code></pre><blockquote>
<p>执行命令<code>hexo deploy</code>仍然报错：无法连接git或找不到git，则执行如下命：</p>
</blockquote>
<pre><code>$ npm install hexo-deployer-git --save
</code></pre><p>若你未关联Github，则执行<code>hexo deploy</code>命令时终端会提示你输入Github的用户名和密码，即</p>
<pre><code>Username for &apos;https:// .github.com&apos;:
Password for &apos;https:// .github.com&apos;:
</code></pre><p><code>hexo deploy</code>命令执行成功后，浏览器中打开网址<code>http:// .github.io</code> 能看到和打开 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 时一样的页面。</p>
<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p><code>cd</code>到<code>Blog_Hexo</code>中，执行如下命令新建文章</p>
<pre><code>hexo new &quot;hello-world&quot;
</code></pre><p>新的文件建立之后的位置为</p>
<p>编辑之后，在 <code>Blog_Hexo</code> 文件夹中执行如下命令</p>
<pre><code>hexo generate             //生成静态页面
hexo deploy             //将文章部署到Github
</code></pre><p><strong><em>至此，安装环节结束，可以进行基本的使用了。</em></strong></p>
<hr>
<h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p><strong>NexT主题</strong><br>在<code>Blog_Hexo</code>目录下执行：</p>
<pre><code>git clone https://github.com/iissnan/hexo-theme-next themes/next
</code></pre><p>安装之后的文件位置为：</p>
<h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>与所有 <code>Hexo</code> 主题启用的模式一样。 当 <code>克隆/下载</code> 完成后，打开 <code>站点配置文件</code>， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code>。</p>
<pre><code>theme: next
</code></pre><h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><h4 id="为主题增加标签："><a href="#为主题增加标签：" class="headerlink" title="为主题增加标签："></a>为主题增加标签：</h4><pre><code>hexo new  page  tags
</code></pre><h4 id="为主题修改背景："><a href="#为主题修改背景：" class="headerlink" title="为主题修改背景："></a>为主题修改背景：</h4><p>在 <code>\themes\next\layout\_layout.swig</code>文件的<code>&lt;/body&gt;</code>上面添加</p>
<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/ca
</code></pre><p>具体详细设置参考：<a href="https://github.com/hustcc/canvas-nest.js/blob/master/README-zh.md" target="_blank" rel="external">https://github.com/hustcc/canvas-nest.js/blob/master/README-zh.md</a></p>
<hr>
<h2 id="问题杂集"><a href="#问题杂集" class="headerlink" title="问题杂集"></a>问题杂集</h2><h3 id="主题相关"><a href="#主题相关" class="headerlink" title="主题相关"></a>主题相关</h3><h4 id="hexo-next5-0主题不显示副标题"><a href="#hexo-next5-0主题不显示副标题" class="headerlink" title="hexo next5.0主题不显示副标题"></a>hexo next5.0主题不显示副标题</h4><p>打开<code>themes/next/source/css/_schemes/Mist/_logo.styl</code> 你会看见<br><code>.site-subtitle { display: none; }</code>删去或改成你想要的即可</p>
<h4 id="为主题-添加字数统计、阅读时长、友情链接"><a href="#为主题-添加字数统计、阅读时长、友情链接" class="headerlink" title="为主题 添加字数统计、阅读时长、友情链接"></a>为主题 添加字数统计、阅读时长、友情链接</h4><h5 id="开启设置"><a href="#开启设置" class="headerlink" title="开启设置"></a>开启设置</h5><p>NexT主题默认已经集成了文章【字数统计】、【阅读时长】统计功能，如果我们需要使用，只需要在主题配置文件<code>Blog\themes\next_config.yml</code>中打开<code>wordcount</code>统计功能即可</p>
<pre><code># Post wordcount display settings
# Dependencies: https://github.com/willin/hexo-wordcount
post_wordcount:
    item_text: true
    wordcount: true
    min2read: true
</code></pre><p>若只是打开开关，部署之后会发现文章的【字数统计】和【阅读时长】后面没有对应的xxx字，xx分钟等字样。</p>
<blockquote>
<p>参考：<a href="http://blog.csdn.net/wangxw725/article/details/71602256?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="external">http://blog.csdn.net/wangxw725/article/details/71602256?utm_source=itdadao&amp;utm_medium=referral</a></p>
</blockquote>
<p>找到<code>Blog\themes\next\layout\_macro\post.swig</code> 文件<br><strong>注意：</strong></p>
<pre><code>在此文中出现 字数统计的配置英文字样时会报错！
</code></pre><h4 id="安装统计插件"><a href="#安装统计插件" class="headerlink" title="安装统计插件"></a>安装统计插件</h4><p>如果没有安装 hexo-wordcount 插件，先安装该插件：</p>
<pre><code>npm i --save hexo-wordcount
</code></pre><p><strong>Node 版本 7.6.0 之前,请安装 2.x 版本 (Node.js v7.6.0 and previous) ，安装命令如下：</strong></p>
<pre><code>npm install hexo-wordcount@2 --save
</code></pre><p>安装完成后，重新执行启动服务预览就可以了。</p>
<h3 id="Hexo相关"><a href="#Hexo相关" class="headerlink" title="Hexo相关"></a>Hexo相关</h3><h4 id="添加分类、标签云、关于等页面"><a href="#添加分类、标签云、关于等页面" class="headerlink" title="添加分类、标签云、关于等页面"></a>添加分类、标签云、关于等页面</h4><p>以添加分类页面为例，<br>在站点目录下，打开<code>git bash</code>，输入</p>
<pre><code>hexo new page &quot;categories&quot;
</code></pre><p>之后在站点目录下的<code>source</code>文件夹下，会新增一个<code>categories</code>的文件夹，里面有一个<code>index.md</code>文件，打开如下</p>
<pre><code>---
title: categories
date: 2015-12-04 15:37:22
type: &quot;categories&quot;
comments: false
---
</code></pre><p>其中，<code>comments</code>可以设置为<code>false</code>，含义是打开分类页面、评论插件不显示；如要显示则改为<code>true</code>。<br><code>tags</code>, <code>about</code>页面的创建类似，输入</p>
<pre><code>hexo new page &quot;tags&quot;
hexo new page &quot;about&quot;
</code></pre><h4 id="标签的使用-文章模板"><a href="#标签的使用-文章模板" class="headerlink" title="标签的使用 + 文章模板"></a>标签的使用 + 文章模板</h4><pre><code>---
title: Mac环境下Hexo-GitHub-MWeb搭建个人博客
date: 2017-10-22 23:48:37
tags: [Mac,博客]
categories: 博客
---
</code></pre><h4 id="hexo草稿模式"><a href="#hexo草稿模式" class="headerlink" title="hexo草稿模式"></a>hexo草稿模式</h4><blockquote>
<p>参考：<a href="http://blog.csdn.net/wizardforcel/article/details/40684575" target="_blank" rel="external">http://blog.csdn.net/wizardforcel/article/details/40684575</a></p>
</blockquote>
<p><code>草稿模式</code>中的文件不会公开显示，适用于：有些文档非常重要但是又不想公开、又不想删除，此时使用hexo模式最合适。<br><strong>使用</strong></p>
<pre><code>hexo new  draft &quot;Android热修复&quot;
</code></pre><p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-26%2011.18.27.png" alt="Github set up-w400"><br>执行此命令之后，会在相应目录下生成相关文件：<code>~/HexoBLog/source/_drafts/Android热修复.md</code>。图示：<br><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-26%2011.21.17.png" alt="Github set up-w400"></p>
<p><strong>强行预览草稿</strong><br>更爱配置文件：</p>
<pre><code>render _drafts: true
</code></pre><p>通过服务预览：</p>
<pre><code>hexo server --drafts
</code></pre><p>将草稿转变为正式文章：</p>
<pre><code>hexo publish [layout] &lt;filename&gt;
</code></pre>]]></content>
      
        <categories>
            
            <category> 博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac </tag>
            
            <tag> 博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《代码整洁之道 clean code》笔记 - 1]]></title>
      <url>/%E3%80%8A%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%20clean%20code%E3%80%8B%E7%AC%94%E8%AE%B0%20-%201/</url>
      <content type="html"><![CDATA[<h2 id="第1章-整洁代码"><a href="#第1章-整洁代码" class="headerlink" title="第1章  整洁代码"></a>第1章  整洁代码</h2><h3 id="读此书有两种原因："><a href="#读此书有两种原因：" class="headerlink" title="读此书有两种原因："></a>读此书有两种原因：</h3><pre><code>1.你是个程序员
2.你想成为更好的程序员
</code></pre><a id="more"></a>
<h3 id="基础价值谜题："><a href="#基础价值谜题：" class="headerlink" title="基础价值谜题："></a>基础价值谜题：</h3><pre><code>开发期限压力的来源——混乱的代码。
</code></pre><h3 id="谜题的答案就是："><a href="#谜题的答案就是：" class="headerlink" title="谜题的答案就是："></a>谜题的答案就是：</h3><pre><code>始终尽可能保持代码的整洁。
</code></pre><h3 id="如何写出整洁的代码："><a href="#如何写出整洁的代码：" class="headerlink" title="如何写出整洁的代码："></a>如何写出整洁的代码：</h3><pre><code>遵循“小技巧” + “代码感”
</code></pre><h3 id="编程的时间花费："><a href="#编程的时间花费：" class="headerlink" title="编程的时间花费："></a>编程的时间花费：</h3><pre><code>读：写 = 10：1
通过读旧代码 -&gt; 写出新代码
</code></pre><h3 id="修改代码的原则："><a href="#修改代码的原则：" class="headerlink" title="修改代码的原则："></a>修改代码的原则：</h3><pre><code>“让营地比你来的时候更干净” —— 童子军军规
</code></pre><h3 id="“整洁代码”的各种定义："><a href="#“整洁代码”的各种定义：" class="headerlink" title="“整洁代码”的各种定义："></a>“整洁代码”的各种定义：</h3><pre><code>（1）C++发明者：优雅+高效
     代码逻辑直接了当，使得缺陷难以隐藏；
     尽量减少依赖关系，使之便于维护；
     依据某种分层战略完善错误处理代码；
     性能调制最优，使得他人无法修改；
     整洁的代码只做好一件事。

（2）《面向对象分析与设计》作者：
     从不隐藏设计者的意图，干净利落的抽象+直截了当的控制语句

（3）Eclipse教父，OTI公司创始人：
     小代码块，越小越好 —— “单一职能原则”；
     便于他人进行增补和修改；
     单元+验收测试；
     有意义的命名，见字知意 —— “字面编程”；
     只提供一种做一件事的途径+尽量减少依赖关系，明确的定义+提供清晰、尽量少的API

（4）《修改代码的艺术》作者：
      整洁的代码总是看起来像是某位特别在意他的人写的，几乎没有改进的余地。代码的作者什么都想到了，若是企图改进它，只能是回到原点。

（5）《极限编程实施》作者：
     能通过所有测试；
     没有重复代码；
     体现系统中的全部设计理念；
     包括尽量少的实体、比如：类、方法、函数等。
     对象功能太多，就要将对象进行细分；方法功能太多，就要进行“方法抽取”

（6）WiKi发明者，在意代码者的教父：
     若每个代码块都能让你感到深合己意，那就是简洁的代码；
     如果代码让编程语言看起来就像是专门为解决那个问题而存在的，那么就可以称之为漂亮的代码。

 减少重复的代码 + 提高表达力 + 提早构建简单抽象 
</code></pre>]]></content>
      
        <categories>
            
            <category> 阅读笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 阅读 </tag>
            
            <tag> 代码整洁之道 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  15-I/O]]></title>
      <url>/Python3%20%2015-I:O/</url>
      <content type="html"><![CDATA[<h2 id="关于Open-源码文档"><a href="#关于Open-源码文档" class="headerlink" title="关于Open()源码文档"></a>关于<code>Open()</code>源码文档</h2><p>打开文件并返回流。失败时提高IOError。</p>
<pre><code>文件是一个文本或字节串，给出要打开的文件的名称（如果文件不在当前工作目录中的路径）或要包装的文件的整数文件描述符。 （如果给出了一个文件描述符，则当返回的I / O对象关闭时，它将被关闭，除非closefd设置为False。）mode是一个可选字符串，用于指定文件打开的方式。它默认为&apos;r&apos;，这意味着在文本模式下打开阅读。其他常见的值是“w”用于写入（截断文件已存在），“x”用于创建和写入新文件，“a”用于附加（在某些Unix系统上，这意味着所有写入都附加到无论当前查找位置如何，文件的结尾）。在文本模式下，如果未指定编码，则使用的编码与平台相关：调用locale.getpreferredencoding（False）以获取当前语言环境编码。 （用于读取和写入原始字节使用二进制模式并保留编码未指定。）可用的模式有：
</code></pre><a id="more"></a>
<pre><code>    &apos;r&apos;开放阅读（默认）
    &apos;w&apos;打开写入，首先截断文件
    &apos;x&apos;创建一个新文件并将其打开以进行写入
    &apos;a&apos;开放写作，如果文件存在，则附加到文件末尾
    &apos;b&apos;二进制模式
    &apos;t&apos;文字模式（默认）
    &apos;+&apos;打开一个磁盘文件进行更新（读写）
    &apos;U&apos;通用换行模式（弃用）

默认模式为“rt”（打开阅读文本）。对于二进制随机访问，模式&apos;w + b&apos;打开并将文件截断为0字节，而&apos;r + b&apos;打开文件而不截断。如果文件已经存在，&apos;x&apos;模式意味着&apos;w&apos;并引发一个`FileExistsError`。

Python区分以二进制和文本模式打开的文件，即使底层操作系统没有。文件以二进制模式打开（将&apos;b&apos;追加到模式参数）返回内容作为字节对象而不进行任何解码。在文本模式（默认情况下，或在模式参数附加了&apos;t&apos;）时，文件的内容将返回为字符串，首先使用平台相关编码对字节进行了解码，如果给出，则使用指定的编码。

&apos;U&apos;模式已被弃用，并会在将来的Python版本中引发异常。它对Python 3没有影响。使用换行来控制通用换行符模式。缓冲是用于设置缓冲策略的可选整数。通过0以切换缓冲（仅允许在二进制模式下），1选择行缓冲（仅在文本模式下可用），整数&gt; 1表示固定大小的块缓冲区的大小。当没有给出缓冲参数时，默认缓冲策略的工作原理如下：

*二进制文件以固定大小的块进行缓冲;使用启发式方法来选择缓冲区的大小，试图确定底层设备的“块大小”并落回到“io.DEFAULT_BUFFER_SIZE”上。在许多系统上，缓冲区通常为4096或8192字节长。

*“交互式”文本文件（其中isatty（）返回True的文件）使用行缓冲。其他文本文件使用上述针对二进制文件的策略。

encoding是用于对文件进行解码或编码的编码名称。这只能在文本模式下使用。默认编码是平台依赖的，但是Python可以支持任何编码。有关支持的编码列表，请参阅编解码器模块。

errors是一个可选的字符串，指定如何处理编码错误 - 此参数不应在二进制模式下使用。如果存在编码错误（默认值为None）具有相同的效果，则通过&apos;strict&apos;来引发ValueError异常，或者通过&apos;ignore&apos;忽略错误。 （请注意，忽略编码错误可能导致数据丢失。）有关编码错误字符串的列表，请参阅codecs.register的文档或运行&apos;help（codecs.Codec）&apos;。

换行符控制通用换行符的工作原理（仅适用于文本模式）。它可以是无，&apos;&apos;，&apos;\ n&apos;，&apos;\ r&apos;和&apos;\ r \ n&apos;。它的工作原理如下：

*输入时，如果换行符为None，则启用通用换行符模式。输入中的行可以&apos;\ n&apos;，&apos;\ r&apos;或&apos;\ r \ n&apos;结尾，并将它们转换为&apos;\ n&apos;，然后返回给调用者。如果是&apos;&apos;，则启用通用换行模式，但是行结束将返回给未经翻译的调用者。如果它具有任何其他合法值，则输入行仅由给定终止
</code></pre><hr>
<p>2017年07月21日09:44:52 暂停 </p>
<hr>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  14-调试]]></title>
      <url>/Python3%20%2014-%E8%B0%83%E8%AF%95/</url>
      <content type="html"><![CDATA[<p><strong>方法</strong></p>
<h3 id="print-打印"><a href="#print-打印" class="headerlink" title=".print()打印"></a>.<code>print()</code>打印</h3><p>用print()最大的坏处是将来还得删掉它，想想程序里到处都是print()，运行结果也会包含很多垃圾信息。</p>
<h3 id="assert断言"><a href="#assert断言" class="headerlink" title="assert断言"></a><code>assert</code>断言</h3><p>凡是用<code>print()</code>来辅助查看的地方，都可以用断言<code>assert</code>来替代。<br>代码示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></div><div class="line">    n = int(s)</div><div class="line">    <span class="keyword">assert</span> n != <span class="number">0</span>, <span class="string">'n is zero!'</span></div><div class="line">    <span class="keyword">return</span> <span class="number">10</span> / n</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    foo(<span class="string">'0'</span>)</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>在程序中使用<code>assert</code>和<code>print()</code>相比也好不到哪去。<br><strong>但是：启动Python解释器时可以用-O参数来关闭assert</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python3 -O err.py</div></pre></td></tr></table></figure>
<p><strong>关闭后，你可以把所有的assert语句当成pass来看。</strong></p>
<h3 id="logging日志"><a href="#logging日志" class="headerlink" title="logging日志"></a><code>logging</code>日志</h3><p>把<code>print()</code>替换为<code>logging</code>是第3种方式，和<code>assert</code>比，<code>logging</code>不但会抛出错误，而且可以输出到文件。<br><strong>注意：导入logging包之后，应在添加配置语句<code>logging.basicConfig(level=logging.INFO)</code></strong><br>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="comment"># logging.basicConfig(level=logging.INFO)</span></div><div class="line"><span class="comment"># 配置日志信息</span></div><div class="line">logging.basicConfig(level=logging.DEBUG,</div><div class="line">          format=<span class="string">'%(asctime)-8s %(name)-8s %(levelname)-8s %(message)s  - [%(filename)s:%(lineno)s]'</span>,</div><div class="line">          datefmt=<span class="string">'%Y-%m-%d %H:%M:%S'</span>,</div><div class="line">          filename=<span class="string">'myapp.log'</span>,</div><div class="line">          filemode=<span class="string">'w'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 定义一个Handler打印INFO及以上级别的日志到sys.stderr</span></div><div class="line">console = logging.StreamHandler()</div><div class="line">console.setLevel(logging.DEBUG)</div><div class="line"></div><div class="line"><span class="comment"># 设置控制台日志打印格式</span></div><div class="line">formatter = logging.Formatter(<span class="string">'%(name)-12s: %(levelname)-8s %(message)s'</span>)</div><div class="line">console.setFormatter(formatter)</div><div class="line"></div><div class="line"><span class="comment"># 将定义好的console日志handler添加到root logger</span></div><div class="line">logging.getLogger(<span class="string">''</span>).addHandler(console)</div><div class="line"></div><div class="line"><span class="string">"""测试logging"""</span></div><div class="line">s = <span class="string">'0'</span></div><div class="line">n = int(s)</div><div class="line">logging.info(<span class="string">'n = %d'</span> % n)</div><div class="line">print(<span class="number">10</span> / n)</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">结果输出</span></div><div class="line"><span class="string">INFO:root:n = 0</span></div><div class="line"><span class="string">Traceback (most recent call last):</span></div><div class="line"><span class="string">  File "/Users/yannischeng/PycharmProjects/First_Python_Project/py_obj_end_12/TestObj.py", line 69, in &lt;module&gt;</span></div><div class="line"><span class="string">    print(10 / n)</span></div><div class="line"><span class="string">ZeroDivisionError: division by zero</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">输出到文件中的信息：</span></div><div class="line"><span class="string">2017-07-20 09:57:51 root     INFO     n = 0  - [LogSet.py:27]</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<p><strong>优点</strong></p>
<ul>
<li>允许你指定记录信息的级别，有<code>debug</code>，<code>info</code>，<code>warning</code>，<code>error</code>等几个级别。</li>
<li>通过简单的配置，一条语句可以同时输出到不同的地方，比如<code>console</code>和<code>文件</code>。</li>
</ul>
<p><strong>参考</strong></p>
<blockquote>
<p>logging的配置参考：<a href="http://blog.csdn.net/naiveloafer/article/details/7630903" target="_blank" rel="external">http://blog.csdn.net/naiveloafer/article/details/7630903</a></p>
</blockquote>
<p><strong>Format编写</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">Format</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">%(name)s</td>
<td style="text-align:center">Name of the logger (logging channel).</td>
</tr>
</tbody>
</table>
<p>%(levelno)s |Numeric logging level for the message (DEBUG, INFO, WARNING, ERROR, CRITICAL).<br>%(levelname)s |Text logging level for the message (‘DEBUG’, ‘INFO’, ‘WARNING’, ‘ERROR’, ‘CRITICAL’).<br>%(pathname)s |Full pathname of the source file where the logging call was issued (if available).<br>%(filename)s |   Filename portion of pathname.<br>%(module)s | Module (name portion of filename).<br>%(funcName)s |   Name of function containing the logging call.<br>%(lineno)d | Source line number where the logging call was issued (if available).<br>%(created)f | Time when the LogRecord was created (as returned by time.time()).<br>%(relativeCreated)d   | Time in milliseconds when the LogRecord was created, relative to the time the logging module was loaded.<br>%(asctime)s |Human-readable time when the LogRecord was created. By default this is of the form “2003-07-08 16:49:45,896” (the numbers after the comma are millisecond portion of the time).<br>%(msecs)d |  Millisecond portion of the time when the LogRecord was created.<br>%(thread)d | Thread ID (if available).<br>%(threadName)s | Thread name (if available).<br>%(process)d | Process ID (if available).<br>%(message)s | The logged message, computed as msg % args.</p>
<p><strong>basicConfig()编写</strong></p>
<p>对日志记录系统进行基本配置：</p>
<ul>
<li>如果根记录器已经具有处理程序，则此函数不起作用配置。这是一个方便的方法，供简单的脚本使用做一次性配置的日志记录包。</li>
<li>默认行为是创建一个写入的StreamHandler sys.stderr，使用BASIC_FORMAT格式字符串设置格式化程序，和将处理程序添加到根记录器。</li>
<li>可以指定一些可选的关键字参数，这可以改变默认行为。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">Optional Keyword</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">filename</td>
<td style="text-align:center">指定使用指定的FileHandler进行创建文件名，而不是一个StreamHandler。</td>
</tr>
</tbody>
</table>
<pre><code>filemode | 指定打开文件的方式，如果指定了filename（如果filemode未指定，则默认为&apos;a&apos;）。
format | 为处理程序使用指定的格式字符串。
datefmt | 使用指定的日期/时间格式。
style | 如果指定了格式字符串，请使用此字符串指定格式字符串的类型（可能的值&apos;％&apos;，&apos;{&apos;，&apos;$&apos;，for ％-formatting，：meth：`str.format`和：class：`string.Template` - 默认为&apos;％&apos;）。
level | 将根记录器级别设置为指定级别。
stream | 使用指定的流来初始化StreamHandler。注意该参数与“filename”不兼容 - 如果同时使用存在，“流”被忽略。
handlers | 如果指定，这应该是已经创建的迭代处理程序，将被添加到根处理程序。任何处理程序在没有格式化程序分配的列表中分配在此函数中创建的格式化程序。
</code></pre><p><strong><em>请注意：</em></strong></p>
<p>可以指定使用open（filename，mode）创建的流而不是传递文件名和模式。但是应该记住StreamHandler并不关闭它的流（因为它可能使用sys.stdout或sys.stderr），而FileHandler关闭其流当处理程序关闭时。</p>
<h3 id="调试器pdb-–-有了PyCharm目前不考虑此种方式"><a href="#调试器pdb-–-有了PyCharm目前不考虑此种方式" class="headerlink" title=".调试器pdb – 有了PyCharm目前不考虑此种方式"></a>.调试器<code>pdb</code> – 有了PyCharm目前不考虑此种方式</h3><p>启动Python的调试器pdb，让程序以单步方式运行，可以随时查看运行状态。</p>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  14-单元测试]]></title>
      <url>/Python3%20%2014-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<ul>
<li>“测试驱动开发”（TDD：Test-Driven Development）– 单元测试</li>
<li>是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作。</li>
</ul>
<h2 id="在pycharm中创建单元测试"><a href="#在pycharm中创建单元测试" class="headerlink" title="在pycharm中创建单元测试"></a>在pycharm中创建单元测试</h2><blockquote>
<p>创建参考：<a href="http://blog.csdn.net/u013088062/article/details/50183789" target="_blank" rel="external">http://blog.csdn.net/u013088062/article/details/50183789</a><br>一个案例：<a href="http://www.cnblogs.com/iamjqy/p/7155315.html" target="_blank" rel="external">http://www.cnblogs.com/iamjqy/p/7155315.html</a></p>
</blockquote>
<p>具体创建过程参考python文件夹的<code>.png</code>图片。</p>
<ul>
<li>选中待要编写测试代码的类名 –&gt; 右键 选择 <code>Go To</code> –&gt; <code>Test Object</code></li>
</ul>
<a id="more"></a>
<h2 id="单元测试实现"><a href="#单元测试实现" class="headerlink" title="单元测试实现"></a>单元测试实现</h2><h3 id="待测试类代码"><a href="#待测试类代码" class="headerlink" title="待测试类代码"></a>待测试类代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDict</span><span class="params">(dict)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kwargs)</span>:</span></div><div class="line">        super().__init__(**kwargs)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">return</span> self[item]</div><div class="line">        <span class="keyword">except</span> KeyError:</div><div class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">r"'MyDict' object has no attribute '%s'"</span> % item)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></div><div class="line">        self[key]  = value</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, m, n)</span>:</span></div><div class="line">        print(<span class="string">"%d + %d = %d"</span> % (m, n, (m+n)))</div></pre></td></tr></table></figure>
<h3 id="单元测试类代码"><a href="#单元测试类代码" class="headerlink" title="单元测试类代码"></a>单元测试类代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> unittest <span class="keyword">import</span> TestCase</div><div class="line"></div><div class="line"><span class="keyword">from</span> py_unittext_14.MyDict <span class="keyword">import</span> MyDict</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMyDict</span><span class="params">(TestCase)</span>:</span></div><div class="line"></div><div class="line">    <span class="comment"># setUp与tearDown</span></div><div class="line">    <span class="comment"># 这两个方法会分别在每调用一个测试方法的前后分别被执行。</span></div><div class="line">    <span class="comment"># setUp()和tearDown()方法有什么用呢？设想你的测试需要启动一个数据库，这时，就可以在setUp()方法中连接数据库，在tearDown()方法中关闭数据库，这样，不必在每个测试方法中重复相同的代码</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'setUp...'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'tearDown...'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_add</span><span class="params">(self)</span>:</span></div><div class="line">        d = MyDict(name=<span class="string">'程文佳'</span>, age=<span class="string">'24'</span>, city=<span class="string">'Tianjin'</span>)</div><div class="line">        self.assertEqual(d.name, <span class="string">'程文佳'</span>)</div><div class="line">        self.assertEqual(d[<span class="string">'name'</span>], <span class="string">'程文佳'</span>)</div><div class="line">        print(d.name)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_add2</span><span class="params">(self)</span>:</span></div><div class="line">        d = MyDict(name=<span class="string">'程文佳'</span>, age=<span class="string">'24'</span>, city=<span class="string">'Tianjin'</span>)</div><div class="line">        d.add(<span class="number">3</span>, <span class="number">4</span>)</div></pre></td></tr></table></figure>
<h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">setUp...</div><div class="line">程文佳</div><div class="line">tearDown...</div><div class="line"></div><div class="line">setUp...</div><div class="line"><span class="number">3</span> + <span class="number">4</span> = <span class="number">7</span></div><div class="line">tearDown...</div><div class="line"></div><div class="line">Ran <span class="number">2</span> tests <span class="keyword">in</span> <span class="number">0.002</span>s</div><div class="line"></div><div class="line">OK</div></pre></td></tr></table></figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li>单元测试可以有效地测试某个程序模块的行为，是未来重构代码的信心保证。</li>
<li>单元测试的测试用例要覆盖常用的输入组合、边界条件和异常。</li>
<li>单元测试代码要非常简单，如果测试代码太复杂，那么测试代码本身就可能有bug。</li>
<li>单元测试通过了并不意味着程序就没有bug了，但是不通过程序肯定有bug。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  11-面向对象+枚举]]></title>
      <url>/Python3%20%2011-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1+%E6%9E%9A%E4%B8%BE/</url>
      <content type="html"><![CDATA[<blockquote>
<p><code>Python</code>中<code>Enum</code>枚举的实现：<a href="http://www.cnblogs.com/codingmylife/archive/2013/05/31/3110656.html" target="_blank" rel="external">http://www.cnblogs.com/codingmylife/archive/2013/05/31/3110656.html</a></p>
</blockquote>
<p>定义常量的一般方法：定义变量<br>推荐的方法为：将枚举类型定义一个<code>class</code>类型。每个常量都是<code>class</code>的唯一实例<br>python提供了Enum来实现枚举功能</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 实现方式1</span></div><div class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</div><div class="line"></div><div class="line">Week = Enum(<span class="string">'WeekInfo'</span>, (<span class="string">'Mon'</span>, <span class="string">'Tue'</span>, <span class="string">'Wed'</span>, <span class="string">'Thu'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>, <span class="string">'Sun'</span>))</div><div class="line"></div><div class="line"><span class="comment"># 实现方式2</span></div><div class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum, unique</div><div class="line"></div><div class="line"><span class="comment"># @unique装饰器检查保证没有重复值</span></div><div class="line"><span class="meta">@unique</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEnum02</span><span class="params">(Enum)</span>:</span></div><div class="line">    Sun = <span class="number">0</span></div><div class="line">    Mon = <span class="number">1</span></div><div class="line">    Tue = <span class="number">2</span></div><div class="line">    Wed = <span class="number">3</span></div><div class="line">    Thu = <span class="number">4</span></div><div class="line">    Fri = <span class="number">5</span></div><div class="line">    Sta = <span class="number">6</span></div><div class="line"></div><div class="line"><span class="comment"># 遍历Enum</span></div><div class="line"><span class="keyword">for</span> name, value <span class="keyword">in</span> Week.__members__.items():</div><div class="line">    print(name, value, m.value)</div><div class="line"></div><div class="line">print(Week.Mon.value)  <span class="comment"># 1</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">Mon WeekInfo.Mon 1</span></div><div class="line"><span class="string">Tue WeekInfo.Tue 2</span></div><div class="line"><span class="string">Wed WeekInfo.Wed 3</span></div><div class="line"><span class="string">Thu WeekInfo.Thu 4</span></div><div class="line"><span class="string">Fri WeekInfo.Fri 5</span></div><div class="line"><span class="string">Sat WeekInfo.Sat 6</span></div><div class="line"><span class="string">Sun WeekInfo.Sun 7</span></div><div class="line"><span class="string">"""</span></div><div class="line"></div><div class="line"><span class="comment"># 使用MyEnum02</span></div><div class="line">print(MyEnum02(<span class="number">1</span>))  <span class="comment"># MyEnum02.Mon</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  12-面向对象+元类]]></title>
      <url>/Python3%20%2012-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1+%E5%85%83%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p>静态语言和动态语言最大的不同，就是<code>函数</code>和<code>类</code>的定义。不是编译时定义的，而是运行时动态编译的。</p>
<p>关键字：<strong><em>type()</em></strong>, <strong><em>metaclass</em></strong></p>
<a id="more"></a>
<h2 id="一般的class创建"><a href="#一般的class创建" class="headerlink" title="一般的class创建"></a>一般的class创建</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'Hello World !'</span>)</div><div class="line"></div><div class="line"><span class="keyword">from</span> py_obj_end_12.Hello <span class="keyword">import</span> Hello</div><div class="line"></div><div class="line"><span class="string">"""导入Hello类后的测试"""</span></div><div class="line">h = Hello()</div><div class="line">print(h.hello())  <span class="comment"># Hello World !</span></div><div class="line"></div><div class="line"><span class="comment"># 查看实例h所属的类型，是class Hello</span></div><div class="line">print(type(h))  <span class="comment"># &lt;class 'py_obj_end_12.Hello.Hello'&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># 查看Hello所属的类型，是 type 类型</span></div><div class="line">print(type(Hello))  <span class="comment"># &lt;class 'type'&gt;</span></div></pre></td></tr></table></figure>
<h2 id="使用type-来动态创建类"><a href="#使用type-来动态创建类" class="headerlink" title="使用type()来动态创建类"></a>使用<code>type()</code>来动态创建类</h2><h3 id="type-是什么？为什么-Hello-会是-type-类型的？"><a href="#type-是什么？为什么-Hello-会是-type-类型的？" class="headerlink" title="type 是什么？为什么 Hello 会是 type 类型的？"></a><code>type</code> 是什么？为什么 <code>Hello</code> 会是 <code>type</code> 类型的？</h3><ul>
<li>因为<code>Python</code>是<code>动态语言</code>，所以<code>class</code>的定义是运行时动态创建的，而创建<code>class</code>使用的就是<code>type()</code>函数</li>
<li><code>type()</code>函数既可以返回一个<code>对象的类型</code>，又可以创建出<code>新的类型</code>。</li>
</ul>
<h3 id="通过type-创建class和直接写class是完全一样的。"><a href="#通过type-创建class和直接写class是完全一样的。" class="headerlink" title="通过type()创建class和直接写class是完全一样的。"></a>通过type()创建class和直接写class是完全一样的。</h3><ul>
<li>因为<code>python</code>解释器遇到<code>class</code>定义时，仅仅是扫描一下<code>class</code>定义的语法，然后调用<code>type()</code>函数创建出<code>class</code>。</li>
<li>正常情况下，我们使用<code>class Xxx</code>创建一个类。但是，因为<code>type()</code>函数允许我们动态的将类创建出来。</li>
<li><code>动态语言</code>本身支持处于运行期的程序动态创建一个类。这和<code>Java</code>的<code>静态语言</code>不同。</li>
</ul>
<blockquote>
<p><code>type()</code>使用：<a href="http://www.cnblogs.com/ccorz/p/6120783.html" target="_blank" rel="external">http://www.cnblogs.com/ccorz/p/6120783.html</a></p>
</blockquote>
<pre><code>type(name, bases, dict)
       返回一个新的type对象. 基本上是 class 语句的动态形式. 参数:
      name  , 字符串, 制定要构造类的名字, 赋给新对象的 __name__ 属性;
      bases，一个tuple，指定新类型的所有基类，赋给新对象的__bases__ 属性; 
      dict， 字典类型，作为新类的名字空间，赋给新对象的__dict__ 属性
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 用type()函数创建Hello类</span></div><div class="line"></div><div class="line"><span class="comment"># 1.定义一个函数。即：类的方法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></div><div class="line">    print(<span class="string">'Hello, World 2!'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 2.创建一个class Hello2。type()函数中传入的参数：</span></div><div class="line"><span class="comment"># 1）class类名，2）继承的父类集合，3）class的方法名与函数的绑定，此处即：将函数say()绑定至方法名hello上</span></div><div class="line"><span class="comment"># 其实class定义一个类主要也是这3个主要组成部分：类名、继承类、方法</span></div><div class="line"><span class="comment"># Hello2是一个以名为"Hello22"的类的引用。这个名为"Hello22"的类以object为基类,类中有一个say()函数</span></div><div class="line">Hello2 = type(<span class="string">'Hello22'</span>, (object,), dict(say=say))</div><div class="line"></div><div class="line"><span class="comment"># 3.为类绑定一个变量</span></div><div class="line">Hello2.name = <span class="string">'cwj'</span></div><div class="line"></div><div class="line"><span class="comment"># 测试</span></div><div class="line">h2 = Hello2()</div><div class="line">print(h2.say())  <span class="comment"># Hello, World 2!</span></div><div class="line">print(h2.name)  <span class="comment"># cwj</span></div></pre></td></tr></table></figure>
<h3 id="metaclass"><a href="#metaclass" class="headerlink" title="metaclass"></a><code>metaclass</code></h3><p>使用metaclass来控制类的创建行为</p>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  13-错误+测试+调试]]></title>
      <url>/Python3%20%2013-%E9%94%99%E8%AF%AF+%E6%B5%8B%E8%AF%95+%E8%B0%83%E8%AF%95/</url>
      <content type="html"><![CDATA[<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    可能出错的代码块</span></div><div class="line"><span class="string">    """</span></div><div class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</div><div class="line">    print(<span class="string">'except:'</span>, e)</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    print(<span class="string">'finally...'</span>)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="错误特点"><a href="#错误特点" class="headerlink" title="错误特点"></a>错误特点</h2><ol>
<li><em><code>Python</code>的错误其实也是<code>class</code>，所有的错误类型都继承自<code>BaseException</code>，所以在使用<code>except</code>时需要注意的是，它不但捕获该类型的错误，还把其子类也“一网打尽”。</em></li>
<li><em>使用<code>try...except</code>捕获错误还有一个巨大的好处，就是可以跨越多层调用，即：不需要在每个可能出错的地方去捕获错误，只要在合适的层次去捕获错误就可以了。比如函数<code>main()</code>调用<code>foo()</code>，<code>foo()</code>调用<code>bar()</code>，结果<code>bar()</code>出错了。这时，只要<code>main()</code>捕获到了就可以处理<code>bar()</code>中的错误。</em></li>
</ol>
<h2 id="记录错误"><a href="#记录错误" class="headerlink" title="记录错误"></a>记录错误</h2><ul>
<li>捕获错误，把错误堆栈打印出来，分析错误原因，同时，让程序继续执行下去而不是使得程序被结束。</li>
</ul>
<p><strong>使用方法</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="comment"># 同样是出错，但程序打印完错误信息后会继续执行，并正常退出.</span></div><div class="line"><span class="comment"># 通过配置，logging还可以把错误记录到日志文件里，方便事后排查。</span></div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    bar(<span class="string">'0'</span>)</div><div class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">    logging.exception(e)</div></pre></td></tr></table></figure>
<h2 id="抛出错误"><a href="#抛出错误" class="headerlink" title="抛出错误"></a>抛出错误</h2><ul>
<li>因为错误是class。捕获一个错误就是捕获到该class的一个实例。</li>
<li>既可以使用python的内置函数抛出错误，也可以自己编写函数抛出错误。</li>
</ul>
<p><strong>使用关键字<code>raise</code>抛出一个错误实例</strong> </p>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 编写自定义异常类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooError</span><span class="params">(ValueError)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(s)</span>:</span></div><div class="line">    n = int(s)</div><div class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</div><div class="line">        <span class="keyword">raise</span> FooError(<span class="string">'invalid value: %s'</span> % s)</div><div class="line">    <span class="keyword">return</span> <span class="number">10</span> / n</div><div class="line"></div><div class="line"><span class="comment"># 调用自定义的异常类</span></div><div class="line">foo(<span class="string">'0'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 报的错误</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"err_throw.py"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    foo(<span class="string">'0'</span>)</div><div class="line">  File <span class="string">"err_throw.py"</span>, line <span class="number">8</span>, <span class="keyword">in</span> foo</div><div class="line">    <span class="keyword">raise</span> FooError(<span class="string">'invalid value: %s'</span> % s)</div><div class="line">__main__.FooError: invalid value: <span class="number">0</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  10-面向对象+定制对象]]></title>
      <url>/Python3%20%2010-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1+%E5%AE%9A%E5%88%B6%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<pre><code>在编写一个基础类的基础上，为其重写某些魔法方法。
</code></pre><blockquote>
<p>python其他内置魔法方法： <a href="https://docs.python.org/3/reference/datamodel.html#special-method-names" target="_blank" rel="external">https://docs.python.org/3/reference/datamodel.html#special-method-names</a><br><a href="http://www.cnblogs.com/simayixin/archive/2011/05/04/2036295.html" target="_blank" rel="external">http://www.cnblogs.com/simayixin/archive/2011/05/04/2036295.html</a><br>python常用魔法方法的实现：<a href="http://www.cnblogs.com/scolia/p/5690210.html" target="_blank" rel="external">http://www.cnblogs.com/scolia/p/5690210.html</a></p>
</blockquote>
<p><strong>魔法方法有：</strong><br>-1.<code>__new__()</code>：对象的创建，是一个静态方法，第一个参数是<code>cls</code>。(不可能是<code>self</code>，因为对象还没创建，哪来的<code>self</code>)—提示<code>单例模式</code>与此有关。<br>0.<code>__init__()</code>：对象的初始化， 是一个实例方法，第一个参数是<code>self</code>。<br>1.<code>__slots__()</code>：约束要绑定的临时变量<br>2.<code>__len__()</code>：让类作用于len()<br>3.<code>__str__()</code>：类似于<code>java</code>中的toString()，返回用户看到的字符串<br>4.<code>__repe__()</code>：返回开发者看到的字符串<br>5.<code>__iter__()</code>：将一个类被用于<code>for...in</code>循环中，返回一个迭代对象<br>6.<code>__getitem__()</code>：像<code>list</code>那样按照下标取出元素，要在其中处理<code>slice切片</code>、<code>step步长</code><br>7.<code>__getattr__()</code>：当调用不存在的属性时，<code>Python</code>解释器会试图调用<code>__getattr__(self, &#39;attr&#39;)</code>来尝试获得属性。只有在没有找到属性的情况下，才调用<code>__getattr__</code>，已有的属性将不会在<code>__getattr__</code>中查找。而且，实际上可以把一个类的所有属性和方法调用全部动态化处理了，不需要任何特殊手段。<br>8.<code>__call__()</code></p>
<a id="more"></a>
<h2 id="iter-配合-next-使用"><a href="#iter-配合-next-使用" class="headerlink" title="__iter__() 配合 __next__()使用"></a><code>__iter__()</code> 配合 <code>__next__()</code>使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="comment"># 构造方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self._name = name</div><div class="line">        self.a, self.sum = <span class="number">1</span>, <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="comment"># 使本类可以迭代</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self</div><div class="line"></div><div class="line">    <span class="comment"># 具体的迭代方法，此方法的实现是关键</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></div><div class="line">        self.sum = self.sum + self.a</div><div class="line">        <span class="keyword">if</span> self.sum &gt; <span class="number">10</span>:</div><div class="line">            <span class="keyword">raise</span> StopIteration</div><div class="line">        <span class="keyword">return</span> self.sum</div><div class="line"></div><div class="line">    <span class="comment"># 重写 toString()方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Person name is '</span> + self._name</div><div class="line"></div><div class="line">    __repr__ = __str__</div><div class="line"></div><div class="line">    <span class="string">'''测试'''</span></div><div class="line">person = Person(<span class="string">"cwj"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 重写 __str__() 之后的效果</span></div><div class="line">print(Person(<span class="string">"cwj"</span>))  <span class="comment"># Person name is cwj</span></div><div class="line">print(person)  <span class="comment"># Person name is cwj</span></div><div class="line"></div><div class="line">print(isinstance(person, Iterator))  <span class="comment"># True</span></div><div class="line">print(isinstance(person, Iterable))  <span class="comment"># True</span></div><div class="line">l = []</div><div class="line"></div><div class="line"><span class="comment"># 遍历Person序列，此时Person是一个Iterator</span></div><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> person:</div><div class="line">    l.append(n)</div><div class="line">    print(n)</div><div class="line"></div><div class="line"><span class="comment"># 将一个类遍历后得到的结果赋值给l序列</span></div><div class="line">print(l)  <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">1</span></div><div class="line"><span class="string">2</span></div><div class="line"><span class="string">3</span></div><div class="line"><span class="string">4</span></div><div class="line"><span class="string">5</span></div><div class="line"><span class="string">6</span></div><div class="line"><span class="string">7</span></div><div class="line"><span class="string">8</span></div><div class="line"><span class="string">9</span></div><div class="line"><span class="string">10</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<h2 id="getitme-配合-setitme-使用"><a href="#getitme-配合-setitme-使用" class="headerlink" title="__getitme__()配合__setitme__()使用"></a><code>__getitme__()</code>配合<code>__setitme__()</code>使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DictDemo</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.dict = &#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="keyword">if</span> item <span class="keyword">in</span> self.dict:</div><div class="line">            <span class="keyword">return</span> self.dict[item]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">'不存在'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></div><div class="line">        self.dict[key] = value</div><div class="line"></div><div class="line">    <span class="string">'''测试'''</span></div><div class="line">dictD = DictDemo()</div><div class="line">dictD[<span class="string">'1'</span>] = <span class="string">'cwj'</span></div><div class="line">dictD.__setitem__(<span class="string">'1'</span>,<span class="string">'234'</span>)</div><div class="line">print(dictD.__getitem__(<span class="string">'1'</span>))  <span class="comment"># 234</span></div><div class="line">print(dictD[<span class="string">'2'</span>])  <span class="comment"># 不存在</span></div></pre></td></tr></table></figure>
<p><strong><em>一个实现<code>迭代</code>、<code>容器</code>的例子</em></strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''Animal类 自定义魔法函数'''</span></div><div class="line"><span class="keyword">from</span> pip._vendor.requests.packages.urllib3.connectionpool <span class="keyword">import</span> xrange</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">创建一个模拟字典的类，这个类的内部维护了两个列表，</span></div><div class="line"><span class="string">key 负责储存键，value 负责储存值，两个列表通过索引的一一对应，从而达到模拟字典的目的</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key, value)</span>:</span></div><div class="line">        self.key = []</div><div class="line">        self.value = []</div><div class="line">        self.key.append(key)</div><div class="line">        self.value.append(value)</div><div class="line">        self.__index = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="comment"># __len__方法，按照协议，这个方法应该返回容器的长度</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> len(self.key)</div><div class="line"></div><div class="line">    <span class="comment"># __getitem__方法。这个方法会在a['scolia']时，调用a.__getitem__('scolia')。</span></div><div class="line">    <span class="comment"># 也就是说这个方法定义了元素的获取.</span></div><div class="line">    <span class="comment"># 先找到 key 列表中建的索引，然后用索引去 value 列表中找对应的元素，然后将其返回</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="keyword">if</span> item <span class="keyword">in</span> self.key:</div><div class="line">            <span class="keyword">return</span> self.value[self.key.index(item)]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">'不存在'</span></div><div class="line"></div><div class="line">    <span class="comment"># __setitem__(self, key, value)方法定义了 a['scolia'] = 'good' 这种操作时的行为，</span></div><div class="line">    <span class="comment"># 此时将会调用a.__setitem__('scolia', 'good') 因为是绑定方法，所以self是自动传递的</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self.key:</div><div class="line">            self.key.append(key)</div><div class="line">            self.value.append(value)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            __index = self.key.index(key)</div><div class="line">            self.value[__index] = value</div><div class="line"></div><div class="line">    <span class="comment"># __delitem__(self, key)方法定义了del a['scolia'] 这类操作时候的行为，</span></div><div class="line">    <span class="comment"># 里面的‘scolia’就作为参数传进去</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, key)</span>:</span></div><div class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.key:</div><div class="line">            __index = self.key.index(key)</div><div class="line">            <span class="keyword">del</span> self.key[__index]</div><div class="line">            <span class="keyword">del</span> self.value[__index]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">"key值不存在"</span></div><div class="line"></div><div class="line">    <span class="string">'''只有实现里以上四个方法，就可以当做可变容器来使用了。'''</span></div><div class="line"></div><div class="line">    <span class="comment">#  __str__ 是对应于 str() 函数，在类的表示中会继续讨论，这里是为了 print 语句好看才加进去的，</span></div><div class="line">    <span class="comment"># 因为print语句默认就是调用str()函数</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        l = []</div><div class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> xrange(len(self.key)):</div><div class="line">            __key = self.key[index]</div><div class="line">            __value = self.value[index]</div><div class="line">            result = __key,__value</div><div class="line">            l.append(result)</div><div class="line">        <span class="keyword">return</span> str(l)</div><div class="line"></div><div class="line">    <span class="comment"># 实现一个__iter__方法，这个方法负责返回一个迭代器</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self</div><div class="line"></div><div class="line">    <span class="comment"># 内部实现了next（python3.x为__next__）方法，真正负责迭代的实现。</span></div><div class="line">    <span class="comment"># 当迭代器内的元素用尽之后，任何的进一步调用都之后触发 StopIteration 异常</span></div><div class="line">    <span class="comment"># 一般会在一个类里同时实现这两种方法（即是可迭代对象又是迭代器），此时__iter__方法只要返回self就足够的了</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.__index == len(self.key):</div><div class="line">            self.__index = <span class="number">0</span></div><div class="line">            <span class="keyword">raise</span> StopIteration()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            __key = self.key[self.__index]</div><div class="line">            __value = self.value[self.__index]</div><div class="line">            result = __key, __value</div><div class="line">            self.__index += <span class="number">1</span></div><div class="line">            <span class="keyword">return</span> result</div><div class="line"></div><div class="line">    <span class="comment"># __contains__实现了成员判断，这里我们更关心value列表中的数据，所以判断的是value列表。</span></div><div class="line">    <span class="comment"># 该方法要求返回布尔值。</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="keyword">if</span> item <span class="keyword">in</span> self.value:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="comment"># __reversed__(self)方法返回一个倒序后的副本，这里体现了有序性</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reversed__</span><span class="params">(self)</span>:</span></div><div class="line">        __result = self.value</div><div class="line">        __result.reverse()</div><div class="line">        <span class="keyword">return</span> __result</div><div class="line"></div><div class="line"><span class="string">'''实际测试'''</span></div><div class="line">m = Animal(<span class="string">'1'</span>, <span class="string">'cwj'</span>)</div><div class="line">print(m)  <span class="comment"># [('1', 'cwj')]</span></div><div class="line">print(m.__len__())  <span class="comment"># 1</span></div><div class="line">m[<span class="string">'2'</span>] = <span class="string">'ddd'</span></div><div class="line">m[<span class="string">'3'</span>] = <span class="string">'qwe'</span></div><div class="line">m[<span class="string">'2'</span>] = <span class="string">'lkj'</span></div><div class="line"></div><div class="line">print(m)  <span class="comment"># [('1', 'cwj'), ('2', 'lkj'), ('3', 'qwe')]</span></div><div class="line">print(m.__len__())  <span class="comment"># 3</span></div><div class="line"></div><div class="line"><span class="keyword">del</span> m[<span class="string">'3'</span>]</div><div class="line"></div><div class="line">print(m)  <span class="comment"># [('1', 'cwj'), ('2', 'lkj')]</span></div><div class="line">print(m.__len__())  <span class="comment"># 2</span></div><div class="line"></div><div class="line">print(reversed(m))  <span class="comment"># ['lkj', 'cwj']</span></div><div class="line"></div><div class="line">print(<span class="string">'cwj'</span> <span class="keyword">in</span> m)  <span class="comment"># True</span></div></pre></td></tr></table></figure>
<h2 id="类的切片操作"><a href="#类的切片操作" class="headerlink" title="类的切片操作"></a>类的<code>切片</code>操作</h2><blockquote>
<p>参考：<a href="http://www.cnblogs.com/scolia/p/5690210.html" target="_blank" rel="external">http://www.cnblogs.com/scolia/p/5690210.html</a></p>
</blockquote>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Slices</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self._x = x</div><div class="line">        self._index = <span class="number">-1</span></div><div class="line"></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    # __getitem__()实现支持for循环</span></div><div class="line"><span class="string">    def __getitem__(self, item):</span></div><div class="line"><span class="string">        if isinstance(self._x, list):</span></div><div class="line"><span class="string">            self._index += 1</span></div><div class="line"><span class="string">            return self._x[self._index]</span></div><div class="line"><span class="string">        else:</span></div><div class="line"><span class="string">            raise '参数类型错误'</span></div><div class="line"><span class="string">     '''</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, item)</span>:</span></div><div class="line"></div><div class="line">        <span class="comment"># print(item.start, item.stop, item.step)  # 1 2 1</span></div><div class="line">        <span class="comment"># return item   # slice(1, 2, 1)</span></div><div class="line">        <span class="keyword">if</span> isinstance(item, slice):</div><div class="line">            <span class="keyword">return</span> self._x[item.start:item.stop:item.step]</div><div class="line"></div><div class="line"><span class="string">'''测试Slices类'''</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">s = Slices([1, 2, 3, 4])</span></div><div class="line"><span class="string">for n in s:</span></div><div class="line"><span class="string">    print(n)</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">s2 = Slices('1234')</span></div><div class="line"><span class="string">for n in s2:</span></div><div class="line"><span class="string">    print(n)</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line">s3 = Slices([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line"></div><div class="line"><span class="comment"># 当直接返回item参数时的结果</span></div><div class="line"><span class="comment"># print(s3[1:4:1])  # slice(1, 2, 1)</span></div><div class="line">print(s3[<span class="number">1</span>:<span class="number">4</span>:<span class="number">1</span>])  <span class="comment"># [2, 3, 4]</span></div><div class="line">print(s3[<span class="number">-4</span>:<span class="number">-2</span>])  <span class="comment"># [2, 3]</span></div><div class="line">print(s3[<span class="number">-3</span>:<span class="number">-1</span>])  <span class="comment"># [3, 4]</span></div><div class="line">print(s3[<span class="number">-5</span>:])  <span class="comment"># [1, 2, 3, 4, 5]</span></div><div class="line">print(s3[:])  <span class="comment"># [1, 2, 3, 4, 5]</span></div><div class="line">print(s3[<span class="number">-1</span>::<span class="number">-1</span>])  <span class="comment"># [5, 4, 3, 2, 1]</span></div><div class="line">print(s3[<span class="number">-1</span>:])  <span class="comment"># [5]</span></div><div class="line">``` </div><div class="line"></div><div class="line"><span class="comment">## `__getattr__()`</span></div><div class="line"></div><div class="line">正常情况下，当我们调用类的`方法`或`属性`时，如果不存在，就会报错。如：</div><div class="line"></div><div class="line">```python</div><div class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'score'</span></div></pre></td></tr></table></figure>
<p>要避免这个错误，<code>Python</code>有一个机制：写一个<code>__getattr__()</code>方法，动态返回一个属性。<br>当调用不存在的属性时，比如<code>color</code>，<code>Python</code>解释器会试图调用<code>__getattr__(self, &#39;color&#39;)</code>来尝试获得属性，这样我们就有机会返回<code>color</code>的值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 返回不存在的属性与函数</span></div><div class="line"><span class="comment"># 作用：可以针对完全动态的情况作调用</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></div><div class="line">    <span class="comment"># 返回未定义的属性</span></div><div class="line">    <span class="keyword">if</span> item == <span class="string">'color'</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'您真是 666 啊 ~ 这个属性都鞥猜到'</span></div><div class="line">    <span class="keyword">elif</span> item == <span class="string">'address'</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'哈哈哈'</span></div><div class="line">    <span class="comment"># 返回未定义的函数</span></div><div class="line">    <span class="keyword">elif</span> item == <span class="string">'add'</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">lambda</span>: <span class="number">100</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="comment"># 注意到任意调用如s.abc都会返回None，这是因为我们定义的__getattr__默认返回就是None</span></div><div class="line">        <span class="comment"># 要让class只响应特定的几个属性,要按照约定，抛出AttributeError错误</span></div><div class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">'\'Student\' object has no attribute \'%s\''</span> % item)</div></pre></td></tr></table></figure>
<h2 id="call-与-getattr-组合实现URL中的链式-chain-调用"><a href="#call-与-getattr-组合实现URL中的链式-chain-调用" class="headerlink" title="__call__()与__getattr__()组合实现URL中的链式(chain)调用"></a><code>__call__()</code>与<code>__getattr__()</code>组合实现<code>URL</code>中的链式(chain)调用</h2><p>在python中，函数其实是一个对象。如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = abs</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.__name__</div><div class="line"><span class="string">'abs'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">-123</span>)</div><div class="line"><span class="number">123</span></div></pre></td></tr></table></figure>
<p>由于 f 可以被调用，所以，f 被称为可调用对象。所有的函数都是可调用对象。<br>一个类的实例对象想要变成一个可调用的对象，只需要实现一个魔法方法<code>__call__()</code>。</p>
<p><strong><code>可调用对象</code>与<code>一般对象</code></strong></p>
<ul>
<li>可调用对象：obj.name(‘source’).age。即：既可以使用<code>.</code>调用属性或方法，也可以使用<code>obj()</code>以一种<code>函数样式</code>使用此对象。此时调用<code>obj(arg1,arg2,....)</code>就等价于<code>obj.__call__(self,arg1,arg2,...)</code></li>
<li>一般对象：obj.name。即：只能使用<code>.</code>调用属性或方法。</li>
</ul>
<p>因为<code>__call__()</code>魔法方法的加入，因此<code>python</code>的<code>函数</code>与<code>对象</code>之间的概念被模糊了</p>
<p>URL中的链式调用，这样无论API怎么变，SDK都可以根据URL实现完全动态的调用，而且，不随API的增加而改变，代码示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''URLChain类'''</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">URLChain</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, path = <span class="string">''</span>)</span>:</span></div><div class="line">        self.__path = path</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="comment"># 实现参考：https://zhidao.baidu.com/question/1865282935722979707.html</span></div><div class="line">        <span class="comment"># 返回一个 URLChain 对象，这个时候里面的path就是''+'/'+'api'='/api'，此时self = /api</span></div><div class="line">        print(<span class="string">'\'self.__path is\' :'</span> + self.__path + <span class="string">'       , \'item is\' : '</span> + item + <span class="string">' ， 之前self为：'</span>, self)</div><div class="line">        <span class="comment"># 即：上一个 '%s/%s' 的数值代替：构造函数中 path = ''中 '' 的具体数值，相当于重新构造了一个对象，</span></div><div class="line">        <span class="comment"># 在即将的调用的返回值中表示参数self.__path的值, 新传入的参数赋值给item</span></div><div class="line">        <span class="keyword">return</span> URLChain(<span class="string">'%s/%s'</span> % (self.__path, item))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__path</div><div class="line"></div><div class="line">    __repr__ = __str__</div><div class="line"></div><div class="line">    <span class="comment"># 将此类的实例对象变成一个可调用的对象</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, path)</span>:</span></div><div class="line">        print(<span class="string">'__call__  之前self is : '</span>, self)</div><div class="line">        print(<span class="string">'__call__ path is : '</span> + path)</div><div class="line">        <span class="keyword">return</span> URLChain(<span class="string">'%s/%s'</span> % (self.__path, path))</div><div class="line"></div><div class="line"><span class="string">'''调用URLChian类'''</span></div><div class="line">chain = URLChain()</div><div class="line">print(chain.api.server.user.friends)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">'self.__path is' :       , 'item is' : api ， 之前self为： </span></div><div class="line"><span class="string">'self.__path is' :/api       , 'item is' : server ， 之前self为： /api</span></div><div class="line"><span class="string">'self.__path is' :/api/server       , 'item is' : user ， 之前self为： /api/server</span></div><div class="line"><span class="string">'self.__path is' :/api/server/user       , 'item is' : friends ， 之前self为： /api/server/user</span></div><div class="line"><span class="string">/api/server/user/friends</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="comment"># 当执行 ('cwj') 这一个参数时调用的是 URLChian的 __call__()</span></div><div class="line">print(chain.api.server(<span class="string">'cwj'</span>).friends)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">'self.__path is' :       , 'item is' : api ， 之前self为： </span></div><div class="line"><span class="string">'self.__path is' :/api       , 'item is' : server ， 之前self为： /api</span></div><div class="line"><span class="string">__call__  之前self is :  /api/server</span></div><div class="line"><span class="string">__call__ path is : cwj</span></div><div class="line"><span class="string">'self.__path is' :/api/server/cwj       , 'item is' : friends ， 之前self为： /api/server/cwj</span></div><div class="line"><span class="string">/api/server/cwj/friends</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure></p>
<h2 id="callable-的使用：判断一个变量是函数还是对象"><a href="#callable-的使用：判断一个变量是函数还是对象" class="headerlink" title="callable()的使用：判断一个变量是函数还是对象"></a>callable()的使用：判断一个变量是<code>函数</code>还是<code>对象</code></h2><p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 判断一个对象是否能被调用，能被调用的对象就是一个Callable对象,函数和自定义的带有__call__()的类实例对象返回值是True：</span></div><div class="line">print(callable(chain))  <span class="comment"># True URLChian实现了__call__()魔法方法</span></div><div class="line">print(callable(dictD))  <span class="comment"># False</span></div><div class="line">print(callable(abs))  <span class="comment"># True</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  09-面向对象+临时变量、方法+@property+多继承]]></title>
      <url>/Python3%20%2009-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1+%E4%B8%B4%E6%97%B6%E5%8F%98%E9%87%8F%E3%80%81%E6%96%B9%E6%B3%95+@property+%E5%A4%9A%E7%BB%A7%E6%89%BF/</url>
      <content type="html"><![CDATA[<h2 id="绑定临时变量和临时函数-–-不限定参数"><a href="#绑定临时变量和临时函数-–-不限定参数" class="headerlink" title="绑定临时变量和临时函数 – 不限定参数"></a>绑定临时变量和临时函数 – 不限定参数</h2><pre><code>使用python语言`动态语言`这一特性。
</code></pre><h3 id="绑定临时变量"><a href="#绑定临时变量" class="headerlink" title="绑定临时变量"></a>绑定临时变量</h3><ul>
<li><strong>为实例对象绑定临时变量</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 动态的将 new_name 属性绑定至 实例 中</span></div><div class="line">dog.new_name = <span class="string">'new cwj'</span></div><div class="line">print(dog.new_name)  <span class="comment"># new cwj</span></div><div class="line"></div><div class="line"><span class="comment"># 删除临时添加的 new_name 属性</span></div><div class="line"><span class="keyword">del</span> dog.new_name</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><strong>为类绑定临时变量</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 动态的将 new_name_2 属性绑定至 Dog类 中</span></div><div class="line">Dog.new_name_2 = <span class="string">'new cwj 2'</span></div><div class="line">print(dog.new_name_2)  <span class="comment"># new cwj 2</span></div><div class="line">dog2 = Dog(<span class="string">'wangwang'</span>, <span class="number">1</span>)</div><div class="line">print(dog2.new_name_2)  <span class="comment"># new cwj 2</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">可以看到 dog 与 dog2 两个实例都具有 new_name_2 属性，</span></div><div class="line"><span class="string">由此可见 new_name_2 属性已经动态的添加至Dog类中</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<h3 id="绑定临时函数"><a href="#绑定临时函数" class="headerlink" title="绑定临时函数"></a>绑定临时函数</h3><ul>
<li><strong>为实例对象绑定临时函数</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> types <span class="keyword">import</span> MethodType</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_color</span><span class="params">(self, color)</span>:</span></div><div class="line">    self.color = color</div><div class="line"></div><div class="line"><span class="comment"># 给实例绑定一个方法</span></div><div class="line">dog.set_color = MethodType(set_color, dog)</div><div class="line"></div><div class="line"><span class="comment"># 通过这个方法为临时的color赋值</span></div><div class="line">dog.set_color(<span class="string">'red'</span>)</div><div class="line"></div><div class="line"><span class="comment"># set_color()这个方法是临时赋给dog变量的，而不是赋给dog2的</span></div><div class="line"><span class="comment"># dog2.set_color('green')  # AttributeError: 'Dog' object has no attribute 'set_color'</span></div><div class="line"></div><div class="line"><span class="comment"># 输出临时参数color的值</span></div><div class="line">print(dog.color)  <span class="comment"># red</span></div><div class="line"></div><div class="line"><span class="comment"># 删除临时方法，删除此方法的同时，也删除了此方法内的历史变量</span></div><div class="line"><span class="keyword">del</span> dog.set_color</div><div class="line"></div><div class="line"><span class="comment"># 删除临时参数</span></div><div class="line"><span class="comment"># del dog.color</span></div><div class="line"></div><div class="line"><span class="comment"># 当删除临时方法后，此方法将不再能使用</span></div><div class="line"><span class="comment"># dog.set_color('green')  # AttributeError: 'Dog' object has no attribute 'set_color'</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>为类绑定临时函数</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义一个临时的方法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_color2</span><span class="params">(self, color)</span>:</span></div><div class="line">    self.color = color</div><div class="line"></div><div class="line"><span class="comment"># 将临时定义的方法绑定给 Dog这个类</span></div><div class="line">Dog.set_color2 = set_color2</div><div class="line"></div><div class="line"><span class="comment"># Dog类的两个变量dog和dog2分别调用set_color2()</span></div><div class="line">dog.set_color2(<span class="string">'blue'</span>)</div><div class="line">dog2.set_color2(<span class="string">'black'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 测试临时函数是否对临时变量赋值成功</span></div><div class="line">print(dog2.color)  <span class="comment"># black</span></div><div class="line">print(dog.color)  <span class="comment"># blue</span></div><div class="line"></div><div class="line"><span class="comment"># 删除临时的方法</span></div><div class="line"><span class="keyword">del</span> Dog.set_color2</div></pre></td></tr></table></figure>
<h3 id="绑定临时变量和临时函数-–-限定参数-slots-变量"><a href="#绑定临时变量和临时函数-–-限定参数-slots-变量" class="headerlink" title="绑定临时变量和临时函数 – 限定参数 __slots__变量"></a>绑定临时变量和临时函数 – 限定参数 <code>__slots__</code>变量</h3><pre><code>`__slots__`定义的属性仅对当前类实例起作用，对继承的子类是不起作用的.
除非在子类中也定义`__slots__`，这样，子类实例允许定义的属性就是自身的`__slots__`加上父类的`__slots__`
</code></pre><p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''声明Pet类'''</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">        使用一个特殊的变量 __slots__，这个变量可以限制外部为Pet类添加的属性。</span></div><div class="line"><span class="string">        例如此处，只允许外部为Pet类添加 name 和 age 两个属性</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    __slots__ = (<span class="string">'name2'</span>, <span class="string">'age'</span>)</div><div class="line"></div><div class="line"><span class="string">'''调用Pet类'''</span></div><div class="line">pet = Pet()</div><div class="line">pet.name2 = <span class="string">'big pig'</span></div><div class="line">pet.age = <span class="number">2</span></div><div class="line"></div><div class="line"><span class="comment"># 通过 __slots__ 变量的声明，color不允许被定义</span></div><div class="line"><span class="comment"># pet.color = 'yellow'  # AttributeError: 'Pet' object has no attribute 'color'</span></div><div class="line"><span class="comment"># print(Pet.__doc__)  # 输出注释</span></div><div class="line">print(pet.name2)  <span class="comment"># big pig</span></div><div class="line">print(pet.age)  <span class="comment"># 2</span></div><div class="line"></div><div class="line"><span class="comment"># pig 实例对象不能调用临时变量 name2，因为 __slots__变量定义的参数名称之能限定在它所在的类中，对子类不起作用</span></div><div class="line"><span class="comment"># print(pig.name2)  # AttributeError: name2</span></div></pre></td></tr></table></figure>
<h3 id="property的使用"><a href="#property的使用" class="headerlink" title="@property的使用"></a>@property的使用</h3><pre><code>既能检查参数，又可以`用类似属性`这样简单的方式来`访问类的变量`
</code></pre><p><strong>实现</strong></p>
<p> 关键字：<code>@property</code>,<code>@参数名.setter</code></p>
<p> 代码示例 - Pet类</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''Pet类'''</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></div><div class="line">        print(self.__name + <span class="string">" is very good !"</span>)</div><div class="line"></div><div class="line">    <span class="string">'''@property的使用'''</span></div><div class="line">    <span class="comment"># 此处的 color 为 此类对外界声明的一个变量，即：是一个变量名</span></div><div class="line">    <span class="comment"># 此方法相当于 get_color()</span></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">color</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._color</div><div class="line"></div><div class="line">    <span class="comment"># 此方法相当于 set_color(self, color)</span></div><div class="line"><span class="meta">    @color.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">color</span><span class="params">(self, color)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(color, str):</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'input a str'</span>)</div><div class="line">        self._color = color</div></pre></td></tr></table></figure>
<p>代码示例 - 调用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 错误的写法，验证对于参数的检验</span></div><div class="line"><span class="comment"># pet.color = 123  # ValueError: input a str</span></div><div class="line">pet2 = Pet()</div><div class="line"><span class="comment"># 为Pet类的color属性设置具体的参数</span></div><div class="line">pet2.color = <span class="string">'grew'</span></div><div class="line">print(pet2.color)  <span class="comment"># grew</span></div></pre></td></tr></table></figure>
<h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><pre><code>在设计类的继承关系时，通常，主线都是单一继承下来的，如果需要“混入”额外的功能，通过多重继承就可以实现，一个类在继承了一个类的基础上，再次继承另一个类。这种设计通常称之为`MixIn`。

MixIn的目的就是给一个类增加多个功能，这样，在设计类的时候，我们优先考虑通过多重继承来组合多个MixIn的功能，而不是设计多层次的复杂的继承关系。
</code></pre><p>如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Mammal, RunnableMixIn, CarnivorousMixIn)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  09-面向对象]]></title>
      <url>/Python3%20%2009-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<h2 id="类的模板"><a href="#类的模板" class="headerlink" title="类的模板"></a>类的模板</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''类模板'''</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, city)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.age = age</div><div class="line">        self.__city = city</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_info</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'self is : '</span>, self) <span class="comment"># self is :  &lt;py_class.Student.Student object at 0x10c92c400&gt;</span></div><div class="line">        <span class="comment"># print(student) 得到的结果为：&lt;py_class.Student.Student object at 0x10c92c400&gt;</span></div><div class="line">        print(<span class="string">'class is : '</span>, self.__class__)  <span class="comment"># class is :  &lt;class 'py_class.Student.Student'&gt;</span></div><div class="line">        print(<span class="string">'%s, %d, %s'</span> % (self.name, self.age, self.__city))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_age</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.age == <span class="number">20</span>:</div><div class="line">            print(<span class="string">'age is '</span>, self.age)</div><div class="line">        <span class="keyword">elif</span> self.age &gt; <span class="number">20</span>:</div><div class="line">            print(<span class="string">'too old'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">'too young'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_city</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__city</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_city</span><span class="params">(self, city)</span>:</span></div><div class="line">        self.__city = city</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p> 1.类属性：像是Student类中的name就是类属性<br> 2.实例属性：像是下文中的student.__city就是实例属性</p>
<h2 id="类中变量及函数的命名规范"><a href="#类中变量及函数的命名规范" class="headerlink" title="类中变量及函数的命名规范"></a>类中变量及函数的命名规范</h2><ul>
<li>以<code>__</code>开始，并以<code>__</code> 双下划线 结束的是python中的特殊变量，特殊变量是可以直接访问的，不是<code>private</code>变量</li>
<li><code>class</code>后面紧接着是类名，即Student，类名通常是大写开头的单词，紧接着是<code>(object)</code>，表示该类是从哪个类继承下来的.通常，如果没有合适的继承类，就使用<code>object</code>类，这是所有类最终都会继承的类</li>
<li><code>__init__</code>方法的第一个参数永远是<code>self</code>，表示创建的实例本身，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到<code>self</code>，因为<code>self</code>就指向创建的实例本身。</li>
<li>有了<code>__init__</code>方法，在创建实例的时候，就不能传入空的参数了，必须传入与<code>__init__</code>方法匹配的参数，但<code>self</code>不需要传，<code>Python</code>解释器自己会把实例变量传进去</li>
<li>在类中定义的函数只有一点不同，就是第一个参数永远是实例变量<code>self</code>，并且，调用时，不用传递该参数。</li>
<li><p><code>self</code>指向的类的实力对象。由：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'self is : '</span>, self) <span class="comment"># self is :  &lt;py_class.Student.Student object at 0x10c92c400&gt;</span></div><div class="line">print(student)  <span class="comment"># &lt;py_class.Student.Student object at 0x10c92c400&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>可以看出，<code>self</code>和<code>student</code>的 <em>内存地址</em> 是一样的。<br>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''调用'''</span></div><div class="line"><span class="comment"># 创建实例对象</span></div><div class="line">student = Student(<span class="string">'cwj'</span>,<span class="number">24</span>, <span class="string">'tianjin'</span>)</div><div class="line">student.print_info()  <span class="comment"># cwj, 24, tianjin</span></div><div class="line">student.get_age()  <span class="comment"># too old</span></div><div class="line"></div><div class="line"><span class="comment"># 访问属性</span></div><div class="line">student.age = <span class="number">19</span></div><div class="line">student.name = <span class="string">'ddd'</span></div></pre></td></tr></table></figure>
<h2 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h2><pre><code>虽然有访问限制的命名方式，但是Python本身没有任何机制阻止你干坏事，一切全靠自觉。
</code></pre><ul>
<li><p>两个下划线开头的变量，声明为类内部的私有变量，不能在类的外部直接使用或访问：在变量前面添加<code>__</code>，即：<code>__name</code>。在类内部的方法中使用时 <code>self.__private_attrs</code>。</p>
</li>
<li><p>两个下划线开头的方法，声明为类内部的私有方法。不能在类地外部调用，在类的内部调用 <code>self.__private_methods</code>.</p>
</li>
<li>单下划线开头表示的<code>protected</code>类型的变量，只允许本身及其子类进行访问。</li>
<li></li>
<li>类的方法<br>在类的内部，使用 <code>def</code> 关键字可以为类定义一个方法，与一般函数定义不同，类方法必须包含参数 <code>self</code>,且为第一个参数<br>代码示例:</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">    <span class="comment"># 此行代码貌似修改了 Student 类中的 __city 属性,实际这是为student添加了一个属性。</span></div><div class="line">    student.__city = <span class="string">'beijing'</span></div><div class="line">    <span class="comment"># 而且输出结果也显示；__city 属性 的值也变成了：beijing</span></div><div class="line">    print(student.__city)  <span class="comment"># beijing</span></div><div class="line">    <span class="comment"># 但是，当我们通过类自身的get()获取属性值时，发现还是之前初始化时的属性值。即：tianjin</span></div><div class="line">    print(student.get_city())  <span class="comment"># tianjin</span></div><div class="line"></div><div class="line">    print(hasattr(student, <span class="string">'name'</span>))  <span class="comment"># True</span></div><div class="line"></div><div class="line">    <span class="comment"># 删除临时添加的 __city 属性</span></div><div class="line">    <span class="comment"># del student.__city</span></div><div class="line"><span class="comment"># print(student.__city)  # AttributeError: 'Student' object has no attribute '__city'</span></div><div class="line"></div><div class="line">    <span class="comment"># 当我们通过类自身的set()方法修改 __city 属性值时，通过get()得到的属性值是修改之后的。</span></div><div class="line">    student.set_city(<span class="string">'hk'</span>)</div><div class="line">    print(student.get_city())  <span class="comment"># hk</span></div><div class="line"></div><div class="line">    <span class="comment"># 由此可以得出：此时的 student.__city 与 student.set_city() 中的 __city 并不是同一个属性</span></div><div class="line">    <span class="comment"># student.__city 中的 __city 是student的一个新的同名属性</span></div><div class="line"></div><div class="line">    student.print_info()  <span class="comment"># ddd, 19, hk</span></div></pre></td></tr></table></figure>
<h2 id="Python内置类属性"><a href="#Python内置类属性" class="headerlink" title="Python内置类属性"></a>Python内置类属性</h2><ul>
<li><code>__dict__</code> : 类的属性（包含一个字典，由类的数据属性组成）</li>
<li><code>__doc__</code> :类的文档字符串，即：注释</li>
<li><code>__name__</code>: 类名</li>
<li><code>__module__</code>: 类定义所在的模块（类的全名是<code>__main__.className</code>，如果类位于一个导入模块mymod中，那么<code>className.__module__</code> 等于 mymod）</li>
<li><code>__bases__</code> : 类的所有父类构成元素（包含了一个由所有父类组成的元组）</li>
</ul>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 由 类 进行调用 __dict__</span></div><div class="line">print(Student.__dict__)  <span class="comment"># &#123;'__module__': 'py_class.Student', '__init__': &lt;function Student.__init__ at 0x100ccf8c8&gt;, 'print_info': &lt;function Student.print_info at 0x100ccf950&gt;, 'get_age': &lt;function Student.get_age at 0x100ccf9d8&gt;, 'get_city': &lt;function Student.get_city at 0x100ccfa60&gt;, 'set_city': &lt;function Student.set_city at 0x100ccfae8&gt;, '__dict__': &lt;attribute '__dict__' of 'Student' objects&gt;, '__weakref__': &lt;attribute '__weakref__' of 'Student' objects&gt;, '__doc__': None&#125;</span></div><div class="line"></div><div class="line"><span class="comment"># 由 对象 调用 __dict__ 方法类似于：java中的toString()</span></div><div class="line">print(student.__dict__)  <span class="comment"># &#123;'name': 'ddd', 'age': 19, '_Student__city': 'hk', '__city': 'beijing'&#125;</span></div><div class="line"></div><div class="line">print(student.__doc__)  <span class="comment"># None</span></div><div class="line"></div><div class="line"><span class="comment"># 由 类 进行调用</span></div><div class="line">print(Student.__name__)  <span class="comment"># Student</span></div><div class="line"></div><div class="line">print(student.__module__)  <span class="comment"># py_class.Student</span></div><div class="line"></div><div class="line"><span class="comment"># 由 类 进行调用</span></div><div class="line">print(Student.__bases__)  <span class="comment"># (&lt;class 'object'&gt;,)</span></div></pre></td></tr></table></figure>
<h2 id="python对象的销毁"><a href="#python对象的销毁" class="headerlink" title="python对象的销毁"></a>python对象的销毁</h2><pre><code>垃圾回收 —— 引用计数 + 循环引用
</code></pre><ul>
<li>引用计数法。当跟踪变量对象的引用计数变为0时，它将会被回收。但不是立即被回收，而是由‘解释器’在适当的时机将其回收。</li>
<li>循环引用。当两个对象相互引用，但是没有其他的变量引用他们。此时循环垃圾回收器将会工作。</li>
</ul>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">del</span> student.__city</div></pre></td></tr></table></figure>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p><strong><em>支持多继承</em></strong><br><strong><em>父类的构造器<code>（__init__(self)）</code>不会被自动调用，需要在子类中亲自专门调用</em></strong><br><strong><em>python总是先在本类中查找调用的方法，找不到才会去父类中继续寻找</em></strong></p>
<p><strong>几个基础的重载方法</strong><br> 1.<code>__init__(self,[])</code> 构造方法<br> 2.<code>__del__(self)</code> 删除一个对象，dell obj<br> 3.<code>__repr__(self)</code> 转化为供解释器读取的形式<br> 4.<code>__str__(self)</code> 将值转化为始于人阅读的形式<br> 5.<code>__cmp__(self,x)</code> 对象比较</p>
<p> 代码示例</p>
<p><em>父类</em></p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''父类 1 '''</span></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></div><div class="line">        self.__name = name</div><div class="line">        self.__age = age</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_age</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__age</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_name</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.__name = name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_age</span><span class="params">(self, age)</span>:</span></div><div class="line">        self.__age = age</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'Animal is running'</span>)</div><div class="line"></div><div class="line"> <span class="string">'''父类 2'''</span></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></div><div class="line">        print(self.__name + <span class="string">" is very good !"</span>)</div></pre></td></tr></table></figure>
<p><em>子类</em></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">from</span> py_class.Animal <span class="keyword">import</span> Animal</div><div class="line"><span class="keyword">from</span> py_class.Pet <span class="keyword">import</span> Pet</div><div class="line"></div><div class="line"><span class="comment"># 多继承</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig</span><span class="params">(Animal, Pet)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></div><div class="line">        self.__name = name</div><div class="line">        self.__age = age</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'pig is running very slowly...'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">from</span> py_class.Animal <span class="keyword">import</span> Animal</div><div class="line"></div><div class="line"><span class="comment"># 单继承</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></div><div class="line">        self.__name = name</div><div class="line">        self.__age = age</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        print(self.__name + <span class="string">' is running'</span>)</div><div class="line"></div><div class="line"><span class="keyword">from</span> py_class.Animal <span class="keyword">import</span> Animal</div><div class="line"></div><div class="line"><span class="comment"># 单继承</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></div><div class="line">        self.__name = name</div><div class="line">        self.__age = age</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        print(self.__name + <span class="string">'is running'</span>)</div></pre></td></tr></table></figure>
<p><em>测试类</em></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> py_class.Animal <span class="keyword">import</span> Animal</div><div class="line"><span class="keyword">from</span> py_class.Dog <span class="keyword">import</span> Dog</div><div class="line"><span class="keyword">from</span> py_class.Cat <span class="keyword">import</span> Cat</div><div class="line"><span class="keyword">from</span> py_class.PIg <span class="keyword">import</span> Pig</div><div class="line"></div><div class="line">dog = Dog(<span class="string">'wangwang'</span>, <span class="number">1</span>)</div><div class="line">dog.run()</div><div class="line"></div><div class="line">cat = Cat(<span class="string">'miaomiao'</span>, <span class="number">1</span>)</div><div class="line">cat.run()</div><div class="line"></div><div class="line">pig = Pig(<span class="string">'big pig'</span>, <span class="number">100</span>)</div><div class="line">pig.run()  <span class="comment"># pig is running very slowly...</span></div><div class="line"><span class="comment"># pig.play()  # big pig is very good !</span></div><div class="line"></div><div class="line">print(isinstance(cat, Animal))  <span class="comment"># True</span></div><div class="line">print(isinstance(cat, Cat))  <span class="comment"># True</span></div><div class="line"><span class="string">'''由此可见，cat变量既是Cat类型，也是Animal类型'''</span></div></pre></td></tr></table></figure>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">    多态的实现方式 1 类似于java这种静态语言的实现，必须传入Animal类型或其子类</span></div><div class="line"><span class="string">    </span></div><div class="line"><span class="string"># 多态的使用 将 父类 作为参数</span></div><div class="line"><span class="string">def run_test(animal):</span></div><div class="line"><span class="string">    animal.run()</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">    多态的实现方式 2 属于python的动态语言实现'</span></div><div class="line"><span class="string">    这种方式实现的结果与 方式 1 完全一样</span></div><div class="line"><span class="string">    原理：</span></div><div class="line"><span class="string">        不一定要传入Animal类型，只要保证传入的对象一个run()方法就可以了.</span></div><div class="line"><span class="string">    例如：传递的对象为ints，这不是Animal的任何一个子类，只要将赋予run()方法就足以。</span></div><div class="line"><span class="string">    </span></div><div class="line"><span class="string">    动态语言的'鸭子类型'：</span></div><div class="line"><span class="string">        它并不要求严格的继承体系，一个对象只要"看起来像鸭子，走起路来像鸭子"，那么它就是鸭子。</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_test</span><span class="params">(ints)</span>:</span></div><div class="line">    ints.run()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 多态的使用 实际参数为具体的子类，得到的结果为各个子类的具体表现</span></div><div class="line">run_test(Animal(<span class="string">'Animal'</span>, <span class="number">1</span>))  <span class="comment"># Animal is running</span></div><div class="line">run_test(Dog(<span class="string">'Dog'</span>, <span class="number">1</span>))  <span class="comment"># Dog is running</span></div><div class="line">run_test(Cat(<span class="string">'Cat'</span>, <span class="number">1</span>))  <span class="comment"># Catis running</span></div><div class="line">run_test(Pig(<span class="string">'Cat'</span>, <span class="number">1</span>))  <span class="comment"># pig is running very slowly...</span></div></pre></td></tr></table></figure>
<h2 id="获取对象信息"><a href="#获取对象信息" class="headerlink" title="获取对象信息"></a>获取对象信息</h2><ul>
<li><code>getattr(obj, name[, default])</code> : 访问对象的属性。</li>
<li><code>hasattr(obj,name)</code> : 检查是否存在一个属性。</li>
<li><code>setattr(obj,name,value)</code> : 设置一个属性。如果属性不存在，会创建一个新属性。</li>
<li><code>delattr(obj, name)</code> : 删除属性。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''isinstance() 查看一个变量的继承关系'''</span></div><div class="line">print(isinstance(cat, Animal))  <span class="comment"># True</span></div><div class="line">print(isinstance(cat, Cat))  <span class="comment"># True</span></div><div class="line">print(isinstance(pig, Animal))  <span class="comment"># True</span></div><div class="line">print(isinstance(pig, Pet))  <span class="comment"># True</span></div><div class="line">print(isinstance(pig, Pig))  <span class="comment"># True</span></div><div class="line"></div><div class="line"><span class="string">''' type()</span></div><div class="line"><span class="string">    当使用继承关系时，使用type()不能一直向上得到他们的父类，</span></div><div class="line"><span class="string">    因此，对于有 继承关系 的类来说不合适</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line">print(type(<span class="number">123</span>))  <span class="comment"># &lt;class 'int'&gt;</span></div><div class="line">print(type(dog))  <span class="comment"># &lt;class 'py_class.Dog.Dog'&gt;</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare</span><span class="params">(obj1, obj2)</span>:</span></div><div class="line">    <span class="keyword">if</span> type(obj1) == type(obj2):</div><div class="line">        print(type(obj1) == type(obj2))</div><div class="line">        print(str(obj1) + <span class="string">'=='</span> + str(obj2))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(type(obj1) == type(obj2))  <span class="comment"># False</span></div><div class="line">        print(str(obj1) + <span class="string">'!='</span> + str(obj2))</div><div class="line"></div><div class="line">compare(dog, cat)</div><div class="line"></div><div class="line"><span class="string">'''获取一个对象所有的属性和方法'''</span></div><div class="line">print(dir(dog))</div><div class="line"><span class="comment"># ['_Dog__age', '_Dog__name', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'get_age', 'get_name', 'run', 'set_age', 'set_name']</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  08-模块]]></title>
      <url>/Python3%20%2008-%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Python所有的内置函数：<a href="https://docs.python.org/3/library/functions.html" target="_blank" rel="external">https://docs.python.org/3/library/functions.html</a></p>
</blockquote>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><pre><code>在`python`中一个`.py`文件就是一个模块(Module)
</code></pre><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>提高代码的可维护性</li>
<li>代码的复用性</li>
<li>避免函数名和变量名的冲突</li>
<li>为避免模块名命名冲突，引入了包(每一个包目录下都有一个文件：<code>__init__.py</code>。这个文件是必须存在的，否则python回将这个目录当成普通的目录，而不是一个python包。这个文件可以是空文件，也可以有代码。因为<code>__init__.py</code>本身就是一个模块(<code>mycompany</code>))</li>
</ul>
<a id="more"></a>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 当前模块的文档注释，任何模块代码的第一行字符串都视为该模块文档的注释</span></div><div class="line"><span class="string">'A test module'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 使用'__author__'变量将作者的名字写入此模块</span></div><div class="line">__author__ = <span class="string">'Yannis Cheng'</span></div><div class="line"></div><div class="line"><span class="string">'''以上为python模块的标准文件模板'''</span></div><div class="line"></div><div class="line"><span class="string">'''注意到这两行代码：'''</span></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    test()</div><div class="line"><span class="string">'''当我们在命令行运行hello模块文件时，Python解释器把一个特殊变量`__name__`置为`__main__`，而如果在其他地方导入该hello模块时，if判断将失败，因此，这种if测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。'''</span></div></pre></td></tr></table></figure>
<h2 id="安装第三方模块"><a href="#安装第三方模块" class="headerlink" title="安装第三方模块"></a>安装第三方模块</h2><pre><code>在Python中，安装第三方模块，是通过包管理工具`pip`完成的。
在Mac或者Linux下可能会并存`Python 3.X`和`Python 2.X`，此时的命令应该为`pip3`
</code></pre><h2 id="函数-amp-变量-作用域"><a href="#函数-amp-变量-作用域" class="headerlink" title="函数&amp;变量 作用域"></a>函数&amp;变量 作用域</h2><ul>
<li>公开public：可以被直接引用，如’abs‘等。类似<code>__name__</code>这样的变量是特殊变量可以被直接引用。自己定义的变量一般不使用这种变量名。</li>
<li>非公开：<code>_abc</code>，<code>__aabc</code></li>
</ul>
<blockquote>
<p>python中并没有一种方法可以完全限制访问private函数访问，但是从编程习惯中不应该引用private函数或变量</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  06-闭包+匿名+装饰器+偏函数]]></title>
      <url>/Python3%20%2006-%E9%97%AD%E5%8C%85+%E5%8C%BF%E5%90%8D+%E8%A3%85%E9%A5%B0%E5%99%A8+%E5%81%8F%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考：<a href="http://www.cnblogs.com/vamei/archive/2012/12/15/2772451.html" target="_blank" rel="external">http://www.cnblogs.com/vamei/archive/2012/12/15/2772451.html</a></p>
</blockquote>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><pre><code>闭包是函数式编程的重要语法结构，python是以`函数对象`为基础的，python一切皆对象。函数这一语法结构也是一个对象。
</code></pre><a id="more"></a>
<p><strong>定义解释</strong></p>
<ul>
<li>在一个内部函数里，对在外部作用域的（非全局）变量进行引用，那么内部函数就认为是闭包<code>closure</code></li>
<li>‘闭包’是‘词法闭包’的简称，是指应用了自由变量的函数。这个被引用的自由变量的将和这个函数一同存在，即使已经离开了创造它的环境也不例外。</li>
<li>‘闭包’是由函数和其他相关的引用环境组合而成的实体。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。</li>
<li>‘python’中的闭包：一个闭包就是你调用了一个函数A，这个函数A返回了一个函数B给你。而这个函数B就叫做闭包，在调用函数A时传递的参数就是自由变量。</li>
</ul>
<p><em>闭包实际上就是一个简化的类，它提高了代码的复用性</em></p>
<p><strong><em>闭包函数代码示例</em></strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">闭包示例代码</span></div><div class="line"><span class="string">inner_func就是一个闭包函数，它引用自由变量name。</span></div><div class="line"><span class="string">name就是inner_func()的环境变量</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func01</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner_func</span><span class="params">(age)</span>:</span></div><div class="line">        print(<span class="string">'name: '</span>, name, <span class="string">'age: '</span>, age)</div><div class="line">    <span class="keyword">return</span> inner_func</div><div class="line"></div><div class="line">bb = func01(<span class="string">'cwj'</span>)</div><div class="line">bb(<span class="number">25</span>)  <span class="comment"># name:  cwj age:  25</span></div></pre></td></tr></table></figure>
<h2 id="关于闭包函数的使用问题"><a href="#关于闭包函数的使用问题" class="headerlink" title="关于闭包函数的使用问题"></a>关于闭包函数的使用问题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''错误的闭包函数  1 闭包函数中， 闭包中的变量m不会修改外部函数中m的值。'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    m = <span class="number">0</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fool</span><span class="params">()</span>:</span></div><div class="line">        m = <span class="number">11</span></div><div class="line">        print(m)</div><div class="line">    print(m)  <span class="comment"># 0</span></div><div class="line">    fool()  <span class="comment"># 11</span></div><div class="line">    print(m)  <span class="comment"># 0</span></div><div class="line"></div><div class="line">print(foo())</div><div class="line"></div><div class="line"></div><div class="line"><span class="string">'''错误的闭包函数  2 '''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo2</span><span class="params">()</span>:</span></div><div class="line">    a = <span class="number">1</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fool2</span><span class="params">()</span>:</span></div><div class="line">        <span class="comment"># a = a +1  # UnboundLocalError: local variable 'a' referenced before assignment</span></div><div class="line">        <span class="keyword">return</span> a  <span class="comment"># 1</span></div><div class="line">    <span class="keyword">return</span> fool2</div><div class="line">ccc = foo2()  <span class="comment"># 此时：ccc = fool2，ccc只是获得到了一个对象</span></div><div class="line">print(ccc())  <span class="comment"># 此时：ccc = fool2(), ccc获取到的是一个实例</span></div><div class="line"></div><div class="line"></div><div class="line">flist = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">    <span class="comment"># 编写 1</span></div><div class="line">    <span class="comment"># def foo3(x):</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo3</span><span class="params">(x, y = i)</span>:</span></div><div class="line">        <span class="comment"># 编写 1 的输出</span></div><div class="line">        <span class="comment"># print(x + i)</span></div><div class="line">        print(x + y)</div><div class="line">    flist.append(foo3)</div><div class="line"><span class="keyword">for</span> f <span class="keyword">in</span> flist:</div><div class="line">    f(<span class="number">2</span>)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">编写 1 的运行结果为：</span></div><div class="line"><span class="string">4</span></div><div class="line"><span class="string">4</span></div><div class="line"><span class="string">4</span></div><div class="line"><span class="string">结果是4,4,4。这是因为当把函数加入flist列表里时，python还没有给i赋值，</span></div><div class="line"><span class="string">只有当执行时，再去找i的值是什么，这时在第一个for循环结束以后，i的值是2，</span></div><div class="line"><span class="string">所以以上代码的执行结果是4,4,4.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">编写 2 的运行结果为：</span></div><div class="line"><span class="string">2</span></div><div class="line"><span class="string">3</span></div><div class="line"><span class="string">4</span></div><div class="line"><span class="string">在程序里面经常会出现这类的循环语句，Python的问题就在于，当循环结束以后，</span></div><div class="line"><span class="string">循环体中的临时变量i不会销毁，而是继续存在于执行环境中。</span></div><div class="line"><span class="string">还有一个python的现象是，python的函数只有在执行时，才会去找函数体里的变量的值</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<h2 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h2><blockquote>
<p>参考：<a href="http://www.jb51.net/article/54498.htm" target="_blank" rel="external">http://www.jb51.net/article/54498.htm</a></p>
</blockquote>
<pre><code>闭包主要在函数开发中使用
</code></pre><ul>
<li><strong>当闭包函数执行完毕后，仍然能够保持住当前的运行环境</strong></li>
<li><strong>闭包可以根据外部作用域的局部变量来得到不同的结果</strong></li>
</ul>
<h2 id="引用：闭包与并行运算"><a href="#引用：闭包与并行运算" class="headerlink" title="引用：闭包与并行运算"></a>引用：闭包与并行运算</h2><blockquote>
<p>闭包有效的减少了函数所需定义的参数数目。这对于并行运算来说有重要的意义。在并行运算的环境下，我们可以让每台电脑负责一个函数，然后将一台电脑的输出和下一台电脑的输入串联起来。最终，我们像流水线一样工作，从串联的电脑集群一端输入数据，从另一端输出数据。这样的情境最适合只有一个参数输入的函数。闭包就可以实现这一目的。</p>
<p>并行运算正称为一个热点。这也是函数式编程又热起来的一个重要原因。函数式编程早在1950年代就已经存在，但应用并不广泛。然而，我们上面描述的流水线式的工作并行集群过程，正适合函数式编程。由于函数式编程这一天然优势，越来越多的语言也开始加入对函数式编程范式的支持。</p>
</blockquote>
<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p> 匿名函数由关键字<code>lambda</code>表示。<code>:</code>前面的参数名表示函数的参数，<code>:</code>后面的表达式表示为函数执行具体操作的表达式。</p>
<p> ####特点</p>
<ul>
<li>python对匿名函数的支持有限，只能在一些简单的情况下使用匿名函数</li>
<li>匿名函数有个数限制，<em>只能有一个表达式</em>，不用写<code>return</code>，返回值就是该表达式的结果。 </li>
</ul>
<p><strong><em>代码示例</em></strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''匿名函数的使用 - 1'''</span></div><div class="line">print(list(map(<span class="keyword">lambda</span> x: x*x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])))  <span class="comment"># [1, 4, 9, 16]</span></div><div class="line"></div><div class="line"><span class="string">'''匿名函数的使用 - 2'''</span></div></pre></td></tr></table></figure>
<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><pre><code>在代码运行期间动态增加功能的方式，称之为“装饰器(decorator)”
</code></pre><p><strong><em>代码示例</em></strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''原函数</span></div><div class="line"><span class="string">def now():</span></div><div class="line"><span class="string">    print('2017-07-16')</span></div><div class="line"><span class="string">now()  # 2017-07-16</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="string">'''定义一个 now() 的 装饰器函数 log()'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func_origin)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_func</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        print(<span class="string">'call %s()'</span> % func_origin.__name__)</div><div class="line">        <span class="comment"># 因为log()是一个decorator，所以接受一个函数作为参数，并返回一个函数。</span></div><div class="line">        <span class="comment"># 返回原函数所具有的功能</span></div><div class="line">        <span class="keyword">return</span> func_origin(*args, **kwargs)</div><div class="line">    <span class="keyword">return</span> add_func</div><div class="line"></div><div class="line"><span class="string">'''使用 装饰器函数 log()'''</span></div><div class="line"><span class="meta">@log</span></div><div class="line"><span class="comment"># @log 等价于 now = log(now)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'2017-07-16'</span>)</div><div class="line"></div><div class="line"><span class="string">'''调用被装饰器装饰的函数now()'''</span></div><div class="line">now()</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">运行结果：</span></div><div class="line"><span class="string">call now()</span></div><div class="line"><span class="string">2017-07-16</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">释义：</span></div><div class="line"><span class="string">由于log()是一个decorator，返回一个函数，所以，原来的now()函数仍然存在，</span></div><div class="line"><span class="string">只是现在同名的now变量指向了新的函数，于是调用now()将执行新函数，即在log()函数中返回的wrapper()函数。</span></div><div class="line"><span class="string">wrapper()函数的参数定义是(*args, **kw)，因此，wrapper()函数可以接受任意参数的调用。</span></div><div class="line"><span class="string">在wrapper()函数内，首先打印日志，再紧接着调用原始函数。</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="string">'''需要传入参数的decorator, 即：3层嵌套'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log2</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrap</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            print(<span class="string">'%s %s()'</span> % (text, func.__name__))</div><div class="line">            <span class="comment"># return func(*args, **kwargs)</span></div><div class="line">            <span class="keyword">return</span> func()  <span class="comment"># 输出结果中有：2017-07-16</span></div><div class="line">            <span class="comment"># return func  # 输出结果中没有：2017-07-16</span></div><div class="line">        <span class="keyword">return</span> wrap</div><div class="line">    <span class="keyword">return</span> decorator</div><div class="line"></div><div class="line"><span class="string">'''3层嵌套的使用'''</span></div><div class="line"><span class="comment">#@log2('execute')</span></div><div class="line"><span class="comment"># @log2 等价于 now2 = log2('execute')(now2)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now2</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'2017-07-16'</span>)</div><div class="line">now2 = log2(<span class="string">'execute'</span>)(now2)</div><div class="line">now2()</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">运行结果：</span></div><div class="line"><span class="string">def now():</span></div><div class="line"><span class="string">print('2017-07-16')</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="string">'''函数也是对象，它有__name__等属性，但经过decorator装饰之后的函数，</span></div><div class="line"><span class="string">它们的__name__已经从原来的'now2'变成了wrap'''</span></div><div class="line">print(now2.__name__)  <span class="comment"># wrap</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log3</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator3</span><span class="params">(func3)</span>:</span></div><div class="line"><span class="meta">        @functools.wraps(func3)</span></div><div class="line">        <span class="comment"># 词条语句等价于</span></div><div class="line">        <span class="comment"># wrap3.__name__ = func3.__name__</span></div><div class="line">        <span class="comment"># 需要把原始函数的__name__等属性复制到wrap3()函数中，否则，有些依赖函数签名的代码执行就会出错。</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrap3</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            print(<span class="string">'%s %s()'</span> % (text, func3.__name__))</div><div class="line">            <span class="comment"># return func3()</span></div><div class="line">            func3()</div><div class="line">        <span class="keyword">return</span> wrap3</div><div class="line">    <span class="keyword">return</span> decorator3</div><div class="line"></div><div class="line"><span class="meta">@log3('execute')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now3</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'2017-07-16'</span>)</div><div class="line"></div><div class="line">now3()</div><div class="line">print(<span class="string">'now3 name is : '</span>, now3.__name__)</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">运行结果</span></div><div class="line"><span class="string">execute now3()</span></div><div class="line"><span class="string">2017-07-16</span></div><div class="line"><span class="string">now3 name is :  now3</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<h2 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><pre><code>当函数的参数个数太多，需要简化时，使用`functools.partial`可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。
</code></pre><p> <strong><em>代码示例</em></strong></p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">int2 = functools.partial(int, base=<span class="number">2</span>)</div><div class="line"><span class="comment">#等价于</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">int2</span><span class="params">(x, base=<span class="number">2</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> int(x, base)</div></pre></td></tr></table></figure>
<ul>
<li><code>functools.partial</code>的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个<code>新的函数</code>，调用这个新函数会更简单。</li>
<li>创建偏函数时，实际上可以接收<code>函数对象</code>、<code>*args</code>和<code>**kw</code>这3个参数</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  05-函数式编程-函数作为返回值]]></title>
      <url>/Python3%20%2005-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E8%BF%94%E5%9B%9E%E5%80%BC/</url>
      <content type="html"><![CDATA[<p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。</p>
<a id="more"></a>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''求和运算'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_sum</span><span class="params">(*args)</span>:</span></div><div class="line">    add = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> args:</div><div class="line">        add = add + n</div><div class="line">    <span class="keyword">return</span> add</div><div class="line"></div><div class="line">print(add_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))  <span class="comment"># 15</span></div><div class="line"></div><div class="line"><span class="string">'''将函数 -实例- 作为返回值'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_sum_func</span><span class="params">(*args)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">()</span>:</span></div><div class="line">        add = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</div><div class="line">            add = add + n</div><div class="line">        <span class="keyword">return</span> add</div><div class="line">    <span class="keyword">return</span> my_sum()</div><div class="line"></div><div class="line"><span class="string">'''将函数 -对象- 作为返回值'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_sum_func_02</span><span class="params">(*args)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">()</span>:</span></div><div class="line">        add = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</div><div class="line">            add = add + n</div><div class="line">        <span class="keyword">return</span> add</div><div class="line">    <span class="keyword">return</span> my_sum</div><div class="line"></div><div class="line"><span class="comment"># 调用 add_sum_func()时，返回的不是函数求和的结果，而是求和函数本身，就是延迟了函数结果的实现</span></div><div class="line">print(add_sum_func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))  <span class="comment"># 15</span></div><div class="line">new_f = add_sum_func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">print(new_f)  <span class="comment"># 15</span></div><div class="line"><span class="comment"># print(new_f())  # TypeError: 'int' object is not callable</span></div><div class="line"></div><div class="line">print(add_sum_func_02(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))  <span class="comment"># &lt;function add_sum_func_02.&lt;locals&gt;.my_sum at 0x1021ef8c8&gt;</span></div><div class="line">new_f = add_sum_func_02(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">print(new_f)  <span class="comment"># &lt;function add_sum_func_02.&lt;locals&gt;.my_sum at 0x1021ef8c8&gt;</span></div><div class="line">print(new_f())  <span class="comment"># 15</span></div><div class="line"></div><div class="line"><span class="string">'''释义'''</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">    函数add_sum_func()与add_sum_func_02()的区别除了函数名字上有区别，在其函数内部只有一点不同，即返回值：</span></div><div class="line"><span class="string">        一个是：return my_sum()。带()表示返回的是 函数的数值，即：结果值。</span></div><div class="line"><span class="string">        另一个是：return my_sum。不带()表示返回的是 函数本身，即：函数所在内存的地址。</span></div><div class="line"><span class="string">    通过查看输出的结果可以清晰的对比出两者的不同。</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  05-函数式编程-高阶函数]]></title>
      <url>/Python3%20%2005-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<pre><code>函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！
`Python`对函数式编程提供部分支持。由于`Python`允许使用变量，因此，`Python`不是纯函数式编程语言。
</code></pre><a id="more"></a>
<h2 id="函数与变量互指"><a href="#函数与变量互指" class="headerlink" title="函数与变量互指"></a>函数与变量互指</h2><p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">x = abs  <span class="comment"># 函数名其实也是一个变量，变量之间是可以互指。</span></div><div class="line">print(x(<span class="number">-10</span>))  <span class="comment"># 10。此时，x就是一个求'绝对值'的函数</span></div><div class="line">abs = <span class="number">10</span></div><div class="line">print(abs)  <span class="comment"># 10</span></div><div class="line">print(abs(<span class="number">10</span>))  <span class="comment"># TypeError: 'int' object is not callable。此时的abs已经不是一个函数，而是一个值为10的变量。</span></div></pre></td></tr></table></figure>
<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><pre><code>将函数作为参数传入另一个函数，这样的函数被称为高阶函数。
</code></pre><p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">high_func</span><span class="params">(z, y, f)</span>:</span></div><div class="line">    <span class="keyword">return</span> f(z) + f(y)</div><div class="line"></div><div class="line"><span class="comment"># 将函数abs作为一个参数指向变量f</span></div><div class="line">print(high_func(<span class="number">-1</span>, <span class="number">-3</span>, abs))  <span class="comment"># 4</span></div></pre></td></tr></table></figure>
<h2 id="高阶函数-map"><a href="#高阶函数-map" class="headerlink" title="高阶函数 - map()"></a>高阶函数 - map()</h2><ul>
<li>map接收两个参数：一个是函数，另一个是Iterable，</li>
<li>map函数的意义是：将传入的函数依次作用于每一个序列的每一个元素，并将结果作为新的Iterator返回</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">return</span> x * x</div><div class="line"></div><div class="line"><span class="string">'''通过一行代码实现：序列中的每一个元素进行取平方运算，将结果作为list序列输出'''</span></div><div class="line">print(list(map(func, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])))  <span class="comment"># [1, 4, 9, 16, 25]</span></div><div class="line"></div><div class="line">v = map(func, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line">print(isinstance(v, Iterator))  <span class="comment"># True</span></div><div class="line">print(isinstance(v, Iterable))  <span class="comment"># True</span></div><div class="line">print(isinstance(<span class="string">'abc'</span>, Iterator))  <span class="comment"># False</span></div><div class="line"></div><div class="line"><span class="string">'''使用 next() 输出Iterator类型的对象 修改前'''</span></div><div class="line"><span class="comment"># while True:</span></div><div class="line"><span class="comment"># print(next(v))</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">1</span></div><div class="line"><span class="string">StopIteration</span></div><div class="line"><span class="string">4</span></div><div class="line"><span class="string">9</span></div><div class="line"><span class="string">16</span></div><div class="line"><span class="string">25</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="string">'''修改后'''</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        print(next(v))</div><div class="line">    <span class="keyword">except</span> StopIteration:</div><div class="line">        <span class="keyword">break</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">1</span></div><div class="line"><span class="string">4</span></div><div class="line"><span class="string">9</span></div><div class="line"><span class="string">16</span></div><div class="line"><span class="string">25</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<h2 id="高阶函数-reduce"><a href="#高阶函数-reduce" class="headerlink" title="高阶函数 - reduce()"></a>高阶函数 - reduce()</h2><ul>
<li>参数：两个参数。函数名，序列</li>
<li><p>作用：将<code>结果</code>继续和<code>序列的下一元素</code>做<code>函数名指定的运算</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun_add</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line"></div><div class="line">print(reduce(fun_add, ls))  <span class="comment"># 15.</span></div><div class="line"></div><div class="line"><span class="comment"># 将序列 ls 中的数变成组合成一个整数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_int</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x * <span class="number">10</span> + y</div><div class="line"></div><div class="line">print(reduce(func_int, ls))  <span class="comment"># 12345</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_str</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="comment"># 将字符串转换为int类型。根据`键`取对应的`值`</span></div><div class="line">    <span class="keyword">return</span> &#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;[s]</div><div class="line"></div><div class="line"><span class="comment"># 将str类型变为int类型</span></div><div class="line">print(reduce(func_int, list(map(func_str, <span class="string">'1234567'</span>))))  <span class="comment"># 1234567</span></div><div class="line"></div><div class="line"><span class="comment"># 将以上方法编写为一个str类型转int的方法</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_str_to_int</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f_int</span><span class="params">(x, y)</span>:</span></div><div class="line">        <span class="keyword">return</span> x * <span class="number">10</span> + y</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f_str</span><span class="params">(ss)</span>:</span></div><div class="line">        <span class="keyword">return</span> &#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;[ss]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> reduce(f_int, map(f_str, s))</div><div class="line"></div><div class="line"></div><div class="line">print(func_str_to_int(<span class="string">'11223344'</span>))  <span class="comment"># 11223344</span></div><div class="line"></div><div class="line"><span class="string">'''测试，将不规则的输入按照指定的要求输出。如：'AsdA' 'asdS' 输出后的结果为：'Asda', 'Asds' '''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_rule</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="comment"># if isinstance(s, str):</span></div><div class="line">    <span class="keyword">if</span> isinstance(s, list):</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">func_to_up</span><span class="params">(ss)</span>:</span></div><div class="line">            <span class="keyword">return</span> ss[<span class="number">0</span>].upper() + ss[<span class="number">1</span>::].lower()</div><div class="line">        <span class="keyword">return</span> list(map(func_to_up, s))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">'输入的参数类型有误！'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="string">'-1'</span></div><div class="line"></div><div class="line">L1 = [<span class="string">'adam'</span>, <span class="string">'LISA'</span>, <span class="string">'barT'</span>]</div><div class="line">print(func_rule(L1))  <span class="comment"># ['Adam', 'Lisa', 'Bart']</span></div><div class="line"></div><div class="line"><span class="string">'''求乘积'''</span></div><div class="line">ll = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">prod</span><span class="params">(lll)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">xx</span><span class="params">(x, y)</span>:</span></div><div class="line">        <span class="keyword">return</span> x * y</div><div class="line">    <span class="keyword">return</span> reduce(xx, lll)</div><div class="line"></div><div class="line">print(prod(ll))  <span class="comment"># 945</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="高阶函数-filter"><a href="#高阶函数-filter" class="headerlink" title="高阶函数 - filter()"></a>高阶函数 - filter()</h2><ul>
<li><p>作用：过滤函数. <code>True</code>保留序列中的元素，<code>False</code>删除序列中的元素</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">lf = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"></div><div class="line"><span class="comment"># 过滤一个序列中的偶数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_odd</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></div><div class="line"></div><div class="line">print(list(filter(func_odd, lf)))  <span class="comment"># [1, 3, 5]</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="高阶函数-sorted"><a href="#高阶函数-sorted" class="headerlink" title="高阶函数 - sorted()"></a>高阶函数 - sorted()</h2><ul>
<li>排序算法</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 对list类型的数据排序</span></div><div class="line">ls01 = [<span class="number">1</span>, <span class="number">-9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">23</span>, <span class="number">-3</span>]</div><div class="line"></div><div class="line">print(sorted(ls01))  <span class="comment"># [-9, -3, 1, 5, 10, 23]</span></div><div class="line"></div><div class="line"><span class="comment"># 高阶函数使用 按照绝对值进行排序</span></div><div class="line">print(sorted(ls01, key = abs))  <span class="comment"># [1, -3, 5, -9, 10, 23]</span></div><div class="line"></div><div class="line">ls02 = [<span class="string">'asd'</span>, <span class="string">'ffgd'</span>, <span class="string">'fhfgh'</span>, <span class="string">'werr'</span>, <span class="string">'bnbm'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 高阶函数使用 对 字符串 进行排序 根据小写字母排序</span></div><div class="line">print(sorted(ls02, key=str.lower))  <span class="comment"># ['asd', 'bnbm', 'ffgd', 'fhfgh', 'werr']</span></div><div class="line"></div><div class="line"><span class="comment"># 高阶函数使用 对 字符串 进行排序 根据大写字母排序--实现方式1</span></div><div class="line">print(sorted(ls02, key=str.lower, reverse=<span class="keyword">True</span>))  <span class="comment"># ['werr', 'fhfgh', 'ffgd', 'bnbm', 'asd']</span></div><div class="line"></div><div class="line">L = [(<span class="string">'Bob'</span>, <span class="number">75</span>), (<span class="string">'Adam'</span>, <span class="number">92</span>), (<span class="string">'Bart'</span>, <span class="number">66</span>), (<span class="string">'Lisa'</span>, <span class="number">88</span>)]</div><div class="line"></div><div class="line"><span class="string">'''根据学生的名字排序'''</span></div><div class="line">print(sorted(L))  <span class="comment"># [('Adam', 92), ('Bart', 66), ('Bob', 75), ('Lisa', 88)]</span></div><div class="line"></div><div class="line"><span class="string">'''根据学生的成绩排序'''</span></div><div class="line">print(sorted(L, key=itemgetter(<span class="number">1</span>)))  <span class="comment"># [('Bart', 66), ('Bob', 75), ('Lisa', 88), ('Adam', 92)]</span></div></pre></td></tr></table></figure>
<p><strong><em>itemgetter()的使用</em></strong></p>
<blockquote>
<p>参考：<a href="http://www.cnblogs.com/zhoufankui/p/6274172.html" target="_blank" rel="external">http://www.cnblogs.com/zhoufankui/p/6274172.html</a></p>
</blockquote>
<ul>
<li>operator.itemgetter函数用于获取对象指定的下标数据。如根据学生成绩排序的方法使用中：获取序列中tuple元素下标为1的数据</li>
<li>operator.itemgetter函数获取的不是数值，而是重新定义了一个函数，通过将该函数作用于对象上才能获取数据，如：将数值赋值给key</li>
<li><em>特点：</em><br>itmegetter()中的参数可以不按照数字大小的顺序来填入，可以使用2，1这样的顺序，表示 先获取 下标为2的数据值，再获取下标为1的数据的值。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  04-迭代器]]></title>
      <url>/Python3%20%2004-%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
      <content type="html"><![CDATA[<p> <strong><em>能够使用for循环的数据类型有以下几种：</em></strong></p>
<ul>
<li>集合：<code>list</code>、<code>tuple</code>、<code>set</code>、<code>dict</code></li>
<li>构建类型<code>generator</code>，带<code>yield</code>的generator function</li>
<li>字符串类型：<code>str</code></li>
</ul>
<blockquote>
<p>复习：可以使用<code>isinstance()</code>判断一个对象是否是<code>Iterable</code>对象。<br>需要导包：<code>from collections import Iterable</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">isinstance)(x, Iterable)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><pre><code>可以被`next()`函数调用并不断返回下一个值的对象称为——迭代器（`Iterator`）
</code></pre><p><strong><em>判断一个对象是否为<code>迭代器</code></em></strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">isinstance(x, Iterator)</div></pre></td></tr></table></figure>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''判断是否 可迭代'''</span></div><div class="line">print(isinstance((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>)), Iterator))  <span class="comment"># 构建类型 True</span></div><div class="line">print(isinstance([<span class="number">1</span>, <span class="number">2</span>], Iterable))  <span class="comment"># list类型 True</span></div><div class="line">print(isinstance((<span class="number">1</span>, <span class="number">2</span>), Iterable))  <span class="comment"># tuple类型 True</span></div><div class="line">print(isinstance(&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, Iterable))  <span class="comment"># set类型 True</span></div><div class="line">print(isinstance(&#123;<span class="string">'1'</span>: <span class="string">'A'</span>, <span class="string">'2'</span>: <span class="string">'B'</span>&#125;, Iterable))  <span class="comment"># dict类型 True</span></div><div class="line">print(isinstance(<span class="string">'ABC'</span>, Iterable))  <span class="comment"># str类型 rue</span></div><div class="line"></div><div class="line"><span class="string">'''判断是否为 迭代器 对象'''</span></div><div class="line">print(isinstance((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>)), Iterator))  <span class="comment"># 构建类型 True</span></div><div class="line">print(isinstance([<span class="number">1</span>, <span class="number">2</span>], Iterator))  <span class="comment"># list类型 False</span></div><div class="line">print(isinstance((<span class="number">1</span>, <span class="number">2</span>), Iterator))  <span class="comment"># tuple类型 False</span></div><div class="line">print(isinstance(&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, Iterator))  <span class="comment"># set类型 False</span></div><div class="line">print(isinstance(&#123;<span class="string">'1'</span>: <span class="string">'A'</span>, <span class="string">'2'</span>: <span class="string">'B'</span>&#125;, Iterator))  <span class="comment"># dict类型 False</span></div><div class="line">print(isinstance(<span class="string">'ABC'</span>, Iterator))  <span class="comment"># str类型 False</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  02-数据-序列]]></title>
      <url>/Python3%20%2002-%E6%95%B0%E6%8D%AE-%E5%BA%8F%E5%88%97/</url>
      <content type="html"><![CDATA[<hr>
<p><strong>通过print()结果来区分各种序列类型</strong></p>
<ul>
<li><code>[]</code>是<code>list</code></li>
<li><code>()</code>是<code>tuple</code></li>
<li><code>{}</code>是<code>set</code></li>
<li><code>{key:value, ...}</code>是<code>dict</code></li>
</ul>
<p><strong>说明：在序列声明时：</strong></p>
<ul>
<li><code>list</code>使用<code>[]</code></li>
<li><code>tuple</code>与set使用<code>()</code>。其中声明<code>set</code>值时用到<code>set关键字</code>，以区分<code>tuple</code></li>
<li><code>dict</code>使用<code>{}</code></li>
<li><code>set</code>使用<code>set()</code></li>
</ul>
<hr>
<a id="more"></a>
<h2 id="关于集合–list和tuple"><a href="#关于集合–list和tuple" class="headerlink" title="关于集合–list和tuple"></a>关于集合–list和tuple</h2><ul>
<li><code>list</code>是python内置的、是有序的、可随时添加、删除其中元素的数据类型。通过<code>[]</code>来包裹内容</li>
<li><code>tuple</code>是有序、”指向不可变“的另一种集合，称为”元组“。通过<code>()</code>来包裹内容</li>
<li><code>list</code>使用<code>print()</code>后打印的结果为：`[]``</li>
<li><code>set</code>使用<code>print()</code>后打印的结果为：<code>{}</code></li>
</ul>
<h2 id="序列相加"><a href="#序列相加" class="headerlink" title="序列相加"></a>序列相加</h2><pre><code>相同数据类型序列之间可以相加，不同数据类型序列不能相加
</code></pre><p><strong>1.list</strong></p>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">nameList = [<span class="string">'张三'</span>, <span class="string">'李四'</span>, <span class="string">'王五'</span>]</div><div class="line">print(nameList)     <span class="comment">#['张三', '李四', '王五']</span></div><div class="line"></div><div class="line"><span class="comment">#增 方式-1：追加,只能添加到集合的末尾</span></div><div class="line">nameList.append(<span class="string">'赵六'</span>)</div><div class="line">print(nameList)     <span class="comment">#['张三', '李四', '王五', '赵六']</span></div><div class="line"></div><div class="line"><span class="comment">#增 方式-2：插入。参数1，添加的位置；参数2，插入的内容</span></div><div class="line">nameList.insert(<span class="number">1</span>,<span class="string">'钱七'</span>)</div><div class="line">print(nameList)     <span class="comment">#['张三', '钱七', '李四', '王五', '赵六']</span></div><div class="line"></div><div class="line"><span class="comment">#删</span></div><div class="line">nameList.pop(<span class="number">1</span>)</div><div class="line">print(nameList)     <span class="comment">#['张三', '李四', '王五', '赵六']</span></div><div class="line"></div><div class="line"><span class="comment">#删，无参数情况下默认删除最后一个元素</span></div><div class="line">nameList.pop()</div><div class="line">print(nameList)     <span class="comment">#['张三', '李四', '王五']</span></div><div class="line"></div><div class="line"><span class="comment">#改 根据指定的下标，替换元素</span></div><div class="line">nameList[<span class="number">0</span>] = <span class="string">'孙八'</span></div><div class="line">print(nameList)     <span class="comment">#['孙八', '李四', '王五']</span></div><div class="line"></div><div class="line"><span class="comment">#查 输出集合的长度</span></div><div class="line">print(len(nameList))        <span class="comment">#3</span></div><div class="line"></div><div class="line"><span class="comment">#查 输出指定位置的元素  方式-1：从前向后，正序</span></div><div class="line">print(nameList[<span class="number">1</span>])      <span class="comment">#李四</span></div><div class="line"></div><div class="line"><span class="comment">#查 输出指定位置的元素  方式-2：从后向前，倒序</span></div><div class="line">print(nameList[<span class="number">-1</span>])     <span class="comment">#王五</span></div><div class="line"></div><div class="line"><span class="comment">#查 循环遍历，方式-1 for</span></div><div class="line"><span class="keyword">for</span> nameSingle <span class="keyword">in</span> nameList:</div><div class="line">    print(nameSingle)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">孙八</span></div><div class="line"><span class="string">李四</span></div><div class="line"><span class="string">王五</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="comment">#查 循环遍历，方式-2 while</span></div><div class="line">count = len(nameList)</div><div class="line"><span class="keyword">while</span> count &gt; <span class="number">0</span>:</div><div class="line">    print(nameList[(-count)])</div><div class="line">    count = count<span class="number">-1</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">孙八</span></div><div class="line"><span class="string">李四</span></div><div class="line"><span class="string">王五</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<p><strong>2.tuple</strong></p>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">tupleValue = (<span class="number">1</span>,<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment">#空的tuple</span></div><div class="line">tupleValue01 = ()</div><div class="line"></div><div class="line"><span class="comment">#只有1个元素的tuple定义时必须加一个逗号·,·，来消除歧义。若不加，则定义的不是tuple，是1这个数！这是因为括号()既可以表示tuple，又可以表示数学公式中的小括号。</span></div><div class="line">tupleValue02 = (<span class="number">1</span>,)</div><div class="line"></div><div class="line"><span class="comment">#一个“可变的”tuple：变的不是tuple的元素，而是其中的list的元素</span></div><div class="line"><span class="comment">#tuple一开始指向的list并没有改成别的list，所以所谓的“不变”是说，tuple的每个元素，指向永远不变。</span></div><div class="line"><span class="comment"># 即指向'a'，就不能改成指向'b'，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！</span></div><div class="line">t = (<span class="string">'a'</span>, <span class="string">'b'</span>, [<span class="string">'A'</span>, <span class="string">'B'</span>])</div><div class="line">print(t[<span class="number">2</span>][<span class="number">0</span>])</div><div class="line">print(t[<span class="number">2</span>][<span class="number">1</span>])</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">A</span></div><div class="line"><span class="string">B</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<h2 id="关于dict和set"><a href="#关于dict和set" class="headerlink" title="关于dict和set"></a>关于dict和set</h2><p> <strong>dict</strong></p>
<ul>
<li><code>dict</code>在其他语言中称为<code>map</code>，其存储的值是 无序 的，使用的<code>键-值对（key-value）</code>存储,用<code>{}</code>来包裹内容。</li>
<li><code>dict</code>使用<code>print()</code>后打印的结果为：{‘mac’: 999999, ‘hp’: 777777, ‘ASUS’: 46567}</li>
<li><p><code>dict</code>默认是去重复的</p>
<p><strong><em>注意:</em></strong> dict的key必须是不可变对象。</p>
<p><strong>特点：和list相比</strong><br>  1.查询速度快<br>  2.内存占用量大</p>
</li>
</ul>
<p><strong>dict</strong>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">d = &#123;<span class="string">'mac'</span>:<span class="number">999999</span>, <span class="string">'hp'</span>:<span class="number">777777</span>, <span class="string">'ASUS'</span>:<span class="number">46567</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">#查</span></div><div class="line">print(d[<span class="string">'mac'</span>])     <span class="comment">#999999</span></div><div class="line"></div><div class="line"><span class="comment">#改</span></div><div class="line">d[<span class="string">'mac'</span>] = <span class="number">90000</span></div><div class="line">print(d[<span class="string">'mac'</span>])     <span class="comment">#90000</span></div><div class="line"></div><div class="line"><span class="comment">#判断dict中是否存在当前的键 方法-1</span></div><div class="line">print(<span class="string">'mac'</span> <span class="keyword">in</span> d)       <span class="comment">#True</span></div><div class="line">print(<span class="string">'lenvol'</span> <span class="keyword">in</span> d)        <span class="comment">#False</span></div><div class="line"></div><div class="line"><span class="comment">#判断dict中是否存在当前的键 方法-2</span></div><div class="line">print(d.get(<span class="string">'mac'</span>))     <span class="comment">#90000</span></div><div class="line">print(d.get(<span class="string">'lenvol'</span>))         <span class="comment">#None</span></div><div class="line"></div><div class="line"><span class="comment">#删</span></div><div class="line">d.pop(<span class="string">'mac'</span>)</div><div class="line">print(d)        <span class="comment">#&#123;'hp': 777777, 'ASUS': 46567&#125;</span></div></pre></td></tr></table></figure>
<p> <strong>set</strong></p>
<ul>
<li><code>set</code>是 <code>list</code>的精简版，去掉其重复的元素，而且只存储key值，不存储value值。即set内部是无重复元素的。</li>
<li><code>set</code> 不能放入 可变对象.因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”</li>
<li><code>set</code>使用<code>print()</code>后显示的结果是：{}</li>
<li><p><code>set</code>中到的参数只能放一个。</p>
<p> <strong><em>注意: </em></strong>dict的key必须是不可变对象。</p>
<p> <strong>特点：和list相比</strong></p>
<pre><code>1.查询速度快
2.内存占用量大
</code></pre></li>
</ul>
<p><strong>set</strong>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">l = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line">print(l)        <span class="comment">#[1, 5, 1, 1, 2, 2, 3, 3, 4, 5]</span></div><div class="line">print(len(l))      <span class="comment">#10</span></div><div class="line"></div><div class="line">s = set(l)</div><div class="line">print(s)        <span class="comment">#&#123;1, 2, 3, 4, 5&#125;</span></div><div class="line">print(len(s))       <span class="comment">#5</span></div><div class="line"></div><div class="line">s.add(<span class="number">7</span>)</div><div class="line">print(s)        <span class="comment">#&#123;1, 2, 3, 4, 5, 7&#125;</span></div><div class="line">print(len(s))       <span class="comment">#6</span></div><div class="line"></div><div class="line">s.remove(<span class="number">7</span>)</div><div class="line">print(s)        <span class="comment">#&#123;1, 2, 3, 4, 5&#125;</span></div><div class="line">print(len(s))       <span class="comment">#5</span></div><div class="line"></div><div class="line">s2 = set([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</div><div class="line"><span class="comment">#交集</span></div><div class="line">print((s &amp; s2))     <span class="comment">#&#123;4, 5&#125;</span></div><div class="line"></div><div class="line"><span class="comment">#并集</span></div><div class="line">print((s | s2))      <span class="comment">#&#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;</span></div></pre></td></tr></table></figure>
<h2 id="解释“不可变对象”"><a href="#解释“不可变对象”" class="headerlink" title="解释“不可变对象”"></a>解释<em>“不可变对象”</em></h2><p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">a = <span class="string">'abc'</span></div><div class="line">print(a)</div><div class="line">print(a.replace(<span class="string">'a'</span>,<span class="string">'A'</span>))</div><div class="line">print(a)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">abc</span></div><div class="line"><span class="string">Abc</span></div><div class="line"><span class="string">abc</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line">b = a.replace(<span class="string">'a'</span>,<span class="string">'A'</span>)</div><div class="line">print(b)</div><div class="line">print(a)</div><div class="line">print(b)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">Abc</span></div><div class="line"><span class="string">abc</span></div><div class="line"><span class="string">Abc</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<p>由上面的代码可以看出：在调用了变量a的replace()之后，立即输出变量a的值，此时变量a的值是修改后的，但是在次输出a的值时，还是原来的内容，即：变量a的内容最终并没有被修改。</p>
<p><em>那为什么立即输出a修改后的内容时是变化的呢？</em></p>
<p>当我们把修改后a的值赋给变量b时，不管输出多少次b变量的值，其内容一直是不变的。也就是说：变量b存储的是一个新的内容，即一个新的str类型的对象。而这个新的str类型的对象是在变量a所指的对象的基础上修改之后的新对象。</p>
<p>结论就是：<strong>不可变对象修改后得到的对象是一个新的对象，而原有的对象保持不变</strong></p>
<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p><code>elif</code>是<code>else if</code>的缩写，完全可以有多个<code>elif</code></p>
<p>代码示例</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">age = <span class="number">3</span></div><div class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</div><div class="line">    print(<span class="string">'adult'</span>)</div><div class="line"><span class="keyword">elif</span> age &gt;= <span class="number">6</span>:</div><div class="line">    print(<span class="string">'teenager'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">'kid'</span>)</div></pre></td></tr></table></figure>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><blockquote>
<p>1.<code>for A in AList</code>. 将‘AList集合’中的每一个元素赋值到‘变量A’中<br>2.<code>while n</code>。只要条件’n‘满足，就将‘AList集合’中的每一个元素取出并赋值到变量中</p>
</blockquote>
<ul>
<li><code>for ... in ...</code></li>
<li><code>while</code></li>
</ul>
<h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>主要是使用: for in<br>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">    ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</div><div class="line">    sum02 = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> ls:</div><div class="line">        print(item)</div><div class="line">        sum02 = sum02 + item</div><div class="line">    print(sum02)</div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    1</span></div><div class="line"><span class="string">    2</span></div><div class="line"><span class="string">    3</span></div><div class="line"><span class="string">    4</span></div><div class="line"><span class="string">    5</span></div><div class="line"><span class="string">    6</span></div><div class="line"><span class="string">    7</span></div><div class="line"><span class="string">    8</span></div><div class="line"><span class="string">    9</span></div><div class="line"><span class="string">    45</span></div><div class="line"><span class="string">    '''</span></div><div class="line"></div><div class="line">    d = &#123;<span class="string">'cwj'</span>: <span class="number">150</span>, <span class="string">'zh'</span>: <span class="number">145</span>, <span class="string">'ww'</span>: <span class="number">234</span>, <span class="string">'cwj'</span>: <span class="number">200</span>&#125;</div><div class="line"></div><div class="line">    print(d)  <span class="comment"># &#123;'cwj': 150, 'zh': 145, 'ww': 234&#125;</span></div><div class="line">    print(len(d))  <span class="comment"># 3</span></div><div class="line">    print(d.keys())  <span class="comment"># dict_keys(['cwj', 'zh', 'ww'])</span></div><div class="line"></div><div class="line">    dlk = list(d.keys())</div><div class="line">    print(dlk)  <span class="comment"># ['cwj', 'zh', 'ww']</span></div><div class="line"></div><div class="line">    dlks = set(dlk)</div><div class="line">    print(dlks)  <span class="comment"># &#123;'zh', 'ww', 'cwj'&#125;</span></div><div class="line"></div><div class="line">    dtk = tuple(d.keys())</div><div class="line">    print(dtk)  <span class="comment"># ('cwj', 'zh', 'ww')</span></div><div class="line"></div><div class="line">    <span class="string">'''遍历方式 1'''</span></div><div class="line">    <span class="keyword">for</span> (key, value) <span class="keyword">in</span> d.items():</div><div class="line">        print(key, value)</div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    cwj 200</span></div><div class="line"><span class="string">    zh 145</span></div><div class="line"><span class="string">    ww 234</span></div><div class="line"><span class="string">    '''</span></div><div class="line"></div><div class="line">    <span class="string">'''遍历方式 2'''</span></div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> d:</div><div class="line">        print(<span class="string">'dict[%s]\'s value is : '</span> % key, d[key])</div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    dict[cwj]'s value is :  200</span></div><div class="line"><span class="string">    dict[zh]'s value is :  145</span></div><div class="line"><span class="string">    dict[ww]'s value is :  234</span></div><div class="line"><span class="string">    '''</span></div><div class="line"></div><div class="line">    <span class="string">'''遍历方式 3 ，遍历到指定的key时，修改其元素'''</span></div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> d.keys():</div><div class="line">        print(key)</div><div class="line">        print(d[key])</div><div class="line">        <span class="keyword">if</span> key == <span class="string">'cwj'</span>:</div><div class="line">            d[key] = <span class="number">500</span></div><div class="line">            print(<span class="string">'ok cwj,your grade has changed!'</span>)</div><div class="line">    print(d)</div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    cwj</span></div><div class="line"><span class="string">    200</span></div><div class="line"><span class="string">    ok cwj,your grade has changed!</span></div><div class="line"><span class="string">    zh</span></div><div class="line"><span class="string">    145</span></div><div class="line"><span class="string">    ww</span></div><div class="line"><span class="string">    234</span></div><div class="line"><span class="string">    &#123;'cwj': 500, 'zh': 145, 'ww': 234&#125;</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<h2 id="几个内置函数"><a href="#几个内置函数" class="headerlink" title="几个内置函数"></a>几个内置函数</h2><p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">ll = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line">ll2 = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</div><div class="line">ll3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</div><div class="line">ll4 = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>]</div><div class="line">print(ll * <span class="number">2</span>)  <span class="comment"># [1, 2, 3, 4, 1, 2, 3, 4]</span></div><div class="line">print(ll + ll2)  <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8]</span></div><div class="line"><span class="comment"># 不能相减</span></div><div class="line"><span class="comment"># print(ll3 - ll2)</span></div><div class="line"></div><div class="line"><span class="comment"># 成员资格</span></div><div class="line"><span class="comment"># 检测 1 是否在 ll2序列 中， 使用 in 关键字返回值</span></div><div class="line"><span class="comment"># 为：True or False</span></div><div class="line">print(<span class="number">1</span> <span class="keyword">in</span> ll2)  <span class="comment"># False</span></div><div class="line"></div><div class="line"><span class="comment"># 获得序列中的最大值</span></div><div class="line">print(max(ll3))  <span class="comment"># 8</span></div><div class="line">print(min(ll4))  <span class="comment"># 0</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  02-函数-生成器+切片]]></title>
      <url>/Python3%20%2002-%E5%87%BD%E6%95%B0-%E7%94%9F%E6%88%90%E5%99%A8+%E5%88%87%E7%89%87/</url>
      <content type="html"><![CDATA[<pre><code>高级特性——(slice)切片，表示为[::]
</code></pre><ul>
<li>切片语法：[1:4:2]</li>
</ul>
<blockquote>
<ul>
<li>数字’1’ 表示开始的索引位置</li>
<li>数字’4’ 表示结束的索引位置</li>
<li>数字’2’ 表示间隔的索引数</li>
</ul>
</blockquote>
<a id="more"></a>
<p><em>补充于：2017年07月18日16:29:53</em></p>
<blockquote>
<p>Python序列切片操作：<a href="http://developer.51cto.com/art/201304/389771.htm" target="_blank" rel="external">http://developer.51cto.com/art/201304/389771.htm</a></p>
</blockquote>
<ul>
<li>切片的方向与位置</li>
</ul>
<blockquote>
<p>对于序列结构数据来说，索引和步长都具有正负两个值<br>任意一个序列结构数据的索引范围为: -len(consequence) 到 len(consequence)-1 范围内的连续整数。<br>step 步长：默认为1，步长值不能为0。<br>切片过程:从第1个想要的对象开始，到第1个不想要的对象结束</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">说明</th>
<th style="text-align:center">正索引默认位置</th>
<th style="text-align:center">负索引默认位置</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">序列方向说明</td>
<td style="text-align:center">左 –&gt; 右</td>
<td style="text-align:center">左 &lt;– 右</td>
</tr>
<tr>
<td style="text-align:center">序列第一个元素位置</td>
<td style="text-align:center">0</td>
<td style="text-align:center">-len(consequence)</td>
</tr>
<tr>
<td style="text-align:center">序列末元素位置</td>
<td style="text-align:center">len(consequence)－1</td>
<td style="text-align:center">-1</td>
</tr>
</tbody>
</table>
<ul>
<li>切片方向代码示例</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">s3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line">print(s3[<span class="number">1</span>:<span class="number">4</span>:<span class="number">1</span>])  <span class="comment"># [2, 3, 4]</span></div><div class="line">print(s3[<span class="number">-4</span>:<span class="number">-2</span>])  <span class="comment"># [2, 3]</span></div><div class="line">print(s3[<span class="number">-3</span>:<span class="number">-1</span>])  <span class="comment"># [3, 4]</span></div><div class="line">print(s3[<span class="number">-5</span>:])  <span class="comment"># [1, 2, 3, 4, 5]</span></div><div class="line">print(s3[:])  <span class="comment"># [1, 2, 3, 4, 5]</span></div><div class="line">print(s3[<span class="number">-1</span>::<span class="number">-1</span>])  <span class="comment"># [5, 4, 3, 2, 1]</span></div><div class="line">print(s3[<span class="number">-1</span>:])  <span class="comment"># [5]</span></div></pre></td></tr></table></figure>
<ul>
<li>range语法range(start, stop, step)</li>
</ul>
<blockquote>
<p>参考：<a href="http://www.nowamagic.net/academy/detail/1302446" target="_blank" rel="external">http://www.nowamagic.net/academy/detail/1302446</a></p>
<ul>
<li>根据<code>start</code>和<code>stop</code>确定范围，根据<code>step</code>设定步长</li>
</ul>
</blockquote>
<ul>
<li>range与xrange</li>
</ul>
<blockquote>
<p>两者都能用于for循环中<br>range 与 xrange 用法上完全相同，不同点是，产生的结果类型不同</p>
<ul>
<li>range 产生的结果是 list</li>
<li>xrange 产生的结果是 生成器</li>
</ul>
</blockquote>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''这两个输出的结果都是一样的，实际上有很多不同，'''</span></div><div class="line"><span class="string">'''range会直接生成一个list对象'''</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">5</span>)</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"></div><div class="line"><span class="string">'''而xrange则不会直接生成一个list，而是每次调用返回其中的一个值'''</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>xrange(<span class="number">5</span>)</div><div class="line">xrange(<span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(xrange(<span class="number">5</span>))</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"></div><div class="line"><span class="string">'''要生成很大的数字序列的时候，用xrange会比range性能优很多，因为不需要一上来就开辟一块很大的内存空间。'''</span></div></pre></td></tr></table></figure>
<h2 id="函数range的使用"><a href="#函数range的使用" class="headerlink" title="函数range的使用"></a>函数range的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''表示从1开始，到10之前（不包括10'''</span></div><div class="line">l = range(<span class="number">1</span>, <span class="number">10</span>)</div><div class="line"><span class="string">'''从0开始（0可以省略），生成10个数'''</span></div><div class="line">ll = range(<span class="number">10</span>)</div><div class="line"><span class="string">'''从0开始，生成10个数，公差为2（相邻的数之间间隔为2）'''</span></div><div class="line">lll = range(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="string">'''根据range的规则，生成指定的序列'''</span></div><div class="line">print(l)  <span class="comment"># range(1, 10)</span></div><div class="line">print(ll)  <span class="comment"># range(0, 10)</span></div><div class="line">print(list(l))  <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></div><div class="line">print(list(ll))  <span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></div><div class="line">print(list(lll))  <span class="comment"># [0, 2, 4, 6, 8]</span></div><div class="line"></div><div class="line"><span class="string">'''从缩影0开始，去之后索引+2对应的具体数值'''</span></div><div class="line">print(list(lll)[::<span class="number">2</span>])  <span class="comment"># [0, 4, 8]</span></div></pre></td></tr></table></figure>
<p><strong><em>使用range进行求和</em></strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sum = <span class="number">0</span></div><div class="line">numbers = range(<span class="number">1</span>, <span class="number">10</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> numbers:</div><div class="line">    sum += i</div><div class="line">print(sum)</div><div class="line"><span class="string">'''45'''</span></div></pre></td></tr></table></figure>
<h2 id="对list使用切片"><a href="#对list使用切片" class="headerlink" title="对list使用切片"></a>对list使用切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">l = [<span class="string">'cwj'</span>, <span class="string">'serr'</span>, <span class="string">'bob'</span>, <span class="string">'jack'</span>]</div><div class="line"></div><div class="line"><span class="string">'''取3个元素 使用方法 切片（slice）,是指：取出一个范围内的元素'''</span></div><div class="line"><span class="string">'''从索引0开始，直到3为止，但是不包括索引3，实际的取得索引为0，1，2</span></div><div class="line"><span class="string">    如果索引是从0开始的，0可以省略'''</span></div><div class="line">print(l[<span class="number">0</span>:<span class="number">3</span>])  <span class="comment"># ['cwj', 'serr', 'bob']</span></div><div class="line">print(l[:<span class="number">3</span>])  <span class="comment"># ['cwj', 'serr', 'bob']</span></div><div class="line"></div><div class="line"><span class="string">'''倒着取出元素'''</span></div><div class="line">print(l[<span class="number">-3</span>:])  <span class="comment"># ['serr', 'bob', 'jack']</span></div><div class="line">print(l[<span class="number">0</span>:<span class="number">-3</span>])  <span class="comment"># ['cwj']</span></div></pre></td></tr></table></figure>
<h2 id="对str使用切片"><a href="#对str使用切片" class="headerlink" title="对str使用切片"></a>对str使用切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'cwj, cwj, cwj, cwj'</span></div><div class="line">sp = s[::]</div><div class="line">print(sp)  <span class="comment"># cwj, cwj, cwj, cwj</span></div><div class="line">print(sp[<span class="number">0</span>:<span class="number">4</span>:<span class="number">2</span>])  <span class="comment"># cj</span></div></pre></td></tr></table></figure>
<h2 id="对dict使用切片-–-dict不适用与切片"><a href="#对dict使用切片-–-dict不适用与切片" class="headerlink" title="对dict使用切片 – dict不适用与切片"></a>对dict使用切片 – dict不适用与切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">"对dict使用切片"</span>)</div><div class="line">d = &#123;<span class="string">'cwj'</span>: <span class="number">150</span>, <span class="string">'zh'</span>: <span class="number">145</span>, <span class="string">'ww'</span>: <span class="number">234</span>, <span class="string">'cwj'</span>: <span class="number">200</span>&#125;</div><div class="line"><span class="comment"># print(d[1:3])  # TypeError: unhashable type: 'slice'</span></div></pre></td></tr></table></figure>
<h2 id="对tuple使用切片"><a href="#对tuple使用切片" class="headerlink" title="对tuple使用切片"></a>对tuple使用切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">print(range(<span class="number">8</span>))  <span class="comment"># range(0, 8)</span></div><div class="line">ll5 = range(<span class="number">8</span>)  <span class="comment"># range(0, 8)</span></div><div class="line">print(ll5)</div><div class="line">t = tuple(ll5)</div><div class="line">print(t)  <span class="comment"># (0, 1, 2, 3, 4, 5, 6, 7)</span></div><div class="line"></div><div class="line">lls = t[::]</div><div class="line">print(<span class="string">'将 t序列 复制后的结果为：'</span>)</div><div class="line">print(lls)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">将 t序列 复制后的结果为：</span></div><div class="line"><span class="string">(0, 1, 2, 3, 4, 5, 6, 7)</span></div><div class="line"><span class="string">注意： tuple执行切片以后仍是一个tuple</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<h2 id="对set使用切片"><a href="#对set使用切片" class="headerlink" title="对set使用切片"></a>对set使用切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">s = set(lls)</div><div class="line">print(s)  <span class="comment"># &#123;0, 1, 2, 3, 4, 5, 6, 7&#125; 是set类型的数据</span></div><div class="line">spl = t[::]</div><div class="line">print(spl)  <span class="comment"># (0, 1, 2, 3, 4, 5, 6, 7) 使用range后是tuple类型的数据</span></div></pre></td></tr></table></figure>
<h2 id="迭代器-for-的使用"><a href="#迭代器-for-的使用" class="headerlink" title="迭代器 for 的使用"></a>迭代器 for 的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'ABC'</span></div><div class="line"><span class="keyword">for</span> c <span class="keyword">in</span> s:</div><div class="line">    print(c)</div><div class="line"></div><div class="line"><span class="string">'''使用下标循环'''</span></div><div class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate(l):</div><div class="line">    print(i, value)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">0 1</span></div><div class="line"><span class="string">1 2</span></div><div class="line"><span class="string">2 3</span></div><div class="line"><span class="string">3 4</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i, ch <span class="keyword">in</span> enumerate(s):</div><div class="line">    print(i, ch)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">0 A</span></div><div class="line"><span class="string">1 B</span></div><div class="line"><span class="string">2 C</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line">d = &#123;<span class="string">'A'</span>: <span class="number">123</span>, <span class="string">'B'</span>: <span class="number">456</span>&#125;</div><div class="line">print(d)  <span class="comment"># &#123;'A': 123, 'B': 456&#125;</span></div><div class="line"><span class="keyword">for</span> i, dict0 <span class="keyword">in</span> enumerate(d):</div><div class="line">    print(i, d.items())</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">0 A</span></div><div class="line"><span class="string">1 B</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line">ls = [(<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">3</span>)]</div><div class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> ls:</div><div class="line">    print(x, y)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">1 1</span></div><div class="line"><span class="string">2 2</span></div><div class="line"><span class="string">3 3</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="string">'''列表生成器'''</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</div><div class="line">    print(x * x)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">1</span></div><div class="line"><span class="string">4</span></div><div class="line"><span class="string">9</span></div><div class="line"><span class="string">16</span></div><div class="line"><span class="string">25</span></div><div class="line"><span class="string">36</span></div><div class="line"><span class="string">49</span></div><div class="line"><span class="string">64</span></div><div class="line"><span class="string">81</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="string">'''生成的序列后，进行计算'''</span></div><div class="line">print([x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">9</span>)])  <span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64]</span></div><div class="line"></div><div class="line"><span class="string">'''生成序列后，新进行取余数预算，然后进行相乘运算'''</span></div><div class="line">print([x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>])  <span class="comment"># [4, 16, 36, 64]</span></div><div class="line"></div><div class="line"><span class="string">'''遍历两个字符串进行 排列组合'''</span></div><div class="line">print([m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'123'</span>])  <span class="comment"># ['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3']</span></div><div class="line"></div><div class="line"><span class="string">'''将dict类型的数据转换为 序列'''</span></div><div class="line">d = &#123;<span class="string">'A'</span>: <span class="number">1</span>, <span class="string">'B'</span>: <span class="number">2</span>, <span class="string">'C'</span>: <span class="number">3</span>&#125;</div><div class="line">print([k + <span class="string">' = '</span> + str(v) <span class="keyword">for</span> k, v <span class="keyword">in</span> d.items()])  <span class="comment"># 'A = 1', 'B = 2', 'C = 3']</span></div></pre></td></tr></table></figure>
<h2 id="yield关键字"><a href="#yield关键字" class="headerlink" title="yield关键字"></a>yield关键字</h2><p> <strong><em>定义generator函数的另一中方式：</em></strong><br>    当一个函数中含有关键字 <code>yield</code>时，这个函数就不在是一个普通的函数，而是一个<code>generator</code>函数</p>
<p> <strong><em>带有yield关键字的generator函数，执行流程与普通函数不同：</em></strong></p>
<pre><code>- 普通函数：执行到return或者函数的最后一句时，退出函数。
- 带有yield关键字的generator函数，调用next()函数时执行操作，遇到yield()函数时，退出返回。当 再次执行此函数时从上次返回yield语句处继续执行
</code></pre><p> <em>运行含有yield关键字的函数</em></p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_yield</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'step_01'</span>)</div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span></div><div class="line">    print(<span class="string">'step_02'</span>)</div><div class="line">    <span class="keyword">yield</span> <span class="number">2</span></div><div class="line">    print(<span class="string">'step_03'</span>)</div><div class="line">    <span class="keyword">yield</span> <span class="number">3</span></div><div class="line"><span class="comment"># 调用该generator时，首先要生成一个generator对象，然后用next()函数不断获得下一个返回值：</span></div><div class="line">o = p_yield()</div><div class="line">next(o)  <span class="comment"># step_01</span></div><div class="line"></div><div class="line">next(o)  <span class="comment"># step_02</span></div><div class="line"></div><div class="line">next(o)  <span class="comment"># step_03</span></div><div class="line"></div><div class="line"><span class="comment"># next(o)  # StopIteration</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></div><div class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></div><div class="line">    <span class="comment">#l = []</span></div><div class="line">    <span class="keyword">while</span> n &lt; max:</div><div class="line">        <span class="string">'''方法1 返回值：1 \n 2 \n 3 \n 4 \n 5'''</span></div><div class="line">        <span class="comment"># print(b)</span></div><div class="line">        <span class="string">'''</span></div><div class="line"><span class="string">        方法2 返回值：[1, 1, 2, 3, 5]</span></div><div class="line"><span class="string">        函数在运行中占用的内存会随着参数 max 的增大而增大，如果要控制内存占用，最好不要用 List</span></div><div class="line"><span class="string">来保存中间结果，而是通过 iterable 对象来迭代。</span></div><div class="line"><span class="string">        '''</span></div><div class="line">        <span class="comment">#l.append(b)</span></div><div class="line">        <span class="string">'''方法3 返回值：1 \n 1 \n 2 \n 3 \n 5. 使用yield关键字，使得生成的值为一个generator对象,而不是使用list占用大量的内存'''</span></div><div class="line">        <span class="keyword">yield</span> b</div><div class="line">        a, b = b, a + b</div><div class="line">        n = n + <span class="number">1</span></div><div class="line">    <span class="comment">#return l</span></div><div class="line"></div><div class="line"><span class="comment"># print(fib(5))</span></div></pre></td></tr></table></figure>
<p><strong><em>yield关键字的使用</em></strong></p>
<blockquote>
<p>参考：<a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/</a></p>
</blockquote>
<ul>
<li><p>yield关键字 使得一个普通的函数变成一个generator函数。Python解释器会将其视为一个generator，当for循环fib（5）函数的返回值时，实际调用的是iterable对象。</p>
</li>
<li><p>一个带有 yield 的函数就是一个 generator，它和普通函数不同，生成一个 generator 看起来像函数调用，<br> 但不会执行任何函数代码，直到对其调用 next()（在 for 循环中会自动调用 next()）才开始执行。</p>
</li>
<li><p>虽然执行流程仍按函数的流程执行，但每执行到一个 yield 语句就会中断，并返回一个迭代值，下次执行时从 yield 的下一个语句继续执行。看起来就好像一个函数在正常执行的过程中被 yield 中断了数次，每次中断都会通过 yield 返回当前的迭代值。</p>
</li>
<li><p>yield 的好处是显而易见的，把一个函数改写为一个 generator 就获得了迭代能力，比起用类的实例保存状态来计算下一个 next() 的值，<br> 不仅代码简洁，而且执行流程异常清晰</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> fib(<span class="number">5</span>):</div><div class="line">    print(n)</div></pre></td></tr></table></figure>
<p><strong><em>区分：fib与fib(5)</em></strong></p>
<ul>
<li>fib：是一个generator function  好比于：类的定义</li>
<li>fib(5)：是调用 fib 后返回的一个generator对象  好比于：类的实例化</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  02-函数-参数类型]]></title>
      <url>/Python3%20%2002-%E5%87%BD%E6%95%B0-%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<pre><code>默认参数必须指向 不可变对象。
因为不变对象一旦创建，对象内部的数据就 不能修改，这样就减少了由于修改数据导致的错误。
此外，由于对象不变，多任务环境下同时读取对象 不需要加锁，同时读一点问题都没有。
</code></pre><a id="more"></a>
<h2 id="函数参数的5种类型"><a href="#函数参数的5种类型" class="headerlink" title="函数参数的5种类型"></a>函数参数的5种类型</h2><blockquote>
<p>1.必选参数<br>2.默认参数<br>3.可变参数<br>4.关键字参数<br>5.命名关键字参数<br>组合参数<br>注意：  函数参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。</p>
</blockquote>
<h2 id="必选参数"><a href="#必选参数" class="headerlink" title="必选参数"></a>必选参数</h2><p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(num)</span>:</span></div><div class="line">    print(num*num)</div><div class="line"></div><div class="line">fun(<span class="number">10</span>)     <span class="comment">#100</span></div></pre></td></tr></table></figure>
<h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">##默认参数示例 1: tag = 2,为默认参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span><span class="params">(num, tag = <span class="number">2</span>)</span>:</span></div><div class="line">    s = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> tag &gt; <span class="number">0</span>:</div><div class="line">        tag = tag - <span class="number">1</span></div><div class="line">        s = s * num</div><div class="line">    <span class="keyword">return</span> s</div><div class="line"></div><div class="line">print(fun2(<span class="number">5</span>))      <span class="comment">#25</span></div><div class="line">print(fun2(<span class="number">5</span>,<span class="number">3</span>))        <span class="comment">#125</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#默认参数示例 2</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun3</span><span class="params">(name,  age = <span class="number">6</span>, city = <span class="string">'beijing'</span>)</span>:</span></div><div class="line">    print(<span class="string">"name is %s"</span> % name)</div><div class="line">    print(<span class="string">"age is %d"</span> % age)</div><div class="line">    print(<span class="string">"city is %s"</span> % city)</div><div class="line"></div><div class="line"></div><div class="line">fun3(<span class="string">'cwj'</span>)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">name is cwj</span></div><div class="line"><span class="string">age is 6</span></div><div class="line"><span class="string">city is beijing </span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"><span class="comment">#默认参数在赋值时要注明： 参数名称</span></div><div class="line">fun3(<span class="string">'cwj'</span>, age = <span class="number">9</span>)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">name is cwj</span></div><div class="line"><span class="string">age is 9</span></div><div class="line"><span class="string">city is beijing</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"></div><div class="line">fun3(<span class="string">'cwj'</span>, city=<span class="string">'tinajin'</span>)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">name is cwj</span></div><div class="line"><span class="string">age is 6</span></div><div class="line"><span class="string">city is tinajin</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><pre><code>可变参数（个数可变），其本质是 `tuple`集合，由函数返回的结果可以看出
可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个`tuple`  
</code></pre><p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun4</span><span class="params">(*numbers)</span>:</span></div><div class="line">    sum = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> numbers:</div><div class="line">        sum = sum + num * num</div><div class="line">    print(sum)</div><div class="line"></div><div class="line"></div><div class="line">fun4(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)     <span class="comment">#29</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="string">'''*l表示把l这个list的所有元素作为可变参数传进去。这种写法相当有用，而且很常见'''</span></div><div class="line">l = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line">fun4(*l)        <span class="comment">#29</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="string">'''*t表示把t这个tuple的所有元素作为可变参数传进去。这种写法相当有用，而且很常见'''</span></div><div class="line">t = (<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</div><div class="line">fun4(*t)        <span class="comment">#29e</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#可变参数个数为0</span></div><div class="line">fun4()          <span class="comment">#0</span></div></pre></td></tr></table></figure>
<h2 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h2><pre><code>关键字参数本质 dict（实际参数为 键值对 即可）
而关键字参数允许你传入0个或任意个含 参数名的参数 ，这些关键字参数在函数 内部 自动组装为一个 dict。
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun5</span><span class="params">(name, age, **keyWord)</span>:</span></div><div class="line">    print(<span class="string">'fun5-----'</span>)</div><div class="line">    print(<span class="string">"name is : "</span>, name)</div><div class="line">    print(<span class="string">"age is : %d"</span> % age)</div><div class="line">    print(<span class="string">"address is : "</span>, keyWord)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#传入1个关键字参数</span></div><div class="line">fun5(<span class="string">'cwj'</span>, <span class="number">24</span>, address=<span class="string">'tianjin'</span>)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">name is :  cwj</span></div><div class="line"><span class="string">age is : 24</span></div><div class="line"><span class="string">address is :  &#123;'address': 'tianjin'&#125;</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#传入多个关键字参数</span></div><div class="line">fun5(<span class="string">'cwj'</span>, <span class="number">24</span>, address=<span class="string">'beijing'</span>, weather=<span class="string">'hot'</span>)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">name is :  cwj</span></div><div class="line"><span class="string">age is : 24</span></div><div class="line"><span class="string">address is :  &#123;'address': 'beijing', 'weather': 'hot'&#125;</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#传入0个参数</span></div><div class="line">fun5(<span class="string">'cwj'</span>, <span class="number">24</span>)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">name is :  cwj</span></div><div class="line"><span class="string">age is : 24</span></div><div class="line"><span class="string">address is :  &#123;&#125;</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#在有现成dict类型的情况下</span></div><div class="line"><span class="comment">#此处是将d这个dict类型对象的所有 key-value 用关键字参数导入到函数的**keyWord参数中，</span></div><div class="line">keyWord获得的是d的一份拷贝，对keyWord的改变将不会影响到函数外的d本身。</div><div class="line">d = &#123;<span class="string">'address'</span>: <span class="string">'beijing'</span>, <span class="string">'wether'</span>:<span class="string">'hot'</span>&#125;</div><div class="line">fun5(<span class="string">'cwj'</span>, <span class="number">24</span>,**d)</div><div class="line"></div><div class="line">name <span class="keyword">is</span> :  cwj</div><div class="line">age <span class="keyword">is</span> : <span class="number">24</span></div><div class="line">address <span class="keyword">is</span> :  &#123;<span class="string">'address'</span>: <span class="string">'beijing'</span>, <span class="string">'wether'</span>: <span class="string">'hot'</span>&#125;</div></pre></td></tr></table></figure>
<h2 id="命名关键字"><a href="#命名关键字" class="headerlink" title="命名关键字"></a>命名关键字</h2><pre><code>此种参数是用来 限制关键字参数 的名字，就是仅接受 已经命名的形参 的参数
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">'''表示方法1：*，参数名1，参数名2'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun6</span><span class="params">(name, age, *, address, wethear)</span>:</span></div><div class="line">    print(<span class="string">'fun6-----'</span>)</div><div class="line">    print(<span class="string">"name is : "</span>, name)</div><div class="line">    print(<span class="string">'age is : %d'</span> % age)</div><div class="line">    print(<span class="string">'address is : %s'</span> % address)</div><div class="line">    print(<span class="string">'wether is : '</span>, wethear)</div><div class="line"></div><div class="line"></div><div class="line">fun6(<span class="string">'cwj'</span>, <span class="number">26</span>, address=<span class="string">'tianjin'</span>, wethear=<span class="string">'hot'</span>)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">name is :  cwj</span></div><div class="line"><span class="string">age is : 26</span></div><div class="line"><span class="string">address is : tianjin</span></div><div class="line"><span class="string">wether is :  hot</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="string">'''表示方法2，若函数中已经含有一个'可变参数'，则之后的参数不需要在添加 * 符号'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun7</span><span class="params">(name, age, *keyWord, city, wether)</span>:</span></div><div class="line">    print(<span class="string">'fun7-----'</span>)</div><div class="line">    print(<span class="string">'name is : '</span>, name)</div><div class="line">    print(<span class="string">'age is : '</span>, age)</div><div class="line">    print(<span class="string">'keuWord is : '</span>, keyWord)</div><div class="line">    print(<span class="string">'city is : '</span>, city)</div><div class="line">    print(<span class="string">'wether is : '</span>, wether)</div><div class="line"></div><div class="line"></div><div class="line">fun7(<span class="string">'cwj'</span>, <span class="number">24</span>, <span class="string">'xian'</span>, city=<span class="string">'tianjin'</span>, wether=<span class="string">'windy'</span>)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">name is :  cwj</span></div><div class="line"><span class="string">age is :  24</span></div><div class="line"><span class="string">keuWord is :  ('xian',)</span></div><div class="line"><span class="string">city is :  tianjin</span></div><div class="line"><span class="string">wether is :  windy</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="string">'''表示方法3：设置有默认值的命名关键字参数'''</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun8</span><span class="params">(name, *, city=<span class="string">'beijng'</span>,wether)</span>:</span></div><div class="line">    print(name, city, wether)</div><div class="line"></div><div class="line"></div><div class="line">fun8(<span class="string">'cwj'</span>,wether=<span class="string">'hot'</span>)</div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">cwj beijng hot</span></div><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun9</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line">fun9(<span class="string">'cwj'</span>)</div></pre></td></tr></table></figure>
<h2 id="组合参数"><a href="#组合参数" class="headerlink" title="组合参数"></a>组合参数</h2><p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 参数 必须参数，可选参数，可变参数，关键字参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun10</span><span class="params">(name, age=<span class="number">19</span>, *key_word, **city)</span>:</span></div><div class="line">    print(name, age, key_word, city)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 参数 必须参数，可选参数，可变参数，命名关键字参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun11</span><span class="params">(name, age=<span class="number">19</span>, *key_word, city, weather)</span>:</span></div><div class="line">    print(name, age, *key_word, city, weather)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 参数 必须参数，可选参数，命名关键字参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun12</span><span class="params">(name, age=<span class="number">8</span>, *, city, weather)</span>:</span></div><div class="line">    print(name, age, city, weather)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 参数 可选参数，可变参数，命名关键字参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun13</span><span class="params">(age=<span class="number">23</span>, *l_num, **key_word)</span>:</span></div><div class="line">    print(age, l_num, key_word)</div><div class="line"></div><div class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">fun10(<span class="string">'cwj'</span>, <span class="number">24</span>, *l)  <span class="comment"># cwj 24 (1, 2, 3) &#123;&#125;</span></div><div class="line"></div><div class="line">fun10(<span class="string">'cwj'</span>, <span class="number">24</span>, *l, city=<span class="string">'beijing'</span>)  <span class="comment"># cwj 24 (1, 2, 3) &#123;'city': 'beijing'&#125;</span></div><div class="line"></div><div class="line">fun11(<span class="string">'cwj'</span>, <span class="number">24</span>, *l, city=<span class="string">'tianjin'</span>, weather=<span class="string">'hot'</span>)  <span class="comment"># cwj 24 1 2 3 tianjin hot</span></div><div class="line"></div><div class="line">fun12(<span class="string">'cwj'</span>, age=<span class="number">24</span>, city=<span class="string">'xian'</span>, weather=<span class="string">'very hot'</span>)  <span class="comment"># cwj 24 xian very hot</span></div><div class="line"></div><div class="line">fun12(<span class="string">'cwj'</span>, <span class="number">0</span>, city=<span class="string">'beijing'</span>, weather=<span class="string">'windy'</span>)  <span class="comment"># cwj 0 beijing windy</span></div><div class="line"></div><div class="line">fun13(<span class="number">24</span>, *l, fa=<span class="string">'sss'</span>)  <span class="comment"># 24 (1, 2, 3) &#123;'fa': 'sss'&#125;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  02-函数-返回值]]></title>
      <url>/Python3%20%2002-%E5%87%BD%E6%95%B0-%E8%BF%94%E5%9B%9E%E5%80%BC/</url>
      <content type="html"><![CDATA[<h2 id="在python交互环境中，使用本地文件自己定义的函数"><a href="#在python交互环境中，使用本地文件自己定义的函数" class="headerlink" title="在python交互环境中，使用本地文件自己定义的函数"></a>在python交互环境中，使用本地文件自己定义的函数</h2><p>进入到文件所在的目录下后，将HelloWorld文件中的my_abs方法导入到交互环境中：</p>
<pre><code>from HelloWorld import my_abs
Hello World
</code></pre><blockquote>
<p>输出的是中文<br>my_abs(-12)<br>12</p>
</blockquote>
<a id="more"></a>
<h2 id="为系统函数建立别名"><a href="#为系统函数建立别名" class="headerlink" title="为系统函数建立别名"></a>为系统函数建立别名</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a = abs</div><div class="line">print(a(<span class="number">-90</span>))       <span class="comment">#90</span></div></pre></td></tr></table></figure>
<h2 id="空函数-pass"><a href="#空函数-pass" class="headerlink" title="空函数 - pass"></a>空函数 - <code>pass</code></h2><p><code>pass</code>语句什么都不做，那有什么用？实际上<code>pass</code>可以用来作为<code>占位符</code>，比如现在还没想好怎么写函数的代码，就可以先放一个<code>pass</code>，让代码 <em>能运行起来</em>。<br>这样的函数适用于在上下文中，保持 <strong><em>整体逻辑思路</em></strong> 的通畅。</p>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>除了在函数体内使用之外，在其他语句中也可以使用：<br>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<h2 id="函数参数检查-isinstance"><a href="#函数参数检查-isinstance" class="headerlink" title="函数参数检查 - isinstance()"></a>函数参数检查 - <code>isinstance()</code></h2><p>当我们自定义的函数传入了不恰当的参数时，python的函数能够检测出错误的参数，而我们自定义的函数则不能。当报错时，提示的错误信息和系统内置的函数提示的错误信息也不一样。<br>我们应该完善我们自己定义的函数，使用<code>isinstance()</code>方法</p>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs_good</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(x,(int, float)):</div><div class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'输入的参数类型异常'</span>)</div><div class="line">    <span class="keyword">if</span> x &gt; <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> -x</div><div class="line"></div><div class="line">print(my_abs_good(<span class="number">-2</span>))      <span class="comment">#2</span></div><div class="line">print(my_abs_good(<span class="string">'a'</span>))     <span class="comment">#TypeError: 输入的参数类型异常</span></div></pre></td></tr></table></figure>
<h2 id="判断一个数据类型是否为可迭代对象"><a href="#判断一个数据类型是否为可迭代对象" class="headerlink" title="判断一个数据类型是否为可迭代对象"></a>判断一个数据类型是否为可迭代对象</h2><p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'ABC'</span></div><div class="line">print(isinstance(s, Iterable))  <span class="comment"># True</span></div><div class="line">print(isinstance(<span class="number">123</span>, Iterable))  <span class="comment"># False</span></div></pre></td></tr></table></figure>
<h2 id="自定义函数的返回值"><a href="#自定义函数的返回值" class="headerlink" title="自定义函数的返回值"></a>自定义函数的返回值</h2><ul>
<li><em>多个返回值</em> 的本质是一个：<code>tuple</code>对象。只有一个返回值时，默认不显示<code>()</code></li>
</ul>
<p><strong><em>多返回值</em></strong> 代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getXY</span><span class="params">(x, y, step, angle = <span class="number">0</span>)</span>:</span></div><div class="line">    nx = x + step * math.cos(angle)</div><div class="line">    ny = y - step * math.cos(angle)</div><div class="line"></div><div class="line">    <span class="comment">#返回两个值</span></div><div class="line">    <span class="keyword">return</span> nx, ny</div><div class="line"><span class="comment"># 1</span></div><div class="line">x, y = getXY(<span class="number">10</span>,<span class="number">20</span>,<span class="number">100</span>)</div><div class="line">print(x, y)     <span class="comment">#110.0 -80.0</span></div><div class="line"></div><div class="line"><span class="comment"># 2</span></div><div class="line">x, y = (<span class="number">110.0</span>, <span class="number">-80.0</span>)</div><div class="line">print(x, y)     <span class="comment">#110.0 -80.0</span></div><div class="line"></div><div class="line"><span class="comment"># 3</span></div><div class="line">z = getXY(<span class="number">10</span>,<span class="number">20</span>,<span class="number">100</span>)</div><div class="line">print(z)        <span class="comment">#(110.0, -80.0)</span></div><div class="line"></div><div class="line"><span class="comment"># 4</span></div><div class="line">z2 = (<span class="number">10</span>)</div><div class="line">print(z2)       <span class="comment">#10</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">比较 #1，#2，#3, #4 可以得出，函数的返回值其实是一个tuple对象,当返回值只有1个时，回省略掉()</span></div><div class="line"><span class="string">'''</span></div><div class="line">print(getXY(<span class="number">10</span>,<span class="number">20</span>,<span class="number">100</span>))     <span class="comment">#(110.0, -80.0)</span></div><div class="line"></div><div class="line">x, y, z = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">100</span>)</div><div class="line">print(x, y, z)      <span class="comment">#10 20 100</span></div><div class="line">print(x)        <span class="comment">#10</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">在声明多个变量的同时，也将tuple对象的值对应的赋值给变量，很神奇！</span></div><div class="line"><span class="string">'''</span></div></pre></td></tr></table></figure>
<ul>
<li><strong><em>没有返回值</em></strong> <code>return None</code></li>
</ul>
<p>代码示例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">noRetuen</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'aaaa'</span>)</div></pre></td></tr></table></figure>
<p><strong><em>返回值小结</em></strong></p>
<blockquote>
<ul>
<li>定义函数时，需要确定 函数名 和 参数个数；</li>
<li>如果有必要，可以先对参数的 数据类型 做检查；</li>
<li>函数体内部可以用 return 随时返回函数结果；</li>
<li>函数执行完毕也 没有return语句 时，自动 return None。</li>
<li>函数可以同时返回 多个值，但其实就是一个 tuple。</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3  01-基础-基本数据类型]]></title>
      <url>/Python3%20%2001-%E5%9F%BA%E7%A1%80-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<pre><code>Python是一种计算机编程语言，使用Unicode编码，支持多语言(动态语言，因为变量本身不固定)。
是一种解释性语言在运行 .py 文件时需要通过 解释器 进行解释然后显示呢结果。
区分大小写
</code></pre><blockquote>
<p>参考网站：<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000</a></p>
</blockquote>
<a id="more"></a>
<h1 id="Python代码创建方式"><a href="#Python代码创建方式" class="headerlink" title="Python代码创建方式"></a>Python代码创建方式</h1><p>   1.在 终端环境 中编写<br>   2.在 文件 中编写</p>
<p>   <strong><em> 方式 1：在终端环境下 </em></strong><br>   输入 python 进入python交互模式，在&gt;&gt;&gt;后名编写代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">300</span> + <span class="number">100</span></div><div class="line"><span class="number">400</span></div></pre></td></tr></table></figure>
<p>输入 <code>exit()</code> 退出python模式。</p>
<p>   <strong><em> 方式 2：在文件中 </em></strong><br>   直接在文件中编写代码，然后打开终端进入文件所在目录，运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python 文件名.py</div></pre></td></tr></table></figure>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre><code>1、采用缩进方式（4个空格）
2、大小写敏感，例如：`True`, `False`, `None`
</code></pre><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>  <code># coding=utf-8</code> 使用Scrapy爬虫框架时应该添加此条语句表明注释是<code>中文注释</code><br>   <code>#</code> 单行注释<br>    <code>&#39;&#39;&#39; &#39;&#39;&#39;</code>多行注释</p>
<h2 id="符号-：作用"><a href="#符号-：作用" class="headerlink" title="符号 ：作用"></a>符号 ：作用</h2><p>  <code>:</code>结尾表示时，缩进的语句视为代码块,如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ooo:</div><div class="line">    XXX</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    XXX</div></pre></td></tr></table></figure>
<h2 id="字符串编码"><a href="#字符串编码" class="headerlink" title="字符串编码"></a>字符串编码</h2><blockquote>
<p>参考：<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000</a></p>
</blockquote>
<ul>
<li><p>ASCII、Unicode和UTF-8的关系<br>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。</p>
</li>
<li><p>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件</p>
</li>
<li><p>浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器。<br>所以你看到很多网页的源码上会有类似<meta charset="UTF-8">的信息，表示该网页正是用的UTF-8编码</p>
<p><code>Python 3</code>版本中，字符串是以<code>Unicode编码</code>的，也就是说，Python的字符串支持多语言</p>
</li>
</ul>
<h2 id="数据类型和变量"><a href="#数据类型和变量" class="headerlink" title="数据类型和变量"></a>数据类型和变量</h2><blockquote>
<ol>
<li>整数</li>
<li>浮点型</li>
<li>字符串</li>
<li>布尔值</li>
<li>空值</li>
<li>变量</li>
<li>常量</li>
<li>列表</li>
<li>字典</li>
<li>自定义数据类型  </li>
</ol>
</blockquote>
<h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><pre><code>1，-1，0x123。
</code></pre><p>   整数的除法在Python中有两种：<code>/</code>和<code>//</code>。<br>   其中<code>/</code>表示除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(<span class="number">13</span>/<span class="number">5</span>)   <span class="comment">#2.6</span></div></pre></td></tr></table></figure>
<p>   另一种除法<code>//</code>称为地板除，两个整数的除法仍然是整数:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(<span class="number">13</span>//<span class="number">5</span>)   <span class="comment">#2</span></div></pre></td></tr></table></figure>
<h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><pre><code>1.2， 1.23e9, 12.3e8， 1.23e-8
</code></pre><h3 id="字符串（！此处划重点！）"><a href="#字符串（！此处划重点！）" class="headerlink" title="字符串（！此处划重点！）"></a>字符串（！此处划重点！）</h3><p>   字符串类型是<code>str</code>。<br>   由于Python的字符串类型是<code>str</code>，在内存中以<code>Unicode</code>表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把<code>str</code>变为以字节为单位的<code>bytes</code>。<br>   Python对<code>bytes</code>类型的数据用带<code>b</code>前缀的单引号或双引号表示。<br>   使用 <code>&#39; &#39;</code> 或者 <code>&quot; &quot;</code> 表示的任意字符。其中包括 “‘”的用法</p>
<pre><code>&quot;I&apos;m OK&quot;
</code></pre><p>   既有<code>&#39;</code>又有<code>&quot;</code>的表示方法 I’m “OK”的用法：</p>
<pre><code>&apos;I \&apos;m \&quot;OK\&quot;&apos;
</code></pre><p>   即：需要显示的特殊字符或者需要转义的字符用 <code>\</code> 表示。<br>   如果不需要转义当前字符，则可以使用 <code>r&#39;&#39;</code> 表示 <code>&#39;&#39;</code>内部不需要转义的字符，例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">r'"I\'m \"OK\""'</span>)</div></pre></td></tr></table></figure>
<p>   结果为：</p>
<pre><code>&quot;I\&apos;m \&quot;OK\&quot;&quot;
</code></pre><p>   在<code>&#39;&#39;&#39; &#39;&#39;&#39;</code> 内可以不使用<code>\n</code>换行符而直接表示多行内容</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'''line1</span></div><div class="line"><span class="string">line2</span></div><div class="line"><span class="string">line3'''</span>)</div></pre></td></tr></table></figure>
<p>   结果为：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">line1</div><div class="line">line2</div><div class="line">line3</div></pre></td></tr></table></figure>
<h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p>   注意<code>True</code>和<code>False</code>的大小写，而且布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算<br>   测试代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">print(<span class="number">3</span> &gt; <span class="number">2</span>)  <span class="comment">#True</span></div><div class="line">print(<span class="number">3</span> &lt; <span class="number">2</span>)  <span class="comment">#False</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="number">3</span> &gt; <span class="number">2</span> <span class="keyword">and</span> <span class="number">4</span> &lt; <span class="number">5</span>:</div><div class="line">    print(<span class="string">"3 &gt; 2"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">"3 &lt; 2"</span>)  <span class="comment">#3 &gt; 2</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="number">3</span> &gt; <span class="number">2</span> <span class="keyword">or</span> <span class="number">4</span> &gt; <span class="number">5</span>:</div><div class="line">    print(<span class="string">"3 &gt; 2"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">"3 &lt; 2"</span>)  <span class="comment">#3 &gt; 2</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="number">4</span> &lt; <span class="number">5</span>:</div><div class="line">    print(<span class="string">"3 &gt; 2"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print((<span class="keyword">not</span> <span class="number">4</span> &lt; <span class="number">5</span>))  <span class="comment">#False</span></div><div class="line">    print(<span class="string">"3 &lt; 2"</span>)  <span class="comment">#3 &lt; 2</span></div></pre></td></tr></table></figure>
<h3 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h3><p>   空值是用<code>None</code>表示的（注意大小写），但是<code>None</code>不能理解为<code>0</code>。</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>   <code>Python</code>与其他不同的是它的变量的<code>类型</code>是通过被赋予的<code>值得类型</code>决定的，即：</p>
<pre><code>后者决定前者的类型。
</code></pre><p>   <code>Python</code>的变量只是一个名字而已，数值内容及其类型才是重点，决定了变量名的实际意义。<br>   <code>变量本身类型不固定</code>的语言称之为<code>动态语言</code>，与之对应的是静态语言。<br>   静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错,例如Java是静态语言.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">123</span></div><div class="line">print(a)    <span class="comment">#123</span></div><div class="line">a = <span class="string">"a是个变量名"</span></div><div class="line">print(a)    <span class="comment">#a是个变量名</span></div><div class="line">a = <span class="keyword">True</span></div><div class="line">print(a)    <span class="comment">#True</span></div><div class="line">b = a</div><div class="line">print(b)    <span class="comment">#True</span></div></pre></td></tr></table></figure>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>   在Python中，通常用全部大写的变量名表示常量，全部大写的变量名表示常量只是一个习惯上的用法。</p>
<h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><p>   格式化输出字符串 – 同<code>C</code>语言，格式化与实际数据之间通过%连接</p>
<p>   使用%，%运算符就是用来格式化字符串的，其中</p>
<blockquote>
<p>%s 表示替换字符串，<br>%d 表示替换整数，<br>%f 表示替换浮点型<br>%x 表示16进制</p>
</blockquote>
<ul>
<li>代码示例</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">name = input(<span class="string">'请输入你的名字：'</span>)        <span class="comment">#请输入你的名字：yannis</span></div><div class="line">print(<span class="string">'Hello, %s ,你好啊~'</span> % name)     <span class="comment">#Hello, yannis ,你好啊~</span></div><div class="line">age = input(<span class="string">"请输入你的年龄： "</span>)</div><div class="line">print(<span class="string">"你的年龄为 %d，确认：%d"</span> % (<span class="number">12</span>,<span class="number">12</span>))       <span class="comment">#你的年龄为 12，确认：12</span></div><div class="line"></div><div class="line"><span class="comment">#在不确定使用何种类型的数据时，用%s即可</span></div><div class="line">print(<span class="string">'age is : %s; Gener: %s'</span> % (<span class="number">32</span>,<span class="keyword">False</span>))    <span class="comment">#age is : 32; Gener: False</span></div><div class="line"></div><div class="line"><span class="comment">#字符串里面的%是一个普通字符时,需要转义，用%%来表示一个%</span></div><div class="line">print(<span class="string">'增长率为：%d%%'</span> % <span class="number">7</span>)      <span class="comment">#增长率为：7%</span></div></pre></td></tr></table></figure>
<ul>
<li>一个计算成绩比率的小代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">grade1 = input(<span class="string">"请输入去年的成绩："</span>)</div><div class="line">grade2 = input(<span class="string">"请输入今年的成绩："</span></div><div class="line"></div><div class="line"><span class="comment">#此处将str类型的grade1转换为int的10进制类型，参数：grade1表示待转换的数据，参数：10，表示进制</span></div><div class="line">num = int(grade1,<span class="number">10</span>) - int(grade2,<span class="number">10</span>)</div><div class="line"></div><div class="line"><span class="comment">#此处将int类型的num转换为str类型</span></div><div class="line">print(<span class="string">'num is : '</span> + str(num))</div><div class="line">print(<span class="string">'abs is : %d'</span> % abs(num))</div><div class="line"></div><div class="line"><span class="comment">#将结果转换为float类型</span></div><div class="line">mPercent = float(((abs(num))/int(grade1,<span class="number">10</span>))*<span class="number">100</span>)</div><div class="line">print(<span class="string">'mPercent is : '</span> + str(mPercent))</div><div class="line"></div><div class="line"><span class="comment">#格式化输出结果</span></div><div class="line">print(<span class="string">'成绩变化率为：%.2f%%'</span> % mPercent)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux/Unix系统文件结构]]></title>
      <url>/Linux:Unix%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<h2 id="bin"><a href="#bin" class="headerlink" title="/bin"></a>/bin</h2><pre><code>系统有很多放置执行档的目录，但/bin比较特殊。
因为/bin放置的是在单人维护模式下还能够被操作的指令。
在/bin底下的指令可以被root与一般帐号所使用，主要有：cat,chmod(修改权限), chown, date, mv, mkdir, cp, bash等等常用的指令。
</code></pre><a id="more"></a>
<h2 id="boot"><a href="#boot" class="headerlink" title="/boot"></a>/boot</h2><pre><code>主要放置开机会使用到的档案，包括Linux核心档案以及开机选单与开机所需设定档等等。
Linux kernel常用的档名为：vmlinuz ，如果使用的是grub这个开机管理程式，则还会存在/boot/grub/这个目录。
</code></pre><h2 id="dev"><a href="#dev" class="headerlink" title="/dev"></a>/dev</h2><pre><code>在Linux系统上，任何装置与周边设备都是以档案的型态存在于这个目录当中。 只要通过存取这个目录下的某个档案，就等于存取某个装置。比要重要的档案有/dev/null, /dev/zero, /dev/tty , /dev/lp*, / dev/hd*, /dev/sd*等等
</code></pre><h2 id="etc"><a href="#etc" class="headerlink" title="/etc"></a>/etc</h2><pre><code>系统主要的设定档几乎都放置在这个目录内，例如人员的帐号密码档、各种服务的启始档等等。 一般来说，这个目录下的各档案属性是可以让一般使用者查阅的，但是只有root有权力修改。 FHS建议不要放置可执行档(binary)在这个目录中。 比较重要的档案有：/etc/inittab, /etc/init.d/, /etc/modprobe.conf, /etc/X11/, /etc/fstab, /etc/sysconfig/等等。 另外，其下重要的目录有：/etc/init.d/ ：所有服务的预设启动script都是放在这里的，例如要启动或者关闭iptables的话： /etc/init.d/iptables start、/etc/init.d/ iptables stop
</code></pre><h3 id="etc-xinetd-d-："><a href="#etc-xinetd-d-：" class="headerlink" title="/etc/xinetd.d/ ："></a>/etc/xinetd.d/ ：</h3><pre><code>这就是所谓的super daemon管理的各项服务的设定档目录。
</code></pre><h2 id="etc-X11-："><a href="#etc-X11-：" class="headerlink" title="/etc/X11/ ："></a>/etc/X11/ ：</h2><pre><code>与XWindow有关的各种设定档都在这里，尤其是xorg.conf或XF86Config这两个X Server的设定档。
</code></pre><h2 id="home"><a href="#home" class="headerlink" title="/home"></a>/home</h2><pre><code>这是系统预设的使用者家目录(home directory)。
在你新增一个一般使用者帐号时，预设的使用者家目录都会规范到这里来。比较重要的是，家目录有两种代号：
    ~ ：代表当前使用者的家目录，而
    ~guest：则代表用户名为guest的家目录。
</code></pre><h2 id="lib"><a href="#lib" class="headerlink" title="/lib"></a>/lib</h2><pre><code>系统的函式库非常的多，而/lib放置的则是在开机时会用到的函式库，以及在/bin或/sbin底下的指令会呼叫的函式库而已 。 什么是函式库呢？妳可以将他想成是外挂，某些指令必须要有这些外挂才能够顺利完成程式的执行之意。 尤其重要的是/lib/modules/这个目录，因为该目录会放置核心相关的模组(驱动程式)。
</code></pre><h2 id="media"><a href="#media" class="headerlink" title="/media"></a>/media</h2><pre><code>media是媒体的英文，顾名思义，这个/media底下放置的就是可移除的装置。 包括软碟、光碟、DVD等等装置都暂时挂载于此。 常见的档名有：/media/floppy, /media/cdrom等等。
</code></pre><h2 id="mnt"><a href="#mnt" class="headerlink" title="/mnt"></a>/mnt</h2><pre><code>如果妳想要暂时挂载某些额外的装置，一般建议妳可以放置到这个目录中。在古早时候，这个目录的用途与/media相同啦。 只是有了/media之后，这个目录就用来暂时挂载用了。
</code></pre><h2 id="opt"><a href="#opt" class="headerlink" title="/opt"></a>/opt</h2><pre><code>这个是给第三方协力软体放置的目录 。 什么是第三方协力软体啊？举例来说，KDE这个桌面管理系统是一个独立的计画，不过他可以安装到Linux系统中，因此KDE的软体就建议放置到此目录下了。 另外，如果妳想要自行安装额外的软体(非原本的distribution提供的)，那么也能够将你的软体安装到这里来。 不过，以前的Linux系统中，我们还是习惯放置在/usr/local目录下。
</code></pre><h2 id="root"><a href="#root" class="headerlink" title="/root"></a>/root</h2><pre><code>系统管理员(root)的家目录。 之所以放在这里，是因为如果进入单人维护模式而仅挂载根目录时，该目录就能够拥有root的家目录，所以我们会希望root的家目录与根目录放置在同一个分区中。
</code></pre><h2 id="sbin"><a href="#sbin" class="headerlink" title="/sbin"></a>/sbin</h2><pre><code>Linux有非常多指令是用来设定系统环境的，这些指令只有root才能够利用来设定系统，其他使用者最多只能用来查询而已。放在/sbin底下的为开机过程中所需要的，里面包括了开机、修复、还原系统所需要的指令。至于某些伺服器软体程式，一般则放置到/usr/sbin/当中。至于本机自行安装的软体所产生的系统执行档(system binary)，则放置到/usr/local/sbin/当中了。常见的指令包括：fdisk, fsck, ifconfig, init, mkfs等等。
</code></pre><h2 id="srv"><a href="#srv" class="headerlink" title="/srv"></a>/srv</h2><pre><code>srv可以视为service的缩写，是一些网路服务启动之后，这些服务所需要取用的资料目录。 常见的服务例如WWW, FTP等等。 举例来说，WWW伺服器需要的网页资料就可以放置在/srv/www/里面。呵呵，看来平时我们编写的代码应该放到这里了。
</code></pre><h2 id="tmp"><a href="#tmp" class="headerlink" title="/tmp"></a>/tmp</h2><pre><code>这是让一般使用者或者是正在执行的程序暂时放置档案的地方。这个目录是任何人都能够存取的，所以你需要定期的清理一下。当然，重要资料不可放置在此目录啊。 因为FHS甚至建议在开机时，应该要将/tmp下的资料都删除。
</code></pre><p>事实上FHS针对根目录所定义的标准就仅限于上表，不过仍旧有些目录也需要我们了解一下，具体如下：</p>
<h2 id="lost-found"><a href="#lost-found" class="headerlink" title="/lost+found"></a>/lost+found</h2><pre><code>这个目录是使用标准的ext2/ext3档案系统格式才会产生的一个目录，目的在于当档案系统发生错误时，将一些遗失的片段放置到这个目录下。 这个目录通常会在分割槽的最顶层存在，例如你加装一个硬盘于/disk中，那在这个系统下就会自动产生一个这样的目录/disk/lost+found
</code></pre><h2 id="proc"><a href="#proc" class="headerlink" title="/proc"></a>/proc</h2><pre><code>这个目录本身是一个虚拟文件系统(virtual filesystem)喔。 他放置的资料都是在内存当中，例如系统核心、行程资讯(process)（是进程吗?）、周边装置的状态及网络状态等等。因为这个目录下的资料都是在记忆体（内存）当中，所以本身不占任何硬盘空间。比较重要的档案（目录）例如： /proc/cpuinfo, /proc/dma, /proc/interrupts, /proc/ioports, /proc/net/*等等。呵呵，是虚拟内存吗[guest]？
</code></pre><h2 id="sys"><a href="#sys" class="headerlink" title="/sys"></a>/sys</h2><pre><code>这个目录其实跟/proc非常类似，也是一个虚拟的档案系统，主要也是记录与核心相关的资讯。 包括目前已载入的核心模组与核心侦测到的硬体装置资讯等等。 这个目录同样不占硬盘容量。
</code></pre><h2 id="根目录下与开机过程有关的目录"><a href="#根目录下与开机过程有关的目录" class="headerlink" title="根目录下与开机过程有关的目录"></a>根目录下与开机过程有关的目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">除了这些目录的内容之外，另外要注意的是，因为根目录与开机有关，开机过程中仅有根目录会被挂载， 其他分区则是在开机完成之后才会持续的进行挂载的行为。就是因为如此，因此根目录下与开机过程有关的目录， 就不能够与根目录放到不同的分区去。那哪些目录不可与根目录分开呢？有底下这些：</div><div class="line">    /etc：配置文件</div><div class="line">    /bin：重要执行档</div><div class="line">    /dev：所需要的装置文件</div><div class="line">    /lib：执行档所需的函式库与核心所需的模块</div><div class="line">    /sbin：重要的系统执行文件</div><div class="line">这五个目录千万不可与根目录分开在不同的分区。请背下来啊。</div></pre></td></tr></table></figure>
<hr>
<h1 id="usr-的意义与内容："><a href="#usr-的意义与内容：" class="headerlink" title="/usr 的意义与内容："></a>/usr 的意义与内容：</h1><p>依据FHS的基本定义，/usr里面放置的数据属于可分享的与不可变动的(shareable, static)， 如果你知道如何透过网络进行分区的挂载(例如在服务器篇会谈到的NFS服务器)，那么/usr确实可以分享给局域网络内的其他主机来使用喔。</p>
<p>/usr不是<code>user</code>的缩写，其实usr是<code>Unix Software Resource</code>的缩写， 也就是Unix操作系统软件资源所放置的目录，而不是用户的数据啦。这点要注意。 FHS建议所有软件开发者，应该将他们的数据合理的分别放置到这个目录下的次目录，而不要自行建立该软件自己独立的目录。<br>因为是所有系统默认的软件(distribution发布者提供的软件)都会放置到/usr底下，因此这个目录有点类似Windows 系统的C:\Windows\ + C:\Program files\这两个目录的综合体，系统刚安装完毕时，这个目录会占用最多的硬盘容量。 一般来说，/usr的次目录建议有底下这些：</p>
<h2 id="usr-X11R6"><a href="#usr-X11R6" class="headerlink" title="/usr/X11R6/"></a>/usr/X11R6/</h2><p>为X Window System重要数据所放置的目录，之所以取名为X11R6是因为最后的X版本为第11版，且该版的第6次释出之意。<br>/usr/bin/<br>绝大部分的用户可使用指令都放在这里。请注意到他与/bin的不同之处。(是否与开机过程有关)</p>
<h2 id="usr-include"><a href="#usr-include" class="headerlink" title="/usr/include/"></a>/usr/include/</h2><p>c/c++等程序语言的档头(header)与包含档(include)放置处，当我们以tarball方式 (*.tar.gz 的方式安装软件)安装某些数据时，会使用到里头的许多包含档。</p>
<h2 id="usr-lib"><a href="#usr-lib" class="headerlink" title="/usr/lib/"></a>/usr/lib/</h2><p>包含各应用软件的函式库、目标文件(object file)，以及不被一般使用者惯用的执行档或脚本(script)。 某些软件会提供一些特殊的指令来进行服务器的设定，这些指令也不会经常被系统管理员操作， 那就会被摆放到这个目录下啦。要注意的是，如果你使用的是X86_64的Linux系统， 那可能会有/usr/lib64/目录产生</p>
<h2 id="usr-local"><a href="#usr-local" class="headerlink" title="/usr/local/"></a>/usr/local/</h2><p>统管理员在本机自行安装自己下载的软件(非distribution默认提供者)，建议安装到此目录， 这样会比较便于管理。举例来说，你的distribution提供的软件较旧，你想安装较新的软件但又不想移除旧版， 此时你可以将新版软件安装于/usr/local/目录下，可与原先的旧版软件有分别啦。 你可以自行到/usr/local去看看，该目录下也是具有bin, etc, include, lib…的次目录</p>
<h2 id="usr-sbin"><a href="#usr-sbin" class="headerlink" title="/usr/sbin/"></a>/usr/sbin/</h2><p>非系统正常运作所需要的系统指令。最常见的就是某些网络服务器软件的服务指令(daemon)</p>
<h2 id="usr-share"><a href="#usr-share" class="headerlink" title="/usr/share/"></a>/usr/share/</h2><p>放置共享文件的地方，在这个目录下放置的数据几乎是不分硬件架构均可读取的数据， 因为几乎都是文本文件嘛。在此目录下常见的还有这些次目录：/usr/share/man：联机帮助文件</p>
<pre><code>/usr/share/doc：软件杂项的文件说明
/usr/share/zoneinfo：与时区有关的时区文件
/usr/src/
</code></pre><p>一般原始码建议放置到这里，src有source的意思。至于核心原始码则建议放置到/usr/src/linux/目录下。</p>
<hr>
<h1 id="var-的意义与内容："><a href="#var-的意义与内容：" class="headerlink" title="/var 的意义与内容："></a>/var 的意义与内容：</h1><p>如果/usr是安装时会占用较大硬盘容量的目录，那么/var就是在系统运作后才会渐渐占用硬盘容量的目录。 因为/var目录主要针对常态性变动的文件，包括缓存(cache)、登录档(log file)以及某些软件运作所产生的文件， 包括程序文件(lock file, run file)，或者例如MySQL数据库的文件等等。</p>
<h2 id="var-cache"><a href="#var-cache" class="headerlink" title="/var/cache/"></a>/var/cache/</h2><p>应用程序本身运作过程中会产生的一些暂存档</p>
<h2 id="var-lib"><a href="#var-lib" class="headerlink" title="/var/lib/"></a>/var/lib/</h2><p>程序本身执行的过程中，需要使用到的数据文件放置的目录。在此目录下各自的软件应该要有各自的目录。 举例来说，MySQL的数据库放置到/var/lib/mysql/而rpm的数据库则放到/var/lib/rpm去</p>
<h2 id="var-lock"><a href="#var-lock" class="headerlink" title="/var/lock/"></a>/var/lock/</h2><p>某些装置或者是文件资源一次只能被一个应用程序所使用，如果同时有两个程序使用该装置时， 就可能产生一些错误的状况，因此就得要将该装置上锁(lock)，以确保该装置只会给单一软件所使用。 举例来说，刻录机正在刻录一块光盘，你想一下，会不会有两个人同时在使用一个刻录机烧片？ 如果两个人同时刻录，那片子写入的是谁的数据？所以当第一个人在刻录时该刻录机就会被上锁， 第二个人就得要该装置被解除锁定(就是前一个人用完了)才能够继续使用</p>
<h2 id="var-log"><a href="#var-log" class="headerlink" title="/var/log/"></a>/var/log/</h2><p>非常重要。这是登录文件放置的目录。里面比较重要的文件如/var/log/messages, /var/log/wtmp(记录登入者的信息)等。</p>
<h2 id="var-mail"><a href="#var-mail" class="headerlink" title="/var/mail/"></a>/var/mail/</h2><p>放置个人电子邮件信箱的目录，不过这个目录也被放置到/var/spool/mail/目录中，通常这两个目录是互为链接文件。</p>
<h2 id="var-run"><a href="#var-run" class="headerlink" title="/var/run/"></a>/var/run/</h2><p>某些程序或者是服务启动后，会将他们的PID放置在这个目录下</p>
<h2 id="var-spool"><a href="#var-spool" class="headerlink" title="/var/spool/"></a>/var/spool/</h2><p>这个目录通常放置一些队列数据，所谓的“队列”就是排队等待其他程序使用的数据。 这些数据被使用后通常都会被删除。举例来说，系统收到新信会放置到/var/spool/mail/中， 但使用者收下该信件后该封信原则上就会被删除。信件如果暂时寄不出去会被放到/var/spool/mqueue/中， 等到被送出后就被删除。如果是工作排程数据(crontab)，就会被放置到/var/spool/cron/目录中。<br>由于FHS仅是定义出最上层(/)及次层(/usr, /var)的目录内容应该要放置的文件或目录数据， 因此，在其他次目录层级内，就可以随开发者自行来配置了。<br>四. 目录树(directory tree) :<br>在Linux底下，所有的文件与目录都是由根目录开始的。那是所有目录与文件的源头, 然后再一个一个的分支下来，因此，我们也称这种目录配置方式为：目录树(directory tree), 这个目录树的主要特性有：<br>目录树的启始点为根目录 (/, root)；<br>每一个目录不止能使用本地端的 partition 的文件系统，也可以使用网络上的 filesystem 。举例来说， 可以利用 Network File System (NFS) 服务器挂载某特定目录等。<br>每一个文件在此目录树中的文件名(包含完整路径)都是独一无二的。</p>
]]></content>
      
        <categories>
            
            <category> 系统 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 命令 </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[代理模式]]></title>
      <url>/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考：<a href="http://blog.csdn.net/self_study/article/details/51628486" target="_blank" rel="external">http://blog.csdn.net/self_study/article/details/51628486</a></p>
</blockquote>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>创建一个抽象类方法，里面写有代理与主题共同的方法。</p>
<pre><code>public abstract class MyObject {
    //代理与实际主题的共同方法
    public abstract void operate();
}
</code></pre><a id="more"></a>
<p>真实主题</p>
<pre><code>public class RealObject extends MyObject {
    @Override
    public void operate() {
    System.out.println(&quot;这是来自RealObject的方法处理&quot;);
    }
}
</code></pre><p>代理主题</p>
<pre><code>public class ProxyObject extends MyObject {

    private RealObject realObject;
    //在此类中调用真实的主题，因为是代理主题“代理”真实主题中的方法，需要用到真实主题的引用
    public ProxyObject(RealObject realObject) {
    this.realObject = realObject;
    }

    @Override
    public void operate() {
    System.out.println(&quot;在处理“RealObject”之前，处理代理模式中自己的方法处理&quot;);
    //在此处调用真实主题中的同名方法。
    realObject.operate();
    System.out.println(&quot;在处理“RealObject”之后，处理代理模式中自己的方法处理&quot;);
    }
}
</code></pre><p>测试</p>
<pre><code>public class Proxy_DesignPattern {
    public static void main(String[] args){
    ProxyObject proxyObject = new ProxyObject(new RealObject());
    proxyObject.operate();
    }
}
/**
 * 输出结果：
 * 在处理“RealObject”之前，处理代理模式中自己的方法处理
   这是来自RealObject的方法处理
   在处理“RealObject”之后，处理代理模式中自己的方法处理
 */
</code></pre><h1 id="代理模式的角色："><a href="#代理模式的角色：" class="headerlink" title="代理模式的角色："></a>代理模式的角色：</h1><p><strong>Subject：抽象主题类</strong><br>    该类的主要职责是声明真实主题与代理的共同接口方法，该类既可以是一个抽象类，也可以是一个接口；</p>
<p><strong>RealSubjct：真实主题类</strong><br>    该类也称为被委托类或被代理类，该类定义了代理所表示的真实对象，由其执行具体的业务逻辑方法，而客户端则通过代理类间接地调用真实主题类中定义的方法；</p>
<p><strong>ProxySubject：代理类</strong><br>    该类也称为委托类或代理类，该类持有一个对真实主题类的引用，在其所实现的接口方法中调用真实主题类中对应的接口方法，以此起到代理的作用；</p>
<p><strong>Client：客户类</strong><br>    即使用代理类的部分。</p>
<h1 id="代理模式根据实际使用的场景也可以分为以下几种："><a href="#代理模式根据实际使用的场景也可以分为以下几种：" class="headerlink" title="代理模式根据实际使用的场景也可以分为以下几种："></a>代理模式根据实际使用的场景也可以分为以下几种：</h1><p><strong>远程代理（Remote Proxy）</strong><br>    为某个在不同的内存地址空间的对象提供局部代理，使系统可以将 Server 部分的实现隐藏，以便 Client 可以不必考虑 Server 的存在，类似于 C/S 模式（主要拦截并控制远程方法的调用，做代理防火墙之类的）；</p>
<p><strong>虚拟代理（Virtual Proxy）</strong><br>    使用一个代理对象标识一个十分耗资源的对象，并在真正需要时才创建，实现一个延迟加载的机制；</p>
<p><strong>保护代理（Protection Proxy）</strong><br>    使用代理控制对原始对象的访问，该类型的代理通常被用于原始对象有不同访问权限的情况；</p>
<p><strong>智能引用（Smart Proxy）</strong><br>    在访问原始对象时执行一些自己的附加操作并对指向原始对象的引用计数；</p>
<p><strong>写时拷贝（克隆）代理（Copy-on-write Proxy）</strong><br>    其实是虚拟代理的一个分支，提供了拷贝大对象的时候只有在对象真正变化后才会进行拷贝（克隆）的操作，即延迟拷贝。</p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[装饰者模式]]></title>
      <url>/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<blockquote>
<p> 参考：<a href="http://www.cnblogs.com/java-my-life/archive/2012/04/20/2455726.html" target="_blank" rel="external">http://www.cnblogs.com/java-my-life/archive/2012/04/20/2455726.html</a></p>
</blockquote>
<h1 id="设计原则："><a href="#设计原则：" class="headerlink" title="设计原则："></a>设计原则：</h1><p>封装变化<br>多用组合，少用继承<br>对扩展开发，对修改关闭</p>
<h1 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h1><p>装饰模式又名包装(Wrapper)模式。装饰者模式动态地将责任添加到对象上，是继承关系的一个替代方案。</p>
<h1 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h1><ul>
<li>装饰着可以在所委托装饰着的行为之前或者之后添加自己的行为，已达到特定的目的。</li>
<li>通过使用不同的具体装饰类以及这些装饰类的组合，可以创造出很多不同行为的组合。</li>
<li>装饰着与组件组合时，就是在加入新的行为，新的行为是由组合对象得来的。</li>
</ul>
<a id="more"></a>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-07%2008.39.41.png" alt=""></p>
<h1 id="如何封装的更好："><a href="#如何封装的更好：" class="headerlink" title="如何封装的更好："></a>如何封装的更好：</h1><p>装饰着模式（Decorator） + 工厂模式（Factory） + 生成器模式（Builder）</p>
<h2 id="装饰模式中的角色有："><a href="#装饰模式中的角色有：" class="headerlink" title="装饰模式中的角色有："></a>装饰模式中的角色有：</h2><ul>
<li>抽象构件(Component)角色：给出一个抽象接口，以规范准备接收附加责任的对象。</li>
<li>具体构件(ConcreteComponent)角色：定义一个将要接收附加责任的类。</li>
<li>抽象装饰(Decorator)角色：持有一个构件(Component)对象的实例，并定义一个与抽象构件接口一致的接口。</li>
<li>具体装饰(ConcreteDecorator)角色：负责给构件对象“贴上”附加的责任。</li>
</ul>
<p><strong>抽象装饰角色 继承 抽象构件角色，是为了有正确的类型，而不是继承它的行为。行为来自装饰着和基础组件，或与其他装饰着之间的组合关系。</strong></p>
<h1 id="实际应用："><a href="#实际应用：" class="headerlink" title="实际应用："></a>实际应用：</h1><p>java的I/O流</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-07%2010.18.59.png" alt=""></p>
<p><strong>装饰者模式的缺点</strong> ： </p>
<ul>
<li>产生大量的类。</li>
<li>类型问题。某一个对象依赖特定类型的类型。</li>
<li>采用装饰着实例化组件时，将会增加代码复杂度，不但需要实例化组件，还有把组件包装进装饰者中。</li>
</ul>
<h1 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h1><p><strong>组件</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 饮料抽象类</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Drink</span> </span>&#123;</div><div class="line"></div><div class="line">    String describtion = <span class="string">"Drink"</span>;</div><div class="line">    <span class="keyword">int</span> price = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 打印 描述</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescribtion</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> describtion;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 行为：输出价格</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">printPrice</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 具体牛奶饮料类</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MilkDrink</span> <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MilkDrink</span><span class="params">()</span></span>&#123;</div><div class="line">        price = <span class="number">11</span>;</div><div class="line">        describtion = <span class="string">"MilkDrink "</span> + String.valueOf(price);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">printPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> price;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 具体茶饮料类</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeaDrink</span> <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TeaDrink</span><span class="params">()</span></span>&#123;</div><div class="line">        price = <span class="number">12</span>;</div><div class="line">        describtion = <span class="string">"TeaDrink "</span> + String.valueOf(price);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">printPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> price;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>装饰者</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 抽象 装饰者</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CondimentDecorator</span> <span class="keyword">extends</span> <span class="title">Drink</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> condimentPrice= <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">printPrice</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 抽象装饰角色 继承 抽象构件角色，是为了有正确的类型，而不是继承它的行为</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HoneyDecorator</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</div><div class="line"></div><div class="line">    Drink mDrink;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HoneyDecorator</span><span class="params">(Drink drink)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.mDrink = drink;</div><div class="line">        condimentPrice = <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescribtion</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"HoneyDecorator "</span> +  String.valueOf(condimentPrice) + <span class="string">" "</span>  + mDrink.getDescribtion();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">printPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> condimentPrice + mDrink.printPrice();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MochaDecorator</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</div><div class="line"></div><div class="line">    Drink mDrink;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 使用抽象基类，践行 "开闭原则"：对扩展开放，对修改关闭</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> drink 基类</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MochaDecorator</span><span class="params">(Drink drink)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.mDrink = drink;</div><div class="line">        condimentPrice = <span class="number">5</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 输出当前组合</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescribtion</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"MochaDecorator "</span> +  String.valueOf(condimentPrice) + <span class="string">" "</span> + mDrink.getDescribtion();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 组合得到新的行为</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 当前组合价格</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">printPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span>  condimentPrice + mDrink.printPrice();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>测试类</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecoratorMain</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//只有一个底料的茶饮料</span></div><div class="line">        Drink teaDrink = <span class="keyword">new</span> TeaDrink();</div><div class="line">        System.out.println(teaDrink.getDescribtion());</div><div class="line">        System.out.println(teaDrink.printPrice());</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * TeaDrink 12</span></div><div class="line"><span class="comment">         * 12</span></div><div class="line"><span class="comment">         */</span></div><div class="line"></div><div class="line">        <span class="comment">//茶饮料 + 蜂蜜</span></div><div class="line">        <span class="comment">//抽象装饰角色 继承 抽象构件角色，是为了有正确的类型，而不是继承它的行为</span></div><div class="line">        Drink honeyDecorator = <span class="keyword">new</span> HoneyDecorator(teaDrink);</div><div class="line">        System.out.println(honeyDecorator.getDescribtion());</div><div class="line">        System.out.println(honeyDecorator.printPrice());</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * HoneyDecorator 10 + TeaDrink 12</span></div><div class="line"><span class="comment">         * 22</span></div><div class="line"><span class="comment">         */</span></div><div class="line"></div><div class="line">        <span class="comment">//茶饮料 + 蜂蜜 + 摩卡</span></div><div class="line">        Drink mochaDecorator = <span class="keyword">new</span> MochaDecorator(honeyDecorator);</div><div class="line">        System.out.println(mochaDecorator.getDescribtion());</div><div class="line">        System.out.println(mochaDecorator.printPrice());</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * MochaDecorator 5 + HoneyDecorator 10 + TeaDrink 12</span></div><div class="line"><span class="comment">         * 27</span></div><div class="line"><span class="comment">         */</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[观察者模式]]></title>
      <url>/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><strong>OO基础</strong> ：抽象<br><strong>OO原则</strong> ：封装变化、针对接口编程、松耦合（多用组合，少用继承）<br><strong>观察者模式</strong>  ：在对象之间定义一对多的依赖，当一个对象的状态改变，其他对象都会收到通知并自动改变。</p>
<a id="more"></a>
<p>被观察者</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WeatherSet</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(WeatherOberver oberver)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unRegister</span><span class="params">(WeatherOberver oberver)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">upData</span><span class="params">(WeatherData weatherData)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 主题（被观察者）</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherSetI</span> <span class="keyword">implements</span> <span class="title">WeatherSet</span></span>&#123;</div><div class="line"></div><div class="line">    List&lt;WeatherOberver&gt; oberverList;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 初始化存储观察者的集合</span></div><div class="line"><span class="comment">     * 模块间的依赖应该是通过 抽象来实现的</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherSetI</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.oberverList = <span class="keyword">new</span> ArrayList&lt;WeatherOberver&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 注册</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> oberver 观察者</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(WeatherOberver oberver)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (oberverList.contains(oberver)) &#123;</div><div class="line">            System.out.println(<span class="string">"注意 : "</span> + oberver.getClass().getName() + <span class="string">" 当前订阅者已经存在，无需订阅"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            oberverList.add(oberver);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 取消注册</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> oberver 观察者</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unRegister</span><span class="params">(WeatherOberver oberver)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"注意："</span> + oberver.getClass().getName() + <span class="string">" 已经不再订阅该消息，bye~bye~"</span>);</div><div class="line">        oberverList.remove(oberver);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 数据更新</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> weatherData 数据Bean类</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * 设计原则：被打电话给我，我打电话给你（上层调用下层，下层不调用上层）</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upData</span><span class="params">(WeatherData weatherData)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"注意：当前有 "</span> + oberverList.size() + <span class="string">" 位订阅了该消息！"</span>);</div><div class="line">        <span class="keyword">for</span> (WeatherOberver item : oberverList) &#123;</div><div class="line">            item.getData(weatherData);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* 数据Bean类</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> temp;</div><div class="line">    <span class="keyword">int</span> pressure;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">(<span class="keyword">int</span> temp, <span class="keyword">int</span> pressure)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.temp = temp;</div><div class="line">        <span class="keyword">this</span>.pressure = pressure;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTemp</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> temp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTemp</span><span class="params">(<span class="keyword">int</span> temp)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.temp = temp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPressure</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> pressure;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPressure</span><span class="params">(<span class="keyword">int</span> pressure)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.pressure = pressure;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"WeatherData&#123;"</span> +</div><div class="line">                <span class="string">"temp="</span> + temp +</div><div class="line">                <span class="string">", pressure="</span> + pressure +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>观察者</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 观察者 接口</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WeatherOberver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 数据更新行为</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> weatherData 数据Bean类</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getData</span><span class="params">(WeatherData weatherData)</span></span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WangObserver</span> <span class="keyword">implements</span> <span class="title">WeatherOberver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(WeatherData weatherData)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"WangObserver get data temp is : "</span> + weatherData.getTemp() + <span class="string">", pressure is : "</span> + weatherData.getPressure());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZhangObserver</span> <span class="keyword">implements</span> <span class="title">WeatherOberver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(WeatherData weatherData)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"ZhangObserver get data temp is : "</span> + weatherData.getTemp() + <span class="string">", pressure is : "</span> + weatherData.getPressure());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LiObserver</span> <span class="keyword">implements</span> <span class="title">WeatherOberver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(WeatherData weatherData)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"LiObserver get data temp is : "</span> + weatherData.getTemp() + <span class="string">", pressure is : "</span> + weatherData.getPressure());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>应用</p>
<pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OberverMain</span> </span>{

    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{
        WeatherOberver oberverWang = <span class="keyword">new</span> WangObserver();
        WeatherOberver oberverLi = <span class="keyword">new</span> LiObserver();
        WeatherOberver oberverZhang = <span class="keyword">new</span> ZhangObserver();

        WeatherSetI set = <span class="keyword">new</span> WeatherSetI();
        set.register(oberverWang);
        set.register(oberverLi);
        set.register(oberverZhang);

        set.upData(<span class="keyword">new</span> WeatherData(<span class="number">12</span>, <span class="number">45</span>));
        <span class="comment">/**</span>
<span class="comment">         *  注意：当前有 3 位订阅了该消息！</span>
<span class="comment">            WangObserver get data temp is : 12, pressure is : 45</span>
<span class="comment">            LiObserver get data temp is : 12, pressure is : 45</span>
<span class="comment">            ZhangObserver get data temp is : 12, pressure is : 45</span>
<span class="comment">         */</span>

        System.out.println();
        set.unRegister(oberverLi);
        set.upData(<span class="keyword">new</span> WeatherData(<span class="number">32</span>, <span class="number">100</span>));
        <span class="comment">/**</span>
<span class="comment">         *  注意：observer.LiObserver 已经不再订阅该消息，bye~bye~</span>
<span class="comment">            注意：当前有 2 位订阅了该消息！</span>
<span class="comment">            WangObserver get data temp is : 32, pressure is : 100</span>
<span class="comment">            ZhangObserver get data temp is : 32, pressure is : 100</span>
<span class="comment">         */</span>

        System.out.println();
        set.register(oberverZhang);
        set.upData(<span class="keyword">new</span> WeatherData(<span class="number">33</span>, <span class="number">97</span>));
        <span class="comment">/**</span>
<span class="comment">         *  注意 : observer.ZhangObserver 当前订阅者已经存在，无需订阅</span>
<span class="comment">            注意：当前有 2 位订阅了该消息！</span>
<span class="comment">            WangObserver get data temp is : 33, pressure is : 97</span>
<span class="comment">            ZhangObserver get data temp is : 33, pressure is : 97</span>
<span class="comment">         */</span>
    }
}
</code></pre>
<p>实例：</p>
<ul>
<li><p>Android的广播机制。</p>
<p>  我们平时使用本地广播主要就是下面四个方法:</p>
<pre><code>LocalBroadcastManager localBroadcastManager=LocalBroadcastManager.getInstance(this);
localBroadcastManager.registerReceiver(BroadcastReceiver receiver, IntentFilter filter);
localBroadcastManager.unregisterReceiver(BroadcastReceiver receiver);
localBroadcastManager.sendBroadcast(Intent intent)
</code></pre></li>
</ul>
<p>调用registerReceiver方法注册广播，调用unregisterReceiver方法取消注册，之后直接使用<br>sendBroadcast发送广播，发送广播之后，注册的广播会收到对应的广播信息，这就是典型的观察者模式</p>
<ul>
<li><p>EventBus。<br>  观察者模式的三个典型方法它都具有，即注册，取消注册，发送事件：</p>
<pre><code>EventBus.getDefault().register(Object subscriber);
EventBus.getDefault().unregister(Object subscriber);
EventBus.getDefault().post(Object event);
</code></pre></li>
</ul>
<ul>
<li><p>RxJava。<br>  创建一个被观察者：</p>
<pre><code>Observable&lt;String&gt; myObservable = Observable.create(  
    new Observable.OnSubscribe&lt;String&gt;() {  
    @Override  
    public void call(Subscriber&lt;? super String&gt; sub) {  
        sub.onNext(&quot;Hello, world!&quot;);  
        sub.onCompleted();  
    }  
    }  
);  
</code></pre><p>  创建一个观察者，也就是订阅者：</p>
<pre><code>Subscriber&lt;String&gt; mySubscriber = new Subscriber&lt;String&gt;() {  
    @Override  
    public void onNext(String s) { System.out.println(s); }  

    @Override  
    public void onCompleted() { }  

    @Override  
    public void onError(Throwable e) { }  
};  
</code></pre><p>  观察者进行事件的订阅</p>
<pre><code>myObservable.subscribe(mySubscriber); 
</code></pre></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Builder模式]]></title>
      <url>/Builder%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="builder实例"><a href="#builder实例" class="headerlink" title="builder实例"></a>builder实例</h2><a id="more"></a>
<pre><code>public class Person {
    private String name;
    private String address;
    private int age;
    private int height;
    private int weight;

    //外部类提供一个私有构造函数供内部类调用，在该构造函数中完成成员变量的赋值，
    //取值为Builder对象中对应的值
    private Person(Builder builder){
        this.name = builder.name;
        this.address = builder.address;
        this.age = builder.age;
        this.height = builder.height;
        this.weight = builder.weight;
    }

    public String getName() {
      return name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public String getAddress() {
      return address;
    }

    public void setAddress(String address) {
      this.address = address;
    }

    public int getAge() {
      return age;
    }

    public void setAge(int age) {
      this.age = age;
    }

    public int getHeight() {
      return height;
    }

    public void setHeight(int height) {
      this.height = height;
    }

    public int getWeight() {
      return weight;
    }

    public void setWeight(int weight) {
      this.weight = weight;
    }

    @Override
    public String toString() {
    return &quot;Person{&quot; +
            &quot;name=&apos;&quot; + name + &apos;\&apos;&apos; +
            &quot;, address=&apos;&quot; + address + &apos;\&apos;&apos; +
            &quot;, age=&quot; + age +
            &quot;, height=&quot; + height +
            &quot;, weight=&quot; + weight +
            &apos;}&apos;;
    }

    //定义一个静态内部类Builder，内部的成员变量和外部类一样
    public static class Builder{

        private String name;
        private String address;
        private int age;
        private int height;
        private int weight;

        //Builder类通过一系列的方法用于成员变量的赋值，并返回当前对象本身（this）
        public Builder name(String name){
            this.name = name;
            return this;
        }

        public Builder address(String address){
            this.address = address;
            return this;
        }

        public Builder age(int age){
            this.age = age;
            return this;
        }

        public Builder height(int height){
            this.height = height;
            return this;
        }

        public Builder weight(int weight){
            this.weight = weight;
            return this;
        }

        //Builder类提供一个build方法或者create方法用于创建对应的外部类，
        //该方法内部调用了外部类的一个私有构造函数，该构造函数的参数就是内部类Builder
        public Person build(){
            return new Person(this);
        }
    }
}
</code></pre><p>使用实例</p>
<pre><code>public class MainActivity extends AppCompatActivity {
    private static final String TAG = &quot;MainActivity&quot;;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Person person1 = new Person.Builder().
                name(&quot;张三&quot;).
                address(&quot;河北&quot;).
                age(24).
                height(177).
                build();
        Log.e(TAG, person1.toString());

        Person person2 = new Person.Builder().
                name(&quot;刻有&quot;).
                address(&quot;拉萨&quot;).
                height(159).
                weight(65).
                build();
        Log.e(TAG, person2.toString() );

        Person person3 = new Person.Builder().
                name(&quot;利盟&quot;).
                address(&quot;陕西&quot;).
                age(24).
                height(188).
                weight(65).
                build();
        Log.e(TAG, person3.toString() );

        Person person4 = new Person.Builder().
                name(&quot;由张&quot;).
                address(&quot;广西&quot;).
                age(34).
                height(177).
                weight(55).
                build();
        Log.e(TAG, person4.toString() );
    }
}
</code></pre><h2 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h2><pre><code>在Builder类里定义了一份与Person类一模一样的变量，通过一系列的成员函数进行设置属性值，
但是返回值都是this，也就是都是Builder对象，最后提供了一个build函数用于创建Person对象，
返回的是Person对象，对应的构造函数在Person类中进行定义，也就是构造函数的入参是Builder对象，
然后依次对自己的成员变量进行赋值，对应的值都是Builder对象中的值。
</code></pre><h2 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h2><pre><code>创建过程变得清晰，对应的值属性一目了然，可读性大大增强。
</code></pre><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><pre><code>定义一个静态内部类Builder，内部的成员变量和外部类一样
Builder类通过一系列的方法用于成员变量的赋值，并返回当前对象本身（this）
Builder类提供一个build方法或者create方法用于创建对应的外部类，该方法内部调用了外部类的一个私有构造函数，该构造函数的参数就是内部类Builder
外部类提供一个私有构造函数供内部类调用，在该构造函数中完成成员变量的赋值，取值为Builder对象中对应的值
</code></pre>]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[原型模式]]></title>
      <url>/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考：<a href="http://blog.csdn.net/sbsujjbcy/article/details/49302717" target="_blank" rel="external">http://blog.csdn.net/sbsujjbcy/article/details/49302717</a></p>
</blockquote>
<h1 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h1><p>用原型模式的实例创建对象的实例，同过拷贝这些原型模式的实例创建新的对象。</p>
<a id="more"></a>
<h1 id="优点及适用场景"><a href="#优点及适用场景" class="headerlink" title="优点及适用场景"></a>优点及适用场景</h1><ol>
<li><p>一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用，即保护性拷贝。</p>
</li>
<li><p>使用原型模式创建对象比直接new一个对象在性能上要好的多，因为Object类的clone方法是一个本地方法，它直接操作内存中的二进制流，特别是复制大对象时，性能的差别非常明显。</p>
</li>
<li><p>使用原型模式的另一个好处是简化对象的创建，使得创建对象就像我们在编辑文档时的复制粘贴一样简单。</p>
</li>
<li><p>因为以上优点，所以在需要重复地创建相似对象时可以考虑使用原型模式。<br>比如需要在一个循环体内创建对象，假如对象创建过程比较复杂或者循环次数很多的话，使用原型模式不但可以简化创建过程，而且可以使系统的整体性能提高很多。</p>
</li>
</ol>
<h1 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h1><ol>
<li><p>使用原型模式复制对象不会调用类的构造方法。<br>因为对象的复制是通过调用Object类的clone方法来完成的，它直接在内存中复制数据，因此不会调用到类的构造方法。<br>不但构造方法中的代码不会执行，甚至连访问权限都对原型模式无效。<br>单例模式中，只要将构造方法的访问权限设置为private型，就可以实现单例。<br>但是clone方法直接无视构造方法的权限，所以，单例模式与原型模式是冲突的，在使用时要特别注意。</p>
</li>
<li><p>深拷贝与浅拷贝。<br>Object类的clone方法只会拷贝对象中的基本的数据类型，对于数组、容器对象、引用对象等都不会拷贝，这就是浅拷贝。<br>如果要实现深拷贝，必须将原型模式中的数组、容器对象、引用对象等另行拷贝<br>例如： prototype.list = (ArrayList) this.list.clone();</p>
</li>
</ol>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><pre><code>//实现“原型模式”第一步：实现Cloneable接口
public class Person implements Cloneable{

    private String name;
    private String address;
    private int age;
    private int height;
    private ArrayList&lt;String&gt; hobbies;

    public Person(String name, String address, int age, int height, ArrayList&lt;String&gt; hobbies) {
        this.name = name;
        this.address = address;
        this.age = age;
        this.height = height;
        this.hobbies = hobbies;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public int getHeight() {
        return height;
    }

    public void setHeight(int height) {
        this.height = height;
    }

    public ArrayList&lt;String&gt; getHobbies() {
        return hobbies;
    }

    public void setHobbies(ArrayList&lt;String&gt; hobbies) {
        this.hobbies = hobbies;
    }

    @Override
    public String toString() {
        return &quot;Person{&quot; +
                &quot;name=&apos;&quot; + name + &apos;\&apos;&apos; +
                &quot;, address=&apos;&quot; + address + &apos;\&apos;&apos; +
                &quot;, age=&quot; + age +
                &quot;, height=&quot; + height +
                &quot;, hobbies=&quot; + hobbies +
                &apos;}&apos;;
    }

    //实现“原型模式”第二步：重写clone（）
    @Override
    protected Object clone() throws CloneNotSupportedException {
        Person person = (Person) super.clone();
        person.name = this.name;
        person.address = this.address;
        person.age = this.age;
        person.height = this.height;
        //person.hobbies = this.hobbies;
        //此处使用使用深拷贝
        person.hobbies = (ArrayList&lt;String&gt;) this.hobbies.clone();
        return person;
    }
}
</code></pre><p>使用</p>
<pre><code>public class Prototype_DesignPattern {

    public static void main(String[] args){
        ArrayList&lt;String&gt; hobbies = new ArrayList&lt;String&gt;();
        hobbies.add(&quot;游泳&quot;);
        hobbies.add(&quot;足球&quot;);
        hobbies.add(&quot;自行车&quot;);


        Person person0 = new Person(&quot;张三&quot;,&quot;北京&quot;,24,177,hobbies);
        System.out.println(&quot;person0 is &quot; + person0.toString());

        //原型模式的使用
        try {

            Person person1 = (Person) person0.clone();
            person1.setName(&quot;王哇&quot;);
            hobbies.remove(&quot;足球&quot;);
            person1.setHobbies(hobbies);
            System.out.println(&quot;person1 is &quot; + person1.toString());

            Person person2 = (Person) person0.clone();
            person2.setAge(44);
            System.out.println(&quot;person2 is &quot; + person2.toString());

        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
        }

        System.out.println(&quot;person0 is &quot; + person0.toString());
    }
}
</code></pre>]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式与原则]]></title>
      <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%8E%9F%E5%88%99/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考：<a href="http://blog.csdn.net/self_study/article/details/51234377" target="_blank" rel="external">http://blog.csdn.net/self_study/article/details/51234377</a></p>
</blockquote>
<p><strong>Patterns：模式</strong><br><strong>PrinciPle：原则</strong></p>
<a id="more"></a>
<hr>
<ul>
<li>设计模式不会直接进入你的“代码”中，而是先进入你的“大脑”中。</li>
<li>在设计模式中，所谓的“实现一个接口”并“不一定”表示“写一个类，并利用implement关键词实现某个java接口”。而是泛指“实现某个超类型（可以是接口或是类）的某个方法”。</li>
</ul>
<hr>
<h1 id="设计模式的出现："><a href="#设计模式的出现：" class="headerlink" title="设计模式的出现："></a>设计模式的出现：</h1><p>设计模式是历经验证的OO设计经验，而模式不是被发明的，是被发现的。<br>设计是一门艺术，总是有许多可取舍的地方。<br>如果找不到合适的设计模式，采用一些设计原则也是相当不错的。<br>好的OO系统设计必须是：可维护、可扩充、可复用的。</p>
<h1 id="设计原则（６大）："><a href="#设计原则（６大）：" class="headerlink" title="设计原则（６大）："></a>设计原则（６大）：</h1><h2 id="1-OCP-开闭原则："><a href="#1-OCP-开闭原则：" class="headerlink" title="1. OCP - 开闭原则："></a>1. OCP - 开闭原则：</h2><p><strong>what</strong><br>　　编写代码应该：面向扩展开放，对修改关闭。<br>　　尽量不要通过修改现有代码来满足需求。<br><strong>How</strong><br>　　要利用扩展来适应变更。<br>　　接口 优于 抽象，抽象 优于 具体类。<br>　　针对接口编程，而不是针对实现。<br>　　多用组合，少用继承。</p>
<h2 id="2-SRP-单一职责原则："><a href="#2-SRP-单一职责原则：" class="headerlink" title="2. SRP - 单一职责原则："></a>2. SRP - 单一职责原则：</h2><p><strong>what</strong><br>　　一个类、一个方法只做一件事。<br><strong>how</strong><br>　　一个类应该只有一个引起变化的原因。避免潜在错误。</p>
<h2 id="3-LSP-里氏替换原则："><a href="#3-LSP-里氏替换原则：" class="headerlink" title="3. LSP - 里氏替换原则："></a>3. LSP - 里氏替换原则：</h2><p><strong>what</strong><br>　　所有引用基类的地方都能透明的使用子类的对象。<br><strong>how</strong><br>　　子类必须完全实现父类的方法。<br>　　子类可以拥有自己的属性和方法。<br>　　子类覆盖或实现父类方法时参数范围可以扩大。<br>　　子类覆盖或实现父类方法时返回值范围可以缩小。</p>
<h2 id="4-DIP-依赖倒置原则："><a href="#4-DIP-依赖倒置原则：" class="headerlink" title="4. DIP - 依赖倒置原则："></a>4. DIP - 依赖倒置原则：</h2><p><strong>what</strong><br>　　模块间的依赖应该通过抽象发生，具体类之间不应该有依赖关系。<br>　　接口或者抽象不依赖于实现类，否则就失去了抽象接口的意义。<br>　　实现  依赖于  接口或者抽象即：底层依赖于高层。<br><strong>how</strong><br>　　针对接口编程，而不是针对实现。<br>　　别打电话给我，我打电话给你。</p>
<h2 id="5-ISP-接口隔离原则："><a href="#5-ISP-接口隔离原则：" class="headerlink" title="5. ISP - 接口隔离原则："></a>5. ISP - 接口隔离原则：</h2><p><strong>what</strong><br>　　使用接口时应该建立单一的接口，不应该建立过于臃肿的接口。<br>　　接口应该 “专” 而非 “多”即：提供独立单一的接口。</p>
<h2 id="6-LKP-最少知识原则："><a href="#6-LKP-最少知识原则：" class="headerlink" title="6. LKP - 最少知识原则："></a>6. LKP - 最少知识原则：</h2><p><strong>what</strong><br>　　一个对象应该对 “其他对象”有最少的了解。<br><strong>how</strong><br>　　一个类对于另一个类而言，尽量减少“public”，对外只提供一个简洁的访问<br>    自己的方法。</p>
<hr>
<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="1-观察者模式"><a href="#1-观察者模式" class="headerlink" title="1. 观察者模式"></a>1. 观察者模式</h2><p>　　（有趣的事情发生了，可千万别错过！）定义了对象之间的一对多依赖，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。</p>
<h2 id="2-装饰者模式"><a href="#2-装饰者模式" class="headerlink" title="2. 装饰者模式"></a>2. 装饰者模式</h2><p>　　动态的将责任附加到对象上，若要扩展功能，装饰者模式提供了比“继承”更有弹性的替代方案。</p>
<h2 id="3-简单工厂模式"><a href="#3-简单工厂模式" class="headerlink" title="3. 简单工厂模式"></a>3. 简单工厂模式</h2><p>　　不是一个真正的模式，但是同“抽象工厂模式”和“工厂方法模式”一样，被用于封装创建对象的代码。</p>
<h2 id="4-抽象工厂模式"><a href="#4-抽象工厂模式" class="headerlink" title="4. 抽象工厂模式"></a>4. 抽象工厂模式</h2><p>　　提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。</p>
<h2 id="5-工厂方法模式"><a href="#5-工厂方法模式" class="headerlink" title="5. 工厂方法模式"></a>5. 工厂方法模式</h2><p>　　定义了一个创建对象的接口，但由子类决定实例化的类是哪一个。工厂方法模式让类把实例化推迟到子类。</p>
<h2 id="6-单例模式"><a href="#6-单例模式" class="headerlink" title="6. 单例模式"></a>6. 单例模式</h2><p>　　确保一个类只有一个实例，并提供一个全局的访问点。</p>
<h2 id="7-命令模式"><a href="#7-命令模式" class="headerlink" title="7. 命令模式"></a>7. 命令模式</h2><p>　　将“请求”封装成对象，以便使用不同的请求、队列、或者日志来参数化其他对象。命令模式也支持可撤销的操作。</p>
<h2 id="8-适配器模式"><a href="#8-适配器模式" class="headerlink" title="8. 适配器模式"></a>8. 适配器模式</h2><p>　　将一个类的接口转换为期望的另一个接口，让原本接口不兼容的类可以兼容。</p>
<h2 id="9-模板模式"><a href="#9-模板模式" class="headerlink" title="9. 模板模式"></a>9. 模板模式</h2><p>　　定义一个算法的骨架，将算法中的某些步骤延迟到子类中具体实现。使得子类在不改变算法结构的情况下，重新定义算法中的某些步骤。</p>
<h2 id="10-代理模式-保护"><a href="#10-代理模式-保护" class="headerlink" title="10. 代理模式 - 保护"></a>10. 代理模式 - 保护</h2><p>　　为另一个对象提供一个替身或占位符以访问这个对象，是基于访问权控制对对象的访问。</p>
<h2 id="11-代理模式-虚拟"><a href="#11-代理模式-虚拟" class="headerlink" title="11. 代理模式 - 虚拟"></a>11. 代理模式 - 虚拟</h2><p>　　作为创建开销大的对象的代表，虚拟代理经常是直到我们真正需要一个对象时才创建真正的对象。当对象在创建前和创建中时，由虚拟代理来扮演真正对象的替身，待真正对象创建后，虚拟代理就会将请求直接给真正的对象。</p>
<h2 id="12-代理模式-远程"><a href="#12-代理模式-远程" class="headerlink" title="12. 代理模式 - 远程"></a>12. 代理模式 - 远程</h2><p>　　好比远程对象的本地代表。</p>
<h2 id="13-迭代器模式"><a href="#13-迭代器模式" class="headerlink" title="13. 迭代器模式"></a>13. 迭代器模式</h2><p>　　提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露器内部的表示。</p>
<h2 id="14-组合模式"><a href="#14-组合模式" class="headerlink" title="14. 组合模式"></a>14. 组合模式</h2><p>　　允许你将对象组合成树形结构来表现“整体/部分”层次结构。组合模式能让客户以一致的方式处理个别对象及组合对象。</p>
<h2 id="15-外观模式"><a href="#15-外观模式" class="headerlink" title="15. 外观模式"></a>15. 外观模式</h2><p>　　提供了一个统一的接口，用来访问子系统中的一群接口。外观模式定义了一个高层接口，让子系统更容易使用。外观模式不仅简化一个接口，而且将客户以组件的一个子系统中解耦。</p>
<h2 id="16-策略模式"><a href="#16-策略模式" class="headerlink" title="16. 策略模式"></a>16. 策略模式</h2><p>　　定义了算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。</p>
<h2 id="17-状态模式"><a href="#17-状态模式" class="headerlink" title="17. 状态模式"></a>17. 状态模式</h2><p>　　允许对象在内部状态改变时改变它的行为，使对象看起来好像修改了它的类。</p>
<h1 id="使用设计模式的好处"><a href="#使用设计模式的好处" class="headerlink" title="使用设计模式的好处"></a>使用设计模式的好处</h1><ul>
<li>使用模式名称和其他人员进行开发或者开发团队沟通时，彼此之间交流的不只是模式名称，而是一整套模式背后所象征的质量、特性、约束。</li>
<li>思路清晰：他人能更清晰的了解你对设计的想法，团队之间对于设计的看法不会轻易产生误解。</li>
<li>宏观：使用设计模式谈论软件系统，能让你保持在“设计层次”，不会被纠缠于“对象”与“类”这种琐碎的实现细节上。 </li>
<li>大家对设计模式都有深入的了解，更易提升自身水平。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[单例模式]]></title>
      <url>/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考：<a href="http://blog.csdn.net/tanyujing/article/details/14160941" target="_blank" rel="external">http://blog.csdn.net/tanyujing/article/details/14160941</a><br>         <a href="http://blog.csdn.net/sbsujjbcy/article/details/49147839" target="_blank" rel="external">http://blog.csdn.net/sbsujjbcy/article/details/49147839</a></p>
</blockquote>
<p>是在内存中维护唯一对象，优点如下：</p>
<pre><code>1.对于那些比较耗内存的类，只实例化一次可以大大提高性能，尤其是在移动开发中。
2.保持程序运行的时候该中始终只有一个实例存在内存中
</code></pre><a id="more"></a>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><pre><code>public class Singleton{
    private static volatile Singleton instance == null;

    private Singleton(){
    }

    public static Singleton getInstance(){
        if(instance == null){
            synchronized(Singleton.class){
                if(instance == null){
                    instance == new Singleton();
                }
            }
        }
        return instance;
    }
}
</code></pre><h1 id="关于volatile"><a href="#关于volatile" class="headerlink" title="关于volatile"></a>关于volatile</h1><blockquote>
<p>参考：<a href="http://www.ibm.com/developerworks/cn/java/j-jtp06197.html" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/java/j-jtp06197.html</a></p>
</blockquote>
<p>概述：<br>        Java 语言中的 volatile 变量可以被看作是一种 “程度较轻的 synchronized”；<br>        与 synchronized 块相比，volatile 变量所需的编码较少，并且运行时开销也较少，<br>        但是它所能实现的功能也仅是 synchronized 的一部分。</p>
<h1 id="单例模式使用："><a href="#单例模式使用：" class="headerlink" title="单例模式使用："></a>单例模式使用：</h1><ol>
<li>必须防止外部可以调用构造函数进行实例化，因此构造函数必须私有化。</li>
<li>必须定义一个静态函数获得该单例</li>
<li>单例使用volatile修饰</li>
<li>使用synchronized 进行同步处理，并且双重判断是否为null，<br>在synchronized (Singleton.class)里面又进行了是否为null的判断，<br>这是因为一个线程进入了该代码，如果另一个线程在等待，这时候前一个线程创建<br>了一个实例出来完毕后，另一个线程获得锁进入该同步代码，实例已经存在，没必<br>要再次创建，因此这个判断是否是null还是必须的。</li>
</ol>
<h1 id="单例的并发测试：见参考。"><a href="#单例的并发测试：见参考。" class="headerlink" title="单例的并发测试：见参考。"></a>单例的并发测试：见参考。</h1><h1 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h1><pre><code>public class ActivityManager {

    private static volatile ActivityManager instance;
    private Stack&lt;Activity&gt; mActivityStack = new Stack&lt;Activity&gt;();

    private ActivityManager(){

    }

    public static ActivityManager getInstance(){
    if (instance == null) {
    synchronized (ActivityManager.class) {
        if (instance == null) {
            instance = new ActivityManager();
        }
    }
    return instance;
    }

    public void addActicity(Activity act){
    mActivityStack.push(act);
    }

    public void removeActivity(Activity act){
    mActivityStack.remove(act);
    }

    public void killMyProcess(){
    int nCount = mActivityStack.size();
    for (int i = nCount - 1; i &gt;= 0; i--) {
        Activity activity = mActivityStack.get(i);
        activity.finish();
    }

    mActivityStack.clear();
    android.os.Process.killProcess(android.os.Process.myPid());
    }
}
</code></pre>]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 桌面使用命令]]></title>
      <url>/Ubuntu%20%E6%A1%8C%E9%9D%A2%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="桌面环境："><a href="#桌面环境：" class="headerlink" title="桌面环境："></a>桌面环境：</h2><pre><code>super                ：    长按显示启动器快捷信息
super + 数字     ：    启动指定的应用
super + D             ：    显示桌面
super + w         :      所有窗口平铺
super + s         :      显示所有的工作区
super + t         :          打开回收站

alt + prt          ：    对窗口截图
ctrl + h           ：    显示隐藏文件.h开头
shift + prt        ：    选取截图
shift + ctrl + T  :          桌面打开终端（在同一窗口下，新的标签页）
ctrl + w              :          关闭应用

super + c         :          搜索图片
super + v         :          搜索视屏
super + a        :          搜索应用
super + f        :          搜索文件和文件夹
super + m        :           搜索音乐
</code></pre><a id="more"></a>
<h2 id="终端运行命令-简洁版"><a href="#终端运行命令-简洁版" class="headerlink" title="终端运行命令(简洁版)"></a>终端运行命令(简洁版)</h2><blockquote>
<p>2016年12月19日10:40:37</p>
</blockquote>
<h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><pre><code>更新        apt-get update
安装        apt-get install 软件名称
卸载        apt-get remove 软件名称 
</code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><pre><code>清屏        clear
vim编辑    vim（vim filename）
</code></pre><h3 id="组"><a href="#组" class="headerlink" title="组"></a>组</h3><pre><code>添加组        groupadd 组名
删除组        groupdel 组名
更改组信息    groupmod 组名
显示当前用户所属组 groups
</code></pre><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><pre><code>查询历史登录         last [用户名]
切换用户               su 用户名
退出切换的用户   exit
相关文件               etc/group,  etc/passwd,  etc/shadow
查看当前用户         w/who
添加用户               useradd  用户名 
删除用户               suerdel  用户名
更改用户信息         usermod  
添加用户到组中    
                        useradd -G 组名 用户名 （G:附加组，用户将创建一个与自己同名的组）
                         useradd -g 组名 用户名 （g：表示用户所加入的主组）
用户修改密码         passwd    用户名
查询id值               id
将用户添加至已存在的组中    usermod -a -G 组名 用户名
更改用户主要所在组        usermod -g 组名 用户名 
</code></pre><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><pre><code>pwd         查看当前目录    
cat         （从第一行开始显示）查看文件内容    
cat [-nTAEv]
tac         （从最后一行开始显示）
nl          （显示时输出行号）
nl [-b{ a, t}n{ln,rn,rz}w ] 
more        （分页显示）
space        向下翻一页
enter         向下翻一行
q              立即退出
:f              立刻显示当前文件名及当前行数
/字符串      在当前显示内容中，向下查询【字符串】
less（同more，可以向前翻页）
/字符串      向上查询
？字符串    向下查询
n            重复前一个查询
N            反向重复前一个查询
q            离开
pagedown 向下翻页
pageuP     向上翻页
head      （仅显示头几行）
head [-n number]  文件
tail（仅显示尾几行）
tail [-n number] 文件
od  （以2进制的方式读取档案）
</code></pre><h3 id="目录与文件查看-ls-aAdfFhilrRSt-目录名-（可以使用×作为匹配符）"><a href="#目录与文件查看-ls-aAdfFhilrRSt-目录名-（可以使用×作为匹配符）" class="headerlink" title="目录与文件查看 ls [-aAdfFhilrRSt] 目录名 （可以使用×作为匹配符）"></a>目录与文件查看 ls [-aAdfFhilrRSt] 目录名 （可以使用×作为匹配符）</h3><pre><code>ls [--color={none,auto,always}] 目录名
ls [--full-time{mtime,ctime,atime}] 目录名
ll == ls -l
ls -a （显示隐藏文件及目录）
pwd -P （返回真实目录，非连接目录）
</code></pre><h3 id="路径切换-cd-文件路径"><a href="#路径切换-cd-文件路径" class="headerlink" title="路径切换        cd 文件路径"></a>路径切换        cd 文件路径</h3><pre><code>cd -  (返回上一个工作目录)
cd ~ （home目录）
cd .. (返回上层文件)
cd ../目录 （同一层目录中前往其他目录）
cd ~用户名 （进入此用户的home目录）
</code></pre><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><pre><code>vim 文件名   （方式1）
touch 文件名(空)     （方式2）
echo “输入内容” &gt; 文件名.后缀    （方式3）
</code></pre><h3 id="修改文件时间-创建文件"><a href="#修改文件时间-创建文件" class="headerlink" title="修改文件时间+创建文件"></a>修改文件时间+创建文件</h3><pre><code>touch(空)
</code></pre><h3 id="时间分类"><a href="#时间分类" class="headerlink" title="时间分类"></a>时间分类</h3><pre><code>mtime:内容变更时间； ctime：状态时间； atime：接收时间
touch [-mcadt]
</code></pre><h3 id="创建目录-mkdir"><a href="#创建目录-mkdir" class="headerlink" title="创建目录    mkdir"></a>创建目录    mkdir</h3><pre><code>mkdir [-mp] 目录名 （m：权限，p：自动建立多层目录） 
</code></pre><h3 id="删除目录-rmdir"><a href="#删除目录-rmdir" class="headerlink" title="删除目录    rmdir"></a>删除目录    rmdir</h3><pre><code>rmdir [-p] 目录名 （p：当前目录包含多个目录，删除时连同自身删除）仅能删除空目录
rm -rf 目录名 （删除非空目录） 慎用
</code></pre><h3 id="更改组-chgrp"><a href="#更改组-chgrp" class="headerlink" title="更改组    chgrp"></a>更改组    chgrp</h3><pre><code>chgrp [-R] 组名 文件 （R：文件夹递归）
</code></pre><h3 id="更改拥有者-chown"><a href="#更改拥有者-chown" class="headerlink" title="更改拥有者    chown"></a>更改拥有者    chown</h3><pre><code>chown [-R] 用户名 文件
chown [-R] 用户名：组名 文件
</code></pre><h3 id="获取文件名-basename-目录"><a href="#获取文件名-basename-目录" class="headerlink" title="获取文件名    basename 目录"></a>获取文件名    basename 目录</h3><h3 id="获取目录-dirname-目录"><a href="#获取目录-dirname-目录" class="headerlink" title="获取目录    dirname 目录"></a>获取目录    dirname 目录</h3><h3 id="文件预设权限-umask"><a href="#文件预设权限-umask" class="headerlink" title="文件预设权限    umask"></a>文件预设权限    umask</h3><pre><code>umask [-S] (查看权限预设) 022:表示被‘拿掉的权限’,即：u,g-w,o-w
umask 002 （设置权限）
</code></pre><h3 id="权限的分类"><a href="#权限的分类" class="headerlink" title="权限的分类"></a>权限的分类</h3><pre><code>基本属性 + 隐藏属性 + 特别S属性
</code></pre><h3 id="更改权限属性-chmod"><a href="#更改权限属性-chmod" class="headerlink" title="更改权限属性    chmod"></a>更改权限属性    chmod</h3><pre><code>chmod [-R] 777 文件名
chmod [-R] u=(+/-)rwx,g=(+/-)rwx,o=(+/-)rwx 文件名
</code></pre><h3 id="设定隐藏属性-chattr"><a href="#设定隐藏属性-chattr" class="headerlink" title="设定隐藏属性    chattr"></a>设定隐藏属性    chattr</h3><pre><code>chattr [+-=][ASacdistu] 文件或目录名 (最常用a，i)
chattr +a：表示在原有参数的基础上，追加参数-append，表示只能向文件中添加数据，不能删除,多用于日志。
chattr +i：表示文件不能被删除，改名，设定链接关系，同时不能写入，追加内容。
</code></pre><h3 id="显示隐藏属性-lsattr"><a href="#显示隐藏属性-lsattr" class="headerlink" title="显示隐藏属性    lsattr"></a>显示隐藏属性    lsattr</h3><pre><code>lsattr [-aR] 文件或目录名 
</code></pre><h3 id="SUID-SGID-SBIT-设定"><a href="#SUID-SGID-SBIT-设定" class="headerlink" title="SUID,SGID,SBIT    设定"></a>SUID,SGID,SBIT    设定</h3><pre><code>4：SUID（使用在非目录上）
2：SGID（目录与文件均可）
1：SBIT（使用在非文件上）
e.g. chmod 4755 文件名 结果为：-rwsr-xr-x
</code></pre><h3 id="文件的类型-file"><a href="#文件的类型-file" class="headerlink" title="文件的类型    file"></a>文件的类型    file</h3><pre><code>file 文件路径
</code></pre><h3 id="文件查询"><a href="#文件查询" class="headerlink" title="文件查询"></a>文件查询</h3><pre><code>whereis/locate（通过数据库查询,所以在查询前最好更新数据书库，updatedb文件）
which
</code></pre><p>find不推荐使用（伤硬盘：原理是在硬盘上查找，耗时）<br>使用×匹配文件</p>
<pre><code>which [-a] 文件
whereis [-bmsu] 文件或目录
locate 文件名
</code></pre><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><pre><code>cp 源文件路径 新文件路径 （复制，建立快捷方式，新旧比对，复制目录）
cp [-adfilprsu]
cp 源1，源2…… 目录
</code></pre><h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><pre><code>mv （移动，更名 ）
mv [-fiu]
mv 原文件名 新文件名
mv 文件1，文件2 目录名
</code></pre><h3 id="删除-rm"><a href="#删除-rm" class="headerlink" title="删除        rm"></a>删除        rm</h3><pre><code>rm [-rfi] 目录或文件 (若文件名中含有-，则用‘./’或者‘空格--空格’)
</code></pre><blockquote>
<p>更新 2017年02月04日 星期六 18时34分42秒  查看磁盘空间大小命令</p>
</blockquote>
<h3 id="主要命令："><a href="#主要命令：" class="headerlink" title="主要命令："></a>主要命令：</h3><pre><code>df
</code></pre><h3 id="详细命令："><a href="#详细命令：" class="headerlink" title="详细命令："></a>详细命令：</h3><pre><code>df -hl   : 查看磁盘剩余空间（效果同 df -H）
df -h    : 查看每个根路径的分区大小
du -sh   : [目录名] 返回该目录的大小
du -sm   : [文件夹] 返回该文件夹总M数
fdisk -l : 查看硬盘分区
</code></pre><h3 id="查看ip地址"><a href="#查看ip地址" class="headerlink" title="查看ip地址"></a>查看ip地址</h3><pre><code>ifconfig 
</code></pre><h3 id="查看端口号"><a href="#查看端口号" class="headerlink" title="查看端口号"></a>查看端口号</h3><p>主要命令 ：</p>
<pre><code>netstat
</code></pre><p>查看所有的服务端口:</p>
<pre><code>netstat -a
</code></pre><p>查看所有的服务端口，显示pid号</p>
<pre><code>netstat -ap
</code></pre><p>查看某一（**）端口，则可以结合grep命令：</p>
<pre><code>netstat -ap | grep **
</code></pre><p>如查看**端口，：</p>
<pre><code>lsof -i:**
</code></pre><p>若要停止使用这个端口的程序，使用kill +对应的pid</p>
<pre><code>kill  pid
</code></pre><p>还有一个比较好用的命令，查看**端口：</p>
<pre><code>netstat -lnp | grep ** 
</code></pre><p>查看端口号和运行程序：</p>
<pre><code>netstat -atunp | more
</code></pre><p>查看进程所用端口：</p>
<pre><code>netstat -tlnp|grep **    
</code></pre><h3 id="卸载已经安装的软件"><a href="#卸载已经安装的软件" class="headerlink" title="卸载已经安装的软件"></a>卸载已经安装的软件</h3><p>命令：</p>
<pre><code>dpkg -l | grep appName
apt-get remove appName
</code></pre><h3 id="更新grep命令"><a href="#更新grep命令" class="headerlink" title="更新grep命令"></a>更新grep命令</h3><blockquote>
<p>参考：<a href="http://www.lai18.com/content/24612942.html" target="_blank" rel="external">http://www.lai18.com/content/24612942.html</a></p>
</blockquote>
<p>命令：</p>
<pre><code>是linux中的搜索工具。可以用在搜索条件“过滤”。
</code></pre><p>用法：</p>
<pre><code>grep [选项] PATTERN 
</code></pre><p>参数说明：</p>
<pre><code>[options]
-c：只输出匹配行的计数。 
-i：不区分大 小写(只适用于单字符)。
-h：查询多文件时不显示文件名。
-l：查询多文件时只输出包含匹配字符的文件名。
-n：显示匹配行及行号。
-s：不显示不存在或无匹配文本的错误信息。
-v：排除，不显示过滤的字符串的行；显示不包含匹配文本的所有行。
-E ：过滤多个字符串。
-o ：输出精确匹配的字符而不是默认的整行。
-f ：指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式。
</code></pre><p> Context control：</p>
<pre><code>-B 除了显示匹配的一行之外，并显示该行之前的num行
-A 除了显示匹配的一行之外，并显示该行之后的num行
-C 除了显示匹配的一行之外，并显示该行之前后各num行
grep &quot;String&quot; -B 10 test.txt #显示匹配的String行和String的前10行。
</code></pre><p>pattern正则表达式主要参数：</p>
<pre><code>\：忽略正则表达式中特殊字符的原有含义。
^：匹配正则表达式的开始行。
$: 匹配正则表达式的结束行。
\&lt;：从匹配正则表达 式的行开始。
\&gt;：到匹配正则表达式的行结束。
[ ]：单个字符，如 [Gg]rep 匹配Grep和grep。
[ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求。
[^]：匹配一个不在指定范围内的字符，如：&apos;[^A-FH-Z]rep&apos;匹配不包含A-F和H-Z的一个字母开头，紧跟rep的行。
x\{m\}：重复字符x，m次，如：&apos;0\{5\}&apos;匹配包含5个0的行。
x\{m,\}：重复字符x,至少m次，如：&apos;0\{5,\}&apos;匹配至少有5个0的行。
x\{m,n\}：重复字符x，至少m次，不多于n次，如：&apos;0\{5,10\}&apos;匹配5 -- 10个0的行。 
.：所有的单个字符。
*：有字符，长度可以为0。
</code></pre>]]></content>
      
        <categories>
            
            <category> 系统 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 命令 </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux vim 命令]]></title>
      <url>/Linux%20vim%20%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="vim命令"><a href="#vim命令" class="headerlink" title="vim命令"></a>vim命令</h1><h2 id="vi有3个模式：插入模式、命令模式、低行模式。"><a href="#vi有3个模式：插入模式、命令模式、低行模式。" class="headerlink" title="vi有3个模式：插入模式、命令模式、低行模式。"></a>vi有3个模式：插入模式、命令模式、低行模式。</h2><pre><code>插入模式：在此模式下可以输入字符，按ESC将回到命令模式。
命令模式：可以移动光标、删除字符等。
低行模式：可以保存文件、退出vi、设置vi、查找等功能(低行模式也可以看作是命令模式里的)。
</code></pre><a id="more"></a>
<h2 id="打开文件、保存、关闭文件-vi命令模式下使用"><a href="#打开文件、保存、关闭文件-vi命令模式下使用" class="headerlink" title="打开文件、保存、关闭文件(vi命令模式下使用)"></a>打开文件、保存、关闭文件(vi命令模式下使用)</h2><pre><code>vi filename     //打开filename文件,文件名称可以不存在
:w           //保存文件
:w filename     //保存至filename文件
:q              //退出编辑器，如果文件已修改请使用下面的命令
:q!            //退出编辑器，且不保存
:wq             //退出编辑器，且保存文件    
:wq!        //强制保存内容退出
</code></pre><h2 id="3-插入文本或行-vi命令模式下使用，执行下面命令后将进入插入模式，按ESC键可退出插入模式"><a href="#3-插入文本或行-vi命令模式下使用，执行下面命令后将进入插入模式，按ESC键可退出插入模式" class="headerlink" title="3.插入文本或行(vi命令模式下使用，执行下面命令后将进入插入模式，按ESC键可退出插入模式)"></a>3.插入文本或行(vi命令模式下使用，执行下面命令后将进入插入模式，按ESC键可退出插入模式)</h2><pre><code>a              //在当前光标位置的右边添加文本
A             //在当前行的末尾位置添加文本
i           //在当前光标位置的左边添加文本
I              //在当前行的开始处添加文本(非空字符的行首)
O             //在当前行的上面新建一行
o             //在当前行的下面新建一行
R            //替换(覆盖)当前光标位置及后面的若干文本
J            //合并光标所在行及下一行为一行(依然在命令模式)        
</code></pre><h2 id="移动光标-vi命令模式下使用"><a href="#移动光标-vi命令模式下使用" class="headerlink" title="移动光标(vi命令模式下使用)"></a>移动光标(vi命令模式下使用)</h2><pre><code>&lt;1&gt;、使用上下左右方向键
&lt;2&gt;、命令模式下：
h          向左、l      向右、j              向下 、k            向上。
Backspace  向左、空格键 向右、Enter  移动到下一行首、-  移动到上一行首。
&lt;3&gt;  $        跳至行末，0        跳至行首
</code></pre><h2 id="删除、恢复字符或行-vi命令模式下使用"><a href="#删除、恢复字符或行-vi命令模式下使用" class="headerlink" title="删除、恢复字符或行(vi命令模式下使用)"></a>删除、恢复字符或行(vi命令模式下使用)</h2><pre><code>x             //删除当前字符
nx             //删除从光标开始的n个字符
dd          //删除当前行
ndd           //向下删除当前行在内的n行
d&lt;enter&gt;    //删除光标所在行及下一行(共计删除2行)
u           //撤销上一步操作
U              //撤销对当前行的所有操作        
</code></pre><h2 id="搜索-vi命令模式下使用"><a href="#搜索-vi命令模式下使用" class="headerlink" title="搜索(vi命令模式下使用)"></a>搜索(vi命令模式下使用)</h2><pre><code>/vpser         //向光标下搜索vpser字符串
?vpser         //向光标上搜索vpser字符串
n               //向下搜索前一个搜素动作
N             //向上搜索前一个搜索动作        
</code></pre><h2 id="跳至指定行-vi命令模式下使用"><a href="#跳至指定行-vi命令模式下使用" class="headerlink" title="跳至指定行(vi命令模式下使用)"></a>跳至指定行(vi命令模式下使用)</h2><pre><code>n            //跳n行
n+            //向下跳n行
n-             //向上跳n行
G               //跳至文件的底部        
gg               //跳至文件顶部        
</code></pre><h2 id="设置行号-vi命令模式下使用"><a href="#设置行号-vi命令模式下使用" class="headerlink" title="设置行号(vi命令模式下使用)"></a>设置行号(vi命令模式下使用)</h2><pre><code>:set  nu         //显示行号
:set nonu        //取消显示行号        
</code></pre><h2 id="复制、粘贴-vi命令模式下使用"><a href="#复制、粘贴-vi命令模式下使用" class="headerlink" title="复制、粘贴(vi命令模式下使用)"></a>复制、粘贴(vi命令模式下使用)</h2><pre><code>yy            //将当前行复制到缓存区，也可以用 &quot;ayy 复制，&quot;a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。
nyy           //将当前行向下n行复制到缓冲区，也可以用 &quot;anyy 复制，&quot;a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。
yw            //复制从光标开始到词尾的字符。
nyw           //复制从光标开始的n个单词。
y^          //复制从光标到行首的内容。  
y$          //复制从光标到行尾的内容。
p           //粘贴剪切板里的内容在光标后，如果使用了前面的自定义缓冲区，建议使用&quot;ap 进行粘贴。
P            //粘贴剪切板里的内容在光标前，如果使用了前面的自定义缓冲区，建议使用&quot;aP 进行粘贴。        
</code></pre><h2 id="替换-vi命令模式下使用"><a href="#替换-vi命令模式下使用" class="headerlink" title="替换(vi命令模式下使用)"></a>替换(vi命令模式下使用)</h2><pre><code>:s/old/new          //用new替换行中首次出现的old
:s/old/new/g        //用new替换行中所有的old
:n,m s/old/new/g    //用new替换从n到m行里所有的old
:%s/old/new/g       //用new替换当前文件里所有的old        
</code></pre><h2 id="编辑其他文件"><a href="#编辑其他文件" class="headerlink" title="编辑其他文件"></a>编辑其他文件</h2><pre><code>:e otherfilename        //编辑文件名为otherfilename的文件。
</code></pre><h2 id="修改文件格式"><a href="#修改文件格式" class="headerlink" title="修改文件格式"></a>修改文件格式</h2><pre><code>:set fileformat=unix    //将文件修改为unix格式，如win下面的文本文件在linux下会出现^M。
</code></pre><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><pre><code>当如果不知道自己处在什么模式时可以按:    2次Esc键
即可回到命令模式，会有最后提醒一点：     注意大小写！！！
</code></pre><hr>
<h1 id="Linux中vim编辑注意事项"><a href="#Linux中vim编辑注意事项" class="headerlink" title="Linux中vim编辑注意事项"></a>Linux中vim编辑注意事项</h1><blockquote>
<p>2016年12月17日21:47:04</p>
</blockquote>
<pre><code>Ctrl s：    暂停该终端
Ctrl q：    让终端继续运行
Ctrl c：    中止当前正在执行的程序。
Ctrl d：    相当于exit命令，退出当前会话。
Ctrl z：    将当前运行的程序放到后台运行。与运行时加&amp;类似。
Tab键自动补全命令。
</code></pre><hr>
<h1 id="Linux中Terminal快捷键的使用"><a href="#Linux中Terminal快捷键的使用" class="headerlink" title="Linux中Terminal快捷键的使用"></a>Linux中Terminal快捷键的使用</h1><blockquote>
<p>2017年 01月 09日 星期一 22:21:36 CST</p>
</blockquote>
<h2 id="文件："><a href="#文件：" class="headerlink" title="文件："></a>文件：</h2><pre><code>shift + ctrl + T：    新标签页打开新的终端
shift + ctrl + N：    新的窗口打开新的终端
alt + w            :    关闭终端
alt + Q           :    关闭全部终端
</code></pre><h2 id="编辑："><a href="#编辑：" class="headerlink" title="编辑："></a>编辑：</h2><pre><code>ctrl + C    ：      复制
ctrl + V       ：      粘贴
</code></pre><h2 id="查看："><a href="#查看：" class="headerlink" title="查看："></a>查看：</h2><pre><code>F11            ：      全屏
ctrl + =       :       放大
ctrl + -         ：      缩小
ctrl + 0      ：     正常大小
</code></pre><h2 id="查找："><a href="#查找：" class="headerlink" title="查找："></a>查找：</h2><pre><code>ctrl + F        ：    查找
ctrl + G     ：      查找下一个
ctrl + H        ：      查找上一个
ctrl + J        ：      清除高亮查找
</code></pre><h2 id="标签页："><a href="#标签页：" class="headerlink" title="标签页："></a>标签页：</h2><pre><code>ctrl + pgup       :    向上翻页
ctrl + pgdn       :       向下翻页
shift + ctrl + pgup ：    标签内容移动之左侧标签
shift + ctrl + pgdn ：    标签内容移动之右侧标签
alt +数字        ：    切换至指定的标签页    
</code></pre>]]></content>
      
        <categories>
            
            <category> 系统 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 命令 </tag>
            
            <tag> vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu16.04安装记录]]></title>
      <url>/Ubuntu16.04%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>以下省略“sudo”命令表示是在root权限下运行的</p>
</blockquote>
<h2 id="ubuntu16-04使用参考网址"><a href="#ubuntu16-04使用参考网址" class="headerlink" title="ubuntu16.04使用参考网址"></a>ubuntu16.04使用参考网址</h2><blockquote>
<p> Linux使用设置 &gt;&gt;网页<br>    <a href="http://m.blog.csdn.net/article/details?id=51049513" target="_blank" rel="external">http://m.blog.csdn.net/article/details?id=51049513</a><br>Linux命令大全 &gt;&gt;网页<br>    <a href="http://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="external">http://www.runoob.com/linux/linux-command-manual.html</a><br>Linux命令大全–支持在线搜寻<br>    <a href="http://man.linuxde.net/" target="_blank" rel="external">http://man.linuxde.net/</a><br>文档手册中心 –ChinaUnix &gt;&gt;网页<br>    <a href="http://man.chinaunix.net/" target="_blank" rel="external">http://man.chinaunix.net/</a><br>Linux Kernel –ChinaUnix &gt;&gt;网页<br>    <a href="http://man.chinaunix.net/tech/lyceum/linuxK/tlk.html" target="_blank" rel="external">http://man.chinaunix.net/tech/lyceum/linuxK/tlk.html</a><br>Linux Git使用 &gt;&gt;网页<br>    <a href="http://v.youku.com/v_show/id_XNzgwOTk0NDQw.html?f=22842023&amp;spm=a2hzp.8244740.0.0&amp;from=y1.7-1.1" target="_blank" rel="external">http://v.youku.com/v_show/id_XNzgwOTk0NDQw.html?f=22842023&amp;spm=a2hzp.8244740.0.0&amp;from=y1.7-1.1</a><br>以下省略“sudo”命令表示是在root权限下运行的</p>
</blockquote>
<a id="more"></a>
<h2 id="root登录"><a href="#root登录" class="headerlink" title="root登录"></a>root登录</h2><ol>
<li><p>先设定一个root的密码：</p>
<pre><code>sudo passwd root
</code></pre></li>
<li><p>root 登陆：</p>
<pre><code>su root
cp -p /etc/lightdm/lightdm.conf /etc/lightdm/lightdm.conf.bak
vi /etc/lightdm/lightdm.conf
</code></pre></li>
<li><p>在lightdm.conf最后增加一行：</p>
<pre><code>greeter-show-manual-login=true
</code></pre></li>
<li>重启后，即可用root登入。</li>
</ol>
<h2 id="系统没有声音"><a href="#系统没有声音" class="headerlink" title="系统没有声音"></a>系统没有声音</h2><p>Ubuntu在root用户下，为了安全考虑默认关闭系统的声音。</p>
<ol>
<li><p>将root加到pulse和pulse-access组：</p>
<pre><code>usermod -a -G pulse-access root
gpasswd -a root pulse
gpasswd -a root pulse-access
</code></pre></li>
<li><p>编辑/etc/default/pulseaudio文件</p>
<pre><code>cp -p /etc/default/pulseaudio/etc/default/pulseaudio.bak
vim /etc/default/pulseaudio
</code></pre></li>
<li><p>修改以下两处</p>
<pre><code>PULSEAUDIO_SYSTEM_START=1
DISALLOW_MODULE_LOADING=0
</code></pre></li>
<li>改为1和0，表示允许运行在system环境，允许动态加载模块。</li>
<li>重启计算机</li>
</ol>
<h2 id="有声音但在“系统设置”中无法调节声音："><a href="#有声音但在“系统设置”中无法调节声音：" class="headerlink" title="有声音但在“系统设置”中无法调节声音："></a>有声音但在“系统设置”中无法调节声音：</h2><ol>
<li><p>运行：</p>
<pre><code>gedit /root/.profile
</code></pre></li>
<li><p>在文件的最后添加：</p>
<pre><code>pulseaudio --start --log-target=syslog
</code></pre></li>
<li><p>当在“系统设置”中出现“伪声音”时，且无法实际调节声音时：</p>
<pre><code>apt install pavucontrol
pavucontrol
</code></pre></li>
</ol>
<h2 id="系统正常耳机没有声音"><a href="#系统正常耳机没有声音" class="headerlink" title="系统正常耳机没有声音"></a>系统正常耳机没有声音</h2><blockquote>
<p>参考网址：<a href="http://www.linuxdiyf.com/linux/25529.html" target="_blank" rel="external">http://www.linuxdiyf.com/linux/25529.html</a></p>
</blockquote>
<ol>
<li><p>终端运行</p>
<pre><code>alsamixer
</code></pre></li>
<li>按M键把关闭的都大开（关闭的都显示的是MM），然后调节到合适的位置，白色为宜</li>
<li>最后一项Independ显示为ON表示耳机和音箱只能有一个有声音，按M键关闭则表示耳机和音箱可以同时有声音 （–未进行测试–）</li>
<li><p>若耳机还是没声音，可是试着运行</p>
<pre><code>gedit /etc/modprobe.d/alsa-base.conf
</code></pre></li>
<li><p>在最后一行加入</p>
<pre><code>#enable headphoneoptions snd-hda-intel power_save=10 power_save_controller=N model=6stack-dig
</code></pre></li>
<li><p>然后运行</p>
<pre><code>apt-get remove alsa-base
</code></pre></li>
<li><p>然后重启</p>
<pre><code>shutdown -r now
</code></pre></li>
<li><p>重启后运行</p>
<pre><code>apt-get install alsa-base
</code></pre></li>
</ol>
<h2 id="ubuntu16-04系统字体变成方框问题"><a href="#ubuntu16-04系统字体变成方框问题" class="headerlink" title="ubuntu16.04系统字体变成方框问题"></a>ubuntu16.04系统字体变成方框问题</h2><p>进入到字体的目录下/usr/share/fonts/，输入下面的命令：</p>
<pre><code>cd /usr/share/fonts/
</code></pre><h2 id="制作ubuntu16-04app启动图标"><a href="#制作ubuntu16-04app启动图标" class="headerlink" title="制作ubuntu16.04app启动图标"></a>制作ubuntu16.04app启动图标</h2><blockquote>
<p>2016年12月15日15:40:42</p>
</blockquote>
<ol>
<li><p>在文件所在目录下新建一个Studio.desktop文件,并用gedit打开,然后将下面的内容复制进去并修改.</p>
<pre><code>[Desktop Entry]
Name=应用的名称
Type=Application（不改）
Icon=你的AndroidStudio解压目录的绝对路径/android-studio/bin/studio.png
Exec=sh 你的AndroidStudio解压目录的绝对路径/android-studio/bin/studio.sh
</code></pre></li>
<li><p>保存退出(注意：每一行后面都不能有空格,否则失败)</p>
</li>
<li>右键该文件–&gt;属性–&gt;权限–&gt;选择“允许作为程序执行文件”,此时发现图标变了,双击打开App</li>
</ol>
<h2 id="安装ADB"><a href="#安装ADB" class="headerlink" title="安装ADB"></a>安装ADB</h2><blockquote>
<p>2017年01月30日 星期一 15时57分56秒<br> 参考：<br>    <a href="http://www.itdadao.com/articles/c15a299707p0.html" target="_blank" rel="external">http://www.itdadao.com/articles/c15a299707p0.html</a><br>    <a href="http://www.jianshu.com/p/8768e5bccfa8" target="_blank" rel="external">http://www.jianshu.com/p/8768e5bccfa8</a></p>
</blockquote>
<ol>
<li><p>若apt-get install 失败：</p>
<pre><code>sudo add-apt-repository  ppa:phablet-team/tools (原始ppa更好)
sudo apt-get update
sudo apt-get install android-tools-adb
</code></pre></li>
<li><p>出现异常：</p>
<pre><code>E: 无法获得锁 /var/lib/dpkg/lock – open (11: 资源临时不可用)
E: 无法对管理目录(/var/lib/dpkg/)加锁，是不是另一个包管理程序在使用它？
</code></pre><p>解决办法：</p>
<pre><code>删除有问题的文件
</code></pre></li>
</ol>
<h2 id="安装-JDK-Eclipse-Apache-Tomcat"><a href="#安装-JDK-Eclipse-Apache-Tomcat" class="headerlink" title="安装 JDK + Eclipse + Apache Tomcat"></a>安装 JDK + Eclipse + Apache Tomcat</h2><blockquote>
<p>2016年12月14日15:32:34<br>以下省略“sudo”命令表示是在root权限下运行的</p>
</blockquote>
<h3 id="JDK8"><a href="#JDK8" class="headerlink" title="JDK8"></a>JDK8</h3><ol>
<li><p>（下载地址）</p>
<pre><code>http://download.oracle.com/otn-pub/java/jdk/8u111-b14/jdk-8u111-linux-x64.tar.gz
</code></pre></li>
<li><p>在所在的文件夹目录下，可以直接打开terminal，跳过以下两句操作，直接进行环境配置</p>
<pre><code>cd /Downloads
tar -zxvf jdk-8u101-linux-x64.tar.gz
</code></pre></li>
</ol>
<p>3.配置环境变量</p>
<pre><code>gedit /etc/profile
</code></pre><ol>
<li><p>在文件末尾添加以下内容：</p>
<pre><code>export JAVA_HOME=/home/lt/Java/jdk1.8.0_101(你的Jdk目录)
export PATH=$JAVA_HOME/bin:$PATH
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
</code></pre></li>
<li><p>更新文件（必须执行）</p>
<pre><code>source /etc/profile
</code></pre></li>
<li><p>notice！若在终端中出现:程序 ‘javac’ 已包含在下列软件包中：</p>
<pre><code>update-alternatives --install /usr/bin/javac javac /root/文档/jdk1.8.0_112/bin/javac 300
update-alternatives --install /usr/bin/java java /root/文档/jdk1.8.0_112/bin/java 300
</code></pre></li>
</ol>
<h3 id="Eclipse（eclipse安装工具）"><a href="#Eclipse（eclipse安装工具）" class="headerlink" title="Eclipse（eclipse安装工具）"></a>Eclipse（eclipse安装工具）</h3><ol>
<li><p>（下载地址）</p>
<pre><code>https://www.eclipse.org/downloads/download.php?file=/oomph/epp/neon/R/eclipse-inst-linux64.tar.gz
</code></pre></li>
<li><p>解压</p>
<pre><code>tar -zxcf eclipse-inst-linux64.tar.gz
</code></pre></li>
<li>进入解后目录下,双击eclipse.inst运行安装程序</li>
<li><p>若有安装错误执行</p>
<pre><code>mkdir jre
cd jre
ln -s （你的JDK目录/bin bin）
</code></pre><h3 id="Tomcat9"><a href="#Tomcat9" class="headerlink" title="Tomcat9"></a>Tomcat9</h3></li>
<li><p>（下载地址）</p>
<pre><code>http://tomcat.apache.org/download-90.cgi
</code></pre></li>
<li><p>在所在的文件夹目录下，可以直接打开terminal，跳过以下两句操作，直接进行环境配置</p>
<pre><code>cd Downloads/
unzip apache-tomcat-9.0.0.M9.zip
</code></pre></li>
<li><p>配置环境变量：</p>
<pre><code>export CATLINA_HOME=/home/lt/Java/apache-tomcat-9.0.0.M9（文件所在路径）
sourse /etc/profile
</code></pre></li>
</ol>
<h2 id="安装MySQL-WorkBrench"><a href="#安装MySQL-WorkBrench" class="headerlink" title="安装MySQL+WorkBrench"></a>安装MySQL+WorkBrench</h2><blockquote>
<p>2016年12月15日15:54:09<br> 以下省略“sudo”命令表示是在root权限下运行的</p>
</blockquote>
<h3 id="ubuntu16-04安装mysql5-7"><a href="#ubuntu16-04安装mysql5-7" class="headerlink" title="ubuntu16.04安装mysql5.7"></a>ubuntu16.04安装mysql5.7</h3><p>未用sudo apt-get update<br>未用sudo apt-get upgrade</p>
<pre><code>apt-get install mysql-server mysql-client
apt-get install libmysqlclient-dev
</code></pre><p> 自动安装会装上5.7的client端，中间会弹出提示框输入root的密码<br> 安装完成之后检查是否成功。socket处于 listen 状态则表示安装成功</p>
<pre><code>netstat -tap | grep mysql
</code></pre><p>未用sudo groupadd mysql<br>未用sudo useradd -r -g mysql mysql</p>
<p>修改密码<br> 未用sudo /usr/bin/mysqladmin -u root password</p>
<p> 登陆mysql数据库可以通过如下命令：</p>
<pre><code>mysql -u root -p
-u 用户名， -p 用户密码，输入后提示输入密码，此时输入密码就可以登录到mysql
</code></pre><h3 id="安装客户端"><a href="#安装客户端" class="headerlink" title="安装客户端"></a>安装客户端</h3><pre><code>apt-get install mysql-workbench
</code></pre><h2 id="安装RabbitVCS"><a href="#安装RabbitVCS" class="headerlink" title="安装RabbitVCS"></a>安装RabbitVCS</h2><blockquote>
<p>2017年02月06日 星期一 14时04分24秒<br>参考：<a href="http://blog.csdn.net/catshitone/article/details/48022315" target="_blank" rel="external">http://blog.csdn.net/catshitone/article/details/48022315</a></p>
</blockquote>
<p><em>注：</em><br>    安装完毕后，注销LogOut，重新登录，在文件夹和文件夹内点击鼠标右键就用RabbitVCS操作工具了。<br>    如果不能正常运行则输入：</p>
<pre><code>sudo apt-get install python-nautilus python-configobj python-gtk2 python-glade2 python-svn python-dbus python-dulwich subversion meld
</code></pre><p>再次更新软件包库：</p>
<pre><code>sudo apt-get update
</code></pre><p>注销LogOut，重新登录即可。</p>
<h2 id="安装Terminator"><a href="#安装Terminator" class="headerlink" title="安装Terminator"></a>安装Terminator</h2><blockquote>
<p>2017年02月06日 星期一 15时53分34秒<br>参考：<br>    <a href="http://www.jianshu.com/p/cee2de32ca28" target="_blank" rel="external">http://www.jianshu.com/p/cee2de32ca28</a></p>
</blockquote>
<ol>
<li><p>安装：</p>
<pre><code>apt-get install terminator
</code></pre></li>
<li><p>卸载：</p>
<pre><code>apt-get remove terminator
</code></pre></li>
<li><p>快捷键(自定义之后的):</p>
<pre><code>水平分割终端  : Ctrl+O
垂直分割终端  : Ctrl+E
搜索         : Ctrl+F
复制         : Ctrl+C
粘贴         : Ctrl+V
clear屏幕    : Ctrl+G
关闭当前终端  : Ctrl+W
退出当前窗口  : Ctrl+Q
变化当前窗口位置 ：super+R
全屏状态           : F11
在垂直分割的终端中将分割条向右移动 :Ctrl+Right
在垂直分割的终端中将分割条向左移动 :Ctrl+Left
隐藏/显示滚动条 :Ctrl+Shift+S
</code></pre></li>
</ol>
<ol>
<li><p>配置文件（可参考）：</p>
<pre><code>[global_config]
  handle_size = -3
  enabled_plugins = CustomCommandsMenu, LaunchpadCodeURLHandler, APTURLHandler, LaunchpadBugURLHandler
  title_transmit_fg_color = &quot;#000000&quot;
  suppress_multiple_term_dialog = True
  title_transmit_bg_color = &quot;#3e3838&quot;
  inactive_color_offset = 1.0
[keybindings]
[profiles]
  [[default]]
    palette = &quot;#000000:#5a8e1c:#2d5f5f:#cdcd00:#1e90ff:#cd00cd:#00cdcd:#e5e5e5:#4c4c4c:#868e09:#00ff00:#ffff00:#4682b4:#ff00ff:#00ffff:#ffffff&quot;
    background_image = &quot;&quot;
    background_darkness = 0.68
    scrollback_lines = 3000
    background_type = transparent
    use_system_font =
    scroll_background = False
    show_titlebar = False
    cursor_shape = ibeam
    font = Liberation Mono 12
    background_color = &quot;#0e2424&quot;
    foreground_color = &quot;#e8e8e8&quot;
[layouts]
  [[default]]
    [[[child1]]]
      type = Terminal
      parent = window0
      profile = default
    [[[window0]]]
      type = Window
      parent = &quot;&quot;
      size = 925, 570
[plugins]
</code></pre></li>
</ol>
<h2 id="ubuntu安装Wine"><a href="#ubuntu安装Wine" class="headerlink" title="ubuntu安装Wine"></a>ubuntu安装Wine</h2><blockquote>
<p>参考：<a href="http://www.ubuntukylin.com/ukylin/forum.php?mod=viewthread&amp;tid=27068" target="_blank" rel="external">http://www.ubuntukylin.com/ukylin/forum.php?mod=viewthread&amp;tid=27068</a></p>
</blockquote>
<ol>
<li><p>安装源</p>
<pre><code>sudo add-apt-repository ppa:wine/wine-builds
sudo apt-get update
</code></pre></li>
<li><p>安装wine</p>
<pre><code>apt-get install wine1.8
</code></pre></li>
<li><p>卸载wine<br>  1).卸载wine主程序，在终端里输入：</p>
<pre><code>sudo apt-get remove --purge wine
</code></pre><p>  2).然后删除wine的目录文件：</p>
<pre><code>rm -r ~/.wine
</code></pre><p>  3).卸载残留不用的软件包：</p>
<pre><code>sudo apt-get autoremove
</code></pre></li>
<li>终端中输入wine，检测是否安装完成</li>
</ol>
<h2 id="ubuntu安装WebStorm"><a href="#ubuntu安装WebStorm" class="headerlink" title="ubuntu安装WebStorm"></a>ubuntu安装WebStorm</h2><blockquote>
<p>2017年02月16日 星期四 12时31分00秒<br> 参考：<a href="https://quanru.github.io/2016/04/17/%E4%BD%BF%E7%94%A8%20Linux%20%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91Web%E5%89%8D%E7%AB%AF/" target="_blank" rel="external">https://quanru.github.io/2016/04/17/%E4%BD%BF%E7%94%A8%20Linux%20%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91Web%E5%89%8D%E7%AB%AF/</a><br>webstorm使用快捷键参考：<br>    <a href="http://blog.csdn.net/zghekuiwu/article/details/54382145" target="_blank" rel="external">http://blog.csdn.net/zghekuiwu/article/details/54382145</a><br>    <a href="https://github.com/damao/Intellij-IDEA-F2E#%E6%B3%A8%E5%86%8C" target="_blank" rel="external">https://github.com/damao/Intellij-IDEA-F2E#%E6%B3%A8%E5%86%8C</a></p>
</blockquote>
<ol>
<li><p>下载：</p>
<pre><code>http://www.jetbrains.com/webstorm/index.html
</code></pre></li>
<li><p>解压下载的 gz 包，在bin/下运行：</p>
<pre><code>./webstorm.sh
</code></pre></li>
<li>WebStorm 默认情况下是需要收费的，可以申请为开源项目的贡献者来获得 licenses。</li>
<li>安装完成后，在 File - Settings - Plugins，选择需要安装的插件，例如 AngularJS、Markdown 等。</li>
<li>在 File - Settings - Directories 下，通过 Add content Root 来设置我们的项目路径</li>
<li>在 File - Settings - JavaScript - Libraries 下，勾选想要支持的库，建议全部勾上（如 NodeJS）。</li>
<li>在 File - Settings - Editor - Colors &amp; Fonts - Font 下，选择自己想要的主题， 然后 Save as… 保存自己想要的主题名称，设置字体为Ubuntu Mono， 字体设置为 16（貌似有点小，相当于 Eclipse 下的 12）</li>
<li>在 File - Settings - Appearance 下，勾选 Show line numbers 选项。</li>
<li><p>破解方式：选择line server 方式，输入：</p>
<pre><code>http://idea.iteblog.com/key.php
</code></pre></li>
</ol>
<h2 id="安装ubuntu主题"><a href="#安装ubuntu主题" class="headerlink" title="安装ubuntu主题"></a>安装ubuntu主题</h2><blockquote>
<p>2016年12月15日14:54:25</p>
</blockquote>
<ol>
<li><p>安装主题管理工具：</p>
<pre><code>apt-get install unity-tweak-tool
</code></pre></li>
<li><p>安装主题</p>
<pre><code>apt-add-repository ppa:numix/ppa
apt-get update
apt-get install numix-icon-theme-circle        //安装图标
apt-get install numix-gtk-theme            //安装主题
</code></pre><p> 　</p>
</li>
<li><p>安装docky（Mac桌面下方的启动器）</p>
<blockquote>
<p>参考网址：<a href="http://www.aichengxu.com/view/992905" target="_blank" rel="external">http://www.aichengxu.com/view/992905</a><br>参考网址：<a href="http://www.noobslab.com/2014/11/mbuntu-macbuntu-1410-transformation.html" target="_blank" rel="external">http://www.noobslab.com/2014/11/mbuntu-macbuntu-1410-transformation.html</a></p>
</blockquote>
<pre><code>install docky
add-apt-repository ppa:docky-core/ppa
apt-get update
apt-get install docky
apt-get remove docky docky
</code></pre></li>
</ol>
<h2 id="安装XX-Net"><a href="#安装XX-Net" class="headerlink" title="安装XX-Net"></a>安装XX-Net</h2><blockquote>
<p>2017年02月04日 星期六 17时17分36秒</p>
</blockquote>
<ol>
<li>安装xx-net</li>
<li>安装firefox或者chrome</li>
<li><p>设置：</p>
<pre><code>  系统设置 --&gt; 网络 --&gt; 网络代理 --&gt;
  方法：自动
配置：http://127.0.0.1:8086/proxy.pac
全局配置
</code></pre></li>
<li>重点：<br> 此项目来自GitHub，可以直接clone到本地<br> 需要使用到Google AppID，以此进行服务器部署，以达到真正上网的目的</li>
</ol>
<h2 id="使用host科学上网"><a href="#使用host科学上网" class="headerlink" title="使用host科学上网"></a>使用host科学上网</h2><blockquote>
<p>2016年12月15日16:04:07<br>使用host文件进行翻墙<br>参考链接：<a href="https://laod.cn/hosts/2016-google-hosts.html" target="_blank" rel="external">https://laod.cn/hosts/2016-google-hosts.html</a></p>
</blockquote>
<h2 id="安装sbulime-text3"><a href="#安装sbulime-text3" class="headerlink" title="安装sbulime text3"></a>安装sbulime text3</h2><blockquote>
<p>2017年 01月 28日 星期六 15:05:31 CST<br>安装参考：<br>    <a href="http://www.cnblogs.com/unflynaomi/p/5704293.html" target="_blank" rel="external">http://www.cnblogs.com/unflynaomi/p/5704293.html</a></p>
</blockquote>
<ol>
<li>汉化，中文输入问题参考：<br> <a href="http://blog.csdn.net/u013453604/article/details/48002127" target="_blank" rel="external">http://blog.csdn.net/u013453604/article/details/48002127</a></li>
<li>汉化，无法输入中文资源：<br> <a href="http://download.csdn.net/detail/u013453604/9049633" target="_blank" rel="external">http://download.csdn.net/detail/u013453604/9049633</a></li>
<li>不能输入中文问题参考：<br> <a href="http://www.cnblogs.com/mo-wang/p/5120484.html（步骤不全，修改的内容全面）" target="_blank" rel="external">http://www.cnblogs.com/mo-wang/p/5120484.html（步骤不全，修改的内容全面）</a><br> <a href="http://www.liuqianfei.com/article/3e51f07d254b464995b0f4c94cc1d69c（步骤全面）" target="_blank" rel="external">http://www.liuqianfei.com/article/3e51f07d254b464995b0f4c94cc1d69c（步骤全面）</a></li>
<li>配置java，python，markdown：<br> <a href="http://www.jianshu.com/p/58bf9e4d5b32" target="_blank" rel="external">http://www.jianshu.com/p/58bf9e4d5b32</a></li>
<li><p>安装步骤：</p>
<pre><code>sudo add-apt-repository ppa:webupd8team/sublime-text-3
sudo apt-get update
sudo apt-get install sublime-text-installer
</code></pre></li>
<li><p>安装：python3</p>
<pre><code>apt install python3-pip
</code></pre></li>
<li><p>卸载 sublime text 命令：</p>
<pre><code>sudo apt-get remove sublime-text-installer
</code></pre></li>
<li>启动sublime text3<br> 在terminal终端中输入：subl</li>
<li>打开指定的文件：<br> subl 文件名</li>
<li><p>解决sublime无法输入中文的问题<br>在进行所有操作时首先进行依赖包的安装：<br>代码依赖于 gtk 2.0，编译 c 需要安装 build-essential。</p>
<pre><code>sudo apt-get install build-essential libgtk2.0-dev
</code></pre></li>
<li><p>如果路径中含有空格，你必须使用双引号将路径括起来：</p>
<pre><code>$ subl &amp;quot;~/Documents/test/my test file.txt&amp;quot;
</code></pre></li>
<li><p>解决无法输入中文问题 - 2017年03月12日 星期日 15时17分24秒 </p>
<blockquote>
<p>参考：<a href="http://www.jianshu.com/p/03a9092c73e2" target="_blank" rel="external">http://www.jianshu.com/p/03a9092c73e2</a><br>亲测有效！</p>
</blockquote>
</li>
<li><p>解决事件输入问题</p>
<blockquote>
<p>参考：<a href="https://my.oschina.net/antsky/blog/491146" target="_blank" rel="external">https://my.oschina.net/antsky/blog/491146</a></p>
</blockquote>
</li>
</ol>
<h2 id="WPS字体缺失"><a href="#WPS字体缺失" class="headerlink" title="WPS字体缺失"></a>WPS字体缺失</h2><ol>
<li><p>下载缺失的字体文件，然后复制到Linux系统中的/usr/share/fonts文件夹中。</p>
<pre><code>国外下载地址：https://www.dropbox.com/s/lfy4hvq95ilwyw5/wps_symbol_fonts.zip
国内下载地址：https://pan.baidu.com/s/1eS6xIzosudo cp * /usr/share/fonts
</code></pre></li>
<li><p>执行以下命令,生成字体的索引信息：</p>
<pre><code>sudo mkfontscale
sudo mkfontdir
</code></pre></li>
<li><p>运行fc-cache命令更新字体缓存。</p>
<pre><code>sudo fc-cache
</code></pre></li>
<li><p>重启wps即可，字体缺失的提示不再出现。</p>
</li>
<li><p>WPS不能输入中文问题</p>
<blockquote>
<p>参考:<a href="http://forum.ubuntu.org.cn/viewtopic.php?f=48&amp;t=476937" target="_blank" rel="external">http://forum.ubuntu.org.cn/viewtopic.php?f=48&amp;t=476937</a><br>原因：环境变量未正确设置，以上可以直接针对wps设置。</p>
</blockquote>
</li>
</ol>
<p>解决办法,终端输入:</p>
<pre><code>gedit /usr/bin/wps
</code></pre><p>在此文件中输入一下内容,#!/bin/bash之后:</p>
<pre><code>export XMODIFIERS=&quot;@im=fcitx&quot;
export QT_IM_MODULE=&quot;fcitx&quot;
</code></pre><h2 id="安装WeChat"><a href="#安装WeChat" class="headerlink" title="安装WeChat"></a>安装WeChat</h2><blockquote>
<p>2016年12月13日22:43:53</p>
</blockquote>
<ol>
<li><p>安装linux微信：</p>
<blockquote>
<p>下载地址:<a href="https://github.com/geeeeeeeeek/electronic-wechat/releases" target="_blank" rel="external">https://github.com/geeeeeeeeek/electronic-wechat/releases</a></p>
</blockquote>
<pre><code>apt-get install git
git clone https://github.com/geeeeeeeeek/electronic-wechat.git
cd electronic-wechat
apt-get install npm
apt-get install nodejs-legacy
npm install &amp;&amp; npm start
</code></pre></li>
<li><p>官方推荐的安装方法：<br> To clone and run this repository you’ll need Git and Node.js (which comes with npm) installed on your computer. From your command line:<br> Clone this repository<br> git clone <a href="https://github.com/geeeeeeeeek/electronic-wechat.git#" target="_blank" rel="external">https://github.com/geeeeeeeeek/electronic-wechat.git#</a> Go into the repositorycd electronic-wechat# Install dependencies and run the app<br> npm install &amp;&amp; npm start<br> To pack into an app, simply type one of these:<br> npm run build:osx<br> npm run build:linux</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 系统 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 命令 </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Alias 的使用]]></title>
      <url>/Alias%20%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>所有命令均在ubuntu16.04环境下完成，在不同环境下可能会有差异</p>
</blockquote>
<a id="more"></a>
<h1 id="alias介绍"><a href="#alias介绍" class="headerlink" title="alias介绍"></a>alias介绍</h1><p>alias用于自定义快捷命令，避免总是使用相同的，重复的，冗长的命令来执行操作</p>
<h1 id="alias的用法"><a href="#alias的用法" class="headerlink" title="alias的用法"></a>alias的用法</h1><p>1.添加新的自定义快捷方式</p>
<pre><code>alias  自定义新名字=&quot;操作命令&quot;
</code></pre><p>示例：将进入文档目录的命令定义为 cdd 新命令</p>
<pre><code>alias cdd=&quot;cd /root/文档/&quot;
</code></pre><p>2.删除自定义的快捷方式：</p>
<pre><code>unalias 自定义新名字
</code></pre><p>示例：删除 cdd 新命令</p>
<pre><code>unalias cdd
</code></pre><p>3.查询自定义快捷方式：</p>
<pre><code>alias
</code></pre><h1 id="alias的存储"><a href="#alias的存储" class="headerlink" title="alias的存储"></a>alias的存储</h1><p><strong>注：</strong></p>
<pre><code>若不保存在文件中，则只能在当前的`terminal`中使用,只有保存到文件中后才能供以后继续使用
</code></pre><h2 id="来自～-bashrc文档的介绍"><a href="#来自～-bashrc文档的介绍" class="headerlink" title="来自～/.bashrc文档的介绍"></a>来自～/.bashrc文档的介绍</h2><blockquote>
<p>Alias definitions.<br>You may want to put all your additions into a separate file like<br> ~/.bash_aliases, instead of adding them here directly.<br> See /usr/share/doc/bash-doc/examples in the bash-doc package.</p>
</blockquote>
<ol>
<li><p>使用以下方式，将自定义的快捷键存入系统已有文件中。此文件位于/root/下:</p>
<pre><code>vim ~/.bashrc
</code></pre></li>
<li><p>使用以下方式，将自定义的快捷键存入”指定”的新文件中。此文件位于/root/下:</p>
<pre><code>vim ~/.bash_aliases
</code></pre></li>
</ol>
<p><strong>注：</strong><br>    对于以上两中方式，必须使用：<br>        source ~/.bash_aliases<br>    命令更新文件，否则自定义快捷键将不会被找到，无法起作用。</p>
<h1 id="个人快捷命令组合："><a href="#个人快捷命令组合：" class="headerlink" title="个人快捷命令组合："></a>个人快捷命令组合：</h1><blockquote>
<p>ls 查询字段释义：<a href="http://blog.csdn.net/sjzs5590/article/details/8254527" target="_blank" rel="external">http://blog.csdn.net/sjzs5590/article/details/8254527</a><br>更多详细使用参考：用户目录下的 <code>.bash_profile</code></p>
</blockquote>
<pre><code># Alias
alias ll=&apos;ls -lh -G&apos;
alias la=&quot;ls -lah -G&quot;

# 显示size
alias lls=&apos;ls -lSGh&apos;
alias las=&quot;ls -laSGh&quot;

# 显示行号
alias lln=&apos;ls -lh | nl&apos;
alias lan=&quot;ls -lah | nl&quot;

alias llns=&apos;ls -lSh | nl&apos;
alias lans=&quot;ls -laSh | nl&quot;

alias grep=&apos;grep --color&apos;

# Hexo
alias ohb=&apos;open &quot;/Users/yannischeng/Documents/HexoBLog&quot;&apos;
alias ohbs=&apos;open &quot;/Users/yannischeng/Documents/HexoBLog/source/_posts&quot;&apos;

alias chbl=&apos;cd &quot;/Users/yannischeng/Documents/HexoBLog&quot;&apos;
alias chbsl=&apos;cd &quot;/Users/yannischeng/Documents/HexoBLog/source/_posts&quot;&apos;


# python project
alias opp=&apos;open /Users/yannischeng/PycharmProjects/First_Python_Project&apos;
alias cppl=&apos;cd /Users/yannischeng/PycharmProjects/First_Python_Project&apos;


# .bash_profile
alias sup=&apos;source .bash_profile&apos;
alias oup=&apos;open /Users/yannischeng/.bash_profile&apos;
alias cupl=&apos;cd /Users/yannischeng/&apos;


# open app
alias om=&apos;open /Applications/MWeb.app&apos;
alias oas=&apos;open /Applications/&quot;Android Studio&quot;.app&apos;
alias osb=&apos;open /Applications/&quot;Sublime Text&quot;.app&apos;
alias ogc=&apos;open /Applications/&quot;Google Chrome&quot;.app&apos;
alias opc=&apos;open /Applications/PyCharm.app&apos;
alias owc=&apos;open /Applications/WeChat.app&apos;
alias od=&apos;open /Applications/Dictionary.app&apos;
alias owm=&apos;open /Applications/NeteaseMusic.app&apos;

# login mysql
alias lms=&apos;mysql -u root -p&apos;

# mytree
alias mtree=&quot;find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;&quot;
</code></pre>]]></content>
      
        <categories>
            
            <category> 系统 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 命令 </tag>
            
            <tag> vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[策略者模式]]></title>
      <url>/%E7%AD%96%E7%95%A5%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>仅仅知道<code>抽象</code>、<code>继承</code>、<code>多态</code>、<code>封装</code>并不会马上让你变成好的面向对象设计者。<br>设计大师关注的是<code>弹性</code>、<code>可维护</code>、<code>可应付改变</code>的设计。</p>
<a id="more"></a>
<h1 id="软件开发的一个不变真理："><a href="#软件开发的一个不变真理：" class="headerlink" title="软件开发的一个不变真理："></a>软件开发的一个不变真理：</h1><p>CHANGE。</p>
<h1 id="策略模式（Strategy-Pattern）定义："><a href="#策略模式（Strategy-Pattern）定义：" class="headerlink" title="策略模式（Strategy Pattern）定义："></a>策略模式（Strategy Pattern）定义：</h1><pre><code>定义算法族（一组行为），分别封装起来（定义成为不同的接口），让他们之间可以互相替换。
此模式让算法（行为类）之间的变化独立于算法的使用者（调用类）。
</code></pre><h1 id="OO设置原则："><a href="#OO设置原则：" class="headerlink" title="OO设置原则："></a>OO设置原则：</h1><ol>
<li><p>封装变化:</p>
<pre><code>a)找出应用中可能需要变化之处，把他们独立出来——封装，不要和固定的代码混在一起。
b)把会变化的部分取出并封装起来，以后便可以轻易的改动活着扩充此部分，而不影响不需要变化的部分（每个设计模式背后的精神所在）。
</code></pre></li>
<li><p>针对接口编程（针对超类型编程），而不是针对实现编程：</p>
<pre><code>a)针对接口编程：关键是利用多态（运行时动态的改变行为）。
b)针对超类型编程：变量的声明类型应该是超类型（一个抽象类或一个接口）
</code></pre></li>
<li><p>多用组合，少用继承：</p>
<pre><code>“有一个”可能比“是一个”好。
</code></pre></li>
</ol>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>书中“鸭子”的实现：<br>    将“飞行”、“鸣叫”这些行为（鸭子的自身属性）抽象成“飞行接口”、“鸣叫接口”，之后再将“行为接口”具体实现，组合至具体的“鸭子类“中。</p>
<p><img src="http://oy991qm3u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-06%2013.17.52.png" alt="">        </p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
